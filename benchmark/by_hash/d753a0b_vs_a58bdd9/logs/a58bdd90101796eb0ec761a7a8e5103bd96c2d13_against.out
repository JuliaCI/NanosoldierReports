cset: moving following pidspec: 1175076
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 2.016909678 seconds)
loading group "shootout"... done (took 1.278916205 seconds)
loading group "string"... done (took 0.736843115 seconds)
loading group "linalg"... done (took 9.595926788 seconds)
loading group "parallel"... done (took 0.185291939 seconds)
loading group "find"... done (took 3.231240903 seconds)
loading group "tuple"... done (took 2.316756997 seconds)
loading group "union"... done (took 16.440312409 seconds)
loading group "dates"... done (took 1.641091247 seconds)
loading group "micro"... done (took 0.243326423 seconds)
loading group "simd"... done (took 5.2673452 seconds)
loading group "io"... done (took 1.470785457 seconds)
loading group "random"... done (took 10.892709371 seconds)
loading group "problem"... done (took 1.749721023 seconds)
loading group "array"... done (took 28.568025122 seconds)
loading group "misc"... done (took 2.020276971 seconds)
loading group "scalar"... done (took 48.283304058 seconds)
loading group "sort"... done (took 3.829131551 seconds)
loading group "sparse"... done (took 14.448931004 seconds)
loading group "collection"... done (took 21.040630057 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.462796301 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.127958297 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.139338736 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.126824128 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.221891831 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.142045544 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.141646522 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.095276215 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.310402169 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.13183238 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.128670901 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.463069038 seconds)
done (took 6.027758837 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.322613609 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.098945483 seconds)
    (2/2) benchmarking "String"...
    done (took 0.094370644 seconds)
  done (took 1.445021298 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.07984036 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.069741569 seconds)
    (3/3) benchmarking "different"...
    done (took 0.074930377 seconds)
  done (took 1.482332492 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.072231981 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.148512079 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.073127571 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.073744034 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.073739551 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.073433888 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.073337979 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.073436624 seconds)
  done (took 1.850845214 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.079082844 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.074414095 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.072475909 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.075212104 seconds)
  done (took 1.556582022 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.072380299 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.131943319 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.072239031 seconds)
    (4/4) benchmarking "different"...
    done (took 0.071881635 seconds)
  done (took 1.597756776 seconds)
done (took 9.598464853 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.153184482 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.781756948 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.850066999 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.136224721 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.310298906 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.474647736 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.133635852 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.192156509 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.100174501 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.084075366 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.137279555 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.090225315 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.445812759 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.396702769 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.08051245 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.208730353 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.683048691 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.09044356 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.132354558 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.399818276 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.088571133 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.092537483 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.098156276 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.079912159 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.248526884 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.193273283 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.695314097 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.11039557 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.078364458 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.106951382 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.079823987 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.08723277 seconds)
  done (took 11.129549813 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.103484236 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.099962171 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.077243492 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.116752603 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.105764296 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.078367049 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.083305013 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.077136416 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.09993802 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.145448266 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.09984154 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.109278437 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.080181025 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.076933229 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.082880302 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.174024755 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.089778366 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.090509315 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.076598345 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.090632504 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106062749 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.08737371 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.086625258 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.085762717 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.125213104 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.14305469 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.0953323 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.11833145 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.073739384 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.087843957 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.109713144 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.117009052 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.07456608 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.073308944 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120290995 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.093468481 seconds)
  done (took 4.886902488 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.103441962 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.106012698 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.091999088 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.082034755 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.122702868 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.105562403 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.134499757 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.135074753 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.109928334 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.076523888 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.164016758 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.74446903 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.174146618 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.080537351 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.133077181 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.393582826 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.952952991 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.079207841 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076741463 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.079969914 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078861272 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.124428345 seconds)
    (22/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.127753496 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.074542227 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.197190961 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.656342728 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.079323267 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077680623 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.108677704 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.077489917 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.160701343 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.105877129 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.081754418 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.610960329 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.200093452 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.073070057 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.097206068 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.105531402 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.07435298 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.076418746 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.087749379 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.073773841 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.130376985 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.088165785 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.592305779 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.078341576 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.6640931 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.25448363 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.081444229 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.079740151 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.114176318 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.073157687 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.076796184 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.756172491 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.160418918 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.076822218 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.319981313 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.078342104 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.076049905 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.078757805 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.112159716 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.076382588 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081138112 seconds)
    (63/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.073267271 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.082866974 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.094318985 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.104534003 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.097544766 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.096102852 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.075097018 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.464976817 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.083396945 seconds)
    (72/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.072597734 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.078041614 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079189471 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.077873192 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.120008445 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.074807399 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.075058476 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.120756269 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.103851045 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.101323988 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.079439681 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.076458938 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.074805135 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.60827457 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.057318148 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.076545917 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.077294981 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.686251131 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.073323705 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.075517544 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.077625963 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.099259911 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.074548897 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.07183758 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.072879481 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.111661129 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.076316152 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.56570412 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.076087575 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.64180977 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.078833948 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.110253237 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.135173878 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.076143368 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.114311321 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.076670448 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.073836954 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.083325899 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.074366758 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.073070851 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.079319716 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.074809486 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.073785694 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.076165424 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.078838557 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.077520654 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076746652 seconds)
  done (took 25.040527831 seconds)
done (took 43.411290184 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.410731562 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.085559883 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.086202447 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.086371903 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.086800214 seconds)
  done (took 2.072222029 seconds)
done (took 3.489684458 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.147782862 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.084221881 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.072034333 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.112660476 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.076850339 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.114505954 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.120330877 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.117550423 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.211202077 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.077698609 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.076798638 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.117338635 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.118997466 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.077474068 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.110400746 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.118587595 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.077789592 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.073916803 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.078763821 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.078211517 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.078570524 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.0742273 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.07796641 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.078322537 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.112654295 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.079329674 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.073830468 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.112660133 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.079287172 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.11354021 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.079693117 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.079036062 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.078106403 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.113271181 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.078918225 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.112066544 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.073660478 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.078550996 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.079404223 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.078005529 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.077686437 seconds)
  done (took 5.23867175 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.080120197 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.093321412 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.093572374 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.07040579 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.081028423 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.092346947 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.069772563 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.092007238 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.102816723 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.092362864 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.093356555 seconds)
  done (took 2.338313171 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07835328 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.092847768 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.094440552 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06999291 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.082919216 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.09434345 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.070448157 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.09265172 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.096873177 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.093763198 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.093774232 seconds)
  done (took 2.316613123 seconds)
done (took 11.228413125 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.10648038 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.072755738 seconds)
  done (took 1.519998024 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.250076332 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.52525369 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 6.328898483 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.105879311 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.083491083 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.098273811 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.220987874 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.078872717 seconds)
  done (took 9.23571352 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.113188318 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.077517201 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.076516054 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.075420197 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.07618728 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.078430874 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.076048138 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.076035026 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.076629774 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.0774265 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.07775814 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.075532646 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.077300698 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.076101592 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.07899724 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.07669878 seconds)
  done (took 2.739431858 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.115317223 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.077872041 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.110831035 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.069142652 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.078780942 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.070859615 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.07869605 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.08075914 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.078534613 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07901037 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.080198177 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.079526068 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.079082309 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.080203291 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.081036862 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.081375862 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.081559104 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.078931043 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.081462183 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.083039273 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.082166636 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.082699319 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.083466472 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.079714956 seconds)
  done (took 3.452530951 seconds)
done (took 18.305848172 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.190961715 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.083932517 seconds)
  done (took 1.626508554 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.075360659 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075538087 seconds)
  done (took 1.516225705 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.080803842 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.067803673 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.085136003 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.078041075 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.068932928 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.068233099 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.084113668 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06865998 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.069017363 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.068607301 seconds)
  done (took 2.107026184 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.069932414 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.074846972 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.072803202 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.070813959 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.073708297 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.069755455 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.071768209 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.069537116 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.076035092 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.068628348 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.072974552 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.091175401 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.071829618 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.092004444 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.072071917 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.072787349 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.074268038 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.073176169 seconds)
  done (took 2.715402042 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.068992125 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.068928671 seconds)
  done (took 1.511670339 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.071729312 seconds)
    (2/7) benchmarking "second"...
    done (took 0.06868656 seconds)
    (3/7) benchmarking "month"...
    done (took 0.071106356 seconds)
    (4/7) benchmarking "year"...
    done (took 0.070607597 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.068481161 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.068360274 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.068715892 seconds)
  done (took 1.854821975 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.468279161 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.137607649 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.380387589 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.076927103 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.085098051 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.283946259 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.07126915 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.077211761 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.077473732 seconds)
  done (took 3.086884411 seconds)
done (took 15.79680877 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.091530947 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.197650652 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.097365142 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.464992359 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.088697375 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.077309856 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.107852919 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.195028336 seconds)
done (took 2.713115156 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.29075003 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.320826591 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.350451874 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.162563717 seconds)
  done (took 3.215752655 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.368946699 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.088474585 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.086630465 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.075377227 seconds)
  done (took 2.010898938 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.073747921 seconds)
    (2/2) benchmarking "read"...
    done (took 0.081149228 seconds)
  done (took 1.53977852 seconds)
done (took 8.452275229 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079305645 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.102340836 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.068831447 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.074394063 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.072516441 seconds)
    (6/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.082838 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.07226923 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.071111189 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.071924738 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.069369963 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.073350045 seconds)
    (12/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.070229012 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.0717357 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071936453 seconds)
    (15/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.069707469 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071299739 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070900057 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071162425 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.071734404 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071598467 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072111809 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.072170113 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.071975991 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.072064589 seconds)
  done (took 3.187079269 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.088648865 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.073533402 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.074542671 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.074119349 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.075381835 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.075207239 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.074870748 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.073737357 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.073994934 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.073320583 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.07592708 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.074929726 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.07409348 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.075290005 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.073319285 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.07464671 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.07469905 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073743691 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072949898 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.075300472 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.074666984 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073717475 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.074659535 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.074755186 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.075767661 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.07569553 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.074099939 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.073934953 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.074734113 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.076173667 seconds)
  done (took 3.660514592 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.073805551 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.066842617 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.068064205 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.078107719 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.065979408 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.067484739 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.067359047 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.066964498 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.067599828 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.068834773 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.067902389 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.067765268 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.068334089 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.068812361 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.067293533 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.067715812 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.072961852 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.088567939 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.068062225 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.067490893 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.072222469 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.067760302 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.066595011 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.067007486 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.068052095 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.067112422 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.067271995 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.068480203 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.06702146 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.068178233 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.067706606 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.073294357 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.073360928 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.067450156 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.079147607 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.073592461 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.067947052 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.072728028 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.068513428 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.068034949 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.067557049 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.067755397 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.068086794 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.067964705 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.078917581 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.068236977 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.068816056 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.068512614 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.068164724 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.06718216 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.067849498 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.069564545 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.077242917 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.068988725 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.067827066 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.068973134 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.067627554 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.068291638 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.067851905 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.067896704 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.068244273 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.07217019 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.069321472 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.069039139 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.091300084 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.069726197 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.079244597 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.06749014 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.068821989 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.072472375 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.068402842 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.08830985 seconds)
  done (took 6.462665627 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.078545163 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.079297056 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.087969455 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.078154136 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071305532 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.069228288 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.072376234 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068534659 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.078292057 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.073269755 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068707607 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.071784856 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.079047286 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.072515854 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069983751 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.078383799 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.072657145 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071538842 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.068774963 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.072600482 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070454691 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.072632946 seconds)
  done (took 3.045422298 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.152301604 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.07412498 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.117627193 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.077946462 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.076363528 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.078050674 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.074184831 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.07369879 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.075006331 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.074952456 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074594098 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.074067344 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.077840214 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075804306 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.075053278 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.075234389 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.074267479 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.074718846 seconds)
  done (took 2.882314339 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.085201119 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.074508452 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.101314868 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.074037989 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.073697587 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.073395464 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.07796639 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.078070525 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.073761636 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.074748728 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.077955057 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.073491726 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.073466639 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073936597 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.073748501 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074192479 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.07396906 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073661631 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077367098 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.077357159 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.077243945 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.077907124 seconds)
  done (took 3.107955243 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.087497201 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.073524628 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.091736224 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.074570849 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.067594137 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.068925858 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.074606423 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.073534671 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.074700507 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.072485217 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.073854356 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.067957153 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.075401307 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.074107365 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.07576101 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.073743449 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072808285 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.073091679 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.073001911 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.068110641 seconds)
  done (took 2.89645975 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.079078516 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070273717 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070171933 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074767803 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.070007257 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.070514623 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.075086377 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071054132 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.070657825 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.094037069 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071578659 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.070676865 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.075360623 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074000511 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07064547 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075633829 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.0756374 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075226881 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.070893479 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071227525 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.094562416 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071141358 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075894907 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071345946 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072040269 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071217499 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071128161 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074707026 seconds)
  done (took 3.488437751 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.072210958 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.07061781 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.071338074 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.071195981 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.072742381 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.07148851 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.071743843 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.072060278 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.072027596 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072776637 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.071853885 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.071430492 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.074875549 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.071712331 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.071732054 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.071753646 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072073762 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.073195518 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072576859 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072072837 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.071567956 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071306037 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.071317161 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072120943 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071281506 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.071456252 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072186913 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071982879 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.071522331 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.071810343 seconds)
  done (took 3.575717155 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.081891956 seconds)
    (2/2) benchmarking "in"...
    done (took 0.080203733 seconds)
  done (took 1.585906224 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.070361913 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.088196344 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.068664698 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.083410818 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.077531543 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.073066707 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.07834978 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.078336947 seconds)
  done (took 2.020554383 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.075440869 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.103517656 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.070948148 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.070477124 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.073899088 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.146278202 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.085741625 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.085350405 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.086680936 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.074064003 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.071353908 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.082302305 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.066873111 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.085686692 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.071314307 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.080409965 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.077855003 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.090535711 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.084340307 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.067771043 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.083755819 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070432844 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.068154991 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.070580885 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.069505596 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.078111023 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.087440138 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.084432062 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.080366753 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.068170746 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.092680464 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.068924329 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.070023704 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.079955816 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.07451961 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.068621621 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.111132941 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.068906902 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.07475562 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.068869426 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.082549423 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.092814981 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.085495721 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.089620653 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.071040633 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.071117889 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.068978619 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.070670812 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.073906917 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.079856753 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.068620249 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.077865893 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.068237419 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.070611792 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.08097305 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.069840467 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.074943627 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.080463966 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.084978889 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.081264734 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.082735964 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.086934365 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.079373352 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.077247114 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.070512605 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.091438283 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.070825459 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.084514897 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.085900081 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.071147177 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083874798 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.068383625 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.065925321 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.065013169 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.104022916 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.071326387 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.070065313 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06936828 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.069332566 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.071165015 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.080122919 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.075176646 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.078685557 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.073896904 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.087979003 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.080544161 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.069982355 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.077875326 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.091058896 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.073979859 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.071342809 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.090175785 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.074575763 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.070153923 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.091327689 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.082146945 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.072991813 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.071751266 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.074302672 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.085737649 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.07208369 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.069222917 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.080583798 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.073085796 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.073992524 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.075866088 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.073763379 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.066950075 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.077638061 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.076411411 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.074303761 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.070491095 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.076523864 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.072649826 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.07017557 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082446457 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.071814625 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.088884537 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.079358376 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.089105208 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.089840612 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.084655378 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.090369692 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.071626306 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.07023022 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.258732321 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.083100862 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.072929052 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.092188924 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.070948596 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.086487538 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.070265589 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.07181141 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.081296908 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.069460309 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.071530852 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.069443442 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.074619775 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.067471142 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065417207 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.069800035 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.073129905 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.083570286 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.071576877 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.080089293 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.069727676 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.08766184 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.081219053 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.075161016 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.072929734 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.069856582 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.082206996 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.076208538 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.079765289 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.070011101 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.069456015 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.068760428 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.080985383 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.079728792 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.070320838 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.075011448 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.073749813 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.069905772 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.069202668 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.070243756 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.072642052 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.072688413 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.069981682 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.077777825 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.078730728 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.083736851 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.075621502 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.079937484 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.068211489 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.068639412 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.071150988 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.068888827 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.074654783 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.079881927 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.087367303 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.083299912 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.094271653 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.069744914 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.081330569 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.071979014 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.089421731 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.08550956 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.07065066 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.073923795 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.068396594 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.071187438 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.079876592 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.081887811 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.085774209 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.084818774 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.0692092 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.069404641 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.069577639 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.084028078 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.06495113 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075796869 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.081866341 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.073877727 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.069073058 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.070926566 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.079253305 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.074648166 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.068534228 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.087530352 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.075499764 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.069600077 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.08624959 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.069766745 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.082125066 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.068926877 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.073696752 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.0750649 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.071192016 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.079164586 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.086637704 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.06959638 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.071033381 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.088159593 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.072693309 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.072355455 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.080106093 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.088152034 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.07578242 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.080384014 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.083240722 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.082325799 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.075955586 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.082532571 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.071595259 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.081783383 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.07470708 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.084327062 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.070493883 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.091583717 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.069566012 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.08828165 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.071662108 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.084451238 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.072197774 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.082436476 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.072967551 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.090790159 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.073286557 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.072451859 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.085114992 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.069752429 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.081617777 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.070360796 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.077120858 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.078725134 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.251793789 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.072043095 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.081203628 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.072619121 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.080299515 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.075759979 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.079018578 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.080095714 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.075371262 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.068528453 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.07867116 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081822487 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.078559954 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.070947592 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.070672319 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.069344031 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.080492813 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.070629149 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.070217934 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.07825377 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.074490852 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.075963886 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070102254 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.070777103 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.070292267 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075507901 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.079001951 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.090802288 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080007722 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.078097104 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.080198643 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.06914644 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.087958888 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.069159592 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.081305178 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.068377392 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.074542086 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.079393575 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.069713286 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.090858798 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.071439882 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.078838124 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.082570206 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.079265246 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.073937491 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.090060194 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.072668222 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.078984225 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.078800573 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.075565503 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.077734165 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.072326393 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.080520982 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.08146124 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.081448606 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.070909116 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.07965437 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.081014421 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.071560547 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.078021818 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.072038643 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.079939982 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.069535239 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.063125244 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.072746087 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.083879739 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.076308714 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.076188567 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.070722072 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.069381755 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.069981798 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.076747692 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.075126044 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.079849965 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.087247129 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.069072839 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.07104672 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.069456065 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.074630442 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091876164 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.081157243 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.080080998 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.075750896 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.069072391 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.071650488 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.06978144 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.064265151 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.068845126 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.069105656 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.071323425 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.083279687 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.071125506 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.07412429 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.071846835 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.070646685 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.080428494 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.075043283 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.070437456 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.077842117 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.070148481 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.076128641 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.069702686 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.073039633 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.075987578 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.07029793 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.075717518 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.083004646 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.091149266 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.07850268 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.082404381 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.072862169 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.080858078 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.088927199 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.079673482 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.072935375 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.083262533 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.070522195 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.094641169 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.080250064 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.0786949 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.084906105 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.072655378 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.08647921 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.079490914 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.084346311 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.09011465 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.073171786 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.079549518 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.071435643 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.090109279 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.076415349 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.242083363 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.080562023 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.080642351 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.077032624 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.083249078 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.071134984 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.079757234 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.074365634 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.074036755 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.070679733 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.070920527 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.08054431 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.087743768 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.070147754 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.073535408 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.07837411 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.078539626 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.075010654 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.083869983 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.078405395 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.069934273 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.07077132 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.073629639 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.069409373 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.083123467 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.069919033 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.07487958 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.074252951 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.068316201 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.077186511 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.087902561 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.079859428 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.079273446 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.068457353 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.067818207 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.08870209 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.073837386 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.072988081 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.0783356 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.080007667 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.081898264 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.079059295 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.088327353 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.06969039 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.075754152 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.082885861 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.069661237 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.069441642 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.073997273 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.071163629 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.080732323 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.080870608 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.07769941 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.071594393 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.07810578 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.085545965 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.071607031 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.075803057 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.075122964 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.0701335 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.081323898 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.078718494 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.082465741 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.071242446 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.069397594 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.073699766 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.079289165 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.078530706 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.080929482 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070804239 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.076265768 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.085326503 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.078740792 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.073022915 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.069599294 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.073330586 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.080929671 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.074299511 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.068657172 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.074993323 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.074364433 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.07694316 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.08071948 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.075021291 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.069048267 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.088494682 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.07847026 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.079779511 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.070821825 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.071517861 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.071308858 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.069456228 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.083046483 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.06954627 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.071363445 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.07593612 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.071400429 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.089809966 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.079287999 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.088832786 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.070816467 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.075035082 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.070149132 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082004709 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.076640827 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.071134274 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.083411358 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.070008039 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.089462281 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.110135453 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.077519364 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.070637535 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.076725827 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.080392467 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.089178953 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.082999639 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.081811861 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.07499152 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.082044671 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.073490923 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.083273666 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.070618014 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.069814176 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.082941512 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080828465 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.085534187 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.070963361 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.082453378 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.074093396 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.080276826 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.252406047 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.072324558 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.072357752 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.072465575 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080760536 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.074891884 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.080559246 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.075395283 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.089347398 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.070738358 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.082024697 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.079702048 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.081522574 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.085382343 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.084140466 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.079417581 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.070817086 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.079532736 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.078626841 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.070987786 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.075096853 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.072568341 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.094358216 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.071713619 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.071514657 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.085615592 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.075830218 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.069706365 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.075285281 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.075054369 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.083101202 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.070608953 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.081306063 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.073359655 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.070851099 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.075729314 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.076126818 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.069213327 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.069225133 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.069914662 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.08101454 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.074961103 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.069847556 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091438158 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.071481044 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.079312914 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.081332354 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.07823058 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.071566189 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.06904797 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.071852766 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.085825952 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.088362624 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.07467159 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.080050491 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.07279392 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.081502539 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.068510078 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.078921473 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.079536743 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.080612986 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.06975655 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.069577786 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.087893483 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.088032435 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.07635513 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.080966722 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.080898613 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.07171045 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.09540293 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.080510084 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.072016606 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.082526925 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.072716592 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.069914362 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.069365196 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.071908468 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.082988715 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.069806579 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.072806924 seconds)
  done (took 48.064290257 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.113924051 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070032156 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.069035912 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.068679428 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075723184 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.070276008 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069197319 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069915363 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069954824 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071479751 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069119861 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072025815 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074690273 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083004945 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.077248347 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073085066 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.068619013 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.070577754 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.068886022 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07024359 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.075390466 seconds)
  done (took 3.121757476 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.073011714 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.072970719 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072177539 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.073158874 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072191974 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.069287982 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.073528954 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069930046 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.073166371 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069604166 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.073487307 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06852124 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.070714041 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.070507189 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069349539 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070776813 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.073956489 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.073317477 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.069432451 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.073312331 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071010749 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.073071415 seconds)
  done (took 3.11503734 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.070731441 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.069900461 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.078918025 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.067610069 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.068034836 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.072075746 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.067876776 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.073482346 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.07390879 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.073543844 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.079563551 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.069465068 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.068553539 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.07514398 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.068219746 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.069494318 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.116839771 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.070164051 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.069997298 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.068383916 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.071167875 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.079144071 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.068249249 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.06854207 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.074139888 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.072565794 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.068376732 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.071575517 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.070204368 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.074421445 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.07028103 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.068530785 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.078472901 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.078198387 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.07361981 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.073653843 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.070010061 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.070432759 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.069448711 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.06936821 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.079322861 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.070601662 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.068471674 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.071114116 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.078676879 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.068900075 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.068815403 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.079546888 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.068567863 seconds)
  done (took 5.10871588 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.079678974 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.125132511 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.075507362 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.106522602 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.082313662 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.074649145 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.075470265 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.106942294 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.069693637 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.07013226 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.082300674 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.083446035 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.071940523 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.073296071 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.076295649 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.071162005 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.071908086 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.071369114 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.074736319 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.07136707 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.074192263 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.076448111 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.081677886 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.082452278 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.072365414 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.071430217 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.071225068 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.072736341 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.082335282 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.07509575 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.072645383 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.074022669 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.082498816 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.075945493 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.071783888 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.071577351 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.084041707 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.072110337 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.071594276 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.071473668 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.07223376 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.073512022 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.077372577 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.08429984 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.073166939 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.077972512 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.072025975 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.070098293 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.083177893 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.07205766 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.075439717 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.084006269 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.072934517 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.072622081 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.07318846 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.08257697 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.071924592 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.07045131 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.072878408 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.083210416 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.070522725 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.073018823 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.086885251 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.072460923 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.075010437 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.083850476 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.077475512 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.073418455 seconds)
  done (took 6.949337392 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.079967328 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.1100304 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084663468 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084782929 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.081349342 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.080802264 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.07992481 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.080725892 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.080860849 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.083927761 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.080418164 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.120426077 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.076842796 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.081574239 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.079561167 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.080249242 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.080506829 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.080697538 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.081212136 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.08146418 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.080830653 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.085594665 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.080361603 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.085207506 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.083077251 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.076667816 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.080518647 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.080447077 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.086496991 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.080168384 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.082829341 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.08061119 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.08043228 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.085242503 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.083022747 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.080134584 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.070702633 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.080225435 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.080206585 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.080585951 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.077484299 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.086069726 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.080464584 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.077368937 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.081169608 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.080492796 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.085966982 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.083510366 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.082333172 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.083829245 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.080968604 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086187872 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.080637503 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.080527678 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.086381266 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.089971274 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.087096679 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.086366853 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.080705938 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.08584308 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.086986868 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.088918179 seconds)
  done (took 6.735884122 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.082775273 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.074763051 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.089085291 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06886517 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.069095241 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.078661096 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068694107 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.068697894 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.075077998 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.075863189 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.077205643 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.078520602 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.081381228 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.07667196 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.078685929 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.080940326 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.078987497 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.0792096 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.075701163 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.079977025 seconds)
  done (took 3.129519297 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.086678186 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.089677599 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.0758185 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.078235704 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.075367263 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.078599726 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.074272705 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.074902113 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075207125 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0746327 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.079932631 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.080060673 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.076371031 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.078854915 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.079053658 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.079175029 seconds)
  done (took 2.817199005 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.073082171 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.076047023 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.074926325 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.069831673 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.071220403 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.069034155 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.070070096 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.068665726 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.071483521 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.084878316 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.069119673 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.07213257 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.070051671 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.069059053 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.069898353 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.072279922 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.071327569 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.069673658 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.069977299 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.073872626 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.07865197 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.071127619 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.07300661 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06977877 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.072012196 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.079319637 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.071723465 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.075239073 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.070030957 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.072624771 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.0725983 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.077878813 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.073726778 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.071395899 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.069457343 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.070407217 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.071137251 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.072829651 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.073093377 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.070225278 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.068777522 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.077068137 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.070935641 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.072090895 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.072883544 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.07324693 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.072388477 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.076394258 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.071570945 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.072839737 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.070602457 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.072353416 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.07149991 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.079115723 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.0727837 seconds)
  done (took 5.552260108 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.090032531 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.075025975 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.068781706 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.068777198 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.074369107 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.07702971 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.075413547 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.0748306 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.074997062 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.06897073 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.075986856 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.074242765 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.075754543 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.075298271 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.075939111 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.075261772 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.069330728 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.07537565 seconds)
  done (took 2.939480818 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.075718556 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.074386379 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.07340564 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.070444298 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.070646513 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.075816233 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069323027 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.070931527 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070521912 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.070844985 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071491201 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.070831061 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071390699 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.070834262 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074759258 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071601872 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.070284186 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069205982 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070952672 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069072792 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.075192372 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070837678 seconds)
  done (took 3.150077314 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.098058013 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.095498903 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.145146306 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.091471752 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.101442111 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.081224767 seconds)
  done (took 2.189648489 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.107260584 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.110785328 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.074551703 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074182761 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078336459 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07738046 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077920251 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078522267 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080844047 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.081957352 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077741769 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081205205 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080832102 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.083062085 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080367229 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079060735 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.077577197 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078082696 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075652926 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.085566019 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078578763 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081415152 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078389848 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.077936669 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078857304 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.083128239 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080750825 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082758892 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078294749 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081440711 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080340838 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078565745 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.082786802 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.082834198 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076109881 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.082140788 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.079075321 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.085909001 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079860445 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.084345044 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.074853506 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081540943 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.082410565 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.082312738 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.08284106 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.079822369 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.08320967 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.079000598 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.079302336 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.087910196 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0810918 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.084301843 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081126139 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082501919 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08301459 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.089056656 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.08351644 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.08436433 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080589156 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.082930371 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.084346566 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080330943 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.084012617 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.082982342 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.080323136 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.084422355 seconds)
  done (took 6.974899881 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.117436151 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.075830918 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078467069 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.081659297 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.082908901 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.0780044 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07744391 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078314101 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078678316 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075690082 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.116919758 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078921061 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.083424599 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.086659887 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078800853 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078303472 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078153159 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.083757671 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.077385329 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.088388947 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078294106 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082877941 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.083399361 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.083630641 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.081832881 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080537077 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078954429 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078370348 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078155882 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078234197 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.082345952 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079228705 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.083825757 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.076302033 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.083464593 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078736392 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.079556247 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.082004827 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.079428046 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080638643 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.083593272 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.086740454 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078857674 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.078186152 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081736103 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078113968 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078942845 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076076705 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078949424 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075961784 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.083212494 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.083902503 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.083157884 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.084091301 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078888743 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07923327 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078714803 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.078836714 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0792491 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.08031968 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.083745012 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079304141 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.087991543 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079373024 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079283805 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.084168035 seconds)
  done (took 6.996276686 seconds)
done (took 144.14212683 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.271983877 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.230414344 seconds)
  done (took 2.07065882 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.084596472 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.265076676 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.084601485 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.084755988 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.149684383 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.143798144 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.086219772 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.082869995 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.084252995 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.082606853 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.189622401 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.085459088 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.082387679 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.082722248 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.080232767 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.082016756 seconds)
  done (took 3.34376668 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.133872621 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.205952454 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.092915475 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.079354443 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.168900938 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.088242857 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.083578565 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.086641835 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.087724946 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.080649701 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.132603554 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.095476697 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.085745575 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.086689768 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.082839523 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.085757985 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.086962372 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.087246494 seconds)
  done (took 3.438648953 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.116980582 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.125417002 seconds)
  done (took 1.840247962 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.175986962 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.119401723 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.162460164 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.385205972 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.152304028 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.155380233 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.158554229 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.156680377 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.124304119 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.150980088 seconds)
  done (took 3.332564024 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.120378014 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.119202324 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.340531403 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.116851652 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.092914707 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.087504848 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.085496881 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.091208911 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.085132947 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.086766101 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.138564961 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.086167057 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.083007659 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.140915308 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.11114859 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.119952837 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.08110986 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.089208629 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.091377768 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.08108264 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.086351918 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.090928758 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.199221066 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.090292322 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.113255577 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.084298451 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.089271146 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.086164071 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.086202055 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.09008578 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.090439477 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.113812297 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.08951028 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.095378938 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.087439049 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.109534477 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.081545999 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.113325425 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.084408393 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.082524563 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.08513477 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.089800941 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.082153836 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.08960685 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.086800528 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.087950076 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.091166347 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.081093235 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.086485185 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.084895266 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.082527915 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.086670415 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.086336282 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.087774007 seconds)
  done (took 7.029655302 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.133182177 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.125811116 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.079657605 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.128944944 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.1225631 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.080394311 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.138458134 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.118207466 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.13732009 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.079700907 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.078986518 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.078820103 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.086870502 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.090180202 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.133404577 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.126292016 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.081614105 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.080059231 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.125263929 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.125484369 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.078940272 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.138835107 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.129841648 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.125115194 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.079208366 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.079999001 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.078763424 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.079328984 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.087209395 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.08656723 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.078279265 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.089262287 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.090574383 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.086595316 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.078526642 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.07850794 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.078267839 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.086830971 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.088584633 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.088673715 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.085420036 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.077991483 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.077288541 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.078691692 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.079438277 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.078059975 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.08887496 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.087380498 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.088761539 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.079436544 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.078319995 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.078377608 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.079824437 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.08624109 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.085424141 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.086064687 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.089643657 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.079480567 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.079380619 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.080907684 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.090308055 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.087718829 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.086512521 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.08087892 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.08843426 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.37285872 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.089104447 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.092777342 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.078464159 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.079123401 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.078481252 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.078895808 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.079493297 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.0855923 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.085545174 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.079185697 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.079519475 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.078360594 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.087666659 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.086604407 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.078958035 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.087995097 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.078331019 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.079473979 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.080270688 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.081041723 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.091644007 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.088788536 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.080496886 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.081150243 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.080556589 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07981429 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.079799664 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.089956569 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.089055094 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.089499534 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.091704974 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.080777064 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.092045029 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.090222652 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.081005663 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.088321093 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.080992303 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.081575671 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.080855524 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.088804625 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.24936961 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.088561415 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.080342883 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.079730251 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.087212861 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.089195178 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.079376754 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.085734889 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.088621149 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.08611271 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.077572555 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.089478726 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.078999194 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.088396004 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.078464355 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.087756475 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.078814707 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.084973025 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.079186869 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.079117673 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.078009075 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.087680898 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.078265065 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.079123642 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.0792398 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.078288731 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.084765567 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.088370328 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.078429977 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.084632317 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.084726188 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.07896253 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.086805066 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.076578243 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.088256446 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.078495489 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.077801709 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077771463 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.089633778 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.078006011 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.078024024 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.077599156 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.086259955 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.078848505 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.086676298 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.084596128 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.07850768 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.089090494 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.088190065 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.085818347 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.087918719 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.08002239 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.078512661 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.078675879 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.082304847 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.088155683 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.091105124 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.081419836 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.080438457 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.086439346 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.089811105 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.079519828 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.086140855 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.085605283 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.086499707 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.079045119 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.078287907 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.08839476 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.091034292 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.085302397 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.087854303 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.086740377 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.078815666 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.084826552 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.089135146 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07844791 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.091920194 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.078520126 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.089518293 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.089849215 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.084978722 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.089169253 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.089009614 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.088765378 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.0876259 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.091308653 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.079242815 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.079070624 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.086729261 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.079822315 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.081059131 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.087664296 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.080402091 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.08122108 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.094704992 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.080283883 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.091318054 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.079671807 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.088853065 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.079687677 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.080875858 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.093297103 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.080297145 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.081362588 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.0886163 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.08085523 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.088262026 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.258654389 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.086510477 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.079458643 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.079818503 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.088971793 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.088179477 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.07885607 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.078475348 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.079147425 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.08716111 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.086351125 seconds)
  done (took 21.628860118 seconds)
done (took 44.297332521 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.189346042 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.128803624 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.250212189 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.227915991 seconds)
  done (took 2.51753704 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.114154444 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.07501121 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.089886622 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.099988472 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.075205504 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.085744822 seconds)
  done (took 2.203343972 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.222993764 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.194765907 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.275333203 seconds)
  done (took 2.346946585 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.413901879 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.17205039 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.24315727 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.563401139 seconds)
  done (took 3.162760941 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.124338856 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.113217288 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.087496713 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.123476195 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.094855967 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.071599512 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.147611826 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.080219762 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.109750267 seconds)
  done (took 2.68190065 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.159105043 seconds)
done (took 14.716797893 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.128197069 seconds)
    (2/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.143955108 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.26787572 seconds)
    (4/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.315691545 seconds)
    (5/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.248841579 seconds)
    (6/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.310797582 seconds)
    (7/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.199390356 seconds)
    (8/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.09235963 seconds)
    (9/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.252211677 seconds)
    (10/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.125735889 seconds)
    (11/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.24817188 seconds)
    (12/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.083710859 seconds)
    (13/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.208316706 seconds)
    (14/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.201141139 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.087685361 seconds)
    (16/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.151955531 seconds)
    (17/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.103834856 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.088664993 seconds)
    (19/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.087730595 seconds)
    (20/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.235152483 seconds)
    (21/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.157690397 seconds)
    (22/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.09013469 seconds)
    (23/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.091489691 seconds)
    (24/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.207258598 seconds)
    (25/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.088162557 seconds)
    (26/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.075080171 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.151996373 seconds)
    (28/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.166274351 seconds)
    (29/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.088671146 seconds)
    (30/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.214122796 seconds)
    (31/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.076897782 seconds)
    (32/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.224121397 seconds)
    (33/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.096122905 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.084891805 seconds)
    (35/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.227778537 seconds)
    (36/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.086634232 seconds)
    (37/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.095916522 seconds)
    (38/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.104336232 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.162312786 seconds)
    (40/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.136937924 seconds)
    (41/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.076966298 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.084261066 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.095585843 seconds)
    (44/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.226982725 seconds)
    (45/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.252403173 seconds)
    (46/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.157775871 seconds)
    (47/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.225987649 seconds)
    (48/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.221497652 seconds)
    (49/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.226874706 seconds)
    (50/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.07696435 seconds)
    (51/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.085028553 seconds)
    (52/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.088454466 seconds)
    (53/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.090489752 seconds)
    (54/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.10764988 seconds)
    (55/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.279334418 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.090100255 seconds)
    (57/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.07443515 seconds)
    (58/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.255618904 seconds)
    (59/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.206960013 seconds)
    (60/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.090779199 seconds)
    (61/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.160015523 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.095483299 seconds)
    (63/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.234664383 seconds)
    (64/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.253008367 seconds)
    (65/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.08630549 seconds)
    (66/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.086085353 seconds)
    (67/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.098530888 seconds)
    (68/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.2010443 seconds)
    (69/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.086562531 seconds)
    (70/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.103387957 seconds)
    (71/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.197577476 seconds)
    (72/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.209178173 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.288964825 seconds)
    (74/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.089858793 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.103422567 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.080372834 seconds)
    (77/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.10404364 seconds)
    (78/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.083896721 seconds)
    (79/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.164873399 seconds)
    (80/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.099162646 seconds)
    (81/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.080498117 seconds)
    (82/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.085990821 seconds)
    (83/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.188092672 seconds)
    (84/341) benchmarking ("sort", Int8, false)...
    done (took 0.1715663 seconds)
    (85/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.084432045 seconds)
    (86/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.075774275 seconds)
    (87/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.076438685 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.103323257 seconds)
    (89/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.087729806 seconds)
    (90/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.086957211 seconds)
    (91/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.185428071 seconds)
    (92/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.184942148 seconds)
    (93/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.201313106 seconds)
    (94/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.08611618 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.099854134 seconds)
    (96/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.083729487 seconds)
    (97/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.184912481 seconds)
    (98/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.168545847 seconds)
    (99/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.246435585 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.09648964 seconds)
    (101/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.075997267 seconds)
    (102/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.087151334 seconds)
    (103/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.214144093 seconds)
    (104/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.077175145 seconds)
    (105/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.074958003 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.100674494 seconds)
    (107/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.26293372 seconds)
    (108/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.092995085 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.083687892 seconds)
    (110/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.133531664 seconds)
    (111/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.096412564 seconds)
    (112/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.076016734 seconds)
    (113/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.077535676 seconds)
    (114/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.075024065 seconds)
    (115/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.09829422 seconds)
    (116/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.164717143 seconds)
    (117/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.075751073 seconds)
    (118/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.14144091 seconds)
    (119/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.246368751 seconds)
    (120/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.0836683 seconds)
    (121/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.172010643 seconds)
    (122/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.077134187 seconds)
    (123/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.168592209 seconds)
    (124/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.075764977 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.074804615 seconds)
    (126/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.160850997 seconds)
    (127/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.076235057 seconds)
    (128/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.084974724 seconds)
    (129/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.189998733 seconds)
    (130/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.07607296 seconds)
    (131/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.079665299 seconds)
    (132/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.086055601 seconds)
    (133/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.077803862 seconds)
    (134/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.074876235 seconds)
    (135/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.083686212 seconds)
    (136/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.16174205 seconds)
    (137/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.083968068 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.075574645 seconds)
    (139/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.07609479 seconds)
    (140/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.075680325 seconds)
    (141/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.074230398 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.085374411 seconds)
    (143/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074129055 seconds)
    (144/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.175023515 seconds)
    (145/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.075389391 seconds)
    (146/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.076927283 seconds)
    (147/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.081508826 seconds)
    (148/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.076774172 seconds)
    (149/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.078122121 seconds)
    (150/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.211519605 seconds)
    (151/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.084911466 seconds)
    (152/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.080853072 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.086917942 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.092366216 seconds)
    (155/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.09380582 seconds)
    (156/341) benchmarking ("sort", BigInt, false)...
    done (took 0.293649319 seconds)
    (157/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.076043413 seconds)
    (158/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.094212585 seconds)
    (159/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.078955023 seconds)
    (160/341) benchmarking ("sort", Bool, false)...
    done (took 0.160732771 seconds)
    (161/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.189803907 seconds)
    (162/341) benchmarking ("sort", Float32, false)...
    done (took 0.15738248 seconds)
    (163/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.088149587 seconds)
    (164/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.076724197 seconds)
    (165/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.172013304 seconds)
    (166/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.077281936 seconds)
    (167/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.077049091 seconds)
    (168/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.07668472 seconds)
    (169/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.07729188 seconds)
    (170/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.082353733 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.0765275 seconds)
    (172/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.084459924 seconds)
    (173/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.08696361 seconds)
    (174/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.079699926 seconds)
    (175/341) benchmarking ("sort", Int64, false)...
    done (took 0.077978349 seconds)
    (176/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.077111897 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.164247921 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.151958749 seconds)
    (179/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.085641277 seconds)
    (180/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.077381935 seconds)
    (181/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.385623294 seconds)
    (182/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.155539239 seconds)
    (183/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.196020043 seconds)
    (184/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.076352538 seconds)
    (185/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.098644262 seconds)
    (186/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.086591997 seconds)
    (187/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.181500585 seconds)
    (188/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.098730499 seconds)
    (189/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.270372311 seconds)
    (190/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.07779445 seconds)
    (191/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.088110573 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.186830054 seconds)
    (193/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.076890772 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.094234438 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.133583922 seconds)
    (196/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.074294 seconds)
    (197/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.224743925 seconds)
    (198/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.077110823 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.0763697 seconds)
    (200/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.076947347 seconds)
    (201/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.089340304 seconds)
    (202/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.078766613 seconds)
    (203/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.104846026 seconds)
    (204/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.107990122 seconds)
    (205/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.187498704 seconds)
    (206/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.091080797 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.175199996 seconds)
    (208/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.075419868 seconds)
    (209/341) benchmarking ("sort", Float64, false)...
    done (took 0.157433591 seconds)
    (210/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.079480359 seconds)
    (211/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.076808438 seconds)
    (212/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.103032539 seconds)
    (213/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.084270624 seconds)
    (214/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.078219539 seconds)
    (215/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.082759982 seconds)
    (216/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.186098679 seconds)
    (217/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.079546104 seconds)
    (218/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.076533171 seconds)
    (219/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.109835502 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.140386767 seconds)
    (221/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.07319502 seconds)
    (222/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.075558742 seconds)
    (223/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.076091421 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.075606138 seconds)
    (225/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.078123015 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.074359652 seconds)
    (227/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.076387774 seconds)
    (228/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.080278159 seconds)
    (229/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.074443511 seconds)
    (230/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.084847694 seconds)
    (231/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.191993889 seconds)
    (232/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.077772698 seconds)
    (233/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.085239775 seconds)
    (234/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.077527019 seconds)
    (235/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.077520532 seconds)
    (236/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.226065339 seconds)
    (237/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.075280003 seconds)
    (238/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.160756376 seconds)
    (239/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.083007147 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.143610677 seconds)
    (241/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.078293487 seconds)
    (242/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.077027786 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.170986842 seconds)
    (244/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.075825315 seconds)
    (245/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.085601227 seconds)
    (246/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.075587449 seconds)
    (247/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.075507093 seconds)
    (248/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.075288624 seconds)
    (249/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.076140242 seconds)
    (250/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.080075933 seconds)
    (251/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.078714258 seconds)
    (252/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.088423404 seconds)
    (253/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.087126423 seconds)
    (254/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.080291829 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.139325311 seconds)
    (256/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.083004082 seconds)
    (257/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.08583245 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.082850292 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.079567435 seconds)
    (260/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.07622384 seconds)
    (261/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.076962584 seconds)
    (262/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.07398099 seconds)
    (263/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.07804625 seconds)
    (264/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.076045178 seconds)
    (265/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.075865283 seconds)
    (266/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.078670453 seconds)
    (267/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.096801675 seconds)
    (268/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.076048482 seconds)
    (269/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.084727268 seconds)
    (270/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.075609729 seconds)
    (271/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.075596588 seconds)
    (272/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.077469946 seconds)
    (273/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.076637353 seconds)
    (274/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.076216118 seconds)
    (275/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.076316936 seconds)
    (276/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.078191641 seconds)
    (277/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.075002621 seconds)
    (278/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.07652232 seconds)
    (279/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.202027694 seconds)
    (280/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.07793357 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.166690245 seconds)
    (282/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.07454499 seconds)
    (283/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.075880899 seconds)
    (284/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.086358298 seconds)
    (285/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.09358828 seconds)
    (286/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.084363761 seconds)
    (287/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.07574354 seconds)
    (288/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.092302773 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.105208881 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.179276387 seconds)
    (291/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.084652136 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.096787447 seconds)
    (293/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.096722493 seconds)
    (294/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.086275323 seconds)
    (295/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.075525367 seconds)
    (296/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.076962487 seconds)
    (297/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.074850425 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.161406838 seconds)
    (299/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.082826028 seconds)
    (300/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.077704826 seconds)
    (301/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.181098979 seconds)
    (302/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.079469029 seconds)
    (303/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.273803509 seconds)
    (304/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.078767361 seconds)
    (305/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.108181219 seconds)
    (306/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.075882615 seconds)
    (307/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.08150447 seconds)
    (308/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.076988361 seconds)
    (309/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.076637927 seconds)
    (310/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.077376867 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.133093113 seconds)
    (312/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.076447059 seconds)
    (313/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.097910067 seconds)
    (314/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.076543895 seconds)
    (315/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.076469391 seconds)
    (316/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.093512704 seconds)
    (317/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.086654093 seconds)
    (318/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.076237205 seconds)
    (319/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.151794984 seconds)
    (320/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.076642506 seconds)
    (321/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.076571272 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.104166363 seconds)
    (323/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.183819702 seconds)
    (324/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.079815013 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.089558584 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.101962778 seconds)
    (327/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.172325519 seconds)
    (328/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.077759697 seconds)
    (329/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.075831432 seconds)
    (330/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.078420743 seconds)
    (331/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.07645032 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.103195373 seconds)
    (333/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.076381117 seconds)
    (334/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.076323982 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.101795155 seconds)
    (336/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.214577667 seconds)
    (337/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.077518731 seconds)
    (338/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.088019044 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.102731906 seconds)
    (340/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.083670053 seconds)
    (341/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.077804018 seconds)
  done (took 42.056329133 seconds)
done (took 43.727107438 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.106458305 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.092178477 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.089956487 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.086111919 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.090418491 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.088431835 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.088929651 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.086425673 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.091341509 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.087745052 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.087716244 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.074764646 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.083316748 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.092632762 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.084071304 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.092941955 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.088252211 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.091056159 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.075553711 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.092382348 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.105371756 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.089534819 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.084075013 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.091399521 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.076373014 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.085447684 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.101919114 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.098862297 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.082946397 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.086049472 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.084570304 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.096036768 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.084188382 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.083523983 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.086208707 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.081075865 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.086172435 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.08286326 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.101530593 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.081064073 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.075703307 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.089276559 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.084243011 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.084775307 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.085528827 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.089062968 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.082316807 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.092808313 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.07577621 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.08822472 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.102453564 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.081397187 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.08295769 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.084784223 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.080283313 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.085866241 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.082943058 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.088120209 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.081221982 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.088112853 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.088445795 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.084441556 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.075340357 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.084846501 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.08384971 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.083827841 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.073860911 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.082347843 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.075734668 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.075535475 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.074479892 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.084443323 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.083919541 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.080874763 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.074613778 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.075230235 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.074409836 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.088167661 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.083374043 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.086200696 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.075689723 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.081078474 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.080316568 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.075797125 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.081563553 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.087726498 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.073898414 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.075678833 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.074355694 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.091084556 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.083041459 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.076246965 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.088813642 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.081477747 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.081533956 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.075450222 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.074738845 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.081022575 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.083947527 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.076162004 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.074139334 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.081475315 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.081009187 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.086206231 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.075934807 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.082442374 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.081315058 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.074570127 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.085601388 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.083515657 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.085426531 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.090239497 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.08545003 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.089803024 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.076318388 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.075415487 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.086253848 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.076159388 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.082398728 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.084222739 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.082040867 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.083769282 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.076551177 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.076073915 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.082239851 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.082717843 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.07696212 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.077326768 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.077565662 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.086335291 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.084694787 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.075781836 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.077158152 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.086206681 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.086741174 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.076711741 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.077055258 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.087053051 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.077227867 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.083321024 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.083344396 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.259214035 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.076481864 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.077106065 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.075516253 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.075158985 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.073627696 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.081635337 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.081822437 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.075256781 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.085236966 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.083275237 seconds)
done (took 14.642363875 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.077473215 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.121671729 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.0905245 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.094302186 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.089552517 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.076679251 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.079887183 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.096385029 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.079097121 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.103527137 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.104810021 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.100820095 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.107020518 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.075033885 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.076526423 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.076280793 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.074471092 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.089247755 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.09498063 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.10254583 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.115859189 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.075971211 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.094351634 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.098784451 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.089290651 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.096413504 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.077487887 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.129651436 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.080044266 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.094290254 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.105329988 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.075685674 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.077746517 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.096089385 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.093376197 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.085066686 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.077224878 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.082826274 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.080001077 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.076384193 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.078337258 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.095484225 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.083573636 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.083122477 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.07740316 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.077567304 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.076457663 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.084166421 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.090834264 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.081872636 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.089474 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.096232781 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.077780165 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.076121096 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.074595446 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.083962392 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.076756591 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.07738286 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.0765219 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.076072182 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.076911115 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.078937746 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.081755944 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.083154671 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.079596734 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.083044671 seconds)
  done (took 7.490314896 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.093056979 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.103715353 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.091381886 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.090976151 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.075078979 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.07635814 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.076576981 seconds)
  done (took 2.413644803 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.07694764 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.084215521 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.088935794 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.089087618 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.099626532 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.085983359 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.07621132 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.110604659 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.075032414 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.085250989 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.096973043 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.090188339 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.080419132 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.089536597 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.076709591 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.089007209 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.076498342 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.084435909 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.083785313 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.089004359 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.080577377 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.110812038 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.090536607 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.076893626 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.091320663 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.084661398 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.078955949 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.076724148 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.079337291 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.075961497 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.075571998 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.100593687 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.082749329 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.083391239 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.077575363 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.075547885 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.081524697 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.077262731 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.080765096 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.083898602 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.079936819 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.078383942 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.07889429 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.076159258 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.077241133 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.080882226 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.077493426 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.075884463 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.075986169 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.084252222 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.074681684 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.083106706 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.078799665 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.082329117 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.084017708 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.082817294 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.085095071 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.076769483 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.084304533 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.087386277 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.077760812 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.091016525 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.089111337 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.08041098 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.089423128 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.085697763 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.083822335 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.079950687 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.074867494 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.075512997 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.076969409 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.089353832 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.080248156 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.079455297 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.082187682 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.084743072 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.080629873 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.093637036 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.093037721 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.091270298 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.079054676 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.076435013 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.080473186 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.093351859 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.081419935 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.078195061 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.078734066 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.076788463 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.08272347 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.080386324 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.083728152 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.077784527 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.088640628 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.080596846 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.079859113 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.085674297 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.077678473 seconds)
  done (took 9.842304516 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.080592477 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.080246802 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.078120103 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.07727977 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.077148756 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.077130778 seconds)
  done (took 2.342529837 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.099602896 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.076962645 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.088814139 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.075921119 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.09718941 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.083888302 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.084010074 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07869202 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.094308275 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.088865772 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.084395762 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.086482945 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.086496845 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.079184604 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.084191289 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.078580711 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.0846747 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.080284327 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.087855335 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.078706233 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.095168627 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.079393081 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.079817466 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.089630989 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.080326378 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.077526199 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.078499415 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.087841032 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.087988849 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.078670519 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.078186521 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.080053943 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.086270271 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.077977429 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.083564296 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.086230939 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.076867358 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.082805534 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.079979072 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.08004452 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.085859383 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.078547477 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.079293293 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.082659081 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.078502628 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.086015389 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.083207132 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.08020839 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.083445376 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.090440656 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.083010316 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.077807318 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.079462065 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.083139306 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.086348332 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.078442818 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.083053243 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.083150866 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.078401037 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.086607824 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.076775398 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.08009105 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.079304612 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.080140994 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.081654683 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.082639237 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.086549492 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.079506689 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.078915334 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.076979879 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.082672542 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.076991521 seconds)
  done (took 7.761819467 seconds)
done (took 31.646660703 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.588112628 seconds)
  done (took 2.373874603 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.683079609 seconds)
  done (took 2.508317433 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 11.947362662 seconds)
  done (took 13.771929686 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.420784211 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.512827276 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.84048062 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.148221104 seconds)
  done (took 3.767748926 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.915158313 seconds)
  done (took 2.756226149 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.263869995 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.250496184 seconds)
  done (took 2.367243551 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.421313343 seconds)
  done (took 2.256551413 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.418362027 seconds)
  done (took 3.256600973 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.257530073 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.182798422 seconds)
  done (took 2.270046443 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.596402974 seconds)
  done (took 2.426571069 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.082271822 seconds)
  done (took 6.908081768 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.274904557 seconds)
  done (took 2.156219214 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.257811858 seconds)
  done (took 2.088981412 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.719124167 seconds)
  done (took 4.545344552 seconds)
done (took 55.294664952 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.0967296 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.097826431 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.097155184 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.091225704 seconds)
  done (took 2.18448807 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.084282714 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.080312566 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.083491106 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.083574211 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.081194633 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.082412457 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.082208903 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.079659513 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.080640704 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.080446088 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.078357752 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.079815423 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.082653271 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.0801163 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.082865101 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.083904701 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.079596774 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.080244917 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.082250163 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.080448795 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.083226546 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.080283557 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.079259156 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.080013308 seconds)
  done (took 3.776616578 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.089675268 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.081918146 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.085060626 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.081372101 seconds)
  done (took 2.173038925 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.087796345 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.086771087 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.095375928 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.10057799 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.086124196 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.085750356 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.095261383 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.094792272 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.07444101 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.098656765 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.078088245 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.076328983 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.076208546 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.097481028 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.093810433 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.071152766 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.072449185 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.087618638 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.086034251 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.089814053 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.078120687 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.075048699 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.087689279 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.087712152 seconds)
  done (took 3.894804703 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.093120233 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.075063517 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.092636419 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.104395793 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.103982111 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.07434621 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.090161634 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.104541202 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.14349171 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.075580856 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.081605275 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.075966948 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.120336484 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.075194702 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.092529222 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.12237732 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.126813032 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.079420622 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.111115152 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.075152757 seconds)
  done (took 3.764343359 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.087208521 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.080508274 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.081976259 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.075091476 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.087538135 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.083298823 seconds)
  done (took 2.364411373 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.078147085 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.078010442 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.079704547 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.082432259 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.076825841 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.077843297 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.0769375 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.075405705 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.0749842 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.076057026 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.076288104 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.076969994 seconds)
  done (took 2.781367603 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.177479139 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.081812538 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.080113275 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.075720072 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.077770304 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.076247917 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.091975506 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.078523678 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.095916601 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.076215016 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.07633215 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.079356838 seconds)
  done (took 2.909513253 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.118626566 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.125143386 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.160977924 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129394195 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131275663 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108808736 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.144155733 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.107058307 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.18004039 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.154123282 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133205433 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106268011 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0987704 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.079682458 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112516276 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.134784587 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.157032985 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083557413 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128478951 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.187419455 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148963737 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.152139542 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.163579261 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132867391 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103604967 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.164099087 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110474491 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115309595 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.140691628 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143009144 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134403348 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.112323827 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.082667896 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.081333627 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169382416 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.120858461 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139623765 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.10733435 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.12088603 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.102892555 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123315539 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.080429253 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.099781561 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.131706865 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.096880825 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.151162987 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.105233938 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130555333 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093691943 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.15823283 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150614839 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118192058 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100053902 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.300470415 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154505829 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.125818147 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.150173102 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121967039 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093759854 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.132720088 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.117306778 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112940639 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119464237 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090964407 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.194163039 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099640821 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.126621418 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.125775802 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.106134446 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108175468 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.119364506 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.151132748 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140701904 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.141800337 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.156109843 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109223146 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136948074 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.114564174 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.145249012 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117980713 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.083979957 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.138670021 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.146478142 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112207781 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.116320683 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.147948038 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106294959 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088902084 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.115443905 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.136021933 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091560011 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.130729006 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092664694 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.124675462 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.156977867 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112976683 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128404532 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.136623652 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090609515 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.178109346 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.125926682 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085312633 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.137627286 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133246935 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.360660303 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107486148 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.087706662 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114226794 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116161102 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.166980659 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119918591 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090621011 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122853303 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152730659 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106231328 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.192078682 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.108058875 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.154986538 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12381833 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098391611 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085720412 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.102352485 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126561758 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119962898 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123885003 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105818773 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.095122737 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097974956 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127791193 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104380744 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092403045 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129239521 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.116851226 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.085912621 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100007011 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.091487759 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.16054903 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.090200636 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154651349 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142534691 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.089888823 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121177543 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11166052 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122507368 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.112136527 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134357989 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155724368 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.131774943 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.103764824 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.108598378 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123564881 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.165206082 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.143993569 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105922493 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.089538707 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114735306 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128421224 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.112453873 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.14686728 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111130668 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128895202 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.123173469 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.166510925 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.17125113 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118198642 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.118488941 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128257922 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.14441478 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08938814 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.182735364 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12285862 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138325721 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099355374 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.166118047 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.132203037 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106181152 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100761773 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.116789666 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.121959749 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124971719 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.168645759 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.11209092 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.08453433 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10940437 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.169213495 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089088323 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128879874 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.106106408 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.109115821 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.139068714 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.111796227 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.095226873 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.080007194 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.152755985 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.185869359 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.081249489 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.13328253 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.138110029 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12068936 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.146220239 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.081203522 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139357878 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1622796 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137796689 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1660023 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.192279922 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142088922 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138415223 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.134691207 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.124490372 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09183916 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.146252656 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.157497 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113159763 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107611432 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.522715529 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.139037933 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.156769863 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.134660732 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139255913 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.122662535 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131585361 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119302569 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.120228151 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.16600506 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141085932 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.144430169 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100918729 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123104054 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.138398576 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153604414 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.096075936 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.160209835 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.098968381 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.138413041 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.090198564 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141814287 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.092673584 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.128580782 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.092102602 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11534335 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.081114795 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.085583969 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.161778397 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.129821733 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1225076 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116133272 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.156601718 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.155342145 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.094201265 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.124145768 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133947874 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.11639878 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135473096 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125755557 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.104119445 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110042879 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127909662 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.098627227 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.095124597 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.134302164 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109771342 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144834797 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097320363 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.087452538 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160626187 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120898993 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110819601 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091370019 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126327259 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.137870782 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107014311 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.29147247 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129531935 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119233721 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.157915203 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.104601613 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.112112659 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.138479451 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091830231 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.105139296 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.080540604 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.098071759 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.088540705 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.141813173 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.0868072 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129725672 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.079507218 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.1472155 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.097834469 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.108179318 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.117703121 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129383455 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145213171 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108205923 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.159001634 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101719578 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.136223025 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121768132 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108911813 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102296821 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11873618 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.115127025 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.138977971 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.111878761 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141791662 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162454259 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119370739 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.161353852 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103877635 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140579161 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122661725 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.142725946 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126290437 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.186267458 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.158180222 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129348727 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129117724 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.087414986 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109698909 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121296451 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129703478 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.197508843 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145802241 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.083855145 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.123042875 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108175346 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.127467065 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.306877341 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094364676 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160608842 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11471859 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.100029307 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124173424 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.101206695 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.117359509 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085953386 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111978068 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.118527749 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107565504 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111033515 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131907248 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144382684 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12916692 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.163210995 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.11426605 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.106743216 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.134964352 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127446807 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126056028 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.097910216 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.099343656 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.154314292 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.137486324 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.145986536 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.115578642 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123187851 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128917593 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113412646 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140045728 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122032491 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.142600735 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092791376 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.086557582 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.078464624 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.082393065 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138160058 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122620876 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.127861682 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112162622 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.083412223 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117486021 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120779028 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08293706 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099572253 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108052605 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108757202 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.106265692 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122317671 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.129896644 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.104943111 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119558701 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114557213 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.166874417 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.11532802 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101646926 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.164025882 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.34853014 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098643685 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103006619 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.083100701 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.090618065 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125378592 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163177405 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.165886646 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.087513899 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098923603 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.09731602 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097837831 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.082371187 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.098298813 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.102542007 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119236824 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114935071 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.127953949 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122223733 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086734839 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117686071 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114118663 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105885789 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122174846 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136937962 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146307706 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.16139987 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129233503 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.124960368 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088982777 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.092323011 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087073834 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.092244754 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.116088271 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.092058001 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088458318 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.161533138 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.106218187 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120187566 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124894437 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101829833 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086879078 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.152737608 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.081049938 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.152714611 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.081680984 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093850524 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.095824066 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091663249 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106501485 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157223086 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128610443 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12850411 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123253835 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12052413 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.180907558 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.179489682 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.093648694 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.164265722 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08761156 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087557551 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.271698036 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127598538 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100818013 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129501867 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154161038 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102238811 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113959273 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088025239 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.157076159 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.107697901 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.117803427 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.099295709 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091149904 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.159496298 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090917503 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.09036615 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10426023 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.126728582 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.083150648 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118850416 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097254134 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091067006 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.180989834 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.725788472 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104125248 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.086505746 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108606029 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.161239972 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.150499547 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110908539 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123819083 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.135179756 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114745306 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109302054 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122766571 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.208696124 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085698577 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106880272 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.118703751 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112427391 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115224893 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.112863169 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.103877089 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.106305725 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.099218244 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091332814 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122075365 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100671504 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.112504249 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125484421 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095249543 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.100795053 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.147908351 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.118775496 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.094247388 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101056926 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.121099576 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100967574 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118979123 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.080433005 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.129995671 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105040066 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.319468545 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.102995929 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122164156 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141752217 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106136493 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149460219 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.120877017 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.135709294 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098161703 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.088811646 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140387724 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.100185598 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088076521 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.158456514 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.106950805 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.106706926 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118301979 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.110797602 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128926739 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.133113993 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.128505453 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.111931135 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091423022 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114813044 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.117072359 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.098393394 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089657149 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.086241262 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.088405891 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122269258 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.097382496 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095992349 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131650049 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101768464 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118863593 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.118200825 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.137707527 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100660233 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.116349416 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125450377 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104407799 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12431484 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.115480346 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.145640032 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.195708203 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141647584 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.147972992 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.152822223 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.08832079 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.08762252 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.080366568 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133753056 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092718329 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.102959017 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094337216 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.151211704 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.095850227 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131579902 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.264623051 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.279090791 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.107084129 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107812536 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.081005895 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096241548 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121827427 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099169137 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091359643 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132214092 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094847467 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.142918279 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124186904 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111574979 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107846886 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092720187 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127532669 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.122872049 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.148136673 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108172527 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.086852042 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137739052 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.117829814 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.154687636 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.085037222 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093186774 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.146267383 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117226293 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149097639 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091745477 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168332769 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.161904327 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115175 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.152060295 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08241412 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101121524 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102760853 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.14358649 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09671097 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.126624938 seconds)
  done (took 77.824354979 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.162303909 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.197139357 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.132527625 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.14412418 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.300677384 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.311370716 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.163145006 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.13759051 seconds)
  done (took 3.630321345 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.078669396 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.093774983 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.092017297 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.226346742 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.12564191 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.077195977 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.083089356 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.09293604 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.077563639 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.077047223 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.115183467 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.077249356 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.077230425 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.524461795 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.075764242 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.082159224 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.077778469 seconds)
  done (took 4.117255833 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.379003165 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.644383793 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.447560596 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.611722249 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.172839264 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.700780499 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.086172385 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.095514955 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.925873242 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.428040595 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.166873206 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.101997223 seconds)
  done (took 21.815676639 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.087635199 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.089864479 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.089543977 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.085936969 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.086294744 seconds)
  done (took 2.501529821 seconds)
done (took 135.603823972 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.096787051 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.198409937 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.080263156 seconds)
  done (took 2.383540238 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.093464867 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.092703518 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.09152219 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.092574134 seconds)
  done (took 2.455195449 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.085898792 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.088512328 seconds)
  done (took 2.233836635 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.25390088 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.197299764 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.104847436 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.09466486 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.090605192 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.09215254 seconds)
  done (took 2.349741454 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.081975087 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.081204219 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.08145729 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.081970786 seconds)
  done (took 2.380845026 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.077896008 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.075891851 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.078751728 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.080783893 seconds)
  done (took 2.369076478 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.097740924 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.099191911 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.131178305 seconds)
  done (took 2.389391827 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.094096797 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.095339164 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.090182412 seconds)
  done (took 2.343701844 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.122408305 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.110227353 seconds)
  done (took 2.294028732 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.091963369 seconds)
  done (took 2.164211876 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.104232965 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.111709614 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.156556133 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.121130187 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.158937404 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.144507321 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.088055553 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.088799778 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.083724881 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.082719608 seconds)
  done (took 3.199400382 seconds)
done (took 29.272303517 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.094935846 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.212782697 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.328418617 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.100690951 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.668333874 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.324473901 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.747573157 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.103978095 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114747135 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.079003147 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.097883034 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.64358535 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.748280225 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.160616812 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.732879212 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.150885268 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.819524217 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.08463727 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.078996533 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.079483351 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.730419945 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.079276966 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.078539156 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.078993939 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.816432425 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.348388809 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.080345475 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.148464333 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.078705648 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.082987487 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.327254963 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.080990368 seconds)
  done (took 15.345931768 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.087118351 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.14503299 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.08276707 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.096972153 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.080808013 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.08024888 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.082677633 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.079758591 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.12704151 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.078842706 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.098783157 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.078778708 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.083140771 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.079606854 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.102030463 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.07943869 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.081896449 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.082793518 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.0788721 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.079204082 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.099905703 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.078177164 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.079271648 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.079622501 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.078841445 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.094412177 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.08050507 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.078708008 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.079069573 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.083689734 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.084850226 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.080598113 seconds)
  done (took 4.871761275 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.144033255 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.148838607 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.084035713 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.123891994 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.133685029 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.080941304 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.170469872 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.104869372 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.130846324 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.079316571 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.098448804 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.078861686 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.119840886 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.080867276 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.101543888 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.078993753 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.081700953 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.0794915 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.079329172 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.079480094 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.100221371 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.079378159 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.079615233 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.079981065 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.079548836 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.096541306 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.080243821 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.078957499 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.078904227 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.083572 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.084891295 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.08069238 seconds)
  done (took 5.171124481 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.079825024 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.081820273 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.08936776 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.092813579 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.076532559 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.07866781 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.080174786 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.076802942 seconds)
  done (took 2.751243408 seconds)
done (took 30.220648299 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.092168998 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.078249069 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.082222613 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.101018894 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.085330393 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.081848698 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.075541086 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.085534685 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.083165614 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.083685158 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.083453505 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.077534183 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.081519022 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.075225373 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.082428998 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.076120302 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.084616444 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.081690582 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.081260632 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.082692762 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.079074823 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.083523489 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.0856103 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.082236115 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.081730581 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.081244331 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.085130472 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.082078377 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.076226986 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.078968575 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.07934854 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.093352355 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.08321076 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.083524191 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.076510831 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.076589498 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.08180405 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.078953286 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.082642221 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.085849378 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.078311115 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.085624652 seconds)
  done (took 5.529837247 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.101176256 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.106096591 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.097764192 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.093151303 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.12213338 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.093199334 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.102854584 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.090201493 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.08955506 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.10324401 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.085264308 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.09041574 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.092236782 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.08731799 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.088994185 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.086113274 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.091381178 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.08492316 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.089892379 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.089544656 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.104016503 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.081807488 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.089570342 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.090674344 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.084062689 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.091680501 seconds)
  done (took 4.533163852 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.083364148 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.100146335 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.106029764 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.165160747 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.124008318 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.094145032 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.093713768 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.107121685 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.114719598 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.078890618 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.082883969 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.107553497 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.110312717 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.086400862 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.120830309 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.098373682 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.091963478 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.080569018 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.08607613 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.116845076 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.103371315 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.098660574 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.113676658 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.101013991 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.077393893 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.088721898 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.086252904 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.096645291 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.08719887 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.092146574 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.083082801 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.082365359 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.079500382 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.0923515 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.085670292 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.076397049 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.102608998 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.092851126 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.09526685 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.121312116 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.089343633 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.080437556 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.109836442 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.152205567 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.077345273 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.081216383 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.083275836 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.092560299 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.080264819 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.111933945 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.098458973 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.077803336 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.099255686 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.080443722 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.079926433 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.097233047 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.080534976 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.080610194 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.090718297 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.084732909 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.101327374 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.084799097 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.102787493 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.078329378 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.091078252 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.079657098 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.080073471 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.076601501 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.117712994 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.086583248 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.137632849 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.079660172 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.077398207 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.092200209 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.092262981 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.087200366 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.078182151 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.100757615 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.093691801 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.083331449 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.090945253 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.080991779 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.081577165 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.117233507 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.077330795 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.075968445 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.076494449 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.080988282 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.082594551 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.080126088 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.093624748 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.077676808 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.081890061 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.09589786 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.078637042 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.080235018 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.081036426 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.079749848 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.077210552 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.090898678 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.083003281 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.08053603 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.093340596 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.079757931 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.082141718 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.095082666 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.089143734 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.077696464 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.079635419 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.081875921 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.080359477 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.084282756 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.082379494 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.080827021 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.086972029 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.087552958 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.085658475 seconds)
  done (took 12.775052903 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.185318275 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.172381556 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.079358868 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.166502509 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.087955216 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.082832332 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.169531066 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.101192436 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.079690772 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.08038966 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.078248821 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.109336881 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.10458185 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.116215852 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.084051428 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.079705987 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.107328574 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.115134486 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.172947233 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.166214731 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.10423455 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.08725907 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.081807854 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.081200693 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.080619778 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.089790882 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.095958341 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.088494823 seconds)
  done (took 5.212983223 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.085022726 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.095866884 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.082122945 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.105483031 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.097638561 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.078819146 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.080799901 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.080551606 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.097400785 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.08503238 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.07878785 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.083554024 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.08287828 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.080049103 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.079962028 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.086404413 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.08629552 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.077963131 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.082530726 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.083433183 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.090337706 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.106260382 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.083345457 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.0793077 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.08223796 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.078887596 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.085051811 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.088418452 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.079077748 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.112983061 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.076339643 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.083867923 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.094604423 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.080125811 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.07889566 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.07964724 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.078912559 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.07819196 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.07909146 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.076799942 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.077018918 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.08471331 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.077572568 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.084003947 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.093967865 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.088300373 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.080528416 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.084738356 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.081865305 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.07495621 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.082401522 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.082668539 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.081814301 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.088764028 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.08314397 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.080993622 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.080822117 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.113611144 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.085281682 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.07809192 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.077804257 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.077160088 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.080624793 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.086223013 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.096936576 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.07941583 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.077532875 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.078627643 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.083935398 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.094591937 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.078543569 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.085309646 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.075973116 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.079119683 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.081082995 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.082387437 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.080755609 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.077442691 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.078641432 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.079136434 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.079062575 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.079074576 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.07818749 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.081683739 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.076399936 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.077593065 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.079864901 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.08002341 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.084980662 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.078279944 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.081482186 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.081050664 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.07802637 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.081942473 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.084804 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.081808791 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.101364206 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.087624517 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.078778884 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.077167383 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.095573281 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.0818358 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.079058501 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.085722643 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.084344952 seconds)
  done (took 10.919866937 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.10458928 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.080573882 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.100238389 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.107762298 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.090074098 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.085049728 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.094263767 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.079432675 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.096732626 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.077777397 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.089086864 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.077070401 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.093381559 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.089540736 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.081478432 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.091738269 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.082268739 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.102708141 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.095599153 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.07731314 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.090023965 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.093075967 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.093233798 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.098322008 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.098204685 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.099219076 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.09263636 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.082161285 seconds)
  done (took 4.706676097 seconds)
done (took 45.760503798 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.20801678 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.389530379 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.184305573 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.658750133 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.368342978 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.200069125 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.340207244 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.187242093 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.452405374 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.246364063 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 4.089034736 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.840498005 seconds)
done (took 73.347361948 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.355362274 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.370881051 seconds)
    (2/2) benchmarking "String"...
    done (took 2.435637386 seconds)
  done (took 6.933776925 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.610815592 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.174127684 seconds)
    (3/3) benchmarking "different"...
    done (took 2.214977386 seconds)
  done (took 9.104088066 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.510636378 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 7.106664239 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.515215615 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.158761848 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.168689815 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 4.085538046 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.325865031 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.805929099 seconds)
  done (took 36.263874374 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 7.159440703 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.532968775 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.547911623 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.623967789 seconds)
  done (took 23.051103352 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.5998698 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.548558707 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.553830364 seconds)
    (4/4) benchmarking "different"...
    done (took 2.604026905 seconds)
  done (took 12.48239672 seconds)
done (took 100.948673472 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.157660795 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.29358625 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.195199479 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.350263886 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.222399903 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.253611397 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.17982034 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.199118448 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.171444306 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.180120221 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 7.17028079 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.167747301 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.18639832 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.197498633 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.172750447 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.213453856 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.294690584 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.1748454 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.162982364 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.289432767 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.383953562 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.178844478 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.181404961 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.254050681 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.930339274 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.221849161 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.434613962 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.173588095 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.807179316 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.188572447 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.192549957 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.168076662 seconds)
  done (took 216.446216497 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.165827579 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 5.062400794 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 5.097761447 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.173704028 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.62814368 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.504260565 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.004893099 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.658453895 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.162093125 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.167603518 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 4.228544239 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.164218608 seconds)
    (13/36) benchmarking "trsv"...
    done (took 4.318827013 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.857753033 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.197884639 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.221475329 seconds)
    (17/36) benchmarking "trmv"...
    done (took 4.070297174 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.9815946 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.200721913 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.085899443 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.172337404 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.689798583 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.644012275 seconds)
    (24/36) benchmarking "symv!"...
    done (took 4.032556746 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.169323363 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.176665482 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.321998789 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.207533181 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.501002566 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 4.022272866 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.173583666 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.213365855 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.666645508 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.390925337 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.16185513 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.163200788 seconds)
  done (took 193.756043229 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.394192115 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.188270802 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.195446877 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.27905495 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.352674206 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 5.233881195 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.163002569 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.158403036 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.157989507 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.170292708 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.164087793 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.248494064 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.597431103 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.25212504 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.203391339 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.185699571 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.454671581 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.171077845 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.165152216 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.165641574 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.272704623 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.514887888 seconds)
    (22/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.182562517 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.283572664 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.175828308 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.208208547 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.287646943 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.167190125 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.163261951 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.28359064 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.161701758 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.295184 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.282606775 seconds)
    (33/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.168217572 seconds)
    (34/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.222583421 seconds)
    (35/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.169374084 seconds)
    (36/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.635291394 seconds)
    (37/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.162249873 seconds)
    (38/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.163175988 seconds)
    (39/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.162702947 seconds)
    (40/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.205692458 seconds)
    (41/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.166139979 seconds)
    (42/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 6.424195035 seconds)
    (43/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.265234641 seconds)
    (44/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.174532206 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.194837085 seconds)
    (46/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.628430764 seconds)
    (47/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.76493349 seconds)
    (48/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.16302756 seconds)
    (49/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.159389731 seconds)
    (50/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.159765697 seconds)
    (51/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.165623266 seconds)
    (52/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.166724886 seconds)
    (53/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.319863454 seconds)
    (54/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.165269536 seconds)
    (55/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.198691352 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 12.21117706 seconds)
    (57/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.167821767 seconds)
    (58/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.185918681 seconds)
    (59/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.161141645 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.165273906 seconds)
    (61/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.163574959 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.168393463 seconds)
    (63/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.16788798 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.207213803 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.885186112 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.752870432 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.525031715 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.01446554 seconds)
    (69/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.168462145 seconds)
    (70/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 13.75715408 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.227085618 seconds)
    (72/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.171425483 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.165574686 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.344560991 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.163775052 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.170830159 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.166655173 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.168909746 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.124844612 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.109486287 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.171780511 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.293002231 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.167142888 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.185715552 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.59945428 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.536084545 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.163743449 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.18633321 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.23059071 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.205215242 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.155499646 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.164721003 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.127101532 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.164374335 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.160621411 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.161562099 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.635603843 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.16219923 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.561943319 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.554173766 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.252205285 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.595394595 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.274687709 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.168953975 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.160413127 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.187018443 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.182608944 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.166726444 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.202155507 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.203147553 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.209573616 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.22131373 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.163500499 seconds)
    (114/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.164281543 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.160418511 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.167782898 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.184917898 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.187276737 seconds)
  done (took 456.861498372 seconds)
done (took 871.616657157 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.793578354 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.932853481 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.749544577 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.838900425 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.761003036 seconds)
  done (took 16.160423992 seconds)
done (took 18.258448427 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.201732175 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.184172423 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.175149324 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.252842212 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.190314551 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.179310922 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.225402297 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.218895014 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.203672565 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.177188009 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.247468229 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.184362004 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.202252403 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.209512537 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.284143382 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.216898968 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.19676154 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.192721366 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.255671369 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.182850822 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.180163162 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.181931688 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.178641963 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.243460346 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.300044293 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.19052371 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.18759604 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.246101284 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.201652333 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.242090178 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.243067789 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.215327473 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.214498656 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.296566984 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.26611694 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.296826391 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.200286604 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.271736551 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.192273602 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.282938191 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.260085379 seconds)
  done (took 93.163282664 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.185616179 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.377435642 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.451566476 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.222680539 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.186262263 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.49392268 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.245776015 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.343682741 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.343264415 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.459464852 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.466535786 seconds)
  done (took 27.881361168 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.185498495 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.342926721 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.455888522 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.227588796 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.191912808 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.464392616 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.25309157 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.36259162 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.348923147 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.464996323 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.479087329 seconds)
  done (took 27.890948904 seconds)
done (took 151.024643332 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.706693864 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.251661187 seconds)
  done (took 7.054310125 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.177104553 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.196020147 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.364731178 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.192167626 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.189692939 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.192933214 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.214283753 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.223469379 seconds)
  done (took 19.863014704 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.208202109 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.18312404 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.18347656 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.18810748 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.223245477 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.196709693 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.196447 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.172768355 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.1851904 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.190928109 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.18188425 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.184615799 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.181756077 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.188534646 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.184079553 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.184837296 seconds)
  done (took 37.156661413 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 2.196746542 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 2.181369289 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.181470903 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 2.182921352 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 2.184023106 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 2.225162242 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.195314458 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 2.183287626 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 2.184345279 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 2.183147214 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 2.183126708 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 2.17714067 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.176317363 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 2.17995966 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.174511864 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 2.177360168 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 2.192496354 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.1906769 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 2.216386809 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 2.175794977 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 2.174687871 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 2.182100627 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.183727498 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 2.180002235 seconds)
  done (took 54.597219719 seconds)
done (took 120.786496614 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.785662513 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 4.193707468 seconds)
  done (took 10.091179671 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.184449351 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.181681675 seconds)
  done (took 6.557829734 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.185875467 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.180924698 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.178627452 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.184225681 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.180261696 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.179636771 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.180619937 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.17503858 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.180713744 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.193055246 seconds)
  done (took 23.924439724 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.181810552 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.181665292 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.178206471 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.184407295 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.177180535 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.179743419 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.184543205 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.182390166 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.201677067 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.195815292 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.191734958 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.186713963 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.2002319 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.195425686 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.206385312 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.199282782 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.201791775 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.205940872 seconds)
  done (took 41.544864767 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.205979428 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.203197163 seconds)
  done (took 6.531879679 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.196539555 seconds)
    (2/7) benchmarking "second"...
    done (took 2.202896677 seconds)
    (3/7) benchmarking "month"...
    done (took 2.206954946 seconds)
    (4/7) benchmarking "year"...
    done (took 2.2108181 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.202174158 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.202659209 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.202386598 seconds)
  done (took 17.551404956 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.204193297 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.344792425 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.38531267 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.83843986 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.225686718 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.220279432 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 3.171079758 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.202941377 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.206572976 seconds)
  done (took 23.926658617 seconds)
done (took 132.231042006 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.845492021 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.220577144 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.794893554 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.310409052 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.270696177 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.537173845 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.23225978 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.741810235 seconds)
done (took 47.081970309 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.269582127 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.207257224 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.244967056 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.233873441 seconds)
  done (took 23.819288076 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.201914831 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 4.125314556 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.234762862 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.39891125 seconds)
  done (took 25.372607041 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.737719074 seconds)
    (2/2) benchmarking "read"...
    done (took 2.61539268 seconds)
  done (took 7.48791025 seconds)
done (took 66.100966682 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.202622172 seconds)
    (2/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.205343766 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.198658589 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.208637784 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.20427965 seconds)
    (6/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.207595295 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.20009542 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.20045025 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.197996417 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.204722492 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 2.202548404 seconds)
    (12/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.20950739 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.202965903 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.199934816 seconds)
    (15/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.221534572 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.199956595 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.207774161 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.198710048 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.198577571 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.205637156 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.198487707 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.196530535 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.214847669 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.224092727 seconds)
  done (took 55.043458635 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.204545661 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.205456812 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.194372625 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.203075416 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.197457529 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.19618314 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.194970595 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.206600067 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.197712189 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.201082005 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.204667771 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.199329151 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.199595383 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.194143632 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.202878887 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.200136221 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.202576109 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.21617002 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.195578029 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.20113906 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.197343775 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.203338874 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.202060206 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.195935775 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.202048039 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.219817906 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.230204756 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.206637473 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.206554057 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.20122796 seconds)
  done (took 68.222062686 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.19987585 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.199804057 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.199653662 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.20392181 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.1996158 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.204268359 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.204507597 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.211194853 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.207778162 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.209902417 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.21002194 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.21689919 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.219219186 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.213086275 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.215480635 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.212683694 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.216333937 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.217693688 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.216145278 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.215020121 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.222610741 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.231359298 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.227774128 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.223283955 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.218090117 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.217347416 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.218561731 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.216048324 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.228667952 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.220534456 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.224837627 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.222715785 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.224097431 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.222004872 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.218874585 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.223817227 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.222117917 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.220267957 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.223465337 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.221781173 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.224666032 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.229634904 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.221646598 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.222589594 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.227286662 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.2221774 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.235954427 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.234534138 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.227142459 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.222692126 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.220698398 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.219807447 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.219432372 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.222016323 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.252430144 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.247479624 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.218968845 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.221067119 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.217482937 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.215221988 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.212360105 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.214072053 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.208587627 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.212863607 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.211427393 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.214946923 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.228134819 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.219794979 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.215594575 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.218940808 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.222370851 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.216326689 seconds)
  done (took 161.889389833 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.216914913 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.22929737 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.237205829 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.221128581 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.219370134 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.21919673 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.218475291 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.225018506 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.224670962 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.220822903 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.224162455 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.223802143 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.221620413 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.21733503 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.220086108 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.218391399 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.217812689 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.220330646 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.216445118 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.222096222 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.229425214 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.221099395 seconds)
  done (took 51.02180452 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.215164995 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.218318132 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.210765364 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.218142332 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.229415985 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.235191239 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.251028011 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.226254628 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.224296285 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.221217024 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.227330585 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.224446977 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.222243713 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.230724512 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.22944296 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.220874982 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.225612358 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.225012829 seconds)
  done (took 42.204166246 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.226781934 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.220356391 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.226665343 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.227130326 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.224343225 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.23248956 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.224546138 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.226343628 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.22052872 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.2275488 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.223257858 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.227683651 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.225591986 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.239068402 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.228774282 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.226487081 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.2262565 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.228334549 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.224802096 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.222030928 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.223683514 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.232371699 seconds)
  done (took 51.130564973 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.222184584 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.224114622 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.226260402 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.220809296 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.231225117 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.225712309 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.225139738 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.224657843 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.223219109 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.237659002 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.226828543 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.229756315 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.226837734 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.21800987 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.228057699 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.22463737 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.227379205 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.246820352 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.225288026 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.225301186 seconds)
  done (took 46.692018631 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.22202953 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.225059245 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.220906626 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.226112453 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.224625176 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.232723117 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.223105494 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.230651385 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.220862262 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.226969558 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.224359888 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.226456186 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.22417763 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.225084289 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.222298989 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.23507329 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.223207883 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.224481505 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.223844692 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.224617998 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.227431847 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.224067993 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.229804886 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.250396804 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.236093242 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.223923429 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.228300205 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.223856221 seconds)
  done (took 64.496943984 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.225122769 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.228972206 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.233660134 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.232003141 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.22362909 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.223401882 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.22409973 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.216172383 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.225634633 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.212143266 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.222127401 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.226384066 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.216392789 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.224521543 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.224351668 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.21983148 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.217397444 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.219106958 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.229733869 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.257459885 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.228589904 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.219432483 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.242727902 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.227535657 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.218421329 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.224388563 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.22808447 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.22088239 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.219378775 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.21892052 seconds)
  done (took 68.904166098 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.250017771 seconds)
    (2/2) benchmarking "in"...
    done (took 2.239172731 seconds)
  done (took 6.632984847 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.214527233 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.215288157 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.223644088 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.211570825 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.216613286 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.218456316 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.215651445 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.229399358 seconds)
  done (took 19.892216709 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.218812818 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.226674374 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.213041462 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.211802885 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.214350666 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.230382504 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.228201533 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.241997897 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.220975903 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.223588862 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.22728223 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.216961081 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.224948478 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.221336742 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.213512251 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.216104608 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.222980159 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.215636856 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.215390862 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.220605676 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.218694627 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.219550992 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.216661218 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.214327941 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.216211412 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.226544027 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.229780384 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.221541899 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.2192213 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.217328112 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.222688481 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.214718975 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.222754813 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.222125278 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.241756708 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.231347364 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.228750762 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.2219169 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.223792226 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.219139699 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.221807987 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.220478083 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.219085874 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.228207624 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.223609017 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.217160693 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.221174105 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.224032676 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.224921292 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.234875877 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.238626845 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.231537663 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.237194461 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.225338103 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.225142172 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.2332184 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.230580531 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.231957893 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.233728628 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.237415398 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.254411997 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.266994166 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.247834235 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.232961954 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.236451218 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.243502347 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.263486502 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.230166862 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.23525815 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.238295033 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.236910099 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.228211133 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.232058106 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.232492571 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.246959228 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.245556672 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.234725714 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.230950036 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.244596928 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.230662265 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.231772164 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.233564686 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.232549577 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.239158912 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.241685202 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.271065136 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.244038608 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.251046751 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.229503765 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.232252332 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.231649954 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.230715516 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.229088206 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.231836423 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.233549523 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.241104516 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.23058865 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.225757743 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.221656529 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.278365792 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.273748878 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.247432235 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.230724452 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.239557281 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.240109266 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.266075571 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.254686764 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.222165571 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.238839813 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.231254716 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.234345968 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.219660535 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.227821531 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.239278389 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.230534717 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.247480335 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.253719752 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.240654538 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.226787832 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.237019873 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.270059904 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.231668656 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.238888367 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.26140492 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.228108491 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.232051786 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.23010434 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.24795382 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.222085885 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.220918306 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.222245971 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.212083747 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.229195717 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.218908861 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.220292035 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.21550873 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.215199914 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.220204248 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.21714642 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.220246636 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.223286703 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.237170798 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.233466669 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.235183821 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.22543438 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.226128252 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.218796629 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.226678758 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.222005599 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.225125845 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.229726382 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.218714648 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.223059309 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.220316753 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.215905706 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.219997868 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.221688888 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.223776703 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.222561352 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.232387395 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.216624365 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.222295967 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.223207204 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.221531056 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.218653937 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.221168233 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.223111565 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.228958513 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.230197956 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.224890089 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.23177361 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.220206609 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.224181589 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.23298874 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.22824881 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.229591214 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.237820965 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.228528424 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.232853489 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.237378538 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.23388439 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.246287884 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.226800337 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.234572157 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.226261811 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.226997412 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.242557888 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.230072266 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.236569965 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.268397821 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.226377151 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.229835174 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.251471838 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.24062549 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.232341913 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.232690938 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.258295073 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.234874737 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.232519997 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.225602987 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.227766756 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.231882687 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.228387542 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.230192526 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.228975987 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.229692217 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.227448604 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.227726804 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.230797664 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.229685906 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.232610976 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.228730835 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.229781292 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.242180975 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.226473615 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.232090611 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.226993356 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.231588487 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.237917606 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.230729495 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.235353894 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.232367788 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.253253324 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.251472225 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.230644719 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.233370875 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.230701763 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.865089665 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.232867429 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.234897537 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.233178383 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.234098505 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.223493814 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.228086395 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.223159805 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.225726992 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.232604713 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.235688676 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.231892375 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.223090821 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.242651685 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.229332687 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.228155583 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.228361663 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.227886095 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.231223971 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.229510415 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.229571276 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.226506285 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.257982729 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.249121991 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.235144683 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.236485721 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.235806936 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.234136639 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.232391782 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.234353249 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.24133524 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.242747912 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.243972993 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.229161997 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.236494225 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.23335343 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.229675112 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.237612656 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.232406617 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.247294693 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.259851689 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.229789742 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.233220935 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.236329961 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.231036678 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.226834253 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.233812534 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.231884184 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.231867087 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.253810645 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.24672506 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.239621997 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.228678478 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.235225714 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.22991699 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.228459527 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.232293479 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.229555543 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.227085298 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.222852535 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.232642273 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.227837017 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.242250423 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.228603357 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.232839595 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.23208569 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.228971701 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.254275192 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.224450651 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.226177857 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.242501324 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.229332037 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.228670093 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.233331807 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.230734975 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.230863169 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.240551242 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.25197717 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.232787568 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.230305596 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.235324721 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.243700138 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.232928634 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.242896676 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.231340973 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.238237518 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.229093504 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.22880386 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.236864842 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.237598269 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.249941351 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.234263179 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.238644728 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.242421505 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.249736869 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.232960115 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.244488395 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.237854317 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.240132201 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.236843346 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.274759027 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.256685214 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.244184111 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.265542747 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.246146748 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.240335378 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.237772944 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.24313238 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.252014744 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.239789906 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.246131713 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.242241854 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.237989327 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.23793355 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.239528429 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.246207912 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.237994252 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.241266287 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.251199129 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.240852144 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.260602775 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.250634806 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.235563587 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.247116034 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.244915266 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.247015477 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.239781742 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.24107609 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.251829309 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.267391722 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.249202698 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.239754962 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.234662474 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.244614562 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.253390252 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.24935287 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.246829115 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.239877877 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.239390919 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.239330041 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.261715066 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.276986047 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.241289015 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.240108158 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.248020753 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.24846006 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.231561369 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.252224581 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.221766129 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.252588091 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.242615803 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.244547426 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.25521086 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.297558178 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.292863678 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.243018481 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.244426557 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.259352239 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.256376657 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.235640819 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.245267219 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.244537029 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.256058228 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.291078747 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.240722069 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.242487557 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.243813374 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.234467864 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.24236873 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.234726998 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.231025655 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.23075427 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.233637538 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.233775892 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.241731198 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.237825284 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.232626073 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.236933772 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.24383684 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.230329722 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.234638846 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.23827725 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.250221514 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.242071929 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.256752651 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.237647126 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.244769701 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.228824532 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.235260104 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.23843433 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.246252436 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.237639383 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.229929703 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.230159822 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.241997332 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.234658123 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.234009772 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.237996033 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.244024134 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.240107223 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.260348545 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.24639237 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.236433995 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.234657777 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.241108878 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.244959428 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.235097819 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.238296657 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.239434545 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.255053593 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.246534743 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.252709908 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.236853563 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.241022731 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.246989413 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.244884835 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.246581842 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.25171585 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.245164986 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.245046963 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.246558793 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.250312178 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.245748345 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.244606515 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.242724887 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.241915842 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.245520401 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.261864258 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.244831577 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.238660837 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.247333593 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.245883484 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.249602159 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.247864552 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.248376597 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.250794378 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.25675181 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.272463739 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.249211958 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.243769568 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.245345858 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.251893799 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.254350705 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.244185056 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.247511785 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.250628574 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.25032138 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.242526468 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.24512896 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.250075823 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.241992381 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.255443081 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.249265792 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.24819105 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.259470806 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.246463136 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.253110928 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.252628461 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.251867842 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.245474716 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.25143075 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.248472413 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.253901542 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.295825372 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.262254828 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.257633829 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.259186859 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.25700696 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.253024633 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.249081576 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.247766459 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.245133383 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.244562537 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.256214085 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.244147686 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.24705538 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.246160412 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.241167997 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.243464779 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.243739976 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.24396505 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.263205049 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.243104673 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.257594267 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.255150117 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.246442815 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.246087432 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.248259737 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.249971803 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.264547316 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.266352827 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.26103864 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.251311467 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.248106177 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.248207414 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.257509071 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.258783423 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.248664232 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.246011255 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.251617873 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.281140433 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.286317726 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.259555209 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.284259153 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.241761093 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.242172306 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.241370781 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.24630254 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.254288852 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.248044856 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.242998466 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.253485006 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.243935404 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.238836977 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.248732516 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.241270315 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.23561797 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.252061997 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.272655451 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.244812853 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.236892169 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.241213391 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.235903003 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.241428025 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.235703072 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.240097476 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.241692863 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.23692384 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.24019998 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.240770714 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.253555446 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.238647788 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.25413298 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.238611965 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.244150901 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.269737452 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.255337227 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.243369485 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.241637747 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.24222962 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.243772946 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.244844295 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.240352644 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.245622073 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.265173541 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.27238529 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.256614948 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.243453372 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.244814553 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.239139646 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.241759541 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.241700182 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.255262444 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.254605522 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.244447379 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.246923182 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.260034711 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.237176266 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.253277994 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.245457047 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.251293824 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.253435464 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.252378995 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.2387269 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.245747146 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.241619002 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.252849348 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.256503375 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.252031787 seconds)
  done (took 1337.327827479 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.252857473 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.260897545 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.270727757 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.250336387 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.250018892 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.248590192 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.249817209 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.24861441 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.250670579 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.248870235 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.247696347 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.250585882 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.250993589 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.252325617 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.252071712 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.252192175 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.249176006 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.258792559 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.257048526 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.247691635 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.2488458 seconds)
  done (took 49.466111854 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.253708708 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.250367241 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.251293789 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.255157615 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.250389504 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.267459281 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.2642909 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.252002771 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.252368379 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.249250576 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.249981506 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.250422618 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.249565636 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.248720649 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.243478521 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.282448201 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.310778227 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.284705842 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.257782061 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.243856012 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.244197999 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.246385093 seconds)
  done (took 51.832514528 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.256675235 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.256381141 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.229186308 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.283935184 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.2771741 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.24173501 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.247377765 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.24765086 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.243769838 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.255025128 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.258681526 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.282987929 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.248159951 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.248679327 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.28571857 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.256979751 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.363906936 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.242427288 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.239992611 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.241028387 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.24793865 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.24229082 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.239534922 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.241209838 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.240564636 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.239254678 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.251507984 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.240183195 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.243037655 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.2411491 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.244391609 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.237957129 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.238242211 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.244954559 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.242117441 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.244835177 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.284056381 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.277260509 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.259982582 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.266325924 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.270969945 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.289171166 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.26102373 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.259312999 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.266949289 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.259415791 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.258631104 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.261097426 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.269721106 seconds)
  done (took 112.737440513 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.261740702 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.272047459 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.255280137 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.264083715 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.258413401 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.258341151 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.26057468 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.256095184 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.266010558 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.269438443 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.266882463 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.272017884 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.264794351 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.268081696 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.260882919 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.263817585 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.264315399 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.273841683 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.269903749 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.264625738 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.262392608 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.262612185 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.26709121 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.264145224 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.264401968 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.266800305 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.259782683 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.266007309 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.280379988 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.268763235 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.271012582 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.266841 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.268153849 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.269015735 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.267901628 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.269536509 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.270849388 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.292808294 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.268747811 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.270425496 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.270502016 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.262765563 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.270818787 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.26769675 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.272137194 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.27567981 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.272174632 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.268096269 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.271267921 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.273643192 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.273251607 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.272779515 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.269587577 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.270830384 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.287976294 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.275835846 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.271623597 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.271934964 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.266518641 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.27380725 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.273307056 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.270093719 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.280280985 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.297477627 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.282750797 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.27098203 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.269558243 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.274833629 seconds)
  done (took 156.507919244 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.27854198 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.274546698 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.282605594 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.276083495 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.266699307 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.27420716 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.266470815 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.273208458 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.270276479 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.26451073 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.266897861 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.265580836 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.28451746 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.270616404 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.266264478 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.26921613 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.268942171 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.271814137 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.2645964 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.266091524 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.274454177 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.290762291 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.269545489 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.265924012 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.267664416 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.269846788 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.265900009 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.27514119 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.263986256 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.267737041 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.272297398 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.264341187 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.264338484 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.265371563 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.272104475 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.267512132 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.262895312 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.262660581 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.264693906 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.276369348 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.268889067 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.265301773 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.26889418 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.294508498 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.289853995 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.270137841 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.269273281 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.272134675 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.301984274 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.266059025 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.269785034 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.265200786 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.266493672 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.258835334 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.26801511 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.265451295 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.268842256 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.266128432 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.26703223 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.272146034 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.266448047 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.267714219 seconds)
  done (took 142.96778731 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.271501556 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.269818585 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.286596045 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.279018403 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.2748574 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.27257661 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.275526334 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.268195028 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.26964244 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.264014512 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.269480691 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.300961292 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.270534645 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.273912663 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.265691311 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.271314532 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.268008044 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.263763038 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.266202648 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.265260978 seconds)
  done (took 47.636936458 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.271273769 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.270349262 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.268104982 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.274099607 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.273539489 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.278261082 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.278251195 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.287975162 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.282798492 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.276116419 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.280924426 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.277334479 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.278748694 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.282048666 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.275836605 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.28999934 seconds)
  done (took 38.634456693 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.290461963 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.287923665 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.290765518 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.290659615 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.285886096 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.291966841 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.296313572 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.291957873 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.285319105 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.28469262 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.28666063 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.282453751 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.286848078 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.292286311 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.283897389 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.289127277 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.299574842 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.289756271 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.289639709 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.288933793 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.286911217 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.290930393 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.286794009 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.302142886 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.316624138 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.297050536 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.295308746 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.287448333 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.282691507 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.288450715 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.28934238 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.286993548 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.289895107 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.287619188 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.286961015 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.280006305 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.297403639 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.352598896 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.321111347 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.299111854 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.279398042 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.285961985 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.311550763 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.306744661 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.293809038 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.281088213 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.283297713 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.286819612 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.291030774 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.278134316 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.283967601 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.292021925 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.295472822 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.295717733 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.285689313 seconds)
  done (took 128.296143145 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.318296555 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.30981567 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.28899988 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.28621913 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.282878137 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.286910733 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.282224327 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.286126478 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.286376629 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.283392903 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.308702342 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.298887534 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.28028623 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.299290609 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.281998794 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.283016576 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.281694101 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.278760308 seconds)
  done (took 43.4334808 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.280514078 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.279263443 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.277755879 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.303386276 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.287396521 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.277073708 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.282026178 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.281364977 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.279082284 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.279621862 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.291902735 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.283441986 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.279133202 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.27727955 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.284464864 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.28168536 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.282336322 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.281940268 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.281034875 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.284774904 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.303478582 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.283209774 seconds)
  done (took 52.449121876 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.281468311 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.281746066 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.299517918 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.314980204 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.312817558 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.333906289 seconds)
  done (took 16.025842188 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.289418627 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.283329768 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.280785659 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.279215029 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.282268447 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.285396497 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.277368888 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.276375428 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.274644415 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.278215516 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.274298751 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.270560733 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.280941614 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.277889302 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.282825092 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.281172181 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.284137601 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.285408827 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.28640408 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.277957179 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.284138473 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.27847265 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.285525289 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.28445004 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.285005195 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.282911056 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.313050298 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.299423571 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.287007651 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.280287293 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.289632579 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.284167668 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.283037422 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.289063771 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.28985927 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.285856365 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.280288481 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.282017798 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.284976234 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.283687779 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.284421386 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.288530576 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.290400992 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.2954522 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.286736542 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.282798982 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.283699357 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.288452781 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.283513533 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.287432012 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.291181634 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.296165315 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.297646578 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.308221412 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.293498931 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.287388353 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.291642612 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.286644836 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.290568915 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.291995195 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.293531369 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.293111334 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.284994789 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.279661195 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.283021374 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.284320388 seconds)
  done (took 153.107099807 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.285209378 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.276945858 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.282262547 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.297288881 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.276210105 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.286067363 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.280908479 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.284429091 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.286225096 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.281542571 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.292920015 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.295594128 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.301710975 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.329420369 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.305099361 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.292196408 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.288216491 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.290894885 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.288184652 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.285337929 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.28669048 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.28736031 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.288580267 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.288538536 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.287619131 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.286471567 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.295908174 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.287940987 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.287203373 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.304716914 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.286712842 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.29230417 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.288178924 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.28261585 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.288210057 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.295874211 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.32180121 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.312235906 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.308741468 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.3085672 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.290939362 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.295145562 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.302334128 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.295900436 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.288843326 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.289718011 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.296138661 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.293809169 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.286143256 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.293477734 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.287821669 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.2862967 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.297066377 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.287417814 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.303823125 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.305763867 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.293395459 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.294025023 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.292648462 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.290369104 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.293298678 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.291642613 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.293948904 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.30651773 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.313116352 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.299867093 seconds)
  done (took 153.572316815 seconds)
done (took 3122.252843248 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.403678343 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.458229636 seconds)
  done (took 17.076668522 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.436480056 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.423548512 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.454959758 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.40935288 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.322415367 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.351044857 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.315943879 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.322764284 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.399428977 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.309513664 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.320877899 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.298382359 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.301549311 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.304308088 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.307086335 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.300210758 seconds)
  done (took 59.804503826 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.30868694 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.308408856 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.301143633 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.306322274 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.327605229 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.41818587 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.335214648 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.313485339 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.324502402 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.358237154 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.329807407 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.309631889 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.3229805 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.329112044 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.434938078 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.360500546 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.370663386 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.398643443 seconds)
  done (took 44.377593997 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.412386994 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.327029233 seconds)
  done (took 11.968996997 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.336241856 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.341025983 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.367356814 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.320803375 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.312728056 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.346812649 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.295231295 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.403723178 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.304735256 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.32188159 seconds)
  done (took 75.581580277 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.326867668 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.302890624 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.655600644 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.308593286 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.303901708 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.326763247 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.297324697 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.330240795 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.297011302 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.32449751 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.304159294 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.656850676 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.314652961 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.295802235 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.718390412 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.309303388 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.30112816 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.334547408 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.331369234 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.303635484 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.301291487 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.291608027 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.544889087 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 3.126850802 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.298264262 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.304418715 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.300650143 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.292288661 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.287852782 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.291895779 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.33075362 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.300520423 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.310761834 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.303012583 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.313960882 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.308230005 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.924527074 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.315398102 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.310624924 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.387205565 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.352932778 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.307470519 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.296359184 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.312659684 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.293363319 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.303891872 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 3.051631549 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.387407861 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.31038982 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.495776152 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.809677623 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.318289274 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.462636965 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.437328644 seconds)
  done (took 157.578462999 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.293866846 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.752172509 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.46005107 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.30341669 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.655247731 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.52369753 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.114599723 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.347628057 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.299102336 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.51008425 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.481989804 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.449087194 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.302913562 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.303771049 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.300959875 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.289304617 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.45999882 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.362257161 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.291415899 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.290005248 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.314451685 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.526041313 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.418113018 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.312223614 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.311789955 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.520265625 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.337130136 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.415886314 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.684021825 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.29146113 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.361219167 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.294599164 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.292076315 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.296199663 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.334309854 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.40647633 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.385988312 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.301562111 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.071995258 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.284445122 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.881114608 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.498908033 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.398278775 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.416004443 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.570453647 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.516751958 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.960917091 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.292775465 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 3.00141467 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.447880041 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.500884629 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.496632662 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.388304202 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.296497854 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.773820329 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.284076064 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.290686417 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.563920538 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.468253245 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.426336276 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.297161168 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.297169376 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.289508504 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.532242883 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.310870497 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.404754532 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.29838227 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.29889389 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.407379208 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.41289222 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.451223205 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.523839632 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.32797957 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.5414413 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 5.29298031 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.501790042 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.367410869 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.55119939 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.302849955 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.30868276 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.384307405 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.737616294 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.439958215 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.531383481 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.599194892 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.329076236 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.813532285 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.330624475 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.511017954 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.473615738 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.61985966 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.543277295 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.359548568 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.152826042 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.289537763 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.295622439 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.672000479 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.430281193 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.305561011 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.866394215 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.55001898 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 4.028644948 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.326049162 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.760565715 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.399108238 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.293205622 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.895361153 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.287451426 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.507134112 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.332811194 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.295175778 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.304036798 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.447003139 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.220575387 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.290560015 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.605363406 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.353597799 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.295205267 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.465994861 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.298289648 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.551753873 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.054380206 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.53513781 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.333499219 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.332547216 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.462535868 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.551297261 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.305818466 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.549183032 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.541628245 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.395050361 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.615731501 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.30311548 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.298635238 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.579190691 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.298916028 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.299022218 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.476051385 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.220402084 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.460118714 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.301050367 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.650563249 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.322356659 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.353321341 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.30914143 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.553096666 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.335600725 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.350468654 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.302267943 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.435588322 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.305581037 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.249807315 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.457435193 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.308632728 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.296193172 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.264091511 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.288824614 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.458108988 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.542851986 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.318491773 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.404099514 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.73166774 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.352027855 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.442315054 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.356581598 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.777647054 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.869781358 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.512783447 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.337322818 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.301163606 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.29465356 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.525991592 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.573135653 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.313571652 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.293906352 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.047623642 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.74890968 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.311522865 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.472613306 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.531465922 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.714159887 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.513502583 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.303266519 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.351010893 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.322136261 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.647115736 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.867992995 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.533238427 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.320927673 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.304909168 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.306157395 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.306107162 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.51471657 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.337972856 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 4.032879365 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.4530958 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.574294995 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.530400753 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.622108858 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.371964054 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.313842043 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.571447949 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.331043921 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.377418044 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.319560016 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.327776265 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.577503581 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.32203167 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.523514686 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.66271116 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.496273971 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.369508125 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.314203889 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.314808364 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.327065042 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.476986711 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.429084495 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.322892379 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.518502851 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.389743215 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.478644271 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.54240001 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.575165794 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.294124237 seconds)
  done (took 986.882082286 seconds)
done (took 1355.478009567 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.295080679 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.359417648 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.32011538 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.30799853 seconds)
  done (took 31.518714269 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.305165253 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.304735261 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.311287523 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.305849529 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.305376973 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.305092247 seconds)
  done (took 16.06233623 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.298960367 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.311694017 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.302002057 seconds)
  done (took 24.131562371 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.753903522 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.608058474 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.410330071 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.473617613 seconds)
  done (took 12.470966914 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.313379098 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.301895527 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.306085269 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.301967836 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.304291453 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.304392724 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.311398997 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.304111085 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.30726785 seconds)
  done (took 22.987426038 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.950786555 seconds)
done (took 116.362297078 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 3.032685087 seconds)
    (2/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.309198418 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.694091104 seconds)
    (4/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.841192109 seconds)
    (5/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.425900495 seconds)
    (6/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.328978855 seconds)
    (7/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.592938954 seconds)
    (8/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 3.142487556 seconds)
    (9/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.782368935 seconds)
    (10/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.313215232 seconds)
    (11/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.697592331 seconds)
    (12/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.30772675 seconds)
    (13/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.334287105 seconds)
    (14/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.439868993 seconds)
    (15/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.326696435 seconds)
    (16/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.445477758 seconds)
    (17/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.714924526 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.328246133 seconds)
    (19/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.332627546 seconds)
    (20/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 5.134011821 seconds)
    (21/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.484442616 seconds)
    (22/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.331500615 seconds)
    (23/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.318057521 seconds)
    (24/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.70054901 seconds)
    (25/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.310510676 seconds)
    (26/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.50430127 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.47156943 seconds)
    (28/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.890995328 seconds)
    (29/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.307700274 seconds)
    (30/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.911738476 seconds)
    (31/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.582614902 seconds)
    (32/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.838367229 seconds)
    (33/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.367913038 seconds)
    (34/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.325423936 seconds)
    (35/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.775483201 seconds)
    (36/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.323546805 seconds)
    (37/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 5.998308832 seconds)
    (38/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.340903994 seconds)
    (39/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.420967059 seconds)
    (40/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.668495388 seconds)
    (41/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.333007068 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.645937793 seconds)
    (43/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.371118025 seconds)
    (44/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.831904817 seconds)
    (45/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.527277371 seconds)
    (46/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.528276288 seconds)
    (47/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.73734996 seconds)
    (48/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.477359501 seconds)
    (49/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.834223071 seconds)
    (50/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.319909923 seconds)
    (51/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 4.938871985 seconds)
    (52/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.337196196 seconds)
    (53/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.434328642 seconds)
    (54/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 3.160737474 seconds)
    (55/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.821785709 seconds)
    (56/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.826494109 seconds)
    (57/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.304073632 seconds)
    (58/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.724784235 seconds)
    (59/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.399128355 seconds)
    (60/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.514376489 seconds)
    (61/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.404787043 seconds)
    (62/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.620544492 seconds)
    (63/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.509456646 seconds)
    (64/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.735740207 seconds)
    (65/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.400952341 seconds)
    (66/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.461603527 seconds)
    (67/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.608986805 seconds)
    (68/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.334197722 seconds)
    (69/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.454533059 seconds)
    (70/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.480993475 seconds)
    (71/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.547195345 seconds)
    (72/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.517608891 seconds)
    (73/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.497992813 seconds)
    (74/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.344548703 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.569732664 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 3.103256715 seconds)
    (77/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.31620674 seconds)
    (78/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 4.361975682 seconds)
    (79/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.760070147 seconds)
    (80/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.327318859 seconds)
    (81/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.429019026 seconds)
    (82/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.323554264 seconds)
    (83/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.456688203 seconds)
    (84/341) benchmarking ("sort", Int8, false)...
    done (took 5.8969356 seconds)
    (85/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.338912201 seconds)
    (86/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 3.086405149 seconds)
    (87/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.283020774 seconds)
    (88/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.707224004 seconds)
    (89/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.311215178 seconds)
    (90/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 4.342111565 seconds)
    (91/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.694141115 seconds)
    (92/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.474444069 seconds)
    (93/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.618031061 seconds)
    (94/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.313013788 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 5.044087955 seconds)
    (96/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.349127163 seconds)
    (97/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.332587795 seconds)
    (98/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.45817932 seconds)
    (99/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.387499695 seconds)
    (100/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.178851635 seconds)
    (101/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.91807297 seconds)
    (102/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.401678003 seconds)
    (103/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.015902999 seconds)
    (104/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.195197556 seconds)
    (105/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.267022519 seconds)
    (106/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.871812961 seconds)
    (107/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.047460849 seconds)
    (108/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 4.680847375 seconds)
    (109/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.035559436 seconds)
    (110/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.134386189 seconds)
    (111/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.33895887 seconds)
    (112/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.128668642 seconds)
    (113/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.647005358 seconds)
    (114/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.323826331 seconds)
    (115/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.518831504 seconds)
    (116/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.047008839 seconds)
    (117/341) benchmarking ("map", abs, Int64, true)...
    done (took 3.966063326 seconds)
    (118/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.011068245 seconds)
    (119/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 9.250241628 seconds)
    (120/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.581858218 seconds)
    (121/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.239387468 seconds)
    (122/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.400607194 seconds)
    (123/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.158666785 seconds)
    (124/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.402299316 seconds)
    (125/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.520466776 seconds)
    (126/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.170807846 seconds)
    (127/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.488616108 seconds)
    (128/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.166403873 seconds)
    (129/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.016176347 seconds)
    (130/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.101978002 seconds)
    (131/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.35744492 seconds)
    (132/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.44122531 seconds)
    (133/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.076903526 seconds)
    (134/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.649605568 seconds)
    (135/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.027917655 seconds)
    (136/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.115201719 seconds)
    (137/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.253263466 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.48194479 seconds)
    (139/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.294431897 seconds)
    (140/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.587832685 seconds)
    (141/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.310515897 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.028120603 seconds)
    (143/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.174924322 seconds)
    (144/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.789818633 seconds)
    (145/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.262962947 seconds)
    (146/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.061950582 seconds)
    (147/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 3.695113645 seconds)
    (148/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.390538582 seconds)
    (149/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.06630495 seconds)
    (150/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.210436856 seconds)
    (151/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.209348924 seconds)
    (152/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.245248143 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.404194983 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.56344442 seconds)
    (155/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.301660671 seconds)
    (156/341) benchmarking ("sort", BigInt, false)...
    done (took 7.142631821 seconds)
    (157/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.473388229 seconds)
    (158/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.431925529 seconds)
    (159/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.192360537 seconds)
    (160/341) benchmarking ("sort", Bool, false)...
    done (took 2.336299953 seconds)
    (161/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.235497529 seconds)
    (162/341) benchmarking ("sort", Float32, false)...
    done (took 6.799496627 seconds)
    (163/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.138998513 seconds)
    (164/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.649395189 seconds)
    (165/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.123973375 seconds)
    (166/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.401525685 seconds)
    (167/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.61368729 seconds)
    (168/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.140964701 seconds)
    (169/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 4.193165004 seconds)
    (170/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.233581594 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.483827715 seconds)
    (172/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.095559169 seconds)
    (173/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.087636747 seconds)
    (174/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.217477267 seconds)
    (175/341) benchmarking ("sort", Int64, false)...
    done (took 6.78716875 seconds)
    (176/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.077248818 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.36522524 seconds)
    (178/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.211001679 seconds)
    (179/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.085504024 seconds)
    (180/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.36736531 seconds)
    (181/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.137625469 seconds)
    (182/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.041885607 seconds)
    (183/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.425021912 seconds)
    (184/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.300141167 seconds)
    (185/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.225099885 seconds)
    (186/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.268098418 seconds)
    (187/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.081163142 seconds)
    (188/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.354520933 seconds)
    (189/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.151884658 seconds)
    (190/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.778659697 seconds)
    (191/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.189347674 seconds)
    (192/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.080025917 seconds)
    (193/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.35509537 seconds)
    (194/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.446232988 seconds)
    (195/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.34198096 seconds)
    (196/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.396898872 seconds)
    (197/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.692081235 seconds)
    (198/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.23801142 seconds)
    (199/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.562831907 seconds)
    (200/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.514691928 seconds)
    (201/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.418587068 seconds)
    (202/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.377043897 seconds)
    (203/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 8.546259718 seconds)
    (204/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.259318717 seconds)
    (205/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.308453825 seconds)
    (206/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.238345172 seconds)
    (207/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.117590641 seconds)
    (208/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.3406548 seconds)
    (209/341) benchmarking ("sort", Float64, false)...
    done (took 7.043195628 seconds)
    (210/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.171488142 seconds)
    (211/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.446495743 seconds)
    (212/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.286128725 seconds)
    (213/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.104245244 seconds)
    (214/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.284168751 seconds)
    (215/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.252954258 seconds)
    (216/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.544435734 seconds)
    (217/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.503214807 seconds)
    (218/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.349442476 seconds)
    (219/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.613647306 seconds)
    (220/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.077276908 seconds)
    (221/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 4.642973256 seconds)
    (222/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.376894113 seconds)
    (223/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.036224026 seconds)
    (224/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.665621333 seconds)
    (225/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.405039166 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 4.363406347 seconds)
    (227/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.359895016 seconds)
    (228/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.281061253 seconds)
    (229/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.220369205 seconds)
    (230/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.234080038 seconds)
    (231/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.068656101 seconds)
    (232/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.500765119 seconds)
    (233/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.134846597 seconds)
    (234/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.077405561 seconds)
    (235/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.256802849 seconds)
    (236/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.566309621 seconds)
    (237/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.168109124 seconds)
    (238/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.570535359 seconds)
    (239/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.054094015 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.041096836 seconds)
    (241/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.654746521 seconds)
    (242/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.26418947 seconds)
    (243/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.049724701 seconds)
    (244/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.363716235 seconds)
    (245/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.170661001 seconds)
    (246/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.322466577 seconds)
    (247/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.429575199 seconds)
    (248/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.220839065 seconds)
    (249/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.413175897 seconds)
    (250/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.371777695 seconds)
    (251/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.086023464 seconds)
    (252/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.746643731 seconds)
    (253/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.441373148 seconds)
    (254/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.139704282 seconds)
    (255/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.012225984 seconds)
    (256/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.137570044 seconds)
    (257/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.026985253 seconds)
    (258/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.02821614 seconds)
    (259/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.099940343 seconds)
    (260/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.513275665 seconds)
    (261/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.028805219 seconds)
    (262/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.260298577 seconds)
    (263/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.804352826 seconds)
    (264/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.022135278 seconds)
    (265/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 5.124594682 seconds)
    (266/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.168703626 seconds)
    (267/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.348257465 seconds)
    (268/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.191134322 seconds)
    (269/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.03972045 seconds)
    (270/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.138114962 seconds)
    (271/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.864519061 seconds)
    (272/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.562514071 seconds)
    (273/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.436613298 seconds)
    (274/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.02993256 seconds)
    (275/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 4.996008654 seconds)
    (276/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.35229719 seconds)
    (277/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.086214411 seconds)
    (278/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.023442623 seconds)
    (279/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.134088476 seconds)
    (280/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.25530636 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.057442092 seconds)
    (282/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.030256252 seconds)
    (283/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.016766138 seconds)
    (284/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.142262018 seconds)
    (285/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.560217911 seconds)
    (286/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.458318605 seconds)
    (287/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.388567131 seconds)
    (288/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.331923639 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.988582642 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.033129378 seconds)
    (291/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.041646428 seconds)
    (292/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.161435443 seconds)
    (293/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.616492702 seconds)
    (294/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.035538319 seconds)
    (295/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.162758638 seconds)
    (296/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.274716242 seconds)
    (297/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.16633697 seconds)
    (298/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.159888782 seconds)
    (299/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.359468325 seconds)
    (300/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.361392885 seconds)
    (301/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.40474152 seconds)
    (302/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.476192811 seconds)
    (303/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.20852619 seconds)
    (304/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.915400312 seconds)
    (305/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.020136305 seconds)
    (306/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 4.948661663 seconds)
    (307/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.093978675 seconds)
    (308/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.068669036 seconds)
    (309/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.48021325 seconds)
    (310/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.459822429 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.148658873 seconds)
    (312/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.163391567 seconds)
    (313/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.541510999 seconds)
    (314/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.300035218 seconds)
    (315/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.026537176 seconds)
    (316/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.12986543 seconds)
    (317/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.03622282 seconds)
    (318/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.212890582 seconds)
    (319/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.168621128 seconds)
    (320/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.35999952 seconds)
    (321/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.582406001 seconds)
    (322/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.898378243 seconds)
    (323/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.031051646 seconds)
    (324/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.474438957 seconds)
    (325/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.16702752 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.192453284 seconds)
    (327/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.03201331 seconds)
    (328/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.021015779 seconds)
    (329/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.182039863 seconds)
    (330/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.320960112 seconds)
    (331/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.347353669 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.898441546 seconds)
    (333/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.033945983 seconds)
    (334/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 3.889995192 seconds)
    (335/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.151432967 seconds)
    (336/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.027638298 seconds)
    (337/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.935162516 seconds)
    (338/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.745783325 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.173054312 seconds)
    (340/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.053933679 seconds)
    (341/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.024604773 seconds)
  done (took 1224.079261715 seconds)
done (took 1226.449837328 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.098287609 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.022915277 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.601422409 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.044117779 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.024423438 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.028187738 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.572924148 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.058300641 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.030085752 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.571835682 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.038170101 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.021886016 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.031587768 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.043417068 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.035856435 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.039556623 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.03203602 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.046171096 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.038759261 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.025961918 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.109624656 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.026299954 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.021198416 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.069182754 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.027079175 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.036909727 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.048867067 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.096889943 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.090178333 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.027537239 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.02802613 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.424505464 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.084421659 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.028341902 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.032438292 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.029409098 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.028183053 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.032602433 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.047175723 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.037290831 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.030036393 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.040260839 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.025537208 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.024734436 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.021493347 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.020892208 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.024310537 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.11786594 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.034990371 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.436900556 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.094146676 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.04451889 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.100276716 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.035173386 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.025973964 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.025705341 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.093117275 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.029026177 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.028526864 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.434766197 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.151987292 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.034270031 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.436515455 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.104238342 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.039813447 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.042140669 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.029800532 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.044198616 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.425870491 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.628927601 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.062291239 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.048305701 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.026037323 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.026544199 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.036354241 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.574645117 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.047690469 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.709991028 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.060443737 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.03436815 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.032577033 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.02799906 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.027362256 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.035722194 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.052199077 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.030304315 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.03403124 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.035331942 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.039348184 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.431641788 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.08293423 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.604522488 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.042685785 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.04587738 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.050303701 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.707129655 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.059743113 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.043836472 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.028923784 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.42677684 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.076505728 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.046386918 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.028274931 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.034808835 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.124748977 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.049306531 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.050673277 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.030776378 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.051458725 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.033145512 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.027049887 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.037893219 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.050153079 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.044526413 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.0352305 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.026411159 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.041093007 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.035010992 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.050241653 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.045118048 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.038244517 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.035986452 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.027233678 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.074757898 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.051344005 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.035805279 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.123780428 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.036140579 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.130875902 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.037555471 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.034346487 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.028015083 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.438976929 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.08214433 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.052130379 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.032334555 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.052647365 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.052640399 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.038699734 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.037349243 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.044013662 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.035728515 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.076915785 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.028901757 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.053109462 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.075917445 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.040663716 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.034763554 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.047124112 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.052127814 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.058442739 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.039010954 seconds)
done (took 321.535631752 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.086144292 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.368341787 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.119257947 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.02902804 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.105751639 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.09056806 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.028494956 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.027664239 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.028870747 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.46622637 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.029956569 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.029403249 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.381465525 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.033398395 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.086044965 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.030751024 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.032371144 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.307937035 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.032293619 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.092360764 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.072104999 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.037041622 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.033903265 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.503055174 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.034321633 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.040639337 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.092671063 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.029603149 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.303337039 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.04077654 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.047788587 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.303507094 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.096295416 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.039211073 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.0336613 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.029520278 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.106395461 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.037355033 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.083942382 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.083851612 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.121115073 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.0387313 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.034636766 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.060288714 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.037099521 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.034091994 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.030644596 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.03639708 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.030393309 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.040367119 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.304672937 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.031793652 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.031950415 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.032303208 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.031525834 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.035737291 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.03240708 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.035505947 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.096306826 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.039116604 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.085331163 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.464757933 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.469402326 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.031969624 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.048398967 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.032026121 seconds)
  done (took 161.684291303 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.117683078 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.131835527 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.115386884 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.046113919 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.097494163 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.126909376 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.041040568 seconds)
  done (took 16.629714788 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.042310576 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.03217816 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.067692022 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.061835451 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.037949398 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.210541789 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.048832817 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.034584657 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.064241387 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.036301605 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.396906766 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.063439388 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.034563661 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.048005716 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.053817446 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.070064097 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.037081347 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.034435956 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.141094123 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.110382627 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.037097128 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.043313706 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.078609462 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.05135973 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.034026848 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.03351991 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.049019853 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.044077657 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.033311842 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.034776389 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.033235974 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.055615953 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.038819077 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.067247184 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.039265937 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.036094441 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.059548738 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.036099721 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.034849279 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.423453695 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.052964104 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.074495255 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.067016217 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.03609055 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.036474606 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.067039678 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.040319604 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.037728154 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.034697366 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.035334059 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.074048664 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.035335832 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.035742134 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.036339999 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.073506585 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.039696603 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.042787055 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.04239651 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.040872816 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.03694633 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.034534714 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.114268219 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.070039835 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.036623846 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.067909916 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.082041007 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.040852643 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.040283627 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.036407408 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.069586494 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.036205896 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.070512551 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.037445037 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.130419571 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.04324525 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.229860167 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.085167291 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.057441233 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.053978604 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.019089401 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.101909997 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.095264486 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.124000162 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.096552301 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.145845612 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.076281781 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.039538768 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.044456274 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.087648139 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.355170021 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.390848341 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.334239849 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.348013156 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.55257937 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.497997456 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.521941741 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.214610511 seconds)
  done (took 208.17202967 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.15986872 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.139552295 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.152270289 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.134344974 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.05781603 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.090253338 seconds)
  done (took 14.782213098 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.057576483 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.048134678 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.043867602 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.046599574 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.04863892 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.050010466 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.052795201 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.061922675 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.049722989 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.045782183 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.046177087 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.047432131 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.049719099 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.049326938 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.049088566 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.049629147 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.050985159 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.048032457 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.046498526 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.101224005 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.31966652 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.126635955 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.161459036 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.085135031 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.173563049 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.07147093 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.05665489 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.044813656 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.062211036 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.05972742 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.056080914 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.050543005 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.056909574 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.058366561 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.047346354 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.050184385 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.048837346 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.091710212 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.1168577 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.117125246 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.118226298 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.135825787 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.141534093 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.191197905 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.055584529 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.177132599 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.159440652 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.080072324 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.059485221 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.049128048 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.050361192 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.053085544 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.054292924 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.052344388 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.058191208 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.05675169 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.05066527 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.047870966 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.048011974 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.053953754 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.050178885 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.051132328 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.058886803 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.0573444 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.0532922 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.047371153 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.053210984 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.057763978 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.054265878 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.044171763 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.045627243 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.046407376 seconds)
  done (took 151.181725185 seconds)
done (took 554.405037016 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.404425547 seconds)
  done (took 9.372000862 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.229382071 seconds)
  done (took 9.333708027 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.607911845 seconds)
  done (took 14.596522357 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.068146975 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.071408862 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.055329356 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.058648126 seconds)
  done (took 30.24208048 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.30907179 seconds)
  done (took 9.285151621 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.066654071 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.04856847 seconds)
  done (took 16.17673285 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.292112218 seconds)
  done (took 9.343886665 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.549583685 seconds)
  done (took 9.609070195 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.14726932 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.127519545 seconds)
  done (took 16.335184764 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.0813198 seconds)
  done (took 9.062917363 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.68499021 seconds)
  done (took 10.807837236 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.076187305 seconds)
  done (took 9.102352367 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.153710559 seconds)
  done (took 9.192543125 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.101680164 seconds)
  done (took 10.135060028 seconds)
done (took 174.564576233 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.116597715 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.102658393 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.098236911 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.353266187 seconds)
  done (took 30.777134597 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.389745787 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.429765563 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.40705214 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.396764978 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.393653497 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.440549177 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.417513493 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.420194513 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.390252434 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.46658818 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.374859019 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.394094432 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.401894282 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.399711447 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.381799448 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.451235686 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.441170676 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.38666666 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.416132582 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.374464288 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.409348145 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.449485146 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.400723793 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.316843156 seconds)
  done (took 60.001867664 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.594162743 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.411351038 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.544611082 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.416076409 seconds)
  done (took 12.256107416 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.348360005 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.423647817 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.388770397 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.378496437 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.448255322 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.52079089 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.417404313 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.614305062 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.490231905 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.565697999 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.376516319 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.373573593 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.394260958 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.416460703 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.544904229 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.346622402 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.348100363 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.561057526 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.437931481 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.578632854 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.334009253 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.437017492 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.421045548 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.400581092 seconds)
  done (took 60.854738059 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.34978499 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.369141007 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.382706434 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.370748157 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.316245485 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.364190179 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.391798155 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.364220882 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.418724074 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.351608888 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.379549677 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.382415281 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.37319927 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.364108582 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.362472069 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.371145181 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.389637792 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.35534855 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.354973678 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.355552512 seconds)
  done (took 49.626559266 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.221367428 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.421798853 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.387625868 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.322947169 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.089710317 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.060789913 seconds)
  done (took 33.722662836 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.087608329 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.10427677 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.080762876 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.09961881 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.129776898 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.074979937 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.147039753 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.27304158 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.077716762 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.149426463 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.088801956 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.072390296 seconds)
  done (took 27.404308307 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.059115717 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.09191348 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.134306071 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.142064991 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.147188042 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.150570632 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.15707433 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.201611848 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.154205169 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.148846089 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.153077738 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.130336839 seconds)
  done (took 47.648126744 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.305055083 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.27895047 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.439684146 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.869402751 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.62845444 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.183456678 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.526157436 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.57261397 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.196441473 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.9800637 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.625789935 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.134875531 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.608585228 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.077301931 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.114937823 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.548199832 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.36597895 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.254489396 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.860500476 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.48585722 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.507607172 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.490554395 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.52888125 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.170510683 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.784173536 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.544333783 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.708992172 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.543023337 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.472921816 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.756836921 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.583742443 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.596820114 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.722579252 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.765224359 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.998413296 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.598573472 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.678350152 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.886772157 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.707304114 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.583709333 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.565671603 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.52276817 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.104995555 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.647692534 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.912718509 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.492782645 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.32906313 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.905922215 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.283615421 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.753337153 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.581742167 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.847432694 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.351741159 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.27081792 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.787337256 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.985780965 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.384759504 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.103394944 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.548804758 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.998539379 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.693131591 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.147120454 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.235157544 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.051301454 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.481391662 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.249246841 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.06202622 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.078375765 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.325296102 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.438832409 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.146270564 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.330368831 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.802359868 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.061746493 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.060133644 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.486121647 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.176820288 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.065877241 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.866377725 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.578799968 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.025270818 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.368689165 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.809022681 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.436172197 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.226890335 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.287339446 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.598003311 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.37777626 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.655973608 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.92191457 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.85272793 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.502577898 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.395944447 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.456824446 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.438575201 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.424850359 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.438785255 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.599660896 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.395724388 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.041365425 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.47160047 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.79151649 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.599048753 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.617784539 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.920055017 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.593970034 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 3.309477038 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.290370623 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.855786917 seconds)
    (110/608) benchmarking "5d"...
    done (took 4.243185205 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.491361971 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.662798714 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.732252456 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.677560827 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.595873512 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.336091601 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.016495488 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.90558097 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.798682824 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.548185067 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.539619157 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.637454259 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.642465043 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.51513489 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.497557148 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.575280048 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.403607862 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.366724982 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.581762646 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.663733961 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.556666627 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.016672191 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.651129379 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.351523798 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.575051433 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.670415446 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.002870928 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.64787254 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.619092631 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.97611019 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 6.192342158 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.428629339 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.582381597 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.352384996 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 3.031285527 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.613366353 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.668767081 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.642386468 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.643899889 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.633100797 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.604553497 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.791059784 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.532923302 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.646641532 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.427196222 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.116228578 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.047176217 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.611221415 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.346821018 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.525761846 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.972759052 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.657959069 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.475004171 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.623746725 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.693755927 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.636156588 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.457403841 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.678642736 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.776089025 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.07302271 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.933937424 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.26553327 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.952520285 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.391842503 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.470758091 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.564335775 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.728674982 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.564343608 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 5.501879865 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.373367791 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.399438547 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.9304419 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.251461757 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.79606031 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.912117104 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 3.021052563 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.62402074 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 3.307362722 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.949841656 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.415275658 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.617698421 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.032196837 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.508795555 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.534526949 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.895593214 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.387809992 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.636964495 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.216240672 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.247043314 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.191510644 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.177146825 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.18114018 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.263195236 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.337222436 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.333842494 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.30523304 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.167451608 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.210811064 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.133281301 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.165759902 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.272902746 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.597546793 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.762581199 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.275218342 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.250572956 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14875765 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.070443848 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.059251411 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.353242692 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.437849001 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.891763254 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.190731911 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.137771573 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.147955117 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.213046529 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.101870057 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.379132044 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.282700425 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.814944665 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.3920543 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.398740483 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.239694938 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.266466379 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.504983517 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.415886131 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.642164046 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.906636704 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.995641441 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 3.007734195 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.342012687 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.8969713 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.327463048 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.27383741 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.939337682 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.297777621 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.286113977 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.468664609 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 3.002543513 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.643299117 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.531043474 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.478022764 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.371099447 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.843527542 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.97872523 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.38121109 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.314925442 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.404055166 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.28187517 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.516050925 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.184114806 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.295315438 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.79744376 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.305534967 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.469849798 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.458172061 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.705238237 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.808356508 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.644256472 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.246329209 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.299844855 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.414886011 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.57130137 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.298804211 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.324265112 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.915256829 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.068065558 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 3.108996111 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.832240629 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.732814142 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.452791609 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.778397794 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.40662374 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.307260679 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.137489212 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.374177601 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.135906033 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.319473808 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.125976027 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.067113628 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.471948804 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.220346153 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.681926899 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.118090361 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.599341589 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.439119872 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.274027376 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.174024775 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.113154931 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.158033669 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.194831805 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.093671823 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.81494071 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.152559576 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.907160906 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.97537068 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.675857622 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.403022978 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.614259698 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.301638318 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.436620064 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.692394103 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.157124077 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.569754021 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.721976857 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.750227526 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.766522808 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.449681469 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.660661675 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.933774194 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.983208012 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.122852233 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.804222841 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.260547456 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.74070292 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 3.434931518 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.698686545 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.774674572 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.490347384 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.427950545 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.449112887 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.779856127 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.464374568 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.644945143 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.767732698 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.578767034 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.479701854 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.417075274 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.058872644 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.57189813 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.974936131 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.493765247 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.25557041 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.095093624 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.906103843 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.080592554 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.404042142 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.472168564 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.980645383 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.954855001 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.007770682 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.189578039 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154714462 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.457382844 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.331598306 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.377680064 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.804862067 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.082817966 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.098107173 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.410312354 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202061699 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.027282862 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 3.003157261 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.321985198 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.847031244 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.542795361 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.686616325 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.831583128 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.122196005 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.586932199 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.628179777 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 3.281047517 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.075006067 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.702199821 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.504200525 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.486299835 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.826789017 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.927497489 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.604312214 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.798754429 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.973010797 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.604120104 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.509985105 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.544637588 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.019012378 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 4.164509414 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.132559738 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.720917414 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.866045097 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.914251553 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.310941212 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 3.023604952 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.416919359 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.370185634 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.652067287 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.175353639 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.634253417 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.515823802 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.219888851 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.143559477 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.32949172 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.174135929 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.194904757 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.796981836 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.364883005 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.286485998 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.176319131 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.66779426 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.084381541 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.171763092 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.120937276 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.111731186 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.108929859 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.07650839 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.607100256 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.466610207 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.096889084 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.039786107 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.839192082 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.032900568 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.245983392 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.213085612 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.137418642 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.917067984 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.30022384 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.235798508 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.612072054 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.223803623 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.116772723 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.030233445 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.194532523 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.055362696 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.807485179 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.844678309 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102996481 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.092350705 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.230784372 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.059464572 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.120064692 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.082346685 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.38354644 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.339294669 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.544533369 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.246830687 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.429955313 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.355940482 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.85589296 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.179302235 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.304695563 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.02548458 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.180677466 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.05415887 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.128564686 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151730918 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.074785535 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.080742737 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.312449398 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.346006417 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.240277222 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.149961902 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.171568885 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.099244954 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.344736066 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.22243524 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.079250783 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.083762641 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.095493943 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.324672648 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.076341674 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.049167292 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.245396009 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.156883615 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.462372269 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.156298309 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.962580123 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.084177819 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.856104985 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.26496639 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.612852491 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.10183548 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.934596336 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.145931515 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.078355881 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.547334954 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.735657985 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.233270527 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.333637625 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.998561803 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.124456435 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.126952673 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.081068966 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.085517681 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.686959711 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.532833383 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.154869993 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.660779952 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.292682459 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.155572289 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.836723516 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.55944835 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.081213153 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.202164936 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.109555049 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.554625345 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.69482019 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.104799979 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.217019525 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.087399489 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.033542336 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.092907882 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.114633721 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.589163017 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.086649261 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.614399139 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.366338879 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.226898984 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.085270129 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.08677419 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.079657953 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.262371824 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.67512437 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.111170409 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.344514946 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.236849636 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.082069379 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.611088162 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.782281478 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.219168041 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.132809838 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.100972726 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.442714604 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.919207901 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.118763258 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.707829564 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.310731983 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.168805756 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.372758463 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.420052702 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.166633119 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.337831547 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125785781 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.467689273 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.422939442 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.709194756 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.283698873 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.231477454 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.328839824 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.133629752 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.684108092 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.588472355 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195037231 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.106274678 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.17086178 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.153009729 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.016134715 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.733461675 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.355735718 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.509567991 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.431256265 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.935705319 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.173795525 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.072753235 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.112091155 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.173403453 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.149224509 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.100519834 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.250124293 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.000455774 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.356990069 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.476278759 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.037766456 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.318776834 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.227981387 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.084566918 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.6188822 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.134530368 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.428877929 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.086898541 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.144455673 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.082784702 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.344216216 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.227854784 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.449933203 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.086096418 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.778093222 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.096466917 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.091532513 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.092878377 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.172913315 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.095009512 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.328368991 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.546806916 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.430798205 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.245322454 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.972267297 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.241482913 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.098820073 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186655662 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.104907415 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.773795293 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.505203663 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.328583716 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.272962609 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.130885523 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.674777885 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180703781 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.985317437 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.276574365 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.190209407 seconds)
  done (took 2567.309882677 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.525743622 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.624252285 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.530426908 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.273116701 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.516626365 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.487256229 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.573278067 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.119313654 seconds)
  done (took 61.939055637 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.235684972 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.290948183 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.196732673 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.23259257 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.187915141 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.492074007 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.572995261 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.592224797 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.561956649 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.381840073 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.27509888 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.107192385 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.096696449 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.1473 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.161119888 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.411561046 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.168766978 seconds)
  done (took 84.315209844 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.383575267 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.751481766 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.375723862 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 12.234652316 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.316704839 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.894470207 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.185658136 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.190835702 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.448268972 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.741807211 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.110434076 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.116771439 seconds)
  done (took 96.997441872 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.14934473 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.107117377 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.112832082 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.110362067 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.10973295 seconds)
  done (took 12.646939898 seconds)
done (took 3147.758892061 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.338984181 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.2452193 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.201166216 seconds)
  done (took 6.476172547 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.170034876 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.236514388 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.313587603 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.250002735 seconds)
  done (took 11.011666952 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.424705599 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.590077918 seconds)
  done (took 7.035438815 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.570031539 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.157619681 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.720102485 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.196223264 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.160305764 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.167830181 seconds)
  done (took 23.633756012 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.170453634 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.166386403 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.159103722 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.171951928 seconds)
  done (took 10.76851756 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.147432749 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.19540636 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.158203284 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.124917523 seconds)
  done (took 22.693279039 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.312770238 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.40420981 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.923146526 seconds)
  done (took 9.675118069 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.940125828 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.487522757 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.942807108 seconds)
  done (took 10.441298235 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.445833551 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.086682709 seconds)
  done (took 8.625442776 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.353123878 seconds)
  done (took 4.423094876 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.903898732 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.578149835 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.141048224 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.03164605 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.352118242 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.502837314 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.679039987 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.611681894 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 3.035488161 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.733001463 seconds)
  done (took 30.873379146 seconds)
done (took 162.472319535 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.313571041 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.704746593 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.534350186 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.792176594 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.288823447 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.352455627 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.27782726 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.817993696 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.495624832 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.570874739 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.423644899 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.233411495 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.633699269 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.538480062 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.384446015 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.494907285 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.264456201 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.006425298 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.092397552 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.489009909 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.178971918 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.645551516 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.82389604 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.654973785 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.2650245 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.23512019 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.157360242 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.450547531 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.351691047 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.160474892 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.228217258 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.751748924 seconds)
  done (took 186.87685244 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.095877707 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.097445213 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.098732348 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.098711237 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.067232578 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.121845456 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.179155205 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.212007834 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.859705493 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.839949731 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.176972093 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.1320355 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.149325303 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.19117361 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.136350126 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.153384059 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.09525827 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.144310221 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.171109273 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.166602614 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.329186981 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.172585731 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.297147606 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.005213395 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.220421177 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.193637453 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.219183221 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.176179532 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.231330435 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.175447641 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.35628941 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.101151059 seconds)
  done (took 222.69053099 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.102684209 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.103323065 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.145049203 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.106304739 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.10389368 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.117432712 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.113014959 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.108721505 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.107979961 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.151435498 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.11123557 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.176926118 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.209552873 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.165925571 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.101169303 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.102571772 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.103091668 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.104352596 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.114635199 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.108338416 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.10458324 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.101332139 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.105473742 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.111906206 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.10928257 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.113559047 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.106089327 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.109493202 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.10949003 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.107684005 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.109091942 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.103970517 seconds)
  done (took 229.778619233 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.397713353 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.098937192 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.102532122 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.477280564 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.102964663 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.099231303 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.456509719 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.402188544 seconds)
  done (took 22.173740504 seconds)
done (took 663.763242529 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.796974042 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.988703375 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.273731775 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.134957442 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.72587921 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.198412306 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.127302959 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.234476959 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.890429334 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.245493881 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.578757773 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.136485328 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.940659832 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.166461849 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.36643823 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.295195446 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.642570634 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.96521411 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.385711721 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.038425658 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.451799833 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.18919503 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.302068701 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.006975496 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.647387112 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.22114399 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.3223995 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.624011645 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.151915179 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.441088888 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.20458731 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.589785862 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.212173291 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.206819852 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.244259111 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.2101214 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.48527321 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.231973884 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.350233597 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.981302504 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.022360123 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.807632835 seconds)
  done (took 115.058521601 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.311624058 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.212811448 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.138532587 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.126596857 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.294305721 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.162644115 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.278847832 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.227695313 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.164066137 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.143993811 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.144778839 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.167425771 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.115139015 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.334752822 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.41207774 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.429050017 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.434367453 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.457113556 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.428111724 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.416314312 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.441756208 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.435419761 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.424336341 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.42759435 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.49106335 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.448893459 seconds)
  done (took 62.182442248 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.446928774 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.696515531 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.77592494 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.460333234 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.398577305 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.421756445 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.456085147 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.485239974 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.489832102 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.390386504 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.582883928 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.421490795 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.456581561 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.813059755 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.476497069 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.407115997 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.455113324 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.406954733 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.635314801 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.47487241 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.472100381 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.418708547 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.477878839 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.44546781 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.406441716 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.429805728 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.454396907 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.933928642 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.472811724 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.550409702 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.502079129 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.485620859 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.873567098 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.811763113 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.51363262 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.431288498 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.403904964 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.637220385 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.451247494 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.4080081 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.457136838 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.451104166 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.790346317 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 3.039130604 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.426984947 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.427473542 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.931175576 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.582486013 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.482624775 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.44207204 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.779862372 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.450493694 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.404272623 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.414055087 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.46635522 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.426211347 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.398836262 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.740140846 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.44270345 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.39135185 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.288206963 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.130311971 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.337658805 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.127054654 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.321759585 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.124984988 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.117005166 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.10942664 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.462428109 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.149574796 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.712140659 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.142206287 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.112659536 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.24907104 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.332915045 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.640358936 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.12885942 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.380339222 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.610938266 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.165897168 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.128871372 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.595961169 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.16926801 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.135235915 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.113661737 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.113538329 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.121486363 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.165766716 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.15681945 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.639438223 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.723196565 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.475688969 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.168453339 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.1289465 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.117747504 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.455799947 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.129583713 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.127194384 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.499026089 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.739969504 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.13699868 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.119568889 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.688574729 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.135928824 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.156816732 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.128775923 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.466148366 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.152704151 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.158517538 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.109635411 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.119127726 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.117303375 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.153072077 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.125780901 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.110547154 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.683661085 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.315480742 seconds)
  done (took 283.420680014 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.114065353 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.111988867 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.152189329 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.113464525 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.110546988 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.114360798 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.110285123 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.11084113 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.114817286 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.109242124 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.110786156 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.112558458 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.116062526 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.122774459 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.147853889 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.114651278 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.726127688 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.111260239 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.113025892 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.115986902 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.94501423 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.118742883 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.112436601 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.115205661 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.113224802 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.115766669 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.123127469 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.140900175 seconds)
  done (took 174.77812671 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.111371065 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.180788353 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.126610233 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.180196605 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.127280656 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.111640346 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.142117707 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.136842144 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.122221996 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.111454833 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.111724868 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.169059462 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.122988146 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.214785621 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.158657763 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.154649006 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.23244199 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.124653503 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.165016302 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.114837709 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.181306587 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.131508584 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.153848708 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.210358817 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.143074377 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.182238264 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.130962745 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.112388353 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.114458075 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.240532839 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.13583324 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.152354282 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.164417648 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.141986165 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.246424701 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.274651765 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.269007706 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.165543139 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.122016132 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.112157977 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.112556331 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.115562909 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.183289191 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.128903454 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.115866499 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.243218552 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.13608818 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.112787145 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.136095214 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.112971785 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.132010245 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.139442467 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.162369687 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.253479777 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.176149282 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.145106355 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.147004048 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.140442548 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.115006705 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.219088282 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.126900935 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.239767253 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.139453596 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.116631799 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.115533557 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.118708197 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.182892864 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.162610045 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.227208078 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.127248405 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.219049493 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.194812015 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.130384306 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.114633953 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.114644969 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.185787364 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.237323365 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.194624328 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.202469206 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.167432595 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.131242698 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.116372927 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.117941909 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.156542448 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.126378501 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.241529304 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.242452234 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.126230872 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.115469443 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.115759112 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.116323717 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.152611056 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.198541776 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.174528589 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.235032153 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.167799305 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.168511664 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.126907604 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.13359181 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.123834584 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.161421229 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.126877248 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.133681621 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.580825751 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.173904281 seconds)
  done (took 228.954435339 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.572267725 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.177503205 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.205312918 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.397078395 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.526878012 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.448014741 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.171642347 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.180518215 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.184780243 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.332580494 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.250242685 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.235857726 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.171371995 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.151913326 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.174128867 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.191276366 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.218056549 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.569382586 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.295278759 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.207401047 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.176545648 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.454440637 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.501518974 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.630944664 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.224220466 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.649678486 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.83858903 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.283596179 seconds)
  done (took 70.470899414 seconds)
done (took 936.902766146 seconds)
SAVING RESULT...
DONE!
