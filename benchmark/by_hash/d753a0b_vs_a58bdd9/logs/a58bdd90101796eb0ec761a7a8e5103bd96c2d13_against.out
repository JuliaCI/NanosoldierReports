cset: moving following pidspec: 1057690
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.920201005 seconds)
loading group "shootout"... done (took 1.148351998 seconds)
loading group "string"... done (took 0.695814466 seconds)
loading group "linalg"... done (took 9.109247354 seconds)
loading group "parallel"... done (took 0.175245247 seconds)
loading group "find"... done (took 3.059700625 seconds)
loading group "tuple"... done (took 2.28271772 seconds)
loading group "union"... done (took 15.517947258 seconds)
loading group "dates"... done (took 1.53965547 seconds)
loading group "micro"... done (took 0.227481539 seconds)
loading group "simd"... done (took 5.003754572 seconds)
loading group "io"... done (took 1.422708916 seconds)
loading group "random"... done (took 10.290955512 seconds)
loading group "problem"... done (took 1.673453665 seconds)
loading group "array"... done (took 27.02934492 seconds)
loading group "misc"... done (took 1.911589209 seconds)
loading group "scalar"... done (took 45.719484627 seconds)
loading group "sort"... done (took 3.613102463 seconds)
loading group "sparse"... done (took 13.790658646 seconds)
loading group "collection"... done (took 19.847547072 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/8) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.456427428 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.099077442 seconds)
    (2/2) benchmarking "String"...
    done (took 0.089317432 seconds)
  done (took 1.322826243 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.079536762 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064677867 seconds)
    (3/3) benchmarking "different"...
    done (took 0.071680387 seconds)
  done (took 1.330717844 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.070598669 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.147395109 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.073815919 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.073255015 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.072824947 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.072328069 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.073886007 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.073530545 seconds)
  done (took 1.706572695 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.077430262 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.072599368 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.07374795 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.073669686 seconds)
  done (took 1.419269628 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.070657985 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.132505785 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.07144056 seconds)
    (4/4) benchmarking "different"...
    done (took 0.071267401 seconds)
  done (took 1.463044248 seconds)
done (took 9.210039605 seconds)
(2/8) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.296692529 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.356195494 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.353401222 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.162813404 seconds)
  done (took 3.043544637 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.369486739 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.084706154 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.083482307 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.072718813 seconds)
  done (took 1.74145565 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.07056006 seconds)
    (2/2) benchmarking "read"...
    done (took 0.080874636 seconds)
  done (took 1.278897333 seconds)
done (took 7.485912487 seconds)
(3/8) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.415812375 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.087189973 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.089684532 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.089254437 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.087898071 seconds)
  done (took 1.933088426 seconds)
done (took 3.053231762 seconds)
(4/8) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.588170716 seconds)
  done (took 1.702475006 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.111613391 seconds)
  done (took 2.255913829 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.226015908 seconds)
  done (took 11.375516622 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.452791341 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.540390527 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.926814496 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.151285655 seconds)
  done (took 3.229845814 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.913683502 seconds)
  done (took 2.07693643 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.266572752 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.25663404 seconds)
  done (took 1.704875415 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.553075379 seconds)
  done (took 1.721523794 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.32836133 seconds)
  done (took 2.481070133 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.346997348 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.182591976 seconds)
  done (took 1.679149246 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.603639172 seconds)
  done (took 1.749366088 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.129299114 seconds)
  done (took 6.281346777 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.301309402 seconds)
  done (took 1.52332988 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.282628911 seconds)
  done (took 1.429581387 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.635428757 seconds)
  done (took 3.813440103 seconds)
done (took 44.152788545 seconds)
(5/8) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.089532416 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.180683316 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067764689 seconds)
  done (took 1.453030637 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.084224796 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.083704359 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083182539 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.083281775 seconds)
  done (took 1.500385383 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.078972431 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077014233 seconds)
  done (took 1.325741323 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.233741313 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.183834581 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092853335 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.086223227 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081490069 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.083364689 seconds)
  done (took 1.429378744 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.07226171 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.076279062 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073143744 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.076960855 seconds)
  done (took 1.460891645 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.069731697 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.066396748 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069590117 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.075529142 seconds)
  done (took 1.446491637 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.089304257 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.090164455 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116636088 seconds)
  done (took 1.471265842 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.090313649 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.086002055 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.080853789 seconds)
  done (took 1.428006599 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.13067183 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098276405 seconds)
  done (took 1.403982573 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081096903 seconds)
  done (took 1.252260432 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093124497 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.098481982 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.14124111 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108025788 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.145039932 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.131061529 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079078341 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.081480466 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075819891 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074695165 seconds)
  done (took 2.198766884 seconds)
done (took 18.180872326 seconds)
(6/8) benchmarking "tuple"...
  (1/1) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.100797341 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.069653328 seconds)
  done (took 1.349578225 seconds)
done (took 2.549125914 seconds)
(7/8) benchmarking "dates"...
  (1/1) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.18401282 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.080224815 seconds)
  done (took 1.452835375 seconds)
done (took 2.631006017 seconds)
(8/8) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.330618588 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.121370185 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.12795401 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.1197861 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.173837542 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.131110806 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.140179177 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.091029219 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.129230138 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.280351211 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.121284828 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.44474514 seconds)
done (took 5.408929813 seconds)
RUNNING BENCHMARKS...
(1/8) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.435667308 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.393715163 seconds)
    (2/2) benchmarking "String"...
    done (took 1.468932383 seconds)
  done (took 4.104497573 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.675293053 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.224125565 seconds)
    (3/3) benchmarking "different"...
    done (took 1.271254142 seconds)
  done (took 5.358664562 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.563224159 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.17098824 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.585855526 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.228271002 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.248211743 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.155397968 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.431992841 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.8934875 seconds)
  done (took 28.902374177 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.231638678 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.51211702 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.442339445 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.517123252 seconds)
  done (took 17.968860889 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.673206074 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.578418318 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.574761248 seconds)
    (4/4) benchmarking "different"...
    done (took 1.682925468 seconds)
  done (took 7.804229934 seconds)
done (took 74.381991897 seconds)
(2/8) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.288834299 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.228648874 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.276982828 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.258198272 seconds)
  done (took 19.955610528 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.238466884 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.85017785 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.27166797 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.235421796 seconds)
  done (took 19.876308751 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.759318121 seconds)
    (2/2) benchmarking "read"...
    done (took 1.761507493 seconds)
  done (took 4.723556904 seconds)
done (took 52.093285647 seconds)
(3/8) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 1.867361436 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.008068319 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 1.827990366 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 1.89923827 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 1.829630031 seconds)
  done (took 10.62633098 seconds)
done (took 11.804926731 seconds)
(4/8) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.281449853 seconds)
  done (took 7.462797858 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.445105482 seconds)
  done (took 7.641879727 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 11.061949289 seconds)
  done (took 12.269196402 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.248859241 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.268054894 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.242459837 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.242689879 seconds)
  done (took 26.256760663 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.291450649 seconds)
  done (took 7.471398079 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.239815147 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.239239881 seconds)
  done (took 13.676386874 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.388109233 seconds)
  done (took 7.592910267 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.729546409 seconds)
  done (took 7.946179243 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.257958344 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.236602836 seconds)
  done (took 13.711310044 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.225442334 seconds)
  done (took 7.417722928 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.906884112 seconds)
  done (took 9.113079426 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.25526987 seconds)
  done (took 7.518818286 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.251832006 seconds)
  done (took 7.450352795 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.777247272 seconds)
  done (took 7.95854127 seconds)
done (took 144.661695157 seconds)
(5/8) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.453531215 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.338571285 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.310286383 seconds)
  done (took 3.838397659 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.304452485 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.359848565 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.430513876 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.38068485 seconds)
  done (took 6.670922116 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.540357487 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.720281334 seconds)
  done (took 4.464983621 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.631771648 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.237105324 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.762837533 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.233408331 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.234586024 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.2487787 seconds)
  done (took 19.907587699 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.241721389 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.229083277 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.226401543 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.228233637 seconds)
  done (took 6.112952407 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.235558493 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.397418912 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.250733347 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.246084497 seconds)
  done (took 18.322142854 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.483236848 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.316970001 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.980000831 seconds)
  done (took 5.972511311 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.045098314 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.605211494 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.017189809 seconds)
  done (took 6.856972822 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.186643089 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.244789261 seconds)
  done (took 5.638796405 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.383134315 seconds)
  done (took 2.576380308 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.706004887 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.723756943 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.076083252 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.064165811 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.216976677 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.502636086 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.564437453 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.618288691 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.922959838 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.683038039 seconds)
  done (took 19.261170207 seconds)
done (took 111.989797957 seconds)
(6/8) benchmarking "tuple"...
  (1/1) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.772842495 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.287290374 seconds)
  done (took 4.243025347 seconds)
done (took 5.421061862 seconds)
(7/8) benchmarking "dates"...
  (1/1) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.808428053 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.223669625 seconds)
  done (took 7.222232962 seconds)
done (took 8.407333584 seconds)
(8/8) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.245034073 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.451221119 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.246722422 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.752733986 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.320082171 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.392163317 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.346321036 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.250784535 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.492191845 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.325683356 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.976028726 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.901191912 seconds)
done (took 60.98171962 seconds)
SAVING RESULT...
DONE!
