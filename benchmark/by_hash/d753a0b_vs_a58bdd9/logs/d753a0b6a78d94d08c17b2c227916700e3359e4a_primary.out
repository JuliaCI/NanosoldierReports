cset: moving following pidspec: 1033187
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.944071225 seconds)
loading group "shootout"... done (took 1.258313798 seconds)
loading group "string"... done (took 0.739105617 seconds)
loading group "linalg"... done (took 9.413258889 seconds)
loading group "parallel"... done (took 0.179847733 seconds)
loading group "find"... done (took 3.293767201 seconds)
loading group "tuple"... done (took 2.305604637 seconds)
loading group "union"... done (took 16.066012366 seconds)
loading group "dates"... done (took 1.596675188 seconds)
loading group "micro"... done (took 0.239007837 seconds)
loading group "simd"... done (took 5.135830492 seconds)
loading group "io"... done (took 1.446078241 seconds)
loading group "random"... done (took 10.350739407 seconds)
loading group "problem"... done (took 1.665685509 seconds)
loading group "array"... done (took 28.218209232 seconds)
loading group "misc"... done (took 2.000570425 seconds)
loading group "scalar"... done (took 47.015417231 seconds)
loading group "sort"... done (took 3.577560699 seconds)
loading group "sparse"... done (took 14.06277865 seconds)
loading group "collection"... done (took 20.51938506 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/8) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.483784516 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.304168384 seconds)
    (2/2) benchmarking "String"...
    done (took 0.180059169 seconds)
  done (took 1.678822796 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.101446185 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.069340233 seconds)
    (3/3) benchmarking "different"...
    done (took 0.077973661 seconds)
  done (took 1.436219081 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.070628433 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.151258775 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.076159802 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.078113873 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.078525195 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.076339176 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.07336264 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.070842639 seconds)
  done (took 1.783366929 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.076390829 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.074641739 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.071596642 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.074746149 seconds)
  done (took 1.472188674 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.077050639 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.13107194 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.06899918 seconds)
    (4/4) benchmarking "different"...
    done (took 0.068505917 seconds)
  done (took 1.513655109 seconds)
done (took 9.907809953 seconds)
(2/8) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.342048489 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.367967403 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.297834626 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.161717338 seconds)
  done (took 3.064015349 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.466066827 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.174274545 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.08315366 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.076163182 seconds)
  done (took 2.011122757 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.070206986 seconds)
    (2/2) benchmarking "read"...
    done (took 0.077727146 seconds)
  done (took 1.344279862 seconds)
done (took 7.940369394 seconds)
(3/8) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.445504725 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.088910412 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.085774664 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.08731924 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.083131857 seconds)
  done (took 2.032420474 seconds)
done (took 3.223349843 seconds)
(4/8) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.569512025 seconds)
  done (took 1.735648528 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.409841106 seconds)
  done (took 2.634921573 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.111758399 seconds)
  done (took 11.343790268 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.430382178 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.491603127 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.894920425 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.142747242 seconds)
  done (took 3.20519506 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.897780697 seconds)
  done (took 2.121057649 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.253391779 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.241728594 seconds)
  done (took 1.72910208 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.556602501 seconds)
  done (took 1.766075985 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.256587519 seconds)
  done (took 2.450646398 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.323822076 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.170969771 seconds)
  done (took 1.667626485 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.635803058 seconds)
  done (took 1.806858796 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.946523188 seconds)
  done (took 6.120756054 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.269540283 seconds)
  done (took 1.518502323 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.269601858 seconds)
  done (took 1.454633111 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.592646174 seconds)
  done (took 3.768773194 seconds)
done (took 44.525584507 seconds)
(5/8) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.087217676 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.279222572 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.073867914 seconds)
  done (took 1.576241629 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.111978732 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.102085759 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.104122724 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.103107226 seconds)
  done (took 1.603646208 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.0786352 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074073545 seconds)
  done (took 1.340126731 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.237649203 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.203671904 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091880638 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.0838979 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.07815843 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079038272 seconds)
  done (took 1.438018089 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.071470216 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.099332279 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.070038517 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.105865323 seconds)
  done (took 1.534114921 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.165368884 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.066120186 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068467128 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.070654537 seconds)
  done (took 1.549793715 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.088333165 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085910029 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.115625504 seconds)
  done (took 1.484205139 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.114543106 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085796245 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.07919751 seconds)
  done (took 1.477280596 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.128387364 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.103293639 seconds)
  done (took 1.422800961 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.088118133 seconds)
  done (took 1.269928846 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.098898969 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.100108516 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.164346199 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.129818601 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.170791173 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.167466645 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075833958 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.077688324 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072747636 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07106963 seconds)
  done (took 2.306292523 seconds)
done (took 18.868222001 seconds)
(6/8) benchmarking "tuple"...
  (1/1) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.194445756 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.093979609 seconds)
  done (took 1.468576593 seconds)
done (took 2.682076281 seconds)
(7/8) benchmarking "dates"...
  (1/1) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.183042938 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076356136 seconds)
  done (took 1.44542096 seconds)
done (took 2.650109754 seconds)
(8/8) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.332118777 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.119438392 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128119418 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.118279148 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.20969462 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.129484047 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.134378393 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.088011772 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.292362989 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.123034876 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.118629318 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.438211929 seconds)
done (took 5.434226915 seconds)
RUNNING BENCHMARKS...
(1/8) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.376337209 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.414086492 seconds)
    (2/2) benchmarking "String"...
    done (took 1.500144028 seconds)
  done (took 4.164272809 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.69230066 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.238079133 seconds)
    (3/3) benchmarking "different"...
    done (took 1.274710324 seconds)
  done (took 5.396856826 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.590805936 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.1209822 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.515278369 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.240138635 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.260953725 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.725321312 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.347622563 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.843947965 seconds)
  done (took 28.251823485 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.194926907 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.482807772 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.413230075 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.500302004 seconds)
  done (took 17.816692264 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.642867076 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.526834211 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.526127372 seconds)
    (4/4) benchmarking "different"...
    done (took 1.666947156 seconds)
  done (took 7.59295975 seconds)
done (took 73.462835794 seconds)
(2/8) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.209791869 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.18596465 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.208257151 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.210613441 seconds)
  done (took 19.726212901 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.172628716 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.831205469 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.207720903 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.228612893 seconds)
  done (took 19.651820387 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.665411536 seconds)
    (2/2) benchmarking "read"...
    done (took 1.69077227 seconds)
  done (took 4.486659999 seconds)
done (took 51.302296982 seconds)
(3/8) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 1.832501157 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 1.93213519 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 1.746929098 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 1.804178804 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 1.748725361 seconds)
  done (took 10.180567873 seconds)
done (took 11.294531862 seconds)
(4/8) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.305944961 seconds)
  done (took 7.421328955 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.18709903 seconds)
  done (took 7.326185932 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.725506812 seconds)
  done (took 11.854543208 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.182941424 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.180734551 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.180999249 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.17191788 seconds)
  done (took 25.881486273 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.701976825 seconds)
  done (took 7.82407326 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.166149217 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.182010551 seconds)
  done (took 13.525604286 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.394385133 seconds)
  done (took 7.517307358 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.483070004 seconds)
  done (took 7.612350144 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.17361745 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.193247572 seconds)
  done (took 13.518194711 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.241667339 seconds)
  done (took 7.366957037 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.643934285 seconds)
  done (took 8.771405272 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.173359502 seconds)
  done (took 7.370242117 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.232135036 seconds)
  done (took 7.353630648 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.685455299 seconds)
  done (took 7.807343871 seconds)
done (took 142.268207033 seconds)
(5/8) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.389679336 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.28907148 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.250466185 seconds)
  done (took 3.654369477 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.229450149 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.29498855 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.364240513 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.308142593 seconds)
  done (took 6.321009084 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.454817165 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.649036011 seconds)
  done (took 4.220958213 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.550615211 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.190044474 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.697623628 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.171741096 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.174587331 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.177747153 seconds)
  done (took 19.65509112 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.17350661 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.170514825 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.172665492 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.170395784 seconds)
  done (took 5.811831243 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.1681216 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.234687458 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.174091004 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.192617292 seconds)
  done (took 17.888982952 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.483088201 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.42261642 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.908526915 seconds)
  done (took 5.930592717 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.982032272 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.573892817 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.964926106 seconds)
  done (took 6.64027897 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.116435501 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.109592685 seconds)
  done (took 5.347363737 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.325232223 seconds)
  done (took 2.444854724 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.651357013 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.65107718 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.00955636 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.992080646 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.138485384 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.448968448 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.479734784 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.528866898 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.842137027 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.704647985 seconds)
  done (took 18.56581924 seconds)
done (took 108.43902033 seconds)
(6/8) benchmarking "tuple"...
  (1/1) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.729757464 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.223654 seconds)
  done (took 4.071717586 seconds)
done (took 5.201882984 seconds)
(7/8) benchmarking "dates"...
  (1/1) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.765263229 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.326352201 seconds)
  done (took 7.208875199 seconds)
done (took 8.328246381 seconds)
(8/8) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.182925911 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.391984103 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.186779186 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.702646329 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.24707049 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.331090975 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.266354835 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.172789594 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.47599625 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.267426534 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.979129552 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.96174838 seconds)
done (took 60.391281014 seconds)
SAVING RESULT...
DONE!
