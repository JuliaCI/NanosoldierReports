cset: moving following pidspec: 1098607
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.865544364 seconds)
loading group "shootout"... done (took 1.15245099 seconds)
loading group "string"... done (took 0.701541979 seconds)
loading group "linalg"... done (took 9.091753134 seconds)
loading group "parallel"... done (took 0.176198756 seconds)
loading group "find"... done (took 3.180969638 seconds)
loading group "tuple"... done (took 2.228523556 seconds)
loading group "union"... done (took 15.454509076 seconds)
loading group "dates"... done (took 1.530589539 seconds)
loading group "micro"... done (took 0.227162063 seconds)
loading group "simd"... done (took 4.991784865 seconds)
loading group "io"... done (took 1.428536997 seconds)
loading group "random"... done (took 10.1852948 seconds)
loading group "problem"... done (took 1.67721284 seconds)
loading group "array"... done (took 26.774410253 seconds)
loading group "misc"... done (took 1.963323818 seconds)
loading group "scalar"... done (took 45.667054283 seconds)
loading group "sort"... done (took 3.474502658 seconds)
loading group "sparse"... done (took 13.705841209 seconds)
loading group "collection"... done (took 19.93431625 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.478234983 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.125272413 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.172511844 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.122640169 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.240625285 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.132870389 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.137355987 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.09462515 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.254315164 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.148868102 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.143033651 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.441334987 seconds)
done (took 6.089292445 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.318578512 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.253844643 seconds)
    (2/2) benchmarking "String"...
    done (took 0.173236335 seconds)
  done (took 1.729779868 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.095461543 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062773053 seconds)
    (3/3) benchmarking "different"...
    done (took 0.070335191 seconds)
  done (took 1.536609684 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.069013209 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.146067345 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.069988745 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.07182197 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.071698335 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.072188423 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.071027397 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.070455175 seconds)
  done (took 1.886340837 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.075612295 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.070571403 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.070535962 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.07216242 seconds)
  done (took 1.604474124 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.06986176 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.126547463 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.067877433 seconds)
    (4/4) benchmarking "different"...
    done (took 0.067533376 seconds)
  done (took 1.641586594 seconds)
done (took 10.106927686 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.166401616 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.808190653 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.911810696 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.15474217 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.318077234 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.356658141 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.127475825 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.21046256 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.119833767 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.080027653 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.157220619 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.088449381 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.503785421 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.495706247 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.075831364 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.198574252 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.634667299 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088106818 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.119830711 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.255744828 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.084244572 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.089179837 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.095464798 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.076500967 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.218151966 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.182599393 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.651712335 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.101868489 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.074587588 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.199890318 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.075283498 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079287694 seconds)
  done (took 11.138603252 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.118445047 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.116613854 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.071241057 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.107340594 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097613048 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072877346 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.080411472 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.071804131 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091714264 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.139572669 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.095373506 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.129727249 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.071174178 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.0726219 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.102726926 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.170092616 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.086790186 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.088519217 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.072188472 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.085374857 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.098424315 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.082999031 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.081569266 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.081352886 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.117864212 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.138400858 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.094642533 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.113741354 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.070088527 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.083349883 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.099955443 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.111324252 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.070780801 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.069188088 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.113275679 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.09055953 seconds)
  done (took 4.795791962 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.076319008 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.100836611 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.112734193 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108244484 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.112939723 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.098257237 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.151287888 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.129117957 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.105059784 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.077899517 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.181566044 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.700091488 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.15676009 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.075452 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.152694869 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.381643063 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.947063052 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.074741645 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.074422927 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.102921407 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.074769775 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.146616425 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.071211867 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.183786696 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.660620344 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.075863892 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073332899 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.101834052 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.069274865 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.148621856 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.099495924 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.077756506 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.585016979 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.069657264 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.067980919 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.094435929 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.098485091 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070437268 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.071512312 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.082433758 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.069624204 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.127154775 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.084236326 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.591409538 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.075501667 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.670773865 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.346797123 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.078828435 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.076814182 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.107022942 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.068718641 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.072495018 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.682921095 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.162698494 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.07342716 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.309893562 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.073292314 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.073678401 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.073914496 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.105902527 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.072732729 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.074707969 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.077982946 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.093657354 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.082824538 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.158683287 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.095784068 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.072747209 seconds)
    (68/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.451657314 seconds)
    (69/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.100512702 seconds)
    (70/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.120534482 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.079081197 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.076688972 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.078286898 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.105385632 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.145683367 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.073840923 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.073878308 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.118792116 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.355393543 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.098152213 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.075685712 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.073947443 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071972874 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.556117135 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.011833389 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.073056607 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.072373757 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.530901561 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.072770571 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.071029996 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.072855394 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.093697967 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.071832788 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.06855259 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.070932301 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.107995095 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.073698801 seconds)
    (98/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.068134142 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.59989809 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.073424839 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.581218399 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.074761725 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.1047676 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.130317177 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.072695101 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.108724121 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.072939032 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.070823901 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.079576496 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.070124761 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.068952758 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.068824412 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.073910597 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.070179883 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.071374502 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.072661457 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.072605611 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.071621683 seconds)
  done (took 24.724916477 seconds)
done (took 43.033586417 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.416922601 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.082623326 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.082085172 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.082110557 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.08204929 seconds)
  done (took 2.115983971 seconds)
done (took 3.599341883 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.268262938 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.081998649 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.067512302 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.214274969 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.092686381 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.187963417 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.229924056 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.178250817 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.09620798 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.095130711 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.220209129 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.232879852 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.243858106 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.096349119 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.170946765 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.244682496 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.098959715 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.071364087 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.09620503 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.096418028 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.096344121 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069268388 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.094691095 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.096887712 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.169028016 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.094624327 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.070916622 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.172839588 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.095271003 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.174608618 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.095721765 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.0933496 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.094165935 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.171329406 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.094853619 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.167815047 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.067896811 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.094800204 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.096236535 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.098397132 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.095183353 seconds)
  done (took 6.810053638 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.079955864 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084977004 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.086417783 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064419057 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074035319 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084872157 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06430212 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084212207 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.105920252 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084911683 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084693705 seconds)
  done (took 2.350968069 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.073168985 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085192989 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.089542226 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064352216 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075679518 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.085886818 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064642445 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085749624 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088675536 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08692653 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.086049325 seconds)
  done (took 2.291983566 seconds)
done (took 12.855642258 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.200506005 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.095703441 seconds)
  done (took 1.692870139 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.270541337 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.520565918 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 6.033042624 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.124093534 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.103850144 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.117820729 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.228799359 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.102290528 seconds)
  done (took 9.077958965 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.130383326 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.071171139 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.071123981 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.072158731 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.074407991 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.070464981 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.070163379 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.072005026 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.07075346 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.072599524 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.075143005 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.073491537 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.072139333 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.07366438 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.072256668 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.073207158 seconds)
  done (took 2.722532777 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.108501424 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.073621951 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.101751759 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.06365222 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.074301958 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.065961092 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.073462587 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.077252231 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.072645269 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.07446071 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073875262 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.072037239 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073327394 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.074191744 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.076746816 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.075985651 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.075880805 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.07227786 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075525074 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.076541896 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.075479803 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.075763939 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.076980381 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.074105628 seconds)
  done (took 3.366563129 seconds)
done (took 18.271840044 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.180815893 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076542712 seconds)
  done (took 1.641336615 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.099267628 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.097376528 seconds)
  done (took 1.613410289 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074291579 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062230359 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080451019 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072899739 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063470947 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063002118 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.07805686 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.065697005 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.064126598 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.065465944 seconds)
  done (took 2.114539467 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.065260765 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070054532 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068245381 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065281952 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067650288 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063360599 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.068045955 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064412154 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069096531 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.06407765 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067246357 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083805378 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065290513 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08407724 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065190299 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065591033 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06727331 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065671584 seconds)
  done (took 2.663297752 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.065054941 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.063122427 seconds)
  done (took 1.534049485 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065422484 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061667665 seconds)
    (3/7) benchmarking "month"...
    done (took 0.063531268 seconds)
    (4/7) benchmarking "year"...
    done (took 0.063694797 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062738138 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061414123 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062148417 seconds)
  done (took 1.834373205 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.445471816 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.200199895 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.437618886 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.07061308 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.084731436 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.274791502 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065322162 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.07016604 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.072911734 seconds)
  done (took 3.165991483 seconds)
done (took 15.982472677 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.085193364 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.188014707 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.11614163 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.430069289 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.080081308 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068043757 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.097294577 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.214509283 seconds)
done (took 2.70824001 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.289867244 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.243633226 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.26581281 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.151186013 seconds)
  done (took 3.076139519 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.427506011 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.171573528 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077317804 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067770109 seconds)
  done (took 2.145092512 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.066485091 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071582003 seconds)
  done (took 1.547246939 seconds)
done (took 8.480308673 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07377412 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.060679152 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.096191596 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.06275372 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.063083098 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 0.062589481 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.063128378 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065407621 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063319768 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.064995637 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.063760632 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06335813 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064578041 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064279468 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063840192 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.062643025 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064170857 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065381759 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.063111745 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065224032 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068111987 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065889163 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065159843 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.062619015 seconds)
  done (took 3.005328952 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080354524 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.065051849 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.065998342 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.065741406 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.066283309 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.066330669 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.066350759 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065200783 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067438988 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067738911 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068015845 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067203122 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065411479 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067326632 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065753865 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068359532 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069110914 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066121707 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065530348 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067143076 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.066788695 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066054999 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069015373 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069052997 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.068577903 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.068160699 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066035926 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066436143 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067280928 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067977687 seconds)
  done (took 3.436079293 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06764185 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.059230194 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.059599775 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070320327 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.059743138 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.059391708 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.060377385 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.059416562 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.059900255 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.060666987 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.060166809 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.059622915 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.060560758 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.059683194 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.059517283 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.060251353 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064941048 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080477068 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060131493 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060166655 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065384955 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060112419 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061148643 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062230467 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061994561 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060338854 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060088987 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060466721 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060335104 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060972637 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060783575 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.067400812 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.069163963 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061569741 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071182758 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.068725877 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.063121776 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.06826716 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061604805 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06038372 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060611081 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060452716 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060582054 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060621768 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.071017783 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060703298 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061580947 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.0639897 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062467626 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061587434 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060894281 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06313307 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067428129 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062384326 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060799799 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.06273876 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.063040549 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.06178269 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060854812 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060727964 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.062731554 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066811558 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.0629602 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063830006 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.082554358 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062194619 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.071408096 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061842873 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061142075 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064829056 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061107025 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080365241 seconds)
  done (took 5.967206779 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.073076833 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.070458874 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.078582399 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.07105469 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064017011 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.060987445 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.064049684 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.060895209 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07074435 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.065252865 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062813019 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.064693449 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070128309 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064603145 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06201812 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.070310731 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.065065851 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.066313694 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.06220021 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066045251 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063892872 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.066348 seconds)
  done (took 2.891565407 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.147555989 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06791204 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.109067977 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.070552811 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06901201 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.069407533 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.065769127 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065923652 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066223502 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066399952 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066234507 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066503389 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070427312 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068353484 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066896368 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066354575 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066221186 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066817632 seconds)
  done (took 2.751828537 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.07800852 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.065332843 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.092430759 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.065453959 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.067270549 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066485629 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069108131 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069049756 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065583667 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066096324 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.069197361 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065211338 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065337076 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065847878 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065204515 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.06626806 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066387531 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065541835 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069118765 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069052888 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069545562 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069772724 seconds)
  done (took 2.93069527 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07907496 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064163589 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080135185 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.065658262 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.059348976 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.059792904 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.06628097 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.064731704 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066230666 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.064494904 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065544292 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060647294 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066960619 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064971728 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06725871 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065285288 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064697739 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066816074 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066966547 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061322688 seconds)
  done (took 2.729674618 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.099778412 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062046048 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061716491 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.066618338 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062414059 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.062223594 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.078671755 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.062036057 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.062117834 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.086386829 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062494187 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.062554665 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.067139074 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.065253919 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06384316 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.067208963 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.066748246 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.067244142 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062935843 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06268404 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08717466 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063305635 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068291492 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065469624 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065382759 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064028407 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063469726 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.066426674 seconds)
  done (took 3.316857857 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.066130313 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063233069 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.063344221 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.063575606 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063510642 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065425291 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064190995 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066612074 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062978882 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.063465344 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064330582 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.063442087 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063151969 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.062929876 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.063200928 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.063200636 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063242223 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.063446143 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063362757 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063292532 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.062940162 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062850405 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063044387 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.063441402 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063430164 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06335191 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064494087 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.063795364 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063392512 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.063682445 seconds)
  done (took 3.340828804 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.07389063 seconds)
    (2/2) benchmarking "in"...
    done (took 0.070518615 seconds)
  done (took 1.577359519 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062736593 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.076776902 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.058770181 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.07182904 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067729116 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063421642 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.068776032 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072058432 seconds)
  done (took 1.959421205 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.096056113 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.11911821 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.061385997 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.062018867 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.093247281 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.130710057 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.104815632 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.076494595 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076735748 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064426393 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.061228492 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.102406678 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.060673119 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.074734886 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061911984 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.070460204 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069428894 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080329166 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075271609 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060144506 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074819156 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062386478 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061745609 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063876961 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062635555 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069152151 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.07824434 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07490239 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070760612 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.05950026 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080960854 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060275127 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.061293995 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070448474 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.093963485 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.060175636 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098491907 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061708474 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.065176873 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.05964675 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072674616 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081770142 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074998353 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078867967 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061692281 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.062058298 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061666658 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064057553 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065281453 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070134618 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059808388 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070218142 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062544943 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064485587 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.074445256 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061774136 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06560075 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070189247 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074651806 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071603302 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.073097778 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076294744 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.069649952 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068939432 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.06095455 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080618254 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063204689 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.07481421 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078111031 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062232686 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074898668 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060392286 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.059657327 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.06061712 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097167914 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064398262 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062152928 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061089691 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.060859068 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062340657 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07153898 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068125347 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071056809 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064323335 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077255994 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070773573 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060791176 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068217124 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079676883 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064956202 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061003257 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078404119 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064795867 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060114752 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079288441 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072636907 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063005574 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061713935 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064710261 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07511488 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06214486 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059554535 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.06986523 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062441807 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.240785239 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.064159816 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068351571 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.059420892 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071723993 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065245312 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060728197 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.058198503 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064277533 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060237961 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057990577 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069181447 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059370665 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074116667 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066314692 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074361065 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074894871 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070401879 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075791281 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060588483 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.061191751 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077824664 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069332238 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.060688411 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.077543478 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.058834199 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.070180239 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.058637856 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.060326511 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068956201 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.058405191 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.060895388 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.059115833 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.064457767 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.061430629 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061811101 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.065535529 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.068445288 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073412648 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062986295 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071484214 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062272232 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077327968 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.070446287 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065042716 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06284902 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.060687436 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.072670276 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067453066 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071754607 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.060419855 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061262628 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.060615504 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.071747091 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07075346 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.062219869 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068720776 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.065433074 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.061025554 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.060584428 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.061383123 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064298396 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063667361 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.061001886 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0689704 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070872964 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075160486 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.067540459 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.069891462 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.059629223 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059685888 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061927622 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059565636 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065049535 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.06984656 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076261785 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072562888 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082275671 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.060395681 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071382451 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062528822 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077876463 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074435002 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.061511158 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064896667 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.059531631 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.062013523 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070525473 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072664353 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075291636 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076145939 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065743659 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065790372 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.060366995 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.079848326 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063155701 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070264425 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070550227 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066724861 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.060884035 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062129245 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070154921 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065669628 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061670305 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076957652 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067797152 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060191492 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075503504 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06091625 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.07328903 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060451458 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064774876 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066480376 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06328705 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072192269 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.228393113 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058910658 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059928292 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.075515792 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.061042178 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.060676397 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.068090506 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076285134 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.064631633 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067813453 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070498417 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.070377686 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.064392328 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.069662895 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.060262617 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068927939 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061950091 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.07121404 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.059215944 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077669033 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.058278506 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075549632 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.060377076 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.070848629 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059952209 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069232821 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.06047727 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.076942693 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.061002626 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060036681 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071362053 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058151895 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070525246 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061409408 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066941313 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067120822 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069980579 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.064152588 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071802137 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062413776 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.069357719 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06482871 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.068159717 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069100531 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.064330487 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059338808 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068918128 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072291933 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070868409 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.06226037 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.061876147 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.060898437 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.0715818 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.062272104 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062036736 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072485767 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066797155 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067212701 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062252561 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.062586836 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062332009 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.069798408 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073239473 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082959821 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069690249 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068346949 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070625064 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061001969 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076783525 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.060561888 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.068392284 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059950178 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069677993 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072277015 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061474397 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080333636 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061885507 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068751351 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073439957 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069698998 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.064681018 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.080335453 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064329006 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069541515 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069096146 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066563185 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.070569913 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064407877 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070413459 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071273152 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072553229 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062348191 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070767892 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.074280924 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064420308 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071560543 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.065749172 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070532459 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062750292 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061579926 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067440719 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073066276 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065963186 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066032995 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.060823507 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059397763 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.060915144 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068307033 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.065665575 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.069602192 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07669012 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060696936 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061678851 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060136451 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.064484039 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080884708 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072123034 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070255239 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066983374 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.0607154 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063361223 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063685742 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.062120682 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065355458 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060724608 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061389807 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074367785 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064185178 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066617778 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062195096 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062902902 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.07246289 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066715646 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062392678 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068832544 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061500973 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067258466 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060619562 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063392411 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066532116 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060983935 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06623007 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.073539718 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079353808 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069222053 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071624884 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063157518 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.070609247 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078533122 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.071779563 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063503615 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072842587 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061973413 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.0826952 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.073025489 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072573372 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074419704 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.064061029 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.08083607 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067701193 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.073466929 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.079155281 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064153697 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.072525377 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.062289376 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.079175056 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.067767359 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.062315016 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.071439208 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071511315 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.069589159 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.075478966 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.063583152 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.072496867 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.071288521 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.06750845 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064896049 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.064532699 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072136703 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079869018 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063829529 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.069735524 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071435299 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071734764 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.070851122 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078287176 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.072270467 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064419851 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064995901 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066743897 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.06379902 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075658041 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063364904 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.067633831 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.067486733 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062407548 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069870046 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080246845 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073966853 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073556592 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062258307 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.06175075 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081890713 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066960557 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066668844 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071604636 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.073442996 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076129808 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07299527 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.081042546 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063674457 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.069253242 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07694376 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064501148 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062677617 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066717902 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064522147 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072771779 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073303746 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070749343 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065152303 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.072688071 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076960945 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064206544 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.068228603 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.069751513 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063754022 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.075010719 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071428497 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071913708 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064342072 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062385924 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066379172 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.389643827 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069543893 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070608047 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061933121 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.069717082 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.076164754 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069523056 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063924432 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.060623139 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063633461 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070887724 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066295575 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.060536357 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066490958 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065370002 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068556786 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071037243 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.065921704 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.060217549 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080048422 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069853268 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.073035193 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.064735972 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063474732 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061342122 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.060168215 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072443823 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.060131929 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.062370764 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066082061 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.06240975 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079386447 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069660382 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.078010933 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062986206 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.0658652 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060023071 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070524101 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.065779364 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.06045959 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072003905 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062549073 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078592009 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073350086 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066668948 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.059947476 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065956763 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068935215 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076731707 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071118819 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069742752 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.063309906 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070378411 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062042279 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072257907 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060141032 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059432951 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071119432 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069719339 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07365134 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060333446 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.071384771 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062565203 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070455017 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.07029056 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062305318 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062040606 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062179642 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070488333 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065593622 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.070180755 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.065552871 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.07796872 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.061289105 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071917804 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.070324838 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.072175719 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075353273 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074750062 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069589069 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.061224137 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068597583 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069311432 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.06182058 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065922547 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063736076 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083094302 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062236887 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061895079 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075345513 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068521341 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062586529 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068675775 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066869128 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.071703117 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06189634 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071688463 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066632409 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064438028 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067011839 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067675553 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061444174 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.06003487 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.060154429 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07049267 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.064898933 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.060494386 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080227293 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063013139 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.069517265 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.071928447 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.067312957 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.062053273 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.059275918 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.219224438 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.073066683 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074719645 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062609147 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067758569 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060044423 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068861504 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.058930189 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.068145974 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.067274036 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.06768352 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058473118 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.05891967 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074376218 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075069252 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.064182426 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.075343832 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068635347 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.060467952 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081125465 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068857226 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.061054099 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.07101313 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061265735 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.058343499 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.058249265 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.060767151 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070902394 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058647266 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.061471723 seconds)
  done (took 42.772124823 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102427738 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059910697 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061138215 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058414461 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065755682 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059658723 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058577002 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059774078 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059681496 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060681797 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.05855281 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058651209 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063978242 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073536577 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066536838 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063453134 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058942968 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059790243 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058639598 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059695045 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065191356 seconds)
  done (took 2.847657193 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.064636306 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062229146 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06307234 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062421729 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061574605 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058835363 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062259658 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058894142 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062483322 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059128697 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062490144 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058935624 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.05932635 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.059208598 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059173269 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060388105 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062660606 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061797413 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.060018281 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063011067 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060463715 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06281128 seconds)
  done (took 2.847372628 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.062708902 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.05919234 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067545856 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.05832428 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.058186772 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.062182259 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058355847 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063464659 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063323168 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063497292 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068285608 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059333073 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058045147 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064609368 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058114798 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059271945 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.102954015 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059792954 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059522197 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058207323 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.062107666 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.069109485 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058432256 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058823722 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06364509 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.062187466 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058781383 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061403875 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059401274 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063557329 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059868074 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058444268 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068292652 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067882638 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06383128 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063790994 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.061485714 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.060604417 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058813107 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058780174 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067995359 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060454631 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059004629 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060151989 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.06830159 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058695329 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058623046 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068481893 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058638864 seconds)
  done (took 4.556696931 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07295928 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108663912 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064509668 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.091014568 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070632025 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063945779 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064516596 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.092284466 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.060899724 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060116569 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071359686 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071329651 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061277901 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062379896 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065551948 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.060813591 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061925701 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060797568 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063706088 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061152915 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064408748 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066012537 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.070985347 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.072834842 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06264714 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060783639 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060982616 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062712838 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071243302 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064183812 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062827412 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063296904 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071428356 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066483782 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061020466 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061232003 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07209683 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.061700502 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061772895 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.061586676 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061759818 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063078664 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066373504 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073183802 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061907618 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.0669424 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061710293 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059803832 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.071864487 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061632884 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.06527635 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.07267804 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062754272 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064844218 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064265724 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072438084 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061918945 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060698103 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.06213376 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071791535 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060304843 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062623726 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072328581 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061354409 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.064777895 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.07288739 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067069529 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062872294 seconds)
  done (took 6.149057743 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070822991 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093241486 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072816701 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073032497 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068980236 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.068947153 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068857852 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069465863 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.070158494 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071753489 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069121848 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.133243176 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066080934 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.07029735 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.068934934 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069262885 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069242432 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069321915 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069378733 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069288613 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.06937342 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075060143 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069551717 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073928829 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073855323 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06624564 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069958452 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069390634 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074083213 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.06929256 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073852888 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069542315 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069593452 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074194661 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073883256 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.07063573 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060620177 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069368875 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069772947 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069935173 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066511915 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074885268 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069764045 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.066411984 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.069805015 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.06965866 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074802006 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074355629 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071446998 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07382515 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070609584 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074944378 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070018028 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070180904 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074954692 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077665196 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074492619 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07481411 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070041794 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074779363 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074881078 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.077758441 seconds)
  done (took 6.029026722 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074890249 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063970821 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.076880694 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058390992 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058530254 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067966823 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058522 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058506607 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065907221 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.065331577 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066035762 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068032924 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069860031 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065929194 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067812269 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069527893 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067700069 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068028518 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06500481 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068283749 seconds)
  done (took 2.865932165 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.062871337 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063154756 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058697451 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074077543 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.059096455 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066470063 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059310894 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059195212 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059172721 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059246605 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063679018 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064999059 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059719734 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06715145 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062657237 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066582278 seconds)
  done (took 2.516325466 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.06447366 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.06634499 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.095177808 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.061029911 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.062767796 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061722411 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.06063122 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.059202802 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061138735 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073011755 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060183531 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061926017 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059846155 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.059065562 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.059053619 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061806798 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060900533 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.05979735 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.060230866 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.096238255 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068579434 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060721041 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062450602 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060874499 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061942685 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068144308 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061409272 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062354773 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060027346 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062253426 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061978911 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070824195 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061966458 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063575752 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06063815 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060250891 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060420911 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062464144 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.06251389 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060456132 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.0592074 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.062040523 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060498348 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.06056972 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061504866 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062440145 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061482977 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070126562 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060213199 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062262482 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.061956101 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062699191 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061479926 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071939379 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06315912 seconds)
  done (took 5.017514765 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07892482 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06396367 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.05931533 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058682188 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063647099 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064379564 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064295143 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064287166 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06468122 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058477822 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064572791 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063655937 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064660232 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064226998 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064532385 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064456997 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058319771 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064117541 seconds)
  done (took 2.684540752 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068102736 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063376189 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063745111 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.059895269 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060158964 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064440423 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058686058 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.059988903 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06126336 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060608806 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060393874 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.060034923 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.060061396 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.060234568 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06377418 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060182964 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.060411089 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058832182 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060144593 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058549262 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064572727 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059145662 seconds)
  done (took 2.862964594 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.119047706 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082416011 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.159068406 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.079041503 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088981781 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072215889 seconds)
  done (took 2.125464284 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.096391515 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.100488065 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071162328 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072395036 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070784522 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07027274 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069343286 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068738678 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072476218 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075942256 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076628975 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075528228 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072561832 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073866855 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070056488 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070355214 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070409446 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070107468 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075058134 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078991879 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070346417 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072620937 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069180163 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069521941 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070750189 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077350779 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079612452 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076268018 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069773147 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072922083 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071107165 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070544748 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0738729 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.08350713 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067911327 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073393973 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069711315 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077422241 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071487793 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075793146 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.070104905 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078740727 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073917846 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073793436 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073328533 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070318695 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074575019 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071089969 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077027423 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.086093652 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.072757858 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075194857 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071766373 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073613445 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075047516 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.084822438 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.083248093 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07581699 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072476979 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076360571 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.076091127 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073543082 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075944022 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.08369966 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072663788 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075884123 seconds)
  done (took 6.523152677 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107048401 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066448826 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071763551 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07623949 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074845432 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.078573394 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070197144 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070097191 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069221219 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066555886 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106109101 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071184728 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.082633867 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075630706 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069987565 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069577927 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069337927 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07446079 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068813638 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082091034 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078702115 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075973004 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075200658 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074680579 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075315959 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072042871 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071582285 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070940512 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078867963 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070364446 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073310843 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069761117 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074495685 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067524604 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.0758763 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073485874 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07683207 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073167158 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071065618 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07173422 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075180983 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079373901 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07128185 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.077905362 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078223704 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070725082 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069891931 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06722166 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069697386 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068807769 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077010694 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.084763544 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078020324 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.076051288 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0702118 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070117418 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070853137 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071125562 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076542425 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076469418 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075769684 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070353278 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081958662 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070045024 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072060477 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.078062566 seconds)
  done (took 6.551366616 seconds)
done (took 131.666012721 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.266208157 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.221902231 seconds)
  done (took 2.07154901 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075566839 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.272953577 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.084538674 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.075819158 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.135904921 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.133590069 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.110536554 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.076835428 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.08168179 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.072931437 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.17158575 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.110535616 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073227526 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.079774478 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.100669211 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.074283489 seconds)
  done (took 3.346667374 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.123602374 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.217378394 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.083699152 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.080306663 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.156597958 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.078685539 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.073492206 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078225886 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079384197 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.078595688 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.124261374 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.08588272 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.076684339 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.077585077 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.075180399 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076966329 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.086649227 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.078714821 seconds)
  done (took 3.35562592 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.105959814 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.114407458 seconds)
  done (took 1.846872841 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.162365932 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.11026247 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.155857172 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.633665078 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.143049088 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.145246617 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.149701716 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.149394748 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11510458 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.141458894 seconds)
  done (took 3.523806599 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.109543761 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.111782671 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.318063198 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.105537619 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.083932257 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.086484227 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.077178487 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.08118132 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075850912 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.076996294 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.125303325 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077085432 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.08227173 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127681017 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.100979047 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107808698 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073330823 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.08029302 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.090504882 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.072088222 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.077001286 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080678781 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.182295472 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.084120508 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.108549987 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.077361005 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077807031 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075050269 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.07569809 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.080450309 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.085569722 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.107401864 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080291386 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.085385249 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.077360722 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.099798592 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07350647 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.109509878 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075839425 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073697479 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075641375 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079916818 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.074904003 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.083408566 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.085180945 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078884027 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.081771939 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071747207 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076403288 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.077728 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074516979 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.085256111 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.078401825 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.078690233 seconds)
  done (took 6.589496516 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.124850248 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.113032811 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071921726 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.125136359 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.118258799 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071810685 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.127528549 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.108568437 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.128762691 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.078183877 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071159209 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070113804 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077250395 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080724641 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.123813352 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.124003384 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072677995 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071267173 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.115484186 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.11715687 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070913186 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.133823136 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.119824803 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.114405668 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069312246 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071688726 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070179644 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.07734337 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.081847323 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.078085602 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069968495 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.081165883 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.082295917 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07836989 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.073046685 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.076030799 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069824951 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.078655438 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079161137 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078795704 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077895005 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069498659 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.07752873 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071603145 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071392056 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069367871 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.079151881 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078063824 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.081286114 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.074022456 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.077268057 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070095285 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071676928 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077177671 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.076161037 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.078970872 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.081555516 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.079300709 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071606336 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071933742 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.08122593 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078773571 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078720507 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072218716 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.084884968 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.07509192 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080973359 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.083561262 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069663224 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070222818 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071738856 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071417354 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.078675935 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07717319 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077991457 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070452747 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070776929 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06990765 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079500551 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.082346761 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.076352866 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.079607777 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069965168 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070019642 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.07140154 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07267481 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.081670803 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.086106532 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071823888 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071206675 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070359581 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069906257 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069169236 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.080375846 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.226259527 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.078307365 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.078025597 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069132311 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.079145525 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.078230351 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.0752555 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.081077349 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069416306 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069738873 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068972 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07538546 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.076757592 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077902515 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.077851137 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070052822 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.076926181 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079317955 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069037303 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.074836946 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07841149 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.079296196 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.075871428 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079121788 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069528214 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077506038 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068692563 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07799965 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071019232 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.083824708 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071617324 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068770804 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069061024 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077994638 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068943913 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070159665 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069834144 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.077192148 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077043343 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079649392 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069708248 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076509628 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.077529775 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.07171895 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.082501522 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.07716965 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079629551 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070777633 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069962352 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068759408 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.08183177 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070528864 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.076431027 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.078024573 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.079348708 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070853447 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078813661 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076184383 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070747006 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080777463 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.087763406 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07681934 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.080031346 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070312348 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069804 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07016333 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070707227 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.086674338 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.083955803 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07198586 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070145764 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.076106987 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.079539215 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071209276 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.0780105 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.084396578 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.077633346 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070816168 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070051243 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.080082414 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.082924191 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.079099662 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.087398489 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079243075 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071034009 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077110069 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080098847 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070694061 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085215027 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077042198 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.084954113 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.081088793 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076655164 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.080685714 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.082430991 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.08061328 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.085260502 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.086420514 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070254464 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070218949 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.078839147 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071011067 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072992342 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.079715358 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.079666139 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.073961594 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.08709253 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.072017913 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.082283757 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.071824459 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.08092176 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.076689049 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.077288684 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.084945419 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071686144 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071768685 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.080239787 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.072811281 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.082443488 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.088120535 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.080092847 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071885347 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072270826 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.083781777 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.084969158 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.07344471 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.08019442 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.073154823 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.083413708 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.082292001 seconds)
  done (took 19.486592305 seconds)
done (took 41.852483141 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.179587659 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.126700715 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.23259517 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.215525957 seconds)
  done (took 2.492873629 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.112682789 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.066675693 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.111889724 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.122230484 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.066622817 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.108566291 seconds)
  done (took 2.249884019 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.212320481 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.182729231 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.268623575 seconds)
  done (took 2.327172049 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.377921829 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.164630412 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.268027859 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.534223455 seconds)
  done (took 3.111215697 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.141823162 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.143741703 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.079379739 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.150577479 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.086914107 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.064454682 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.155572326 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.071122415 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.101375206 seconds)
  done (took 2.725058796 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.145051868 seconds)
done (took 14.785625834 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.387827233 seconds)
    (2/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.295004815 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.292283537 seconds)
    (4/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.354797187 seconds)
    (5/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.273790024 seconds)
    (6/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.364132531 seconds)
    (7/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.108192746 seconds)
    (8/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.113911238 seconds)
    (9/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.12911101 seconds)
    (10/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.314670931 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.109080471 seconds)
    (12/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.079431566 seconds)
    (13/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.25804427 seconds)
    (14/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.175643372 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.137295586 seconds)
    (16/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.075943234 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.07759231 seconds)
    (18/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.075767273 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.238760165 seconds)
    (20/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.211470679 seconds)
    (21/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.150516292 seconds)
    (22/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.137747842 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.082584029 seconds)
    (24/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.304555087 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.081838165 seconds)
    (26/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.104156879 seconds)
    (27/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.19135247 seconds)
    (28/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.078315433 seconds)
    (29/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.199075784 seconds)
    (30/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.207700668 seconds)
    (31/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.108665262 seconds)
    (32/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.076160956 seconds)
    (33/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.104379028 seconds)
    (34/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.262692312 seconds)
    (35/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.067284049 seconds)
    (36/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.312462243 seconds)
    (37/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.215125687 seconds)
    (38/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.067840029 seconds)
    (39/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076674161 seconds)
    (40/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.1519782 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.091972349 seconds)
    (42/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.079486762 seconds)
    (43/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.075915116 seconds)
    (44/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.07163857 seconds)
    (45/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.182859468 seconds)
    (46/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.163881868 seconds)
    (47/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.084046282 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.081068209 seconds)
    (49/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.07345021 seconds)
    (50/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.203726871 seconds)
    (51/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.170031018 seconds)
    (52/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.081744316 seconds)
    (53/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.090631796 seconds)
    (54/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.080837252 seconds)
    (55/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.228081002 seconds)
    (56/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.092002632 seconds)
    (57/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.173939808 seconds)
    (58/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.088861087 seconds)
    (59/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.077013203 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.09647787 seconds)
    (61/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.219293345 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.090259039 seconds)
    (63/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.077611241 seconds)
    (64/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.078131579 seconds)
    (65/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.072947996 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.259822043 seconds)
    (67/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.132976984 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.078849128 seconds)
    (69/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.179350112 seconds)
    (70/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.096001524 seconds)
    (71/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.250773086 seconds)
    (72/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.207427057 seconds)
    (73/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071434334 seconds)
    (74/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.215194059 seconds)
    (75/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.078170889 seconds)
    (76/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.082960947 seconds)
    (77/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.21414455 seconds)
    (78/341) benchmarking ("sort", Float32, false)...
    done (took 0.139794771 seconds)
    (79/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.091557908 seconds)
    (80/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.132575729 seconds)
    (81/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.081430096 seconds)
    (82/341) benchmarking ("sort", Int8, false)...
    done (took 0.157104479 seconds)
    (83/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.154631487 seconds)
    (84/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.171109229 seconds)
    (85/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.077945143 seconds)
    (86/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.18951603 seconds)
    (87/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074952369 seconds)
    (88/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069363091 seconds)
    (89/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.08796883 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.077906723 seconds)
    (91/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.084386587 seconds)
    (92/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.217528593 seconds)
    (93/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073642479 seconds)
    (94/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.129771382 seconds)
    (95/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.155350078 seconds)
    (96/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.067804873 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.100728325 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066067024 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.09627021 seconds)
    (100/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.087607144 seconds)
    (101/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.078984051 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.088792551 seconds)
    (103/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.086174595 seconds)
    (104/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.078944942 seconds)
    (105/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.074379897 seconds)
    (106/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.196935195 seconds)
    (107/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.211550568 seconds)
    (108/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067494671 seconds)
    (109/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.152488909 seconds)
    (110/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.075377646 seconds)
    (111/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.190693024 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.09190937 seconds)
    (113/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.074555028 seconds)
    (114/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.143909103 seconds)
    (115/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067085067 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072960027 seconds)
    (117/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.193005959 seconds)
    (118/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.0822513 seconds)
    (119/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068158229 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.1264627 seconds)
    (121/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.196114682 seconds)
    (122/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.213257919 seconds)
    (123/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.06743455 seconds)
    (124/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.067760308 seconds)
    (125/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.180658662 seconds)
    (126/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.067406191 seconds)
    (127/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.147626657 seconds)
    (128/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.066279057 seconds)
    (129/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066585725 seconds)
    (130/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.14550179 seconds)
    (131/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.123636267 seconds)
    (132/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069458748 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.07708331 seconds)
    (134/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.071788003 seconds)
    (135/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.15436611 seconds)
    (136/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.218608593 seconds)
    (137/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.066377686 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151303286 seconds)
    (139/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.074419673 seconds)
    (140/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.067725651 seconds)
    (141/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.084616384 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.076172615 seconds)
    (143/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.214796306 seconds)
    (144/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.074845721 seconds)
    (145/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.068693498 seconds)
    (146/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.187210333 seconds)
    (147/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074811634 seconds)
    (148/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.08154268 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.075483839 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076383814 seconds)
    (151/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.214563841 seconds)
    (152/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073518576 seconds)
    (153/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.06800481 seconds)
    (154/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.246344476 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.11935881 seconds)
    (156/341) benchmarking ("sort", Bool, false)...
    done (took 0.146825599 seconds)
    (157/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.19633765 seconds)
    (158/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.177429695 seconds)
    (159/341) benchmarking ("sort", BigInt, false)...
    done (took 0.2744075 seconds)
    (160/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.143973882 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.066436719 seconds)
    (162/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.073062037 seconds)
    (163/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076354219 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 0.06742078 seconds)
    (165/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.067740179 seconds)
    (166/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.07837765 seconds)
    (167/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.065313993 seconds)
    (168/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065280232 seconds)
    (169/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.150561845 seconds)
    (170/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.066052613 seconds)
    (171/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.06320345 seconds)
    (172/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.066491851 seconds)
    (173/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.075877412 seconds)
    (174/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.064442322 seconds)
    (175/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.082056051 seconds)
    (176/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.146508657 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063469699 seconds)
    (178/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.066066333 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.08282213 seconds)
    (180/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.067673866 seconds)
    (181/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.157892877 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085620986 seconds)
    (183/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.208094276 seconds)
    (184/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.073787839 seconds)
    (185/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064336014 seconds)
    (186/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.063789034 seconds)
    (187/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.217317079 seconds)
    (188/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079723217 seconds)
    (189/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.062090581 seconds)
    (190/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.064368707 seconds)
    (191/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.062254462 seconds)
    (192/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.120174779 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.155387605 seconds)
    (194/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.065554794 seconds)
    (195/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.071403381 seconds)
    (196/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077434535 seconds)
    (197/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.070957909 seconds)
    (198/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.141987903 seconds)
    (199/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067700086 seconds)
    (200/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.071326447 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.112919367 seconds)
    (202/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.08099828 seconds)
    (203/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.20095242 seconds)
    (204/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.067778191 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.155662279 seconds)
    (206/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.065788945 seconds)
    (207/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.062362889 seconds)
    (208/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.074409404 seconds)
    (209/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08450541 seconds)
    (210/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064521896 seconds)
    (211/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.064877802 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130367668 seconds)
    (213/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.064494069 seconds)
    (214/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.068872584 seconds)
    (215/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.065341957 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.073030881 seconds)
    (217/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.198930803 seconds)
    (218/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.071602319 seconds)
    (219/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.065107029 seconds)
    (220/341) benchmarking ("sort", Float64, false)...
    done (took 0.136247428 seconds)
    (221/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.062981856 seconds)
    (222/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066608633 seconds)
    (223/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.171835721 seconds)
    (224/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.068856066 seconds)
    (225/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.067329809 seconds)
    (226/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065180372 seconds)
    (227/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091322676 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.217823864 seconds)
    (229/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.072173808 seconds)
    (230/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.065122107 seconds)
    (231/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.181528186 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.07695454 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075102752 seconds)
    (234/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.065090004 seconds)
    (235/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.141228034 seconds)
    (236/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.085978946 seconds)
    (237/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065595559 seconds)
    (238/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065071622 seconds)
    (239/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.06846041 seconds)
    (240/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.071863001 seconds)
    (241/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.065799501 seconds)
    (242/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.074379275 seconds)
    (243/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.092726053 seconds)
    (244/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.063241461 seconds)
    (245/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.066425499 seconds)
    (246/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.071764714 seconds)
    (247/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069630968 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.094074301 seconds)
    (249/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.068546586 seconds)
    (250/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.088452734 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.086062935 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.147550757 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063441941 seconds)
    (254/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.065470497 seconds)
    (255/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.065129523 seconds)
    (256/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072950366 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.288177663 seconds)
    (258/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.069404603 seconds)
    (259/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.073858303 seconds)
    (260/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.06555398 seconds)
    (261/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064532667 seconds)
    (262/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.063815704 seconds)
    (263/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.064461501 seconds)
    (264/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.064344658 seconds)
    (265/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.070305811 seconds)
    (266/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.064455548 seconds)
    (267/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.065530805 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.063746365 seconds)
    (269/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150590515 seconds)
    (270/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.063882332 seconds)
    (271/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.062545103 seconds)
    (272/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066036207 seconds)
    (273/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.065078695 seconds)
    (274/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.06468552 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063279516 seconds)
    (276/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.063990481 seconds)
    (277/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064241715 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.061884821 seconds)
    (279/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.064437628 seconds)
    (280/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.064074217 seconds)
    (281/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.064211706 seconds)
    (282/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.06357338 seconds)
    (283/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.064028987 seconds)
    (284/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.080988345 seconds)
    (285/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.064504522 seconds)
    (286/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.063886037 seconds)
    (287/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.063607291 seconds)
    (288/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.175751082 seconds)
    (289/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.084739981 seconds)
    (290/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.06382736 seconds)
    (291/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.064365848 seconds)
    (292/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.064895807 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.158407574 seconds)
    (294/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.068967674 seconds)
    (295/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.070613792 seconds)
    (296/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.062035161 seconds)
    (297/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.159475986 seconds)
    (298/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066129536 seconds)
    (299/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.230142939 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092923489 seconds)
    (301/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.065057839 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.064659788 seconds)
    (303/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.06380974 seconds)
    (304/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064085333 seconds)
    (305/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.064262395 seconds)
    (306/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075009188 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.24630347 seconds)
    (308/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070865539 seconds)
    (309/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.067132653 seconds)
    (310/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.145221947 seconds)
    (311/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.075983357 seconds)
    (312/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064818464 seconds)
    (313/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064577078 seconds)
    (314/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064282574 seconds)
    (315/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.064011293 seconds)
    (316/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.064501937 seconds)
    (317/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.071746484 seconds)
    (318/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.089621285 seconds)
    (319/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069495458 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084799912 seconds)
    (321/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.131442978 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076184549 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.064462267 seconds)
    (324/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.06530732 seconds)
    (325/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.065035117 seconds)
    (326/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.232893579 seconds)
    (327/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.065281927 seconds)
    (328/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.064241279 seconds)
    (329/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.06671916 seconds)
    (330/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.064447202 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.18589623 seconds)
    (332/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.065827308 seconds)
    (333/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.067078645 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.064251145 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.064142094 seconds)
    (336/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.090395533 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.200075974 seconds)
    (338/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.064776338 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.140581872 seconds)
    (340/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.06408047 seconds)
    (341/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070739146 seconds)
  done (took 39.760459357 seconds)
done (took 41.452358937 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.125533763 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077264284 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075194108 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.073605914 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076364864 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076102176 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.075921381 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073321152 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077768284 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074589601 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.10768803 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063139157 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.070704112 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.079713149 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072027458 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.078421228 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079484401 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.07859489 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064080018 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078370188 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.088976044 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076575144 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072626993 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078198236 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064230542 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072204985 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.121102422 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083601521 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069093895 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074485036 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071595965 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.07982612 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071623784 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.07110324 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073357381 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.0690387 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.073726496 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070078537 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.121670527 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069075517 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064359559 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.07621624 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072364376 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072199664 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072500868 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075852903 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069127287 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079194175 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063388972 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.074966118 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.121835421 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069491281 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.068653174 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072139161 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.068973618 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.074532482 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.069201696 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.07524274 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.068958907 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075304905 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073437736 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.071647919 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.063649817 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072408068 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.070784612 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071056699 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062553162 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069089902 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.063652342 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064253651 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.064203046 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.072817034 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.070758242 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.068855052 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063255134 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.063962214 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06333135 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.07574132 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071121082 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.072855673 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06450937 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069284087 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.068809233 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.064545479 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070779496 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076269083 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063635936 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.064701378 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063244601 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.078845571 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.070620955 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06400073 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.075853134 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.069566056 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069776621 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064230558 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.063777704 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.06982278 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072664598 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.065637522 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063472389 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070082066 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069397524 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.07329458 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.064802863 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069819391 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069875991 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.063394547 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.073102655 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.07148262 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.073368493 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.07732747 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.073255364 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.078912369 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.065253696 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.063345256 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074191155 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.219548725 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069534319 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07105162 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068239912 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071029789 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063566836 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062251969 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068694313 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069404257 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.064573052 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.06369217 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063705404 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071901506 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070223349 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062004242 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063805471 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071723843 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.071640713 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062460741 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062312094 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071564108 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.06344371 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.06892941 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068900357 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072689362 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062759917 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063465823 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062052643 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062420978 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062090414 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068105286 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068511003 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063422816 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071452765 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070214584 seconds)
done (took 12.768102281 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067697111 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106475416 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.117170129 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.110374223 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077002799 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065222685 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.067686843 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083924485 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.0674183 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089206907 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089174768 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.0870573 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.131016388 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.062804993 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.06422416 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.064768907 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062285895 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075990462 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.114754134 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.08816437 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.106578964 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.063991238 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.079998565 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085539874 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077296889 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08343305 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.0657313 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.06519183 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067399788 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.081620781 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090255735 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064306131 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065437511 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083282255 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080438498 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.072974619 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.066446917 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071776646 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065281936 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064230281 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066315189 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.082944132 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071339314 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071673009 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065318822 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065290921 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064450834 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072140897 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078438965 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070521004 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077863865 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081669844 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066066742 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064478745 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.062705292 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072063264 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064361292 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065143269 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065069486 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064385327 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.064950388 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067318412 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069786034 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.074486484 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068289611 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072860145 seconds)
  done (took 6.637035675 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083624924 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.091907359 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078085788 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.079767915 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.064038024 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064622154 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064441256 seconds)
  done (took 2.221225326 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068138155 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.107321144 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.113893847 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.114366144 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.122663556 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.111951358 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065394463 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097205795 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.063899604 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.107502424 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.121867452 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.117963549 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.067892979 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076813577 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065092998 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.116667616 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065513408 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.071950757 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.112808383 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.118173802 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069275569 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.09552677 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079952832 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066146949 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.116616759 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.108282318 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067457509 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065668123 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067331368 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06473363 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064556103 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.087535421 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.107986563 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079556913 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066558518 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064802097 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.106446607 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065858435 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.104935083 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072188534 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.105476422 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067035565 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067205077 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.064862024 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.065849232 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.111119241 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066309603 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065864195 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064754583 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.109707385 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064364836 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.108052871 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067462362 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.069666432 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071880308 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.070984539 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07214046 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065066619 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.110664951 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075552666 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06778743 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.121412989 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.120486481 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.107068182 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.120704203 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.074494264 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.111120122 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.108043502 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065354944 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065091732 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067057322 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.12265534 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069301362 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068078304 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070408195 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072829538 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.113902967 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.125230935 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.125134575 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.079328246 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.068184059 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.066497011 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.230224455 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.12246225 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069048353 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064170718 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065020227 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.063801726 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069114769 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066075376 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069024726 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.063976933 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074202954 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.068330599 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066637567 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.115153675 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064465051 seconds)
  done (took 10.039067484 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069805779 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.06670352 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065186315 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065321744 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065443899 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065231146 seconds)
  done (took 2.104829477 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.09194553 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065298332 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.0768139 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067870103 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.086730637 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.1104705 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.109343731 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.066929949 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081272439 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076259097 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.11147155 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.113164791 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.112360662 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066560392 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.109764759 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066426318 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.111047432 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.068961916 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076300512 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067243826 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079266578 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.066867216 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.068333103 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.11937125 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068426014 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.066754407 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.074021467 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.076654863 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076354673 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067401528 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.06692832 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068167233 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.074774888 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067064704 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.112984395 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.07606543 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066484307 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070537347 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067858717 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.067926772 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.114943481 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067440711 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069901275 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070389948 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067017925 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.074721586 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.07036628 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069704995 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.114204557 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.071077771 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070459672 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066399648 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.067841199 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070144912 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074549097 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066990075 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070181429 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.112851344 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067138825 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.074673971 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.065764164 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068124124 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068459629 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.06824646 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071118603 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.070678949 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075136794 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067513664 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067698138 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.06629484 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.070718076 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066198885 seconds)
  done (took 7.284052001 seconds)
done (took 29.960010843 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.538891302 seconds)
  done (took 2.210211583 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.974823514 seconds)
  done (took 2.693204554 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 11.390146378 seconds)
  done (took 13.109046472 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.345409163 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.424769052 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.749362521 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.138896554 seconds)
  done (took 3.396746911 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.84096023 seconds)
  done (took 2.56317326 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.238373554 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.226033755 seconds)
  done (took 2.194000897 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.437291489 seconds)
  done (took 2.150920877 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.219046524 seconds)
  done (took 2.93681238 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.238989629 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161800579 seconds)
  done (took 2.127320373 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.631937327 seconds)
  done (took 2.348157557 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.734617577 seconds)
  done (took 6.457374351 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.326761602 seconds)
  done (took 2.103705047 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.238404343 seconds)
  done (took 1.964472759 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.613593677 seconds)
  done (took 4.332553445 seconds)
done (took 52.321187678 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086610653 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.083574543 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083245812 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.07884968 seconds)
  done (took 2.027250637 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075350011 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068349664 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.070837869 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071568706 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068661628 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070331722 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071065016 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067940305 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.070761626 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068748165 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066689022 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.06813913 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070646403 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067712149 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070115377 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071595059 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068036537 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068411063 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.069921724 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067486791 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070579293 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.067918196 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.067373717 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.068182731 seconds)
  done (took 3.383307594 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.07900959 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.069854611 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.074109302 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068965307 seconds)
  done (took 2.019016434 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077394295 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074514061 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.083727186 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087528976 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073718929 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074556973 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.0815862 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081943792 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063544429 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084499551 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065870891 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064666299 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.06466811 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08303712 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080799795 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.061816552 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.062120115 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075409254 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074255189 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.076877711 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066098059 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063297639 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.0738813 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.074892661 seconds)
  done (took 3.493408749 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082901938 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063563837 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.085193323 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088593307 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.089562414 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063383422 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078152442 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090137181 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127598355 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.063865702 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072357515 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063452759 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.102935192 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063552803 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079242446 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108047921 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111306793 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067455657 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096115786 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063964459 seconds)
  done (took 3.400715573 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078199934 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.067756186 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.067955919 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.064002724 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.075316241 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070672243 seconds)
  done (took 2.160182471 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069121653 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.06649236 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.066161156 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070222482 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065940104 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065628659 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065005705 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064069172 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064060891 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064948688 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.06478449 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065228698 seconds)
  done (took 2.515462388 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.219774132 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070972543 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071698497 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.063934657 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065529266 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064689422 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.079878463 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.067486821 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.082250634 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065037472 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065856238 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067223428 seconds)
  done (took 2.715751113 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105598579 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108431891 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140944099 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113019869 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114098822 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093064524 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.165428134 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.094061799 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.159872356 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136315961 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115269082 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092683787 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086323981 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068172839 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098660644 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118922815 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140168227 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071644039 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11190296 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.216523465 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131601111 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134155623 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146428166 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115717074 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.092324078 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146109915 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095451671 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101066865 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124065243 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126674701 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117156485 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.096349946 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070017054 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.070464254 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149813323 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.106769552 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122746969 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092167467 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10544567 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.087951177 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108170142 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.068859855 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083168917 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113924186 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085957649 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13377294 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093037649 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115972388 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081082588 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.304002456 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125200629 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138441274 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083673479 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103049243 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133951955 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108996596 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130950293 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103189366 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079543218 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116328151 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.104164826 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097383694 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105325485 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077367946 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173121443 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08638924 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.108987529 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108834835 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.092844766 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093933883 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104638808 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134572353 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.126847688 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.126668263 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140661364 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095510648 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120175922 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101710704 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.131504515 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105313088 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072128971 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.12244698 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.131257245 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09902446 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102032544 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133666419 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093713091 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078393854 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.101619491 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120182764 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080380135 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.115225231 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081153096 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.112567367 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140015781 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100126201 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113049777 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120361116 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.246301727 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150198188 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106333854 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070583619 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113462221 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108904718 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153235612 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092616427 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.073970999 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098422609 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099774905 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150269614 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104604856 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077469056 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105786511 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137200373 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092044079 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.213635652 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.092629768 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139302154 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107374702 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084386789 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073017871 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088185543 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113211135 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106611218 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111217452 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093508291 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.08364118 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085934896 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114739761 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094070457 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08003729 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113855901 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.100023065 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.075363493 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087702686 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075648146 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1422657 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.078308308 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138307795 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125903706 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077012398 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108377503 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099280501 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110337969 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098137415 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120969185 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14414507 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116707236 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091663764 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.096248232 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109444961 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.149854092 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130247831 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.261359174 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075047507 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098752941 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109779572 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.094834873 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12337633 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093561382 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104113086 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100846646 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137704758 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139586323 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095722486 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098467394 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104279316 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.119874601 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076478032 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155243343 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101793781 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116561041 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082653806 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138873603 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.110706754 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08771173 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086156413 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098887944 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.104512176 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108090828 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143676976 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095178718 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071366691 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092262699 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144257698 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076606816 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109162702 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.09285391 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.092694827 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118328334 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.09449784 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081006301 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067516848 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127403339 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.159421087 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069749966 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115756412 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110755345 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104378735 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.123976799 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069444073 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120371592 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142374739 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119084857 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145897291 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.33523812 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11570683 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115763869 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110014894 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102544864 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081082884 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.121837231 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13076937 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092508235 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088529595 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131236303 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116527513 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.132209507 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.11335028 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115517341 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.103115288 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107145131 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101405096 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101584466 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141058515 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12108122 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.122772459 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08506945 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104645566 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118740812 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13591789 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080828933 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14133598 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084108959 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11989987 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.077434876 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123717287 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.076860855 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108011271 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078036335 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103008876 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070006531 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073458421 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144430269 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114041129 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10849039 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102176651 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.140622326 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.139561585 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079211521 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108647744 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118477248 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102258907 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118977868 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109767155 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.259488485 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092907485 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108362692 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084328683 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079033681 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112135044 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091014427 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121797576 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.081922226 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072891815 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135614739 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101560806 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091933156 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07581296 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10477832 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121307888 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090716256 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08454038 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114769705 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103170092 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137768141 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088918166 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.097063296 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.123427909 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078258156 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.089605042 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067472032 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.083628946 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.07442999 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.126898019 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.074584134 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116214547 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.067829053 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130748232 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086589925 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.091958587 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.1012326 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109406998 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126991444 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093552849 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.14057919 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08879453 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121751316 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108329416 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094760382 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.088967683 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103078468 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100915028 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.124178861 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.096166363 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126020837 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146955642 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104452737 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145530216 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091342077 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124895883 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108492811 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.294303043 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10988668 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166449726 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.135010761 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108636191 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108701963 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072970716 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092705679 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101716733 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109335858 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169484448 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122333468 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070088621 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104068363 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091365816 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105798349 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100548728 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079301418 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140745067 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099653515 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087764971 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109709265 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089075082 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102526396 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07461385 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09890944 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.103769076 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094261004 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096550994 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117075875 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129115168 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112289005 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.144316349 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100231408 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091566507 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118342495 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110232183 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108973432 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084899057 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087426496 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140480874 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122593038 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129351424 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102747709 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11024051 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114440515 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101718164 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128127468 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109787062 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.129752225 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080704584 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.076762089 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.234948776 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071068745 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121054025 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10458251 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11038837 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097394367 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070295838 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100353761 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103292385 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069689614 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.084927478 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090814434 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092889405 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089282195 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104015413 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.109571467 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088766233 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101260253 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096585341 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143061035 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099533971 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085729773 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140522556 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14592928 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087211583 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091851181 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070515195 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077855155 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110686748 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148551022 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.152564197 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077960069 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086433466 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.085497909 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086051914 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.07058215 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.086911317 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088313602 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10578509 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102933341 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113042813 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105641613 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074386555 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101511476 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097769959 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094717034 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109900179 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123529403 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129688647 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.144272963 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116281855 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109667454 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076270746 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.080688396 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.075818113 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079619129 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10212158 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078738902 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075932061 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.312646677 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090301656 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102200081 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105124779 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08753356 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074143649 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133242716 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067254507 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13080074 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069012707 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07895903 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079590691 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076312679 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090197837 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133434688 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108156387 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107850091 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105157425 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100913031 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156945225 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154289852 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078294423 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1400698 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074735781 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07574246 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074188855 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108476169 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087436248 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.113648925 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14092114 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089726122 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100822102 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076927995 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143175464 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.097324002 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103323906 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085323642 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078186049 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143360188 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078661604 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.08005166 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088393261 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111043809 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072223969 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.106724109 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085636922 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079554714 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166675837 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.711327989 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090868184 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.075240402 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096492033 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.145682002 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136172747 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098003224 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.279395415 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.118012196 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098607456 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093660446 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104637854 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188075454 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072359715 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091183108 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.100413861 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094595589 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098559423 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096252372 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.084209918 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.089338112 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084682264 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076908664 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104153716 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085539764 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093761379 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108010334 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081772824 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.087774366 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128022117 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.100806792 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.079981168 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085272856 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102823423 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08524237 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100262595 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.067985531 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111984734 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.089764985 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117384904 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.097125301 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106368518 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127621209 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093322942 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136950649 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.106781529 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122254063 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088531138 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.078463132 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12635569 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.088981733 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076838917 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146450462 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098543658 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091473599 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103682386 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096881761 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11377572 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118009486 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115007851 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09754478 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078701808 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101973098 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.103686723 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.255333129 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079028185 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.074305807 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.075209996 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104283172 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082906655 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081185141 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111459692 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086015754 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099851232 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.099851137 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.119244028 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085077899 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098942885 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108713602 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088496222 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10671955 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098803725 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125017425 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169551136 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120603251 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128106114 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131751738 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.075293178 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.072911006 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.066933026 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114672064 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077863409 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.087824939 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079659623 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132632581 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081354945 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111947942 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.244505803 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080260255 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094232065 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09598099 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.06887168 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.082923217 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106898715 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086743544 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081352998 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119571205 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082667683 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128883317 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110478396 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099275015 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095636101 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08043493 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115120938 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105307479 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.131311377 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.098676425 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.075526048 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125734114 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104403631 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140899469 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.0730989 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080868251 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.132035878 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.272474914 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128122712 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078038033 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145350091 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.140376416 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097674701 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130259587 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068971115 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085354993 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086916589 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.1238154 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08132426 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107885687 seconds)
  done (took 68.158133837 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.181021055 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.174211197 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.119822649 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.13247144 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.291461808 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.29950782 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.152383402 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.123468441 seconds)
  done (took 3.348824155 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.069798621 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081470725 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079285811 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.251214661 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.100493203 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066453891 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071754602 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080388274 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.069377117 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065862843 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.103238159 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.065883063 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.069485755 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.533150731 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065757252 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071362323 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.069532065 seconds)
  done (took 3.792229207 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.356621854 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.639135773 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.329106761 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.775545374 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.168731025 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.724938737 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074533371 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.08167339 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.945507495 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.400305169 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.162181883 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.088981778 seconds)
  done (took 21.617876614 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077638941 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.122238648 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.121129843 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072775444 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072223086 seconds)
  done (took 2.331426872 seconds)
done (took 122.750946065 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085066689 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.171075997 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067128882 seconds)
  done (took 2.132508384 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.123551727 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.119859392 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.118902943 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.120509779 seconds)
  done (took 2.35582349 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.075792107 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074360732 seconds)
  done (took 2.027787612 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227157699 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.215256982 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089581455 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084104424 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078810789 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.078894565 seconds)
  done (took 2.115618277 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072628551 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069290732 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069478542 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069602215 seconds)
  done (took 2.139634369 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.173154622 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.06565972 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.068428825 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071932433 seconds)
  done (took 2.240649781 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087845603 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.087893005 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.11538468 seconds)
  done (took 2.152857871 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.084493288 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.082704363 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077060164 seconds)
  done (took 2.107703968 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110601414 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094745088 seconds)
  done (took 2.066026705 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080531038 seconds)
  done (took 1.946181735 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092915204 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096673151 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.186784563 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.151894703 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.187951425 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.174323405 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075306158 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.075626312 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071391456 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070483647 seconds)
  done (took 3.04350848 seconds)
done (took 26.810806334 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085395773 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.192325753 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.318984368 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085504215 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.652671913 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.312923353 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.731048619 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.091759408 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098333923 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.066975544 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083500116 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.631771096 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.731060857 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.149437732 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.717211268 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.137856404 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.560740703 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06711344 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066056642 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.06694222 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.717897337 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067789868 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067204495 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067403925 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.55847339 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.331205804 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067964137 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.134656224 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069568394 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074073905 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.314084551 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.06798034 seconds)
  done (took 14.224536023 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.095560648 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124867985 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.071490445 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082259694 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.068723508 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068284177 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070626586 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.069877173 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.110484167 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067481039 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084229209 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066454832 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071626183 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068274114 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08743181 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066859572 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069274843 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067564773 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06687746 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067721337 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085771062 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066925228 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067625388 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067597591 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067409687 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.080879489 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068219148 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.066910092 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066849969 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.070756021 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072076702 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068682034 seconds)
  done (took 4.284969 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.128788046 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128530308 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073239448 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.109009469 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115937804 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070080213 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149181638 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089025714 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112834712 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.06759988 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083986854 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066897481 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102106786 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068560833 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087357285 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.066962812 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069490015 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067593569 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066623835 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067312684 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085785744 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066724417 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.06710359 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.06754724 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06735778 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08220991 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.067930383 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.069076432 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067981216 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071308532 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072657319 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068367528 seconds)
  done (took 4.536099531 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070604536 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.06937473 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075272478 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078206589 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064405445 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066422864 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067554175 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.064816297 seconds)
  done (took 2.450915983 seconds)
done (took 27.38299315 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.079918048 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.065665078 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068450446 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085159778 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.071665328 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.112449436 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063116244 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072813762 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069454196 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069512797 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.070926756 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.065628686 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068080391 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.062746398 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069622823 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.063851111 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.115105251 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068239763 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.11192911 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.116643214 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067116411 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069714902 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072598848 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.11373969 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.112777722 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.112929114 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073033038 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.069763414 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064348516 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067164528 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.173611384 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.187221262 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.073894809 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.120372345 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.064720613 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064488857 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.06886042 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067172716 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.116808312 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073638813 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066732501 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.075393037 seconds)
  done (took 5.401237383 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.196411044 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.197419593 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.189366728 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.078756596 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091165183 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078333506 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.195729919 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076104358 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074225234 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.194928644 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.070278569 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074422 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.076654819 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067506669 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074142436 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070438136 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.075702456 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068331692 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074380976 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.076506942 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.196386109 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.068103204 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078571068 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075651442 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.069826529 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.076119225 seconds)
  done (took 4.573550958 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074063756 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087372102 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090769435 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.144546082 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108657193 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081470872 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080676419 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092204495 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.099986193 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066573437 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070414014 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097208369 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094810666 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07325652 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.105527442 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084768579 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.080864022 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068743253 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073195005 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100653041 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089144156 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084726994 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099009365 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086256123 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065433856 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075410999 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.073406095 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.081903073 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073586496 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078476197 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070297022 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.069834758 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.066905687 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.077916876 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.070566995 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064458395 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089090905 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079413294 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081632715 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.1065808 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077117617 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.121173175 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.094505108 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.131976248 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.06660916 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069080157 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.070722037 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079560754 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068223872 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097585679 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082252948 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066596431 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.085613235 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068084384 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.06798266 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082611019 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.068599972 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068474716 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078255816 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072796945 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087511418 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072055977 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087628799 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066578827 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078172535 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.068167339 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070390396 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.066262797 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.10085246 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074375731 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117142756 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.067959629 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064338348 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079048829 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078192771 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07357517 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066440036 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085751622 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078667713 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.0704292 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077816937 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069251135 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.069898875 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103391609 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06549432 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064428859 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.06423801 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.06853638 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.069897028 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.06704763 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.079559993 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066397786 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.071381164 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084126551 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067557709 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067700357 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069214099 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.067922423 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066359571 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077428565 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.070897783 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.068811423 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.079809485 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.068209614 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.070283798 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082283613 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076397362 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.066755941 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068059934 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069365555 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069018938 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.071682646 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.070649233 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.06913305 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.071963763 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.07469786 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.073689373 seconds)
  done (took 11.102136272 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.210829554 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.199313152 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068571939 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.19415789 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075285968 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.128155547 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.195173696 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.133763904 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067222875 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.067940906 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.065942989 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.141644377 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.13556132 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.146367755 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.118160309 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067422674 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093038174 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.146651626 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.202095754 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.195698487 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092902724 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.074853853 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.069538989 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068456608 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068481578 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076280068 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.082914187 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.07586289 seconds)
  done (took 5.214215659 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075382009 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082353657 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070145698 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090763587 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.082983688 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066522495 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.068737104 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067566601 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083547213 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.071856971 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066271313 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.07091226 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.069665479 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067115686 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067765248 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.075422075 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.074132832 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065504684 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070128665 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.070922785 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077669871 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154481385 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071129808 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069867143 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.068864356 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066833362 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.072940937 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.074529473 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066196567 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.0997749 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063700906 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.070725661 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081287021 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067698343 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066586919 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067704392 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.066847417 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.066911731 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067264849 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.064840732 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.064898225 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073499586 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.0682481 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072779373 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.0816811 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.075901483 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068449807 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069471711 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069300481 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.063779506 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.07032827 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.07037616 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.069873552 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.075727847 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.070645047 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069421213 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068706986 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.096584214 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.072998957 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066433231 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.06680524 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06553008 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.068429911 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.074658845 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.083671566 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.0685043 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065191956 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067008833 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074267307 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.082354874 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068492667 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073034943 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064110254 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067031449 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069125606 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.069955267 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.06863653 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065157613 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.066765397 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.06702295 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.067875 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.066777191 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067410536 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.069748538 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.064702435 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065307072 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.067935732 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068493693 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072017982 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.065822405 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069532633 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068631186 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066080196 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.07012125 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073402771 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070396027 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.087808707 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075247328 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.069468825 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067428973 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.083246539 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.06930303 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066624304 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071272995 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.071971997 seconds)
  done (took 9.504307095 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098005498 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.06774527 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086488867 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098095956 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076501306 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071145942 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080519037 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067229887 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087853488 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065263057 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07514196 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064256255 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.079974163 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.07556142 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067732234 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.07668356 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068671155 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087315398 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081208458 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.064722632 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.077271009 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.080295826 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079274314 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.08493208 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.0845375 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085429218 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078662511 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.0686542 seconds)
  done (took 4.149119285 seconds)
done (took 41.82875123 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.98820414 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.164444524 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.977261328 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.489054751 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.05253293 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.067121494 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.050774746 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.974934547 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.238261544 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.047332148 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.86161404 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.63538092 seconds)
done (took 70.52293961 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.078523752 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.127927846 seconds)
    (2/2) benchmarking "String"...
    done (took 2.217457339 seconds)
  done (took 6.338694044 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.40816064 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.978237375 seconds)
    (3/3) benchmarking "different"...
    done (took 2.020413219 seconds)
  done (took 8.305518288 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.296884891 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.723645437 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.254647111 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.972532252 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.977884938 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.453665725 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.078172219 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.604634593 seconds)
  done (took 33.975239474 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.98371827 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.259346171 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.363766851 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.435590609 seconds)
  done (took 22.031387353 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.415419948 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.31798873 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.325242743 seconds)
    (4/4) benchmarking "different"...
    done (took 2.442943072 seconds)
  done (took 11.498041245 seconds)
done (took 94.578716285 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.971513087 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.134536276 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.011965039 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.151117846 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.028701435 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.057572371 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.986461052 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.985931622 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.984215117 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.983111687 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.937641742 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.977124309 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.983890799 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.011073088 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.973451309 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.030737868 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.096423581 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.988586446 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.995911531 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.489872346 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.330745854 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.981655971 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.983716604 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.035265782 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.350665944 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.040350461 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.479611043 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.078387863 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.664677872 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.305152042 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.324488867 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.224537916 seconds)
  done (took 211.481090748 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.063198085 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.810753885 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.796607583 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.010320318 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.316981227 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.414217681 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.833540728 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.344052469 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.995986132 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.00974645 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 4.040064337 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.063945052 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.981311416 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.602311029 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.073712325 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.089934518 seconds)
    (17/36) benchmarking "trmv"...
    done (took 4.119611525 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.985141585 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.137385004 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.060507316 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.132340161 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.597708695 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.611207861 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.774040537 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.005616882 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.045643629 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.01657503 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.01785068 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.498579168 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.865606291 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.021710881 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.278437043 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.200665213 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.426590008 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.098894561 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.085670893 seconds)
  done (took 187.41879698 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.249717573 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.15376471 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.074724214 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.133242827 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.987723554 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.840169705 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.038758637 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.006795561 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.012542667 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.022084721 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.017791504 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.084823996 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.276020119 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.207192765 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.008652221 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.009538431 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.573454125 seconds)
    (17/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.223662649 seconds)
    (18/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.214897821 seconds)
    (19/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.206020847 seconds)
    (20/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 3.005828734 seconds)
    (21/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.530068841 seconds)
    (22/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.563933477 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.254657991 seconds)
    (24/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.336030276 seconds)
    (25/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.447678239 seconds)
    (26/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.31317583 seconds)
    (27/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.250185181 seconds)
    (28/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.365034022 seconds)
    (29/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.205220643 seconds)
    (30/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.24331926 seconds)
    (31/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.201733861 seconds)
    (32/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.101414042 seconds)
    (33/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.132692223 seconds)
    (34/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.275729616 seconds)
    (35/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.561387787 seconds)
    (36/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.194323328 seconds)
    (37/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.18678035 seconds)
    (38/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.099767847 seconds)
    (39/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.208780696 seconds)
    (40/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.178850864 seconds)
    (41/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 6.297241704 seconds)
    (42/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.149792132 seconds)
    (43/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.215063782 seconds)
    (44/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.092032033 seconds)
    (45/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.612838114 seconds)
    (46/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.742606308 seconds)
    (47/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.227660967 seconds)
    (48/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.25514724 seconds)
    (49/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.162350787 seconds)
    (50/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.168236415 seconds)
    (51/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.237398003 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.585575025 seconds)
    (53/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.072126488 seconds)
    (54/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.077752728 seconds)
    (55/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.741837197 seconds)
    (56/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.054679405 seconds)
    (57/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.047773632 seconds)
    (58/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.133387601 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.042545228 seconds)
    (60/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.0195445 seconds)
    (61/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.053969673 seconds)
    (62/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.092915178 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.693186426 seconds)
    (64/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.408306256 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.408394188 seconds)
    (66/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.758062716 seconds)
    (67/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.142195808 seconds)
    (68/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 13.046981582 seconds)
    (69/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.122390884 seconds)
    (70/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.123844557 seconds)
    (71/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.17160216 seconds)
    (72/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.04625082 seconds)
    (73/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.19007205 seconds)
    (74/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.014751301 seconds)
    (75/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.016402925 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.048367943 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.047976944 seconds)
    (78/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.1338538 seconds)
    (79/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.037236943 seconds)
    (80/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.998758503 seconds)
    (81/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.103231811 seconds)
    (82/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.99968567 seconds)
    (83/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.002029113 seconds)
    (84/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.247720046 seconds)
    (85/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.174321301 seconds)
    (86/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.989290295 seconds)
    (87/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.998672515 seconds)
    (88/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.067854346 seconds)
    (89/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.983213202 seconds)
    (90/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.98065465 seconds)
    (91/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.984512596 seconds)
    (92/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.986434481 seconds)
    (93/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.984142582 seconds)
    (94/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.979455257 seconds)
    (95/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.979745162 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.345465494 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.993510126 seconds)
    (98/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.986109247 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.1672695 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.381321697 seconds)
    (101/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.082294908 seconds)
    (102/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.404294966 seconds)
    (103/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.928601648 seconds)
    (104/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.99003351 seconds)
    (105/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.984856619 seconds)
    (106/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.997776568 seconds)
    (107/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.983988912 seconds)
    (108/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.980644206 seconds)
    (109/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.020331111 seconds)
    (110/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.98283523 seconds)
    (111/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.982663157 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.980800983 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.981388859 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.983443106 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.981485781 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.982747908 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.998593162 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.983363598 seconds)
  done (took 443.786772753 seconds)
done (took 846.942814242 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.660876745 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.745361408 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.56208214 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.615802489 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.565675815 seconds)
  done (took 15.061039324 seconds)
done (took 16.969817875 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.015784801 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.016559976 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.995326843 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.013899754 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.00883464 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.004404978 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.016836484 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.022883501 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.013357246 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.000899844 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.008907984 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.003737453 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.013705514 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.013329806 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.025265096 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.01505771 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.003716307 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.994596916 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.009866839 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.005521759 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.002346177 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.00722962 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.000779671 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.009621488 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.019611039 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.004837829 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.009573181 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.008346849 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.030162816 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.011391831 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.021811077 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.017603649 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.012976855 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.01886723 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.014480095 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.01670074 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.011649183 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.0202523 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.007451091 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.020592187 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.016914418 seconds)
  done (took 84.406178288 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.99370681 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.151322698 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.277485045 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.029820098 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.99160032 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.264921682 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.057691121 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.14068709 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.157360753 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.267417357 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.275040668 seconds)
  done (took 25.52321773 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.990529689 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.163405274 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.280574747 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.036079331 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.999524829 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.275131563 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.12300937 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.152115452 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.158798652 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.271548003 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.295415796 seconds)
  done (took 25.676772358 seconds)
done (took 137.520781333 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.547062095 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.040117248 seconds)
  done (took 6.531929961 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.990618132 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.007922374 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.201852669 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.052041278 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.999702967 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.992570838 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.993419645 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.988088311 seconds)
  done (took 18.145735949 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.984200815 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.983344325 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.986982931 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.988674135 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.989608495 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.990761174 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.989775325 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.991353488 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.991823213 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.993401826 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.992466771 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.992749961 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.992665362 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.993146597 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.991511488 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.992398943 seconds)
  done (took 33.755854598 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.987179452 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.987245916 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.987530414 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.986924669 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.988139286 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.987063176 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.98993668 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.988010375 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.98696468 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.986921413 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.987039645 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.987257816 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.987773544 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.986525645 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.98662089 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.986881273 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.98654828 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.989058031 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.990744471 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.989822835 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.991218499 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.992619805 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 2.001620905 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.993253037 seconds)
  done (took 49.648318259 seconds)
done (took 110.031115326 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.527396984 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.942098158 seconds)
  done (took 9.384622054 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.00107876 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.987298946 seconds)
  done (took 5.996312552 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.988413613 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.987961042 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.987480101 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.987206576 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.98865601 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.988292755 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.983419573 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.98571695 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.983998787 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.983654861 seconds)
  done (took 21.783442541 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.983098074 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.98404626 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.983867296 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.98354107 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.983811395 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.983840313 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.983891786 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.983800762 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.984162762 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.983997147 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.984071167 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.984333709 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.983812196 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.983793205 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.983677856 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.984388728 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.984609805 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.98344427 seconds)
  done (took 37.620533634 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.984556182 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.984373475 seconds)
  done (took 5.879118968 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.984194759 seconds)
    (2/7) benchmarking "second"...
    done (took 1.984084465 seconds)
    (3/7) benchmarking "month"...
    done (took 1.984611054 seconds)
    (4/7) benchmarking "year"...
    done (took 1.984295173 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.984305968 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.984231858 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.985789413 seconds)
  done (took 15.802025344 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.985812603 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.127891224 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.173491763 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.447863602 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.986128827 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.987532998 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.619386922 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.98857225 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.989389964 seconds)
  done (took 21.217364923 seconds)
done (took 119.605213498 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.807740556 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.985415698 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.564532113 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.078955623 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.058862918 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.338125637 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.000712123 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.508539392 seconds)
done (took 45.255052617 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.018158411 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.981485537 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.025323105 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.025525805 seconds)
  done (took 22.943516933 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.99161903 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.652394076 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.020268865 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.016070059 seconds)
  done (took 23.682703364 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.48768571 seconds)
    (2/2) benchmarking "read"...
    done (took 2.510100799 seconds)
  done (took 6.92452818 seconds)
done (took 62.482918902 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.985679998 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.985761316 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.986233633 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.98667685 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.986951336 seconds)
    (6/24) benchmarking ("zero", "Float64")...
    done (took 1.986487664 seconds)
    (7/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.98665861 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.986769274 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.987140488 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.986542782 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.987121794 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987553705 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.987121287 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.987174691 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.987157979 seconds)
    (16/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.987386391 seconds)
    (17/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.987298718 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.9879415 seconds)
    (19/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.987452273 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.987516124 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.987903277 seconds)
    (22/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.987221852 seconds)
    (23/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.987424871 seconds)
    (24/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.987958599 seconds)
  done (took 49.602013653 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.988235926 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.988445929 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.988176237 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.988304539 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.98814259 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.988058304 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.988240601 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.98864199 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.988415226 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.987680261 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.988591431 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.988259481 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.988476931 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.98877037 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.988660549 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.988716282 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.989363058 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.988354661 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.988936383 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.989064803 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.988506048 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.989068512 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.988867651 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.988577648 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.989514624 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.989552228 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.990299027 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.989524925 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.989916778 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.989723714 seconds)
  done (took 61.578130129 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.988745524 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.989100708 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.989193518 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.989965701 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.990196324 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.989492207 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.989741347 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.989185279 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.989465351 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.990399434 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.989723356 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.992735395 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.989739138 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.990032226 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.990163892 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.990358823 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.989960325 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.99032421 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.990035168 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.990145569 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.990386723 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.990793562 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.990524671 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.990485454 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.990611656 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.991375786 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.989981197 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.990350092 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.990429852 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.990906855 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.991537265 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.991626333 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.991414612 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.990992397 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.991249976 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.991302354 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.9914195 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.995615529 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.001438785 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.990897071 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.990612347 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.99173337 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.991584029 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.991389209 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.99233718 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.991579806 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.991634932 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.99206101 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.992745684 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.992026864 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.991885925 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.992350572 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.992264878 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.991758668 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.992185247 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.992768423 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.991990793 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.99280288 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.992281401 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.992542878 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.993809703 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.992933634 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.991869021 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.992739296 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.992810551 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.993164967 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.992810345 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.993264706 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.992226889 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.993663458 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.993179841 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.993152194 seconds)
  done (took 145.30666375 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.993320785 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.992537361 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.993544354 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.992589629 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.99348243 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.993041855 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.993426629 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.993287779 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.994046956 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.993723784 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.993452615 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.993528206 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.995113016 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.993518133 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.993362204 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.99376133 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.99393148 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.994002512 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.994914922 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.993666583 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.99392485 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.99383584 seconds)
  done (took 45.779298884 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.993830571 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.994201514 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.993825924 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.993980167 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.99346007 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.994495741 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.994409705 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.994513056 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.994925858 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.994355577 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.994199521 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.993929276 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.994927974 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.994212848 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.99542255 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.994590298 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.994474817 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.994380747 seconds)
  done (took 37.818448905 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.995426781 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.995095353 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.995061991 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.994811828 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.994881706 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.995557246 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.996173771 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.996240507 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.995087883 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.995562161 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.995812656 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.995915879 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.995726198 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.995306635 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.995834845 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.995666888 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.995749492 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.995851002 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.99575086 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.995876893 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.996428773 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.996203733 seconds)
  done (took 45.824599617 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.996167494 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.996398189 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.996498342 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.996065387 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.995990022 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.996188522 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.996175684 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.996637711 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.996385043 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.996801976 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.996734187 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.995873551 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.997136867 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.996883459 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.997058906 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.996948387 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.996613669 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.996745619 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.997203003 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.99658745 seconds)
  done (took 41.853410013 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.995510627 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.995206961 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.995155191 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.99646657 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.995975524 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.995899905 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.996172702 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.995737361 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.996393177 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.996902246 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.99637984 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.996505254 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.996322681 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.996516303 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.99683421 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.996689377 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.997140304 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.996288661 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.996798812 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.996845266 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.997121335 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.997164896 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.997111505 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.997251162 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.996683766 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.997101117 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.996942626 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.996850281 seconds)
  done (took 57.825171543 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.997798696 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.998370723 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.998167575 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.99850784 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.998596599 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.997900249 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.998572004 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.998685407 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.99853537 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.998242359 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.99900614 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.997875433 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.998583382 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.003871701 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.999081622 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.027849195 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.03227792 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.054323958 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.054853174 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.023012397 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.999748129 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.004098175 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.99945739 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.999678837 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.053596402 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.051298719 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.052524048 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.033409537 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.031190755 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.021153546 seconds)
  done (took 62.344905148 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.085665401 seconds)
    (2/2) benchmarking "in"...
    done (took 2.069416834 seconds)
  done (took 6.112502346 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.999247194 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.999545713 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.999312204 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.999660539 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.999945442 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.999499796 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.075023991 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.058667437 seconds)
  done (took 18.056719071 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.09657843 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.048630893 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.999395654 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.999673587 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.998890154 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.005987275 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.064080346 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.031106579 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.001505771 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.002573791 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.003691228 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.003530222 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.061569656 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.07743936 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.006089811 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.005329638 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.005416021 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.012259069 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.069532979 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.021125579 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.00230794 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.000800937 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.037438795 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.320311093 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.375425325 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.377127819 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.384121372 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.375777362 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.383416749 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.378193827 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.384439063 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.379260416 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.374308616 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.378813805 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.373130037 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.376697218 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.384320057 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.384624622 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.377174948 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.380512082 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.381501192 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.381984952 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.385010911 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.385118513 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.379514853 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.378748257 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.380034555 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.377847527 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.382456391 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.38654947 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.393916732 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.379437651 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.378543785 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.380667278 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.381574569 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.373503033 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.370920058 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.377598712 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.382436799 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.387052968 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.386061487 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.411818538 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.393275814 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.37948191 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.381183257 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.394123355 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.414099014 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.380847211 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.383396339 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.380690569 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.385905983 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.382350702 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.37941598 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.379307686 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.395528326 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.38819217 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.376422836 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.379741132 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.37792675 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.379556546 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.380426823 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.3820188 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.380424492 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.379388079 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.392222196 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.417422636 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.380972618 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.37753642 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.38071981 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.384195789 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.389586612 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.385132233 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.386995629 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.38470704 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.386295363 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.389483522 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.379177903 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.379286724 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.383883791 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.389795179 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.384865066 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.381277055 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.387821919 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.391577337 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.380181525 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.38381165 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.381999501 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.380612128 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.391856648 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.386020141 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.385403805 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.382344718 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.387272026 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.387688155 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.381431991 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.38556809 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.396516792 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.389775526 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.38677165 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.386909897 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.38681565 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.38437188 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.394748189 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.419896184 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.382658764 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.390283358 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.387524532 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.399405503 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.384414276 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.381452192 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.384816729 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.380208866 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.379569264 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.382295496 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.38037917 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.379355474 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.384439407 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.378080656 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.382536959 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.381565176 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.387916462 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.384569393 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.388141743 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.383347145 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.391714484 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.382614155 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.388609233 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.395875592 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.384458011 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.384491865 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.386773495 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.38339923 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.385584052 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.38393322 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.384170029 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.380323962 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.382728344 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.383253435 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.388868514 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.383330628 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.384763538 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.386411466 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.392689275 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.382957026 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.382997248 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.387143791 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.383160386 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.380953008 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.380490336 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.385379261 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.384932207 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.381155994 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.384251366 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.384476799 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.383622706 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.384002109 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.384334292 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.386243739 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.392554503 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.401914595 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.390482078 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.400777071 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.387763285 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.393660241 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.393120344 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.389546966 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.388148692 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.380801332 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.38329054 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.387929949 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.394227113 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.397392509 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.422587972 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.409169379 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.398134175 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.398091096 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.404378198 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.403483904 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.397345268 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.398895975 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.394475433 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.399427476 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.395494999 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.394417103 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.393920872 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.398281004 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.395204304 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.394330277 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.397543688 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.392680203 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.393309183 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.389027899 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.394864673 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.397941646 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.390943551 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.398481891 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.39342984 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.393488175 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.404561969 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.397290266 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.39466028 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.39085305 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.39541538 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.393892985 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.39436803 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.377846195 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.375901669 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.335429713 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.242719784 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.218486501 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.120310642 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.091538663 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.090592939 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.096372525 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.265439708 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.279887257 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.290318956 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.326205956 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.364922267 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.337898264 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.294141355 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.28228613 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.289168935 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.32269499 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.383195397 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.343061802 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.301691963 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.284435929 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.311250175 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.341341351 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.324517504 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.314392575 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.31477291 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.329248604 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.323806193 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.337221648 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.324237088 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.299659072 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.314243945 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.328630187 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.331615758 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.331357181 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.287901076 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.299591713 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.341977329 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.33485351 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.342303461 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.329074269 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.312616436 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.319342492 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.335182687 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.31046405 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.301745684 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.303688914 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.331254682 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.323369043 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.334371577 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.334401323 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.326080189 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.335186516 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.30981746 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.317893725 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.32080796 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.317682302 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.330552003 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.32586816 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.301356955 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.33498389 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.324492746 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.333384427 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.332675842 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.294107525 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.340622325 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.323207014 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.303721861 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.341055217 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.325371434 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.318757573 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.325275851 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.318473686 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.300974691 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.326456594 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.348283484 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.327262763 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.340033343 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.306307956 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.292409775 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.320822414 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.357648163 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.356465767 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.349237042 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.305943524 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.306686623 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.304623121 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.339338539 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.355377481 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.332949699 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.296750315 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.325455804 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.325704522 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.344445993 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.33439653 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.309003636 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.316030351 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.345320452 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.338338022 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.326451553 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.323091787 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.308040152 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.314254706 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.346516173 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.361560596 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.3200717 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.292794984 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.327502983 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.310505651 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.337414384 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.354870616 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.327808843 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.317392511 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.3056595 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.310768659 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.336735204 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.339496212 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.342512139 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.322937511 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.297562465 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.340012583 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.338295599 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.332937025 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.360319288 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.332472373 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.312207093 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.320552846 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.32769717 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.335288148 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.335406417 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.309204647 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.318714777 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.325224942 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.34727244 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.360457814 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.336282186 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.314856581 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.32583904 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.309296645 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.349061933 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.346364879 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.357057647 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.319385495 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.32790905 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.336275147 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.345165226 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.346335468 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.309512149 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.316214834 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.335918399 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.347675763 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.339075224 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.327684427 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.343087168 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.318003114 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.33156757 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.346648613 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.322919179 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.323825328 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.33629554 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.323707707 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.317978298 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.33640034 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.332102401 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.328337403 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.34349177 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.30906015 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.332117967 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.305016174 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.296223097 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.336167388 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.355278416 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.329063715 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.329461704 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.315842353 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.322131346 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.323616631 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.349363929 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.353506879 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.324619643 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.317488311 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.300451935 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.299115876 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.343315231 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.369310044 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.323915514 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.336682554 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.315700197 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.308609732 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.340242033 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.351181628 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.33033382 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.325373765 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.319879271 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.327317432 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.345870619 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.342233142 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.337153398 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.34597756 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.323353927 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.34487162 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.342785735 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.332682237 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.33859081 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.345850905 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.33109981 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.340912863 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.334665361 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.322717082 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.341891811 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.34076504 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.322730758 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.348425728 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.340264197 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.315097064 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.368585202 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.329153797 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.30585859 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.334793259 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.313765427 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.340725578 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.354805912 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.315977453 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.347749323 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.336820054 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.320439935 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.343062611 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.333516835 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.333346169 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.332678681 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.328168818 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.327395165 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.346348221 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.325071387 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.334707018 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.359858758 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.359666302 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.331341171 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.307108044 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.331862701 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.322929071 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.353989632 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.359332 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.319340692 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.335730265 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.341704968 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.325508273 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.345767926 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.348579851 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.329366584 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.348424737 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.334462611 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.320060837 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.339558309 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.344527149 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.348291606 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.34012404 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.313192825 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.338620877 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.333441834 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.345942705 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.334408468 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.345108232 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.34672048 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.334010644 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.329271144 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.372359309 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.358525898 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.318188639 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.325729663 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.321247047 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.326849928 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.352563831 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.346909411 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.335990695 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.332578369 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.335010278 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.336052024 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.347744589 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.337313849 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.3473626 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.329554152 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.310279546 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.353814855 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.365819026 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.368480967 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.347527749 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.290190486 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.308809599 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.365526315 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.353677173 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.356608454 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.327230438 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.332605472 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.336629474 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.330548281 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.356168567 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.35778634 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.334382999 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.350619451 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.356332552 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.325879003 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.345938533 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.409045854 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.362847422 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.335582167 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.312861404 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.349280183 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.330609483 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.366738669 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.360600403 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.322559499 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.31191199 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.319702048 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.36550274 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.362604424 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.351015853 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.318101266 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.343516945 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.342020515 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.359853834 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.348043484 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.32013607 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.34321219 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.310645033 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.347671686 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.385710446 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.337914019 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.322740039 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.353556528 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.333548322 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.340482743 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.368564173 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.313058515 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.344902625 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.365795254 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.349852862 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.343641875 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.339361601 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.326023443 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.369452665 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.34051074 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.326735851 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.372839956 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.327382321 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.337007734 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.358493177 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.352690521 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.328235498 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.338742472 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.329363045 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.341073494 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.38568695 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.358253332 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.330411014 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.338546311 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.328930267 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.351905909 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.353072865 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.335736599 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.355209074 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.339617512 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.338256539 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.354371398 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.333039418 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.326067927 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.357737755 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.332042054 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.325413924 seconds)
  done (took 1395.060968932 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.333390761 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.345201205 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.353439894 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.314645182 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.345608452 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.343481922 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.346016061 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.350232823 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.338666547 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.333004957 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.337930557 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.340747555 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.331804596 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.346786189 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.344394874 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.334431518 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.344140808 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.343259678 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.331657566 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.340116023 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.355315912 seconds)
  done (took 51.437975819 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.338953547 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.345972018 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.358126026 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.344913944 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.343104656 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.322227949 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.334187554 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.344181259 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.353720365 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.356000918 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.339439181 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.325930942 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.325955613 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.37774163 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.360082257 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.340653752 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.326050941 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.311750798 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.344684114 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.377317541 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.344320687 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.33137429 seconds)
  done (took 53.806509056 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.349204944 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.368295263 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.335194567 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.334873291 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.357955671 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.338058588 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.331486087 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.342136393 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.34246934 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.361229447 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.373686606 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.354501633 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.33511687 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.344841235 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.333426575 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.366160108 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.478412639 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.308761499 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.342304723 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.336419706 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.371447735 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.362881091 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.312366599 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.366967763 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.349279454 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.330331389 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.342749463 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.347159425 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.329192466 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.358563398 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.346757287 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.358447392 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.35348709 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.332420984 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.327966866 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.342250444 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.359965848 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.350140141 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.344335167 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.350804729 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.336179601 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.37862565 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.358242622 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.346881563 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.357387409 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.349909865 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.331449442 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.332500554 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.36800738 seconds)
  done (took 117.386827905 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.369425225 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.343813907 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.332356683 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.346818832 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.362179331 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.356288532 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.349105324 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.348377291 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.308863363 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.35043138 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.368757879 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.336118652 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.344388336 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.357505636 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.345711606 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.367760816 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.337765279 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.332505589 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.364430848 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.35960645 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.357936512 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.318200579 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.328011142 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.369722758 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.353586186 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.366721914 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.345913052 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.310552865 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.352270065 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.357789155 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.360594297 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.366695401 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.330345689 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.316535903 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.359471904 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.358257787 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.363958167 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.322410903 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.312586801 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.371469787 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.364492423 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.346291578 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.342194704 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.322409787 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.365441004 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.366086802 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.355025316 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.34194287 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.315064029 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.348159957 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.37858181 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.351451024 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.336819591 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.338198569 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.337993945 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.372268886 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.371149695 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.349286272 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.342053777 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.35187297 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.351562411 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.344116043 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.364576817 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.369929371 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.332646469 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.352272968 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.353504335 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.355231756 seconds)
  done (took 162.000200954 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.349310387 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.346317025 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.351559671 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.358206247 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.356952369 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.355603681 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.32490475 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.345487945 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.368551798 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.342196764 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.375613613 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.341102987 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.343703692 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.35566145 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.332616819 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.343506872 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.365473812 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.341542159 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.335890113 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.369315081 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.34605215 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.349090887 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.353423001 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.372964767 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.372550571 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.330209103 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.329681579 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.36742953 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.372261924 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.35008961 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.338678011 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.337213256 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.354289684 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.37173739 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.38789402 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.362201646 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.320560872 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.335237534 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.352698495 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.376843983 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.361874748 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.327333697 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.336465565 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.356343784 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.355490866 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.381046912 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.360646584 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.337748596 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.340919911 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.355385455 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.343208185 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.372924948 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.359196459 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.337078218 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.329576741 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.377159354 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.365084593 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.355596852 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.340037455 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.335932499 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.356689565 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.387696445 seconds)
  done (took 148.150767631 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.341289985 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.348133598 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.331951015 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.384296752 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.37466643 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.332636938 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.345103983 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.352064712 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.337128006 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.361626469 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.364375615 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.358561608 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.380772761 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.337674001 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.349698559 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.376150131 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.338760713 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.369339231 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.372398341 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.328381375 seconds)
  done (took 49.357332909 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.354643369 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.358152675 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.371757677 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.34200418 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.353700219 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.34304688 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.359940709 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.373904086 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.332992981 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.345230783 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.355387776 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.373092319 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.357439023 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.340295377 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.349539484 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.355231431 seconds)
  done (took 39.943428747 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.374194139 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.358991752 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.339807946 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.342703871 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.381254671 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.373054902 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.329576026 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.359943879 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.347086913 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.353942075 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.376023602 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.356374194 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.332173367 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.350518561 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.358842938 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.367018885 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.370975723 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.352608481 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.370154673 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.360141164 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.332100574 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.334748078 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.367111902 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.356976594 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.355255902 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.361250785 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.367458947 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.37113849 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.352562375 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.350715913 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.323776301 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.348802698 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.371964353 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.356812633 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.358888695 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.359418622 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.340259116 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.366846158 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.371245435 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.351571392 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.370502647 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.345952078 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.333098945 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.331742003 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.310179434 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.328473988 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.341618667 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.317014404 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.305247067 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.259665528 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.247641779 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.210343525 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.207716078 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.176982147 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.188996238 seconds)
  done (took 130.813040759 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.373669074 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.450835736 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.439611514 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.454692486 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.438706587 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.454675962 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.456629694 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.472534308 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.44932502 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.410314044 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.336790365 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.326025669 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.320801994 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.296208493 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.315403366 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.33939644 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.340201778 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.314334778 seconds)
  done (took 45.041076326 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.30413805 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.292843028 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.302262575 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.318665357 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.33373542 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.336021272 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.330697922 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.330769973 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.321113387 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.32097167 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.330076575 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.334194624 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.324831217 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.323957151 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.336134435 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.335879515 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.331921433 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.348786161 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.330502427 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.326821667 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.324363459 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.303779388 seconds)
  done (took 53.393888945 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.302490926 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.316906184 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.333132448 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.350189972 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.353219566 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.355128847 seconds)
  done (took 16.225808048 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.327168039 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.313211742 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.289020192 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.287806567 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.287151733 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.301548246 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.305595528 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.299428737 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.334892303 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.312245253 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.308135718 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.337235053 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.326136086 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.312669762 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.312754698 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.319272365 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.298858638 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.315770823 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.339626158 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.320082717 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.30695361 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.287566014 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.224175163 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.205055234 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.211595295 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.218227997 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.197180541 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.221222435 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.204162527 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.204259326 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.220695516 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.205551847 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.207643231 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.239294357 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.195612182 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.224752688 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.212932706 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.222398297 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.20530547 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.220066572 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.209949828 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.202943696 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.221647827 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.209648045 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.222950944 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.196340687 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.220491676 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.202266958 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.213780444 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.222541453 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.198676581 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.219990753 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.201309338 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.201074438 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.182113197 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.12770734 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12042714 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.116808124 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.121088491 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.121602572 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.116530483 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.119206249 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.124934283 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.120528729 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.07941771 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.05266293 seconds)
  done (took 149.277920214 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.119817636 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.119092146 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.117512163 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.120823919 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.053197798 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.087974041 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.11081483 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.095552063 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.052768629 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.091108079 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.062117055 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052229049 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.053335896 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052893469 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052112226 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052468066 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.052008826 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.053097026 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.052254954 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.052873306 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.069628035 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.07401203 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.054212516 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.053520769 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.053141509 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.053754655 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.05381081 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053201378 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053412022 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.053851048 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.053874147 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.054168468 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.053391918 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.053222631 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.053430506 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.053992593 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.053506161 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.05350698 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.053702826 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.053814886 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.053962101 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.054022532 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.05406045 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.0829585 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.093456794 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.073250128 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.054074489 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.054441255 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.055458779 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.053982247 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.055055656 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.055196902 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.054509338 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.054826256 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.054257045 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.054630767 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.055275025 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.055230221 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.054941949 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.055130702 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.055067896 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.056140327 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.055162968 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.055060969 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.054793449 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.056319959 seconds)
  done (took 138.158215114 seconds)
done (took 3124.070383949 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.172045034 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.144930991 seconds)
  done (took 16.295310366 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.223475549 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.121156456 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.238948816 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.182050583 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.134857396 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.137998511 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.091878547 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.088473548 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.178125574 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.088258054 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.159577582 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.091559669 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.088342806 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.088277518 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.087432276 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.08832919 seconds)
  done (took 56.115826796 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.0924749 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.065281351 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.090135089 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.061882423 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.114558159 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.187290615 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.118183305 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.095845163 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.109497884 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.114115732 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.116498695 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.099543431 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.105194875 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.099622805 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.199618325 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.149150372 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.161647717 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.182933214 seconds)
  done (took 40.143249131 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.188523 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.101108066 seconds)
  done (took 11.278727153 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.078683341 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.088767606 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.071066736 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.075223754 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.065317329 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.07084084 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.061065492 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.099591371 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.074264742 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.097044331 seconds)
  done (took 72.797052116 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.066535011 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.064793099 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.40713662 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.075137777 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.073200062 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.095045459 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.061817508 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.125855452 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.065567542 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.059791533 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.075141695 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.410315103 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.106778126 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.062772726 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.503634616 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.081436609 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.069659414 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.126786801 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.106462411 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.068878091 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.069828763 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.095269118 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.308126874 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.825995474 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.094102974 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.076897294 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.070728145 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.058906332 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.059672905 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.06359283 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.06632323 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.061563674 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.097134304 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.066150325 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.081775546 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.069804987 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.698166461 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.115512355 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.072065822 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.18563545 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.126663921 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.071825509 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.061715313 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.070896337 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.059863637 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.06945988 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.825403512 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.130463018 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.064917396 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.223075283 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.68662744 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.086024696 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.199132281 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.213127054 seconds)
  done (took 144.826946834 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.059199477 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.51986368 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.229518445 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.062782489 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.425286055 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.277392563 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.661769731 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.105617454 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.061979314 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.265711791 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.22552902 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.190881203 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.064000111 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.062627776 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.064761025 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.061289944 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.229904953 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.130614245 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.062878371 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.060531055 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.082334289 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.291188604 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.18119749 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.063088552 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.080634144 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.277679468 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.111494343 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.188887294 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.46201295 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.060271666 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.125071968 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.063987376 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.060809899 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.061648663 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.103807169 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.173141701 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.159053643 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.064123456 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.721004493 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.061004722 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.659256948 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.266286298 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.177023792 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.188998822 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.208832495 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.274707006 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.746245076 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.060635888 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.803149495 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.226031832 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.27935931 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.269690089 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.15906347 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.066544699 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.50418647 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.122783328 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.067481962 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.371596751 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.273540537 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.213688595 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.102868421 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.124508005 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.065225506 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.295323889 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.063912791 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.169632563 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.065042527 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.062443261 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.174106043 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.182272526 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.205746913 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.285778516 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.096604385 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.991223119 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.342190328 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.270410173 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.128435965 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.402818499 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.151064476 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.108619754 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.171659878 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.5866093 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.220727627 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.416841554 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.760293188 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.488841993 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.982691869 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.457557501 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.669766378 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.602596108 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.768105172 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.606133787 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.516787203 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 3.313033521 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.458838002 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.452084207 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.313378313 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.572319481 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.446545055 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 4.011535114 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.693310283 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 4.194611272 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.472972451 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.926290358 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.562504127 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.454814932 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 3.065107538 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.457134136 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.672484947 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.50067401 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.460287975 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.455753075 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.603888663 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.401724076 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.454632646 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.850667207 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.523409395 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.449246646 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.610991405 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.456447107 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.710001943 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.296369314 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.591218218 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.267451568 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.363304535 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.510187057 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.498535711 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.399955814 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.702630168 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.636585571 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.488543337 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.684646491 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.37053953 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.381565998 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.681281829 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.386157819 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.36835266 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.5443064 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 6.362891976 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.551706229 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.371941512 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.694715888 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.396536216 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.425608741 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.390248237 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.584182999 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.432113041 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.446112844 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.378174617 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.535382179 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.369005067 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.315182017 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.585858207 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.384621862 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.377081942 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.352337225 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.392215801 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.511875958 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.599854529 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.403366078 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.468329404 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.792276906 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.364986926 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.488146265 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.394882377 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.821910555 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.949518701 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.527502542 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.381145115 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.383113717 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.373787782 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.600640302 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.658901903 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.38957612 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.363772797 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.145275324 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.820447885 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.407254585 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.539515438 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.223121625 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.739890274 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.601210738 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.389651434 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.429488562 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.380324235 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.604335166 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.883652372 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.643151095 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.410518986 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.355722369 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.401242423 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.389585308 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.59589615 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.401890929 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 4.151493246 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.520558021 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.656039656 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.594171993 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.707819959 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.452174913 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.406780587 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.632036577 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.396584177 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.428426267 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.377903861 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.403216837 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.637522828 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.359557969 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.692347783 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.770247486 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.540304782 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.432958112 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.354753438 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.371048712 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.360418805 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.541377841 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.462242219 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.384255607 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.56317587 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.452647549 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.492958322 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.600343451 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.669116492 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.341765494 seconds)
  done (took 979.337858077 seconds)
done (took 1322.774339921 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.401196242 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.374935896 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.401464517 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.380312562 seconds)
  done (took 31.853925277 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.400907178 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.378067139 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.384108434 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.426477584 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.38657478 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.372255957 seconds)
  done (took 16.652190858 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.374004097 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.409685584 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.371992187 seconds)
  done (took 24.467983751 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.76934544 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.660770004 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.458061807 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.524825639 seconds)
  done (took 12.709463866 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.254880767 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.202331825 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.190829742 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.176135042 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.133388854 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.146078219 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.150798919 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.143087137 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.175199065 seconds)
  done (took 21.765956259 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.714083277 seconds)
done (took 116.469315736 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.860056556 seconds)
    (2/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.613830786 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.752340105 seconds)
    (4/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.389355089 seconds)
    (5/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 4.425245304 seconds)
    (6/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.859039246 seconds)
    (7/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.386354048 seconds)
    (8/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.337133295 seconds)
    (9/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 3.28433537 seconds)
    (10/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.992378834 seconds)
    (11/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 4.204776146 seconds)
    (12/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.333242288 seconds)
    (13/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.475648528 seconds)
    (14/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.34642192 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 4.547249174 seconds)
    (16/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.400309338 seconds)
    (17/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.236422614 seconds)
    (18/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.2693258 seconds)
    (19/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.362813163 seconds)
    (20/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.558162892 seconds)
    (21/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.807611713 seconds)
    (22/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.673115073 seconds)
    (23/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.193771654 seconds)
    (24/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.523993231 seconds)
    (25/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.147214597 seconds)
    (26/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.512758451 seconds)
    (27/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.741041359 seconds)
    (28/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.134899778 seconds)
    (29/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.194399314 seconds)
    (30/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.077691371 seconds)
    (31/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.090754488 seconds)
    (32/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.107231386 seconds)
    (33/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.23397241 seconds)
    (34/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.205901735 seconds)
    (35/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.380355611 seconds)
    (36/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.616421745 seconds)
    (37/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.07819269 seconds)
    (38/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.37986707 seconds)
    (39/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.096656974 seconds)
    (40/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.187940731 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.201334399 seconds)
    (42/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.080228475 seconds)
    (43/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.082895972 seconds)
    (44/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.221549559 seconds)
    (45/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.397630987 seconds)
    (46/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.844373472 seconds)
    (47/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.137005259 seconds)
    (48/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.380798644 seconds)
    (49/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.083904332 seconds)
    (50/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.171053387 seconds)
    (51/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.100291257 seconds)
    (52/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.451590245 seconds)
    (53/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.197078947 seconds)
    (54/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.085091107 seconds)
    (55/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.188397562 seconds)
    (56/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 4.827069323 seconds)
    (57/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.084209944 seconds)
    (58/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.18979875 seconds)
    (59/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.23191098 seconds)
    (60/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.592684162 seconds)
    (61/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.528496038 seconds)
    (62/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.443752186 seconds)
    (63/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.095871932 seconds)
    (64/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.073807858 seconds)
    (65/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 9.609445787 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 4.638589575 seconds)
    (67/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.274183138 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.378804322 seconds)
    (69/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.523601837 seconds)
    (70/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.411747271 seconds)
    (71/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.499958643 seconds)
    (72/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.390675647 seconds)
    (73/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.237159708 seconds)
    (74/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.386175254 seconds)
    (75/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.984297683 seconds)
    (76/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.378552792 seconds)
    (77/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.607383502 seconds)
    (78/341) benchmarking ("sort", Float32, false)...
    done (took 7.080726568 seconds)
    (79/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.084031069 seconds)
    (80/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 3.872214003 seconds)
    (81/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.287369631 seconds)
    (82/341) benchmarking ("sort", Int8, false)...
    done (took 5.811551905 seconds)
    (83/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.280270534 seconds)
    (84/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.853331702 seconds)
    (85/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.38677925 seconds)
    (86/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.088604235 seconds)
    (87/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.211778199 seconds)
    (88/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.138436921 seconds)
    (89/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.389330451 seconds)
    (90/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.094397177 seconds)
    (91/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.076841647 seconds)
    (92/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.205790451 seconds)
    (93/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.208372848 seconds)
    (94/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.113009916 seconds)
    (95/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.246460884 seconds)
    (96/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.552487925 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.942826045 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.577951434 seconds)
    (99/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.190810085 seconds)
    (100/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.74707593 seconds)
    (101/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.274499864 seconds)
    (102/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.2311479 seconds)
    (103/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.395093415 seconds)
    (104/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.105695905 seconds)
    (105/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.313584778 seconds)
    (106/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.214308157 seconds)
    (107/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.57530523 seconds)
    (108/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.21889245 seconds)
    (109/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.289266654 seconds)
    (110/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.177193847 seconds)
    (111/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.074354493 seconds)
    (112/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.441446397 seconds)
    (113/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.237028007 seconds)
    (114/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.394966479 seconds)
    (115/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.626304231 seconds)
    (116/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.09291892 seconds)
    (117/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.138041447 seconds)
    (118/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.264641618 seconds)
    (119/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.083309977 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 8.326506228 seconds)
    (121/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.175922939 seconds)
    (122/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.628188119 seconds)
    (123/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.461401063 seconds)
    (124/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.567595299 seconds)
    (125/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.329010764 seconds)
    (126/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.378522216 seconds)
    (127/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.628752196 seconds)
    (128/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.31196563 seconds)
    (129/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.404652021 seconds)
    (130/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.19109047 seconds)
    (131/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.218464051 seconds)
    (132/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.185316217 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.540626303 seconds)
    (134/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.387538133 seconds)
    (135/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.001086118 seconds)
    (136/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.094942369 seconds)
    (137/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.088517198 seconds)
    (138/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.102336429 seconds)
    (139/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.565616325 seconds)
    (140/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.493962846 seconds)
    (141/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.945115061 seconds)
    (142/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.096658107 seconds)
    (143/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.972729797 seconds)
    (144/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.394184077 seconds)
    (145/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.08555692 seconds)
    (146/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 3.677125479 seconds)
    (147/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.107809014 seconds)
    (148/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.081250464 seconds)
    (149/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.243369028 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.377564278 seconds)
    (151/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.585615857 seconds)
    (152/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.09892752 seconds)
    (153/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.395098482 seconds)
    (154/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.398042359 seconds)
    (155/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.206473258 seconds)
    (156/341) benchmarking ("sort", Bool, false)...
    done (took 2.303776783 seconds)
    (157/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.757057057 seconds)
    (158/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.296557187 seconds)
    (159/341) benchmarking ("sort", BigInt, false)...
    done (took 7.08999085 seconds)
    (160/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.262163185 seconds)
    (161/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.563246682 seconds)
    (162/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.102011965 seconds)
    (163/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.095358409 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 7.079347846 seconds)
    (165/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.085411452 seconds)
    (166/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 4.454477642 seconds)
    (167/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.139402156 seconds)
    (168/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 5.355944314 seconds)
    (169/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.163615894 seconds)
    (170/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.090307073 seconds)
    (171/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 3.035722314 seconds)
    (172/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.276799082 seconds)
    (173/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.235549072 seconds)
    (174/341) benchmarking ("map", identity, Float32, true)...
    done (took 4.220438419 seconds)
    (175/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.384059213 seconds)
    (176/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.323774127 seconds)
    (177/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.335636418 seconds)
    (178/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.467190615 seconds)
    (179/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.285215806 seconds)
    (180/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.215477034 seconds)
    (181/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.519489472 seconds)
    (182/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.661215319 seconds)
    (183/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.444256068 seconds)
    (184/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.109951351 seconds)
    (185/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.203456771 seconds)
    (186/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.990659944 seconds)
    (187/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.085363114 seconds)
    (188/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.17504594 seconds)
    (189/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.258140726 seconds)
    (190/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.31553997 seconds)
    (191/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.274023435 seconds)
    (192/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.081104498 seconds)
    (193/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 9.35868508 seconds)
    (194/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.334955168 seconds)
    (195/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.463078584 seconds)
    (196/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.797592856 seconds)
    (197/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.093575226 seconds)
    (198/341) benchmarking ("sort", BigFloat, false)...
    done (took 8.948905558 seconds)
    (199/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.476775835 seconds)
    (200/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.090779282 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 3.545603028 seconds)
    (202/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.908196417 seconds)
    (203/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.3617945 seconds)
    (204/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.237444228 seconds)
    (205/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.081258206 seconds)
    (206/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.303533004 seconds)
    (207/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.245585925 seconds)
    (208/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.311608713 seconds)
    (209/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.662017351 seconds)
    (210/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.378808015 seconds)
    (211/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.651659967 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.249329465 seconds)
    (213/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.295356276 seconds)
    (214/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.627684942 seconds)
    (215/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.496021366 seconds)
    (216/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.21366852 seconds)
    (217/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.368736823 seconds)
    (218/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.106312133 seconds)
    (219/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.080339727 seconds)
    (220/341) benchmarking ("sort", Float64, false)...
    done (took 8.682037171 seconds)
    (221/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.240659406 seconds)
    (222/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.602353948 seconds)
    (223/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.626968945 seconds)
    (224/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.308244851 seconds)
    (225/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.409050496 seconds)
    (226/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.632137203 seconds)
    (227/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.592155247 seconds)
    (228/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.170221411 seconds)
    (229/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.215845934 seconds)
    (230/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.313965994 seconds)
    (231/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.39337346 seconds)
    (232/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 3.130751991 seconds)
    (233/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.668745205 seconds)
    (234/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.244491094 seconds)
    (235/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.444968029 seconds)
    (236/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.358099994 seconds)
    (237/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.756891432 seconds)
    (238/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.480414811 seconds)
    (239/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.261120866 seconds)
    (240/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.223542773 seconds)
    (241/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.191503297 seconds)
    (242/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.366076706 seconds)
    (243/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 9.469875049 seconds)
    (244/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.460256827 seconds)
    (245/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.219423571 seconds)
    (246/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 3.173942649 seconds)
    (247/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.496973566 seconds)
    (248/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.412236643 seconds)
    (249/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.527516704 seconds)
    (250/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.106717957 seconds)
    (251/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.316597741 seconds)
    (252/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.196302931 seconds)
    (253/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.351861529 seconds)
    (254/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.642705227 seconds)
    (255/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.696223335 seconds)
    (256/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.112596267 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.494241958 seconds)
    (258/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.286724631 seconds)
    (259/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.287939765 seconds)
    (260/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.193186155 seconds)
    (261/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 4.685390962 seconds)
    (262/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.433577735 seconds)
    (263/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 3.155761153 seconds)
    (264/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.290500865 seconds)
    (265/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.14316015 seconds)
    (266/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.251518606 seconds)
    (267/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.121073674 seconds)
    (268/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.511366752 seconds)
    (269/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.218034062 seconds)
    (270/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.305986546 seconds)
    (271/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.235658973 seconds)
    (272/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.122886282 seconds)
    (273/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.396261404 seconds)
    (274/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.522798605 seconds)
    (275/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.191333852 seconds)
    (276/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.13238106 seconds)
    (277/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.538482086 seconds)
    (278/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.27932323 seconds)
    (279/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.630483904 seconds)
    (280/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.548477488 seconds)
    (281/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.729832756 seconds)
    (282/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.238057481 seconds)
    (283/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.449274737 seconds)
    (284/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.508793929 seconds)
    (285/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.253442272 seconds)
    (286/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.622985418 seconds)
    (287/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.543077323 seconds)
    (288/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.292616827 seconds)
    (289/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.160471504 seconds)
    (290/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.56238732 seconds)
    (291/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.26821592 seconds)
    (292/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.226455722 seconds)
    (293/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.180603925 seconds)
    (294/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.403599107 seconds)
    (295/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.166264125 seconds)
    (296/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.307661186 seconds)
    (297/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.504496574 seconds)
    (298/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.417334953 seconds)
    (299/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.139959526 seconds)
    (300/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 3.05158375 seconds)
    (301/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.75519263 seconds)
    (302/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.691824517 seconds)
    (303/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.52257705 seconds)
    (304/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.621551865 seconds)
    (305/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.779078962 seconds)
    (306/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.107333567 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.299204222 seconds)
    (308/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.571504583 seconds)
    (309/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.23557805 seconds)
    (310/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.19804666 seconds)
    (311/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.31414366 seconds)
    (312/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.424528508 seconds)
    (313/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.435891602 seconds)
    (314/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.918609603 seconds)
    (315/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.652981991 seconds)
    (316/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.45040938 seconds)
    (317/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.187394359 seconds)
    (318/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.155564282 seconds)
    (319/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.468924118 seconds)
    (320/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.401089389 seconds)
    (321/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.339743846 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.33505755 seconds)
    (323/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.595917729 seconds)
    (324/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.196634571 seconds)
    (325/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.827944947 seconds)
    (326/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.213390929 seconds)
    (327/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.338566285 seconds)
    (328/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.409567477 seconds)
    (329/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 4.030887942 seconds)
    (330/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.526329837 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.240705272 seconds)
    (332/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 8.969839404 seconds)
    (333/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.576140699 seconds)
    (334/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.558089701 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.483387048 seconds)
    (336/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.255665558 seconds)
    (337/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 4.427234538 seconds)
    (338/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.324786441 seconds)
    (339/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.344163894 seconds)
    (340/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.22370863 seconds)
    (341/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.164429205 seconds)
  done (took 1226.397598132 seconds)
done (took 1228.644440923 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.153471938 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.160743924 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.76290165 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.14641464 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.128557672 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.170630508 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.726049511 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.228138451 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.149088256 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.744466414 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.171435951 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.137983871 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.155389373 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.159262117 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.148044103 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.219162272 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.199315217 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.173758928 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.220160647 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.161215953 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.28508823 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.155568868 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.20035342 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.296073301 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.270319829 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.166124905 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.215096658 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.358838847 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.21911373 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.263447735 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.110533453 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.626398267 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.192690329 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.174368241 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.146265271 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.136169148 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.135759722 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.137861795 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.153572721 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.177911457 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.112010475 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.110024389 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.185246313 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.23470222 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.17014836 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.13143967 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.119693318 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.213102418 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.124766204 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.526250029 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.19674325 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.144130576 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.193669408 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.121125569 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.118142626 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.122661003 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.198272997 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.12917288 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.117607966 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.522872117 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.265482438 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.252019802 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.652875362 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.295615717 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.261481103 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.257585142 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.106702385 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.154801787 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.631432881 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.75204701 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.192922336 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.160814438 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.163766667 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.108324969 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.103834099 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.685763173 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.38248715 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.870229207 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.238613479 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.19434755 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.210613681 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.189626556 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.202543391 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.195368812 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.218228847 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.184640392 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.20410604 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.194394382 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.215992093 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.584624026 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.254383231 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.776267051 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.20007403 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.224316355 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.208862772 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.880702801 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.218406509 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.2340142 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.188511714 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.60790754 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.241987299 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.225635441 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.200742542 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.206178861 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.29205471 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.216579262 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.193863316 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.09623097 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.116186896 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.103363682 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.09359286 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.105358026 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.117111384 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.111080849 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.104773255 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.093833445 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.103587853 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.103068516 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.11787105 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.108390173 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.100856862 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.10501192 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.096417774 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.141371045 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.118933841 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.102291802 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.190632413 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.097875743 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.192322891 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.103486957 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.11460317 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.096860089 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.500861924 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.155347228 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.118604042 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.102741388 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.118699587 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.117822996 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.105452454 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.097283309 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.104622807 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.096799908 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.145771999 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.095368717 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.120064426 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.14279102 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.106167144 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.123620604 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.126208784 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.113021339 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.11956235 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.101495961 seconds)
done (took 339.475073823 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.151383346 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.48172877 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.169414361 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.101030793 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.178799975 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.159437374 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.099437489 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.100348744 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.123678936 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.548294918 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.101759643 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.102073612 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.477502954 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.100783866 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.155456576 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.101464836 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.102247534 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.40780532 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.141621779 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.178510793 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.115637627 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.100918396 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.101349059 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.537180733 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.10005245 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.107031925 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.163337594 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.102537532 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.381555963 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.100473036 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.118892569 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.379351827 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.163475204 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.104611344 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.103363532 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.102730286 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.177960832 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.108562444 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.154482126 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.154080195 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.172334403 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.106904726 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.103340299 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.129453756 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.108126527 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.102257816 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.102836359 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.107788485 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.100590509 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.103903538 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.380430935 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.103604472 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.104201668 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.103308696 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.102949201 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.105243029 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.103266176 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.102846028 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.16698999 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.102808672 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.15567582 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.538436521 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.550519513 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.104357033 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.119392892 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.104098408 seconds)
  done (took 166.468634837 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.191008374 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.200591948 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.193864643 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.110209685 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.163734923 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.183284777 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.110158348 seconds)
  done (took 17.177166664 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.111631568 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.103261598 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.135205339 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.130063656 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.102396155 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.277711635 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.116872041 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.107347723 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.133461762 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.107462388 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.468588663 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.130703324 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.10481405 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.18604273 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.11815132 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.139419855 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.10662869 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.104151319 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.21182362 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.180159073 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.105813404 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.105737904 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.139844488 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.118006526 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.10540433 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.107903559 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.104449029 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.113603871 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.104966428 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.104884351 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.104660343 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.121862915 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.106114578 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.167504102 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.104840962 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.106925514 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.104442803 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.105209289 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.10591654 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.493338558 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.106084539 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.105350835 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.106179157 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.105649201 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.10534374 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.132058952 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.105999604 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.105669676 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.106123355 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.106684203 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.14064543 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.106782026 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.10655034 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.107660278 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.142940881 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.10737508 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.105551919 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.106461935 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.106550097 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.106837276 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.106503242 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.181771654 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.136233648 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.106549301 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.136795681 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.145922958 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.106806808 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.106895019 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.107191771 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.135806686 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.106948691 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.139032149 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.107479608 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.198283606 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.107658575 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.278125735 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.139747896 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.118104488 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.125343595 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.151469186 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.131267435 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.156496627 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.175367196 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.196865925 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.164657781 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.229829632 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.126695658 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.113671726 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.118852621 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.216685801 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.508952922 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.39477842 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.38995647 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.40200573 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.236897563 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.341465633 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.217993656 seconds)
  done (took 213.822257961 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.202381799 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.188099752 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.202703964 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.188011155 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.174686645 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.119319283 seconds)
  done (took 15.192368244 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.113765142 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.115971012 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.111189043 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.111342693 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.110019485 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.111903674 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.110916046 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.11402775 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.133252326 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.114299866 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.141622799 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.152272803 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.161718718 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.314426449 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.523261242 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.522218962 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.276052844 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.135212017 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.179739246 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.176242844 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.386720542 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.228717612 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.181991392 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.276649748 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.204713168 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.190757725 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.210819132 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.196936593 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.225281459 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.23985339 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.280347797 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.256804859 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.250930479 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.198001458 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.20579968 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.22030412 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.202558536 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.198360292 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.193487185 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.184244905 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.185396017 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.172652232 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.185197012 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.174419201 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.180882394 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.215831892 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.203695288 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.22135613 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.145115578 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.139746565 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.157135049 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.137106627 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.159514789 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.17366021 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.218843392 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.19516228 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.1963056 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.156536914 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.142976894 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.174347332 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.189919309 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.207875586 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.176693745 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.196073866 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.189224362 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.177923115 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.21623903 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.251081612 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.200342363 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.187205195 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.170287159 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.142884899 seconds)
  done (took 160.140599584 seconds)
done (took 574.821458135 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.265019927 seconds)
  done (took 9.413418563 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.569665306 seconds)
  done (took 9.940327395 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.755459697 seconds)
  done (took 14.973054743 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.1685838 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.334495261 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.355195074 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.426350734 seconds)
  done (took 31.414259052 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.456161004 seconds)
  done (took 9.578694149 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.165380047 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.595919258 seconds)
  done (took 17.208537465 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.59165496 seconds)
  done (took 9.843760608 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.58346766 seconds)
  done (took 10.099944203 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.315117802 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.348884209 seconds)
  done (took 16.923352122 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.529185371 seconds)
  done (took 9.852030457 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.360565144 seconds)
  done (took 11.769347246 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.199496162 seconds)
  done (took 9.606241257 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.220047835 seconds)
  done (took 9.681161483 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.361409257 seconds)
  done (took 10.444535159 seconds)
done (took 182.815337243 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.469728758 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.152367585 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.133999408 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.128390983 seconds)
  done (took 31.05293936 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.160719921 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.168117148 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.161309251 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.17078276 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.151144275 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.159883722 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.180790301 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.195302879 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.168803012 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.192539739 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.171850561 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.188464371 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.211750379 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.212900242 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.160645412 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.178296823 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.178576921 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.163605861 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.146756459 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.163339208 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.178005457 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.177462246 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.125039255 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.120211341 seconds)
  done (took 54.140336019 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.32826866 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.192695991 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.290770389 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.183336356 seconds)
  done (took 11.035479436 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.118149055 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.194773248 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.182779626 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.177127389 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.177848593 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.286585848 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.180994223 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.327107629 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.268989595 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.295053346 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.123795923 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.134101708 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.137660985 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.176549583 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.285742567 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.116715379 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.116083253 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.295417708 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.194948574 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.318169954 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.121235088 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.181256795 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.177637796 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.177118326 seconds)
  done (took 54.80209072 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.118034784 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.131749255 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.129110034 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.121151654 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.118615036 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.118643896 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.130649629 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.139137498 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.150741696 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.122424517 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.123029614 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.119963936 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.119567993 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.122990782 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.119508284 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.142385002 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.135964918 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.121288623 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.121581025 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.13564346 seconds)
  done (took 44.58071219 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.117767141 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.360785446 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.336563982 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.281288219 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.118908743 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.12029271 seconds)
  done (took 33.373708863 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.138717855 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.141407778 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.13133155 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.159542535 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.190218573 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.134277795 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.206956711 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.333476357 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.133007198 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.205795257 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.147669655 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.1284822 seconds)
  done (took 28.100746761 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.118616841 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.120039206 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.121669877 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.135544357 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.132491971 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.130423298 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.13315456 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.137727754 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.137457121 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.144308917 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.130255197 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.137230673 seconds)
  done (took 47.619496072 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.300954252 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.298969479 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.418982376 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.788953828 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.66026835 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.18866252 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.538166463 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.63558233 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.223820382 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.285197566 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.623228606 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.156005827 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.625354332 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.071700369 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.119612943 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.396530952 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.122321872 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.597561801 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.552128361 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.195345654 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.157149875 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.120801003 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.120681679 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.655328118 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.432854169 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125985298 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.314730652 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144859041 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.125335492 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.326760508 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.133494343 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.182975675 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.331858345 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.448109469 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.640956952 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.228703463 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.317541553 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.570903086 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.373245013 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.332060594 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.337996632 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.275708815 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.264929051 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.365549935 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.51247307 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.196764108 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.146335863 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.72484572 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.09843204 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.412905059 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.396412273 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.011537253 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.519394863 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.594042448 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.762464119 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.900147511 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.650008393 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.994557543 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.66734156 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.774889586 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.691189031 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.590568407 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.670051063 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.449752253 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.083799983 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.678497144 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.497470752 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.510320442 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.805089678 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.788472702 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.600646496 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.753341327 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.268400983 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.512426409 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.486737726 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.486522575 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.622236914 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.528620605 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 4.223194218 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.029578049 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.463717701 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.597517425 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.195574976 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.487887634 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.495998832 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.487057899 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.071418546 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.467164019 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.562616514 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.668047154 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.865595079 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.481870193 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.491901169 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.508244077 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.480504608 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.45200953 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.29238555 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.563331795 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.430673968 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.032969511 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.490906497 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.515127745 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.471293144 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.560651904 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.840394257 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.528285979 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 3.217356291 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.117123358 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.763997808 seconds)
    (110/608) benchmarking "5d"...
    done (took 4.0388068 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.492962111 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.476813904 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.566024498 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.562237722 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.473703048 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.168602653 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.728769688 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.694621773 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.656393237 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.485053339 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.441860711 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.500283831 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.644044205 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.485046487 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.607001261 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.478801967 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.482185796 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.490757948 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.482176418 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.732883667 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.512987206 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.01352256 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.59367037 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.483672326 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.441714124 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.501129267 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.996762891 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.585349943 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.55438654 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.918506322 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 6.090744145 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.991348869 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.459020554 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.254194452 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.951643597 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.606324086 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.572627919 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 4.591378249 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.628906387 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.56721998 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.505252941 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.621346965 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.504031511 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.512803896 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.493408036 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.246952929 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.197737399 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.532713167 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.486859602 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.44977502 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.742049619 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.696097045 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.31048906 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.5278053 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.507600116 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.588413157 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.684864055 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.485748355 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.438550448 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.812669296 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.720501378 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.000980318 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.848029046 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.271823454 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.558266706 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.490626581 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.686259337 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.568726872 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 5.184615798 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.147898216 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.798494899 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.136485038 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.483556911 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.486339494 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.677386586 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.899060967 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.514451063 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 3.257154365 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.715762507 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.194404855 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.519369075 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.937426922 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.43524843 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.484755952 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.916571002 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.494789963 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.059233264 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.560421519 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.625380326 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.475906361 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.472871718 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.483579396 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.819714732 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.606897887 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.560077834 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.557821097 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.458668753 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.111707177 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.525921412 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.486305124 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.479963388 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.048663057 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.812227873 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.502957741 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.481704117 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.573932171 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.587392845 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.096413469 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.494672736 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.503451308 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 5.030565309 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.501968102 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.0145482 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.489271735 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.719501495 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.529130387 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.654030469 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.359005928 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.178728824 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.59725789 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.569466636 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.490851572 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.495451202 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.751619525 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.494228901 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.771339431 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.988331239 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 6.084887756 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 3.215494005 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.589166926 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.11390865 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.505479018 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.489299255 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.214705031 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.521154645 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.512833222 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.659906798 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 3.100661962 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.744415505 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.525924238 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.574920218 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.479370176 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.948863729 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.096854804 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.475119686 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.506531667 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.616361574 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.488202234 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.651809621 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.250119298 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.477559414 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.482140793 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.488283261 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.662671112 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.632473675 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.840505082 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.015689621 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.833395054 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.444520015 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.499783581 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.598590062 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.775144401 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.503589562 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.539840487 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.133193327 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.28518015 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 3.26846898 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 3.047084213 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.847187929 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.123016451 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.947141989 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.596492273 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.506158498 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.429148376 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.678392286 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.475540168 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.630746215 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.447829229 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.354174139 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.809786693 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.513483682 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.96743127 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.550090857 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.013424539 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.861570422 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.684463509 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.624205469 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.527201187 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.497553311 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.557011742 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.499766636 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.715503824 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.646613794 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.503761569 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.102502735 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.560987755 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.550375218 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.499311245 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.23720337 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.52376683 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.490176108 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.988638754 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.531250133 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.618085677 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.579824238 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.398091566 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.533945828 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.601944276 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.970947309 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.069375399 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.958663116 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.585445494 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.048446982 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.560358873 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 3.254008176 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.497963574 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.712727766 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.519061352 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.384696694 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.572801031 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.878688938 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.521880277 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.682783423 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.78207501 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.597794033 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.503270119 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.470787805 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.059953057 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.659326312 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.974327989 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.504656602 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.259272716 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.051551229 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.788156861 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.079026574 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.446924943 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.5077985 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.950975019 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.331280694 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406469308 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.533035922 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.505715666 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.897016583 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.685164804 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.701802535 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 4.241939487 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.50728595 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.531534536 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.69533863 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.616642972 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.455873414 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 3.033393786 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.24865084 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.760935737 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.507580663 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.650522275 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.730262604 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.962161437 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.535290389 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.585093309 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 3.275285922 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.975558242 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.609483859 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.461219561 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.503269429 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.762612763 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.970110536 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.578287949 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.807960613 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.920622777 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.528917969 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.508090199 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.551801186 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.177527878 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 4.209785964 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.211023299 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.790690004 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.972567007 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.981228017 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.48667492 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 3.236539412 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.671311408 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.607655797 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.844668564 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.380881621 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.874750168 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.765675902 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.49048776 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.442883159 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.644437299 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.49556393 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.551963779 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.332664851 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.76322583 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.666597257 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.29630369 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.081380811 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.739363781 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.508288738 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.517610289 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.509638027 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.520437479 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.485568534 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 3.023258554 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.882405601 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.510949963 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.457032548 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 3.239360523 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.442456697 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.686847586 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.739645263 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.535717814 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.315340021 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.698897427 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.663731275 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.197252577 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.83972375 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.536945623 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.451916069 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.65163529 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.477726562 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.269884889 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 3.279344374 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.510320712 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.508971165 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.647498741 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.472248112 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.535282499 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.505772271 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.775518919 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.981272733 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.974857657 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.662447108 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.81889166 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.763888469 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.502255411 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.586263535 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.713280871 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.441946741 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.480923839 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.563486064 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.529344254 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.554232711 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.481957604 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.508219315 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.745607634 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.726746641 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.640615522 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.548420114 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.579525458 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.512972058 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.72790562 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.644642676 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.488271578 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.497938154 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.487718494 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.751632261 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.531625845 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.453027829 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.695288783 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.573813042 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.871479057 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.561676019 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 3.080478946 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.493538475 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.499041678 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.634278903 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.020904524 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.48881175 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.671779649 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.574779961 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.495640937 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.961904577 seconds)
    (484/608) benchmarking "6d"...
    done (took 4.156332727 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.649576574 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.172474577 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.58282624 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.755556372 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.562275825 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.501906389 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.50958142 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 3.116835658 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.873040679 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.511048 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.968816825 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.569764842 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.512236947 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 3.277051351 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.983236333 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.496916061 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.40026699 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.521963242 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.95280434 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.099963467 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.505658345 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.640049261 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.515325075 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.472056368 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.600751814 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.533497275 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.028130218 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.509218579 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.036071672 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.773403572 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.647301564 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.504053943 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.503122337 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.539855786 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.705443249 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 3.109562857 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.531340545 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.764686409 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.686002806 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.505395498 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 3.030305003 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 3.172412938 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.843016076 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.546534137 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.749630769 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.851162025 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.294866973 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.817145055 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.082580732 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.679137572 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.49994684 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.729639719 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.750259976 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.497240499 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.682601399 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.497399588 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.85043827 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.796769644 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.109456766 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.613890317 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.775112878 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.789381403 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.545453616 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.075419094 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.005878808 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.627090116 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.544481815 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.557458793 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.538746286 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.708814494 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.122417223 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.688965892 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.794584334 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.854761192 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 5.064647538 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.538810652 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.503614622 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.547372294 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.563317195 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.546543264 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.499010497 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.698183498 seconds)
    (567/608) benchmarking "2d"...
    done (took 3.399992317 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.724881019 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.863458293 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.495889717 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.707487527 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.563547106 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.492123389 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.013870549 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.558004574 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.803643234 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.479430066 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.502115222 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.491323067 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.738553336 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.653136417 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.870470406 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.513624505 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.253367861 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.54896841 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.535240678 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.550480264 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.631674429 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.541091918 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.78083161 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.01199148 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.897217503 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.702169991 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.370779384 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.684374063 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.534211617 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.593096862 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.37619058 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 3.084185476 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.765605953 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.74282626 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.414592612 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.525635203 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.067095895 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.56459066 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 4.26288727 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.541323194 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.549363229 seconds)
  done (took 2671.793879569 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.57063041 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.669949011 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.610204981 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.670248032 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.613321328 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.645711979 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.645262668 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.574734474 seconds)
  done (took 63.459791976 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.541101877 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.572071993 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.558596416 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.54666836 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.544018297 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.563793684 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.775747805 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.586360836 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.551070542 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.56534007 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.531860989 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.553777287 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.541772095 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.508287953 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.519517815 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.762546895 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.540891039 seconds)
  done (took 89.261181778 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.561353461 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.388528498 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.508432904 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.860121773 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.580768005 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.769984024 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.510044355 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.553167362 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.584925353 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 9.209697381 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.536233018 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.50618006 seconds)
  done (took 96.013254622 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.492712602 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.487560025 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.486993882 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.484600694 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.49764326 seconds)
  done (took 14.863557785 seconds)
done (took 3242.650270558 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.721253911 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.622439208 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.588599483 seconds)
  done (took 7.622419385 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.548595825 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.631836096 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.682870984 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.62646138 seconds)
  done (took 12.901267843 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.791959485 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.972125879 seconds)
  done (took 8.168258763 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.932113704 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.493071949 seconds)
  (7/15) benchmarking "20517"...
  done (took 3.027295753 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.487222482 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.48820983 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.499450573 seconds)
  done (took 24.902714749 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.512325998 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.501725606 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.499395358 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.49775156 seconds)
  done (took 12.428366734 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.489708844 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.535713781 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.500127806 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.515743471 seconds)
  done (took 24.460356744 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.682722352 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.581979238 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.258344527 seconds)
  done (took 10.956116386 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 3.312265271 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.88055379 seconds)
    (3/3) benchmarking "Float64"...
    done (took 3.303912455 seconds)
  done (took 11.917735746 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.446468596 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.512283817 seconds)
  done (took 9.378232435 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.663279063 seconds)
  done (took 5.075892148 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.984799687 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.979817152 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 3.340494036 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 3.340583319 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.516264809 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.828636507 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.902723279 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.846341939 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 3.190798558 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 3.038998773 seconds)
  done (took 33.415579284 seconds)
done (took 179.816135146 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 4.480800562 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.936298735 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.682128568 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.19694392 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.597146775 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.676786968 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.572078054 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.968532171 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.813704118 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.810447681 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 4.577757291 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.594120832 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.564362203 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.89978686 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.577537149 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.84274347 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.90410105 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 4.478197967 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 5.001683085 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 5.286105486 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.57843959 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.776777554 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 4.229564063 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.782261589 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.905531738 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.632041462 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.586762405 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.84983063 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.288246623 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.590892185 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.630406856 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.596572204 seconds)
  done (took 197.335889804 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.497080624 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.504741081 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.497556436 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.497615594 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.491686486 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.503903953 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.524723245 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.492356825 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.229226449 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.232270515 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.5014361 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.469717208 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.500550653 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.51634294 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.49966762 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.504374409 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.480502115 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.49560864 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.507740372 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.482916085 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.496955854 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.272708411 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.503306337 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.235279727 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.431404658 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.535746567 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.493015392 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.490223828 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.500114094 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.506299066 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.517112663 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.498953255 seconds)
  done (took 233.334794907 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.4948153 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.500744476 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.499209807 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.499897279 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.509750286 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.519462929 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.508498406 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.506559365 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.506517439 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.508527087 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.518800309 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.505039689 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.506225899 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.508568906 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.511023453 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.517744938 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.503642807 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.509303137 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.546731507 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.509427287 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.50687645 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.505828918 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.509288819 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.518930425 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.505539568 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.504765467 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.510437975 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.495374863 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.500946594 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.510502595 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.508349047 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.515567576 seconds)
  done (took 242.703601451 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.804110077 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.504883216 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.505772941 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 4.283686349 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.518189347 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.513958691 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 4.274988778 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.800616229 seconds)
  done (took 26.641708386 seconds)
done (took 702.467620191 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 4.215388198 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.431922683 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.677786133 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.557727485 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 4.150267819 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.601058511 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.520612392 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.633978201 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.280859913 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.64186481 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.979734699 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.531068205 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 3.347325934 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.567559862 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.679781544 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.612881773 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.938202259 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 3.242945285 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.698912087 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 3.343055552 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.769753322 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.514060262 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.666786857 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 3.359840562 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.998982583 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.539596115 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.622283487 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.943445861 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.531603405 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.810910875 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.575640341 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.937003382 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.548131646 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.529823047 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.608775593 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.576076851 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.850487344 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.543317355 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.718332701 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 3.286144746 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 3.356522678 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 3.199930462 seconds)
  done (took 130.561067729 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.513538117 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.508581773 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.514790948 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.514056926 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.511380958 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.513761465 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.511908259 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.511560277 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.507299061 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.509520946 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.516823109 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.508778936 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.514797322 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.525564054 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.513950749 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.510382087 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.511893155 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.523185614 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.516272934 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.513572334 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.513522455 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.535956489 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.516165553 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.511514205 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.508420658 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.508782654 seconds)
  done (took 67.80092125 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.501810242 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.733268343 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.867014946 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.543259602 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.525173799 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.518048792 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.55201692 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.521615876 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.51576921 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.498404471 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.661104471 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.511941974 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.586340575 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.870980999 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.546499158 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.508245546 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.505868183 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.51027567 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.778006609 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.532943049 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.597388834 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.530689674 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.551408554 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.522824918 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.508114975 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.5076056 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.509677892 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 3.054984233 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.523035418 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.680847581 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.560091991 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.547204698 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.922383283 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.867052313 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.578264468 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.503421425 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.496235964 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.683787275 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.515650481 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.500293681 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.557955821 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.522146331 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.862585606 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 3.11034516 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.516845464 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.497870143 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 3.042540063 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.707678842 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.557221387 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.51599907 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.855330666 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.537412053 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.501748973 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.501110611 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.541143504 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.525750402 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.501398399 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.839755686 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.51655741 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.555654121 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.509590523 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.498298589 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.757455636 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.510095414 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.732508675 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.525088525 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.504879436 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.503067205 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.863637911 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.546802785 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 3.124391782 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.533291467 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.503959714 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.647046448 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.74337327 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 3.094538612 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.527219249 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.746221593 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.964124887 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.56505026 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.519015797 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 3.041693711 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.562944172 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.522637004 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.514203857 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.516649713 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.537171506 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.568127817 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.552533761 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.032427276 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.12737161 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.881131348 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.574455892 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.546699648 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.512537288 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.850028324 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.525717449 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.51147281 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.858973584 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 3.147860112 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.551449906 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.524183901 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 3.099852146 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.53644931 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.551552721 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.525674896 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.879886212 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.602088953 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.595949636 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.518854912 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.523342166 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.516321053 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.559477976 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.52551888 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.512314827 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 3.094175904 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.724258298 seconds)
  done (took 311.288372618 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.516949656 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.504509102 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.514092096 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.505847202 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.501787278 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.515756696 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.505040663 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.501861759 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.503426938 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.506175995 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.50541143 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.500266977 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.499833283 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.502924971 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.535004377 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.528389904 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 4.113522682 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.500860852 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.492025567 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.499100459 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 4.336155454 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.504817067 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.496450386 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.50906749 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.500283807 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.50091069 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.506049119 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.519955274 seconds)
  done (took 186.060995512 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.506287673 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.577725697 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.518600647 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.57810967 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.526917351 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.508554226 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.535371042 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.524642707 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.513178425 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.507520812 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.506267586 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.546233719 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.545559797 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.626008517 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.549142666 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.541562207 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.617136374 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.517219862 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.507628885 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.505707998 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.572246189 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.52446708 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.551508153 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.583006045 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.518713909 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.575453337 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.529817085 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.52230719 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.508477803 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.635001791 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.529029809 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.586580242 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.564298377 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.538218994 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.642461262 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.659831206 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.631054651 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.548740438 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.516427188 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.509809235 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.507787081 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.513793731 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.578321637 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.520081681 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.517890006 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.650505745 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.533435499 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.5168384 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.534191694 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.504193786 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.529362963 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.556177023 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.528131172 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.68855536 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.61315645 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.526237757 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.534878436 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.527676634 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.503081741 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.629186527 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.533105417 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.644496098 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.536033285 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.508010288 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.500657112 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.544226364 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.591676384 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.54930184 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.609515642 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.507538759 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.602174437 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.573052677 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.508932239 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.500994087 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.53265618 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.601781116 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.613383112 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.577045885 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.579088953 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.547485338 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.512169429 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.506845633 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.51338288 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.557535017 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.520748469 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.626210238 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.629189724 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.506668328 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.497765629 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.498085618 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.499889328 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.534647189 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.58247982 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.556284249 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.627396892 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.552515006 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.545465535 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.514398164 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.524600355 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.502865275 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.539497631 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.50788979 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.521728162 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.969375731 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.563673426 seconds)
  done (took 270.518807641 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.959729298 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.560920116 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.584801821 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.767471305 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.939208743 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.78268734 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.56212321 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.558799517 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.562004274 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.705811149 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.610984497 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.627040764 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.549516736 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.53019613 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.567831076 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.564428741 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.591122354 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.904787722 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.683848372 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.484492145 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.566373534 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.898703471 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.903422518 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.975469778 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.602197697 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 3.046204926 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 3.199999542 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.658718714 seconds)
  done (took 81.397598471 seconds)
done (took 1050.054983225 seconds)
SAVING RESULT...
DONE!
