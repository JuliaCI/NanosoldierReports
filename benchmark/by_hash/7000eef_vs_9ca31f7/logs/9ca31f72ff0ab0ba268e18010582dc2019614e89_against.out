cset: moving following pidspec: 2027327
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.751061149 seconds)
loading group "shootout"... done (took 1.096103217 seconds)
loading group "string"... done (took 0.654523942 seconds)
loading group "linalg"... done (took 8.515407607 seconds)
loading group "parallel"... done (took 0.162147554 seconds)
loading group "find"... done (took 2.978535015 seconds)
loading group "tuple"... done (took 2.056971796 seconds)
loading group "union"... done (took 14.246678192 seconds)
loading group "dates"... done (took 1.41673126 seconds)
loading group "micro"... done (took 0.210590616 seconds)
loading group "simd"... done (took 4.622510473 seconds)
loading group "io"... done (took 1.371184073 seconds)
loading group "random"... done (took 9.51050935 seconds)
loading group "problem"... done (took 1.589922392 seconds)
loading group "array"... done (took 25.103630368 seconds)
loading group "misc"... done (took 1.823883107 seconds)
loading group "scalar"... done (took 41.920638004 seconds)
loading group "sort"... done (took 3.19542484 seconds)
loading group "sparse"... done (took 12.755321329 seconds)
loading group "collection"... done (took 18.37574947 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.438172044 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113365918 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.161257534 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.109611798 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.234147169 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124865268 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.127762912 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087912188 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.074953885 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140511522 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.135466311 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.41998349 seconds)
done (took 5.588350812 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.306370905 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.239952528 seconds)
    (2/2) benchmarking "String"...
    done (took 0.161434365 seconds)
  done (took 1.559117252 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091143408 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057794649 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064487886 seconds)
  done (took 1.366927227 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.062991402 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138178942 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.063824603 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064086929 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.063983611 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.063705818 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063616118 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063631553 seconds)
  done (took 1.676704203 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071993596 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065347415 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063207892 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.064844822 seconds)
  done (took 1.420044613 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065678639 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118641839 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062162049 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062011946 seconds)
  done (took 1.460212666 seconds)
done (took 9.020724612 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.157918678 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.760212865 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.848954324 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.14486668 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.311820682 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.34278829 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.121027092 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.200389542 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112540655 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.074676249 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.162519916 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.079734776 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.480429218 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.475486347 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070796453 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.187176575 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.611476953 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.084196644 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.112332898 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.198574317 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.08155379 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.082187738 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08703911 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.071121461 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.109661434 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.175895816 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.616810216 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.09858173 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067799494 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.192507709 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.070045856 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.073949936 seconds)
  done (took 10.449410445 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.11460928 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110791067 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066407037 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.100246945 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092946956 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.067417465 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072682773 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066269163 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085714398 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.129078392 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089533736 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.12233664 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066769174 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067394904 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.097405614 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.159969597 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.082132542 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080403119 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066505118 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079537763 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.092537243 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078581982 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076716234 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076207668 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.110285081 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.133436758 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.08566283 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.106255326 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066432868 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079747146 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.096597705 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.106315045 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066964658 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.06489747 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.10715961 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.083801437 seconds)
  done (took 4.434911155 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.025379323 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.093263709 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.104762646 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.100989482 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.105441456 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.092775261 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.146279395 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120537218 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098567488 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066767706 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.18052494 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.673767337 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.065445551 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070758001 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.145432836 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.362137848 seconds)
    (16/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.140206658 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064385091 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.899313484 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072032292 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067321851 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096714538 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068971501 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.139105351 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066432503 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176175533 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.642322243 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071743666 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068803594 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.096545101 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.065091415 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.144876076 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.095058687 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072626431 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.570934902 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066993131 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.065233278 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.089189853 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.094225782 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067598729 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068754094 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079414773 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06666303 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.121336405 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08214998 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.578836289 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071239094 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.655583288 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.336721166 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074837467 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072905467 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10149502 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067534414 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.0680597 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.671678988 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.161096133 seconds)
    (56/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065022217 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067358045 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.293630652 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070702639 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.06868982 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.069601534 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.101352096 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.067814628 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068898874 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073349063 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.088456151 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.015075572 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.153356946 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.090353637 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069972764 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.428703808 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.077263284 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070057377 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071754148 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.098938086 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.138028463 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067369768 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066769053 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.112731168 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.357568363 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090819465 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070114897 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.066912487 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.065945187 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.579741422 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.956251845 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.071012647 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.06825133 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.518354988 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.065339592 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066310164 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.068095231 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.088468892 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067001149 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.063672755 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.064332581 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099915758 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069359183 seconds)
    (99/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.064405577 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.594893275 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.068158372 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.506415031 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.06952796 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097336891 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.122862447 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066979888 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.105691581 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066988549 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.064186405 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072661167 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064982635 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063873472 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068637045 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065020854 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065963662 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.068037989 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067697137 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066456417 seconds)
  done (took 23.545501482 seconds)
done (took 40.607375472 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.399155455 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.077562252 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.077595684 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.0772756 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.07727225 seconds)
  done (took 1.935873471 seconds)
done (took 3.271427209 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.256524404 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.077461285 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.063152797 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.205186623 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.087871531 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.17869941 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.219431951 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.292632458 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.090822343 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.089353061 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.090040071 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.223640083 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.23578222 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.090568079 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.163056579 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.236416695 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091835134 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06467456 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.089945469 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.091302711 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.091467467 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064562983 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089768631 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.091514834 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.162397591 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089781694 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063628571 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.163074894 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.090195446 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.165210394 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.092519656 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.091887073 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.092360517 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.164396565 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.092769306 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.164873558 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064622279 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.092519079 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.092470132 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.095278021 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.092339382 seconds)
  done (took 6.415287746 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.077134553 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079977895 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08114926 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060482941 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069418529 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079519909 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060407731 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079223297 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100142459 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079934041 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079567611 seconds)
  done (took 2.173618372 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071041594 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080390856 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081512732 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059939235 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070860657 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080493631 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060156347 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079966355 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08307917 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08063408 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080554718 seconds)
  done (took 2.09277492 seconds)
done (took 11.928021 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.190900059 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.087798185 seconds)
  done (took 1.524136629 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.257223666 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.499080091 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.327208021 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.12168704 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.09937313 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.113939648 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.226262639 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.098382898 seconds)
  done (took 7.169657915 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.096682196 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.094271296 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066844764 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065864107 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.065569416 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.067771133 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.066068953 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066464414 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.067570766 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066696767 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065688778 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.066004874 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065583471 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067995923 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067895075 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.066980577 seconds)
  done (took 2.502560195 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.100801847 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067232564 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.096146272 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.060088914 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.07012169 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06185366 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.069854955 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.070685238 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.068266593 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.068525565 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.070018828 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.068594691 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.069447402 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069584133 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.070398239 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.071112724 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.073394254 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.069661504 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.071096814 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.072323017 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070607509 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.072135901 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07324352 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070502446 seconds)
  done (took 3.104221729 seconds)
done (took 15.561524153 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177558473 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072966458 seconds)
  done (took 1.508080203 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093565229 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.091681088 seconds)
  done (took 1.461831029 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073308431 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058668368 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.075536297 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.068040671 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.05935431 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.059075209 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074677333 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059337337 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.059162404 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.05930244 seconds)
  done (took 1.925884853 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063424356 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.065787177 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.063742557 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.062116073 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.064453864 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.06013642 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062568046 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060355375 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.066130556 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.059486627 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.063185737 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080818738 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.062796614 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.081303386 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.062694437 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.063258794 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.064671054 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063543287 seconds)
  done (took 2.450774835 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061863288 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059595119 seconds)
  done (took 1.405324361 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064829527 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059549741 seconds)
    (3/7) benchmarking "month"...
    done (took 0.061336006 seconds)
    (4/7) benchmarking "year"...
    done (took 0.061126841 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059528958 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.058965805 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059676211 seconds)
  done (took 1.702895397 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.427165549 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.192216494 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.424896508 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.068312795 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.081864008 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.267555813 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063240086 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067556932 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067517481 seconds)
  done (took 2.980218143 seconds)
done (took 14.720290956 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.084081455 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.180809824 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.110220831 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.41619002 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.077987633 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065653815 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.093595919 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.210077178 seconds)
done (took 2.535989067 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.284873296 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.207047241 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.256582138 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.146565735 seconds)
  done (took 2.897181646 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.418235607 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.166062826 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.074793065 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065508534 seconds)
  done (took 2.021438106 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065978043 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069358793 seconds)
  done (took 1.431850072 seconds)
done (took 7.933187496 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073788466 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.094063541 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059051783 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.060878256 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061354916 seconds)
    (6/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.060420092 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.060938062 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.060513764 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.061583774 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059471927 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.061502197 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.061449422 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061559891 seconds)
    (14/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059397151 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061171334 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061156876 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.059486708 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061524478 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061475094 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061638337 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062056032 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06246877 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061458922 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.062031454 seconds)
  done (took 2.827026151 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080242699 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063485171 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064223599 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063823666 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064644241 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064344121 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064647625 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063572284 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064541159 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063308993 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064878612 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.064902306 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063311433 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.06513408 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063393784 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.065136763 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064876919 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063952853 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06352577 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.065127193 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06475922 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064183835 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065650561 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06561686 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065905403 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065859052 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.064406717 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064622219 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065490369 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065940848 seconds)
  done (took 3.260873208 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067455985 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057753778 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.057963903 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067726831 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057584224 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.057879662 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058569714 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.05778166 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.058277946 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.059066526 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058575853 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.058050602 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.05889548 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057919999 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.05789295 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058637325 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.063207243 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078571026 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058311042 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.05808762 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06285618 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058408845 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.058109323 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.058031487 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.058556793 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058432847 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058401455 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058847635 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058756923 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059478769 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058964453 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.0634716 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06505566 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058879604 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.069218495 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.064079729 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.058912307 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065633279 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059886379 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058741354 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058614337 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058712245 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058870335 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058822142 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069232624 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.059057245 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.060057778 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062177854 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.059071285 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058765694 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058967308 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060579485 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.06464333 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.060209747 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058788328 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.060108155 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058650253 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059519145 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058826231 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058652844 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058657001 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062645172 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060118243 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059495126 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079942408 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060285919 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.06969946 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.059007615 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059346853 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062980692 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059337325 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077921144 seconds)
  done (took 5.698672316 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072697368 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.0690972 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.076637077 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067955356 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061831108 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.059036002 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062015969 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058908904 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068571908 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062752452 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058937368 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062096644 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068126396 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062433116 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059990788 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068139704 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062496668 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061637578 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059388672 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.063149662 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060554101 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062684866 seconds)
  done (took 2.735808011 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.144860152 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064494515 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106373094 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.068389822 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066809053 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.068073223 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064491589 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064484905 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064731134 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065001727 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064942546 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064565357 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066426175 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064930975 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064975556 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064717115 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064865759 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065430977 seconds)
  done (took 2.607547032 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077760247 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.064068848 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090511911 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063627854 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.064107249 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063792636 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06775552 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067899817 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063880234 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.064200741 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067860696 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063863273 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063747102 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064149503 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063919399 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064130138 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064463129 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065290887 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.068039219 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067841366 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.068235736 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06848785 seconds)
  done (took 2.788844561 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079177194 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063146226 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.079004515 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064448416 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058251473 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.05867065 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.065202822 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063683951 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064879447 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.063088745 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.063492692 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058735002 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065557801 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06359186 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065849035 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063520895 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063397014 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063509533 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063101119 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058410623 seconds)
  done (took 2.600944549 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.09791185 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060813033 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06064768 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065237098 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061041369 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.061128332 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065706043 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072431952 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.060830157 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084857545 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.060924216 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060951747 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065591417 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063881744 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.061138163 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065734843 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065639467 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066229148 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061507315 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061487949 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08561059 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.061703522 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.06674053 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061890639 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061687118 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061727759 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061843529 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.064941689 seconds)
  done (took 3.162445227 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065733059 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06192289 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061782046 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061708431 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061593445 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.06150404 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061917302 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064854346 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061687379 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.062090868 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061725973 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061601811 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061669498 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061831928 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061748621 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061689349 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061577558 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061977404 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061921525 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.061861102 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061616181 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061581351 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061754213 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06222777 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.062362024 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.062033247 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.062666181 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.06265395 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.0623842 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062791431 seconds)
  done (took 3.187077796 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073890192 seconds)
    (2/2) benchmarking "in"...
    done (took 0.069113933 seconds)
  done (took 1.461753103 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062540356 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075499995 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057464061 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070751195 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.066419812 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.062211676 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067023802 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066966668 seconds)
  done (took 1.841597732 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.09262297 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.116035893 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.060008617 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060736554 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.090222557 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.126959155 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.100311436 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.072446186 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074349328 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.063021133 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.060280041 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.099906194 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059723817 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073727985 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061055985 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069398818 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067899893 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.07846743 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073685497 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058702982 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073381604 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060990996 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059881755 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061464049 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060886304 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.067916011 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076917638 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073296458 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069434766 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.058571168 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07992541 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059139122 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060418483 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069375484 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.0920165 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059625158 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097493735 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.05994364 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064403625 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.059122996 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.072108775 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.081013069 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074357589 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.078250847 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.061069794 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.061316435 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.058987934 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.061159116 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063570548 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.069190627 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.059148793 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067530108 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058821298 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060822409 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.07052135 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059813975 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.064578501 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069404266 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073765237 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070640021 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072321962 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075663393 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068972484 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068358166 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060366979 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080098479 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.06137536 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073717712 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075217305 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060982896 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073766116 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059390542 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058734843 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.059582335 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094434967 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061518802 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.061017456 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.060149689 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.059797693 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.061308788 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070061056 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065159621 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.06784117 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063284468 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076476891 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.07030212 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061176253 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069722578 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080578306 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065132262 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.06151088 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079142669 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065116786 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060581266 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.079828528 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071598066 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063113414 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062061071 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064973508 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.075711899 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062974655 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060161338 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070599419 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063228676 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.246496382 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.063744729 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067798658 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058836727 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069500459 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064102923 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.059949973 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057508609 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063365616 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059292536 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057277906 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068389225 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058492685 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07319465 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065474737 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07349137 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073995227 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069416818 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074816306 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058466067 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060084803 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076793301 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.06822029 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059440723 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076709806 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.057930306 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.069364893 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.05793573 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059722799 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.068304935 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057597287 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.0599937 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058295343 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.0639388 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.059639357 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.059879069 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064496106 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067509462 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070899642 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059643316 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067785635 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058869529 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074703407 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069221196 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063838508 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061867848 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.05980882 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071811937 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.066846577 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069536517 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.059253759 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060365493 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059800006 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070833961 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069808075 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061369944 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068316781 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064766279 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060291108 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059805975 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060675798 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063709865 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062924945 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060248159 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067893055 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068826723 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.074218248 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066828318 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.06919023 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058700931 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.059010909 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.061126609 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.059005945 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.06451733 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.0693303 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075569661 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071726426 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081280645 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059621397 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069819498 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.061032641 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.077141015 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073340127 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060637581 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.06451544 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.05910145 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061527549 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.069749437 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.071869956 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.074515889 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075571622 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065201087 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.064994107 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.059501964 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.075746249 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061203868 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070207069 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071232922 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067754309 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.06163844 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063053274 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070946048 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066109834 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061934517 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077517855 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069202516 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.060705081 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076108164 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.061462524 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072608684 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060669165 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065291304 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067075328 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063754263 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072248021 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.080694917 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058204768 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059530206 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074981656 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060319613 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059968281 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067251873 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07421447 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063564101 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.067044766 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069456408 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.069109365 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06356038 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068854574 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059306708 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068171731 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.061210035 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070461418 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058395576 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.076763568 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057420675 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.074135955 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058836994 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069889116 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059215009 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068448226 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059451801 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075918145 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.060179413 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059237928 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070660108 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057475154 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.06819209 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.058076101 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064171049 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065603591 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068204167 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.060048083 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068437648 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.06004865 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.06811058 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063686038 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.067365786 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068421704 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063939702 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058941186 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068233716 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070909847 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.068079545 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060746919 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060815207 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.059909274 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.069207913 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061179412 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.060973243 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068424228 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06476926 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.06591531 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061240869 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061436329 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061203298 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068712599 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069658808 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081181741 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068927691 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067608715 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069325751 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.059099598 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075726675 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059625547 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067519804 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058416547 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.06663906 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069345285 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.059735939 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079518193 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.061176576 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.068012704 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072470797 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068764759 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063664868 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078309819 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.062964277 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068872 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.068251037 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.064955813 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067138697 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061903871 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068903715 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070129763 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071187009 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06105524 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.068128086 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069753137 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.061923216 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069539594 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.061966422 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070047645 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063324293 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060293144 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066577094 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073505653 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066506788 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066924345 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061728878 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.06007611 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061732874 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070352819 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066492847 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070775837 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077737739 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060075256 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062237183 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060898642 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.06587056 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081381111 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.229860748 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.067879435 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064221289 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058074252 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060109919 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060261322 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058906459 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061529848 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057733197 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.057950271 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069478206 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059931968 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063169338 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058838242 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059318112 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.06894536 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062499575 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058898602 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.065398308 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.058249941 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.064034391 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057592219 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059780343 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.063486014 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057911845 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062684864 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069275528 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075447716 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065620368 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.068057637 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059494223 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066964028 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074552923 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066047306 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059705748 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068301773 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057773455 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077501224 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068443887 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067688001 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068708215 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059557352 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075548801 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063452111 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069122167 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075232277 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060536307 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067037828 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059139383 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075716895 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064310672 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058827052 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067668511 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067727898 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065507346 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071584088 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.060130214 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068087685 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064721367 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063522622 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061305219 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.061170472 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068932888 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076288389 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060396397 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065149635 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.068132705 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068538747 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064529738 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072386145 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068261593 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060857053 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061357675 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063663724 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060424033 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07209971 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060175751 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064512186 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064441814 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.05906134 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066601917 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076525431 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.06945818 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069540798 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059186842 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058779517 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078231359 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064151353 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063508951 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068724893 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070672571 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072971252 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069924977 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.077651704 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.060850026 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.066469849 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072963923 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.060998561 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.06007159 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065402276 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063032505 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071349163 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071835945 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069304436 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063523554 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071405181 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075645833 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062735201 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066454085 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068039617 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062049608 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072319388 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069832178 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070413853 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063612862 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061560119 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.220836447 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068916755 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.066992354 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068592277 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059701738 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065582834 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072456152 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.06664013 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061291878 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.058048413 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061321587 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.068025917 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063521742 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057960701 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06364708 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.06265339 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065531647 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.068236635 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063598873 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.057890781 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.07562056 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.06700401 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.068178687 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.060116615 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.060195362 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059238923 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.058193291 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.070068729 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.057952446 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.05994966 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063683844 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.060031926 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076455978 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.067134652 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074927678 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059445717 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063559368 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.058131688 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068550728 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.06360739 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058872216 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069429462 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057870342 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074358428 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.07127349 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065708197 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058990198 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.065130064 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067993332 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.075141515 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069535132 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.069443995 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062899933 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069641332 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.061209438 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070755277 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059060252 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.058313636 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069796173 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068742503 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072582211 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059232387 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070247563 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061611576 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068512202 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068269367 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.06135702 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061182416 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061391923 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069640765 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064618203 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069558055 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064868983 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077108357 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060674651 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071333269 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069450338 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.071245974 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.074296627 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072533723 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068340662 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060402384 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067621049 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068257147 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.061002013 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.065329217 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063218505 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082918275 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.062123253 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061845444 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07533627 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068178924 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060423862 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.067969643 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.065426732 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.070975681 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.061394917 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.071308147 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067764719 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062474363 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066799317 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066697173 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060262414 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060883185 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06142406 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071660236 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066057185 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061740974 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081839858 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063256853 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070661779 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073648801 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069330299 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.220893512 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.058987575 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060168278 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072880562 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074728929 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062588668 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067707901 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.06008184 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068293154 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.05756197 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067925211 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066983837 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067520807 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.058074254 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.059011154 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.074057935 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074609143 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063690158 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.075006358 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.068091018 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059826578 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080619272 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.068290502 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059760531 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069865565 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060628958 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057917319 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057866252 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059975812 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070400355 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058187633 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060744795 seconds)
  done (took 41.755986836 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.102932074 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059817115 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061252835 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058334525 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.0657816 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059806177 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058555496 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059744179 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059753285 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060898447 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.058652277 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058652452 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064364602 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073875854 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066605055 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062420308 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058679631 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.060150727 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058729721 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.060103684 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065474223 seconds)
  done (took 2.744896625 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065135788 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062403882 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.061871646 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.062195615 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061608886 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058740601 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.062201272 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058758808 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062721857 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059188265 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062778047 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058920932 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059342768 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.05923948 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059224962 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060304155 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062783399 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061938211 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058838688 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062389113 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060403492 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062790691 seconds)
  done (took 2.738020985 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063375627 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059375533 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.06780326 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057878766 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057775048 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061270752 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058173934 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063475821 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063260553 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063295196 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.068089649 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059243584 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.05812165 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064695918 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.058137443 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059281048 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103725113 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.05974242 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059713859 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.058335062 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.061145058 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.068288877 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058223319 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058904728 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.06373074 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061936036 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058805392 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061590162 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059627679 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063837825 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.060144041 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058626491 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068526433 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.067836639 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063890924 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063875784 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060725144 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.05997471 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058848591 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058860553 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.068017268 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060283878 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.059029382 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060365095 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068497728 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058821063 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058589846 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068579577 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058504097 seconds)
  done (took 4.460133788 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073828675 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108879242 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064548259 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.090966454 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.07091901 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063908774 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064541119 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091799313 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059754444 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.060047416 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071752989 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071730494 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06134501 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062499181 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.06579374 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061192441 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.0622334 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.061025241 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.064122656 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061463436 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.064117661 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.066287248 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.07140361 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071894942 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062670971 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060957332 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.061351838 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.063025221 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071426342 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064375998 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062926175 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06350128 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071729108 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.065251309 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061427942 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061415395 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072665198 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062188121 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.062049645 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060556532 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061747057 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.063287945 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066590761 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.073202255 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.062276587 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066984623 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.062142037 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.060052851 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072312032 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.062013026 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065713369 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.073601713 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063111014 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065132544 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063444564 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072417497 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.062151271 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060841246 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.062337488 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.072002794 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060397022 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062808076 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072962839 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061788797 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065197785 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.073159707 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.067132808 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06318105 seconds)
  done (took 6.058931887 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071298436 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.09360824 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07295762 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073143845 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.069101081 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.069018278 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.069003475 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.069014933 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.068838061 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071729233 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.069097348 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.131937721 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.066639974 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070690685 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.069140922 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069734661 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.06966137 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069628367 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069575594 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069565498 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.070123684 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074383112 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069690706 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074465979 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074140573 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.066302045 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069459189 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069498842 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074547231 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069537387 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074085011 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069632202 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.06968211 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074605262 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074104359 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069490924 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060436413 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069856201 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.070043904 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069991738 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066504831 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.075254994 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069952636 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.0665819 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.070118454 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069967313 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.075236307 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.07487097 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071866623 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073111468 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.070148927 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.075118564 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.070041874 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.070116256 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075294808 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078133051 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075236133 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075455124 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070517736 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.075452482 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075538749 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078505773 seconds)
  done (took 5.939785358 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076431935 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064300895 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.07703394 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058406494 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058452771 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068023217 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058454463 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058473838 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064568935 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064552001 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066626122 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068053587 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069869049 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066023918 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067980632 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069876228 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067961363 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068469552 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065564205 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.06851159 seconds)
  done (took 2.765674142 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.063627787 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063469373 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058882109 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074304686 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.059206682 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066838423 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059330186 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059276007 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059224239 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059323317 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06374954 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06387973 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059272407 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067164888 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062733925 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066684115 seconds)
  done (took 2.421897564 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064776491 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066584078 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.092525524 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.060146746 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061641504 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.059224679 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059974037 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058884089 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061664234 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.073098214 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.060162193 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.061989888 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.060026114 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.05902838 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.0597048 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061797696 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06089436 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059891137 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059833865 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.094096157 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068766293 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060976673 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.062483855 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.061113967 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.062042606 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068388705 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061808421 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.062078467 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.060281912 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062504175 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.062154587 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.071298696 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062212964 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063821912 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.059336807 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.060007976 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060434276 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062666975 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062543663 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060492093 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059306643 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.062035395 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060406761 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060768892 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061594528 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062578223 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061683394 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070800954 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060969759 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062826242 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.060884225 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062453115 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06148555 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.072214176 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.063206619 seconds)
  done (took 4.90912191 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079514512 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.064106079 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058139368 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058023939 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.0639819 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064381315 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064143495 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064207829 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064550091 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058543798 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064644649 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063726384 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064674279 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.064325563 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064651798 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064328689 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058531706 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064376489 seconds)
  done (took 2.58850085 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068968982 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06376883 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.063998503 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.060098061 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.060271508 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064642078 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.059681736 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.059989644 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059933479 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060617009 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060348952 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.0599903 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059985546 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.05994367 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.064095204 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060310929 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059952947 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058986814 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.060302849 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058507298 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065013506 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059261351 seconds)
  done (took 2.770714034 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.118325146 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082477797 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.157717465 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078838017 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088918239 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070416044 seconds)
  done (took 2.020790188 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095433131 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.096134515 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063764612 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063632485 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068213578 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066651888 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066511357 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066765708 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069776063 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072333375 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066774585 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069912581 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069787059 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071638161 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068302881 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068511088 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066885593 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067290857 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064432353 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075170777 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067496873 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070720042 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06756427 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067248805 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067565072 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072315366 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07078689 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073316528 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067292118 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07085825 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069020288 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067493632 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070865838 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073265284 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064692468 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070732317 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067594455 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075413194 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06932698 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073091758 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064836137 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069592219 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071287294 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071001051 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071538481 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068078974 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071014897 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068038433 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068179033 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07985927 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070051904 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072970703 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069855712 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071626584 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071294 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079776537 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074151383 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073118053 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070194225 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074346671 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073422682 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070144851 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073253446 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07446119 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070232806 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073526078 seconds)
  done (took 6.108669027 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10551592 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064537048 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069516937 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072067018 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071571824 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06703545 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067090029 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067054223 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066952104 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064542232 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10267242 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067461573 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071795292 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071768799 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067319332 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066912391 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067335757 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072362856 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.065004246 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079067035 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067723755 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072502497 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072577714 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072412124 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073539419 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069495877 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067647403 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067509057 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067591085 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067580388 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070603423 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067724577 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072559189 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.065025487 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072290136 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067751429 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067540458 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070454222 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067734794 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.06969831 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07326292 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076184445 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068131292 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067994745 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074069067 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068046662 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068013546 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065441125 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068132525 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065480523 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074343123 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074257379 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074219931 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073119152 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068256948 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068262414 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068125157 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.068049275 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068135808 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070134095 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073342134 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068310666 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.08026479 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068446489 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068393393 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073578231 seconds)
  done (took 6.127620507 seconds)
done (took 126.871248554 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.260532112 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.22426869 seconds)
  done (took 1.892872304 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075399303 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.266530965 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076103873 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072579647 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.132538358 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.132044434 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.106802947 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.070523034 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072557969 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07008685 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.168821335 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.107235276 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070484342 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.070142464 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.070045122 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.093722225 seconds)
  done (took 3.095613465 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.121746064 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.20771134 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080034045 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.068093243 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.150972375 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076333623 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071342555 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074793923 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.076021308 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.33600923 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.118748364 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083654571 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.073822961 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074996811 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.071039049 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073620036 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074566317 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075799391 seconds)
  done (took 3.351671936 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.104278959 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.112308461 seconds)
  done (took 1.662627532 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160970424 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.107297429 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145336278 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.353880528 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.141203362 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.145710023 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.146903712 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.142065635 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.114612372 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.139809758 seconds)
  done (took 3.036886096 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106762709 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102693209 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.305448183 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.101120104 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.080191169 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074956871 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072674459 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.07801383 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.073014811 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074503362 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120436631 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073341931 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070540118 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122577777 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098083417 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104834738 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069295663 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076739735 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078346422 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069279064 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074155103 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078685439 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.178059296 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077579953 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100844902 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073756775 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.075633453 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072874878 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.072703155 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076579825 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.077549081 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100227467 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.077279512 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082926448 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074949311 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096970995 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070487209 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099503253 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.073225417 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070900284 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073420098 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077437681 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070825877 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079730017 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073698473 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.076082354 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.079251418 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069693613 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.074012365 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073478012 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071370278 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.075040427 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074782339 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075775817 seconds)
  done (took 6.157246054 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.123770619 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.10991308 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06798249 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.117622431 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.109136555 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068464807 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.124041919 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104355481 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122524375 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068107487 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068977841 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068176261 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075105748 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079166415 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119962227 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113828151 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070248745 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068608565 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112829 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.113378178 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067604861 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124827633 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.11590798 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.112076017 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06727544 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068565419 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.06708557 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067739317 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.076076669 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075404618 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067599707 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078302001 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.080880735 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.0750909 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066846249 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067106225 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.067134378 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07581581 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077374502 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077300441 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074416324 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066740897 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067031155 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067586954 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068059781 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066605283 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077153593 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.077172658 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077587515 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069429526 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069840111 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068301434 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069793876 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.07634339 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074270412 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075699651 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07863535 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068629518 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067741593 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069256241 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079452972 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076790174 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076401616 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068836024 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077415571 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067942108 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078581345 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081619904 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067805781 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068553873 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.068081966 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068178556 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.068430843 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07504608 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074842965 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.068433955 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.069981343 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068927799 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076577355 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075081145 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068807822 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07939692 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068870362 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069349131 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069768082 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070718754 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.080921014 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078758851 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070185077 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070048567 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069344026 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069704348 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069212788 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.232851854 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075245285 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074652904 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075780342 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067076651 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076083416 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075666356 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067976934 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073054573 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066600382 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066935461 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066885347 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072985636 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.072707401 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074636676 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066451889 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066202552 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074560586 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077073338 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066646681 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.073784455 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.074866033 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.073333306 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.066349818 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.076367976 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066828402 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.07581215 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066696528 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075143613 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066804604 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073338774 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066653952 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065918769 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066630579 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076004577 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067874324 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.06650658 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066792242 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066433165 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.073279207 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077133424 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067382303 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074314124 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074362518 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067826868 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076729625 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067681536 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076967078 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067635775 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067762055 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066687954 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078941644 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067436281 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068451188 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070424655 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.0769837 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067657254 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076900125 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074408824 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.067252588 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07799046 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077264306 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.07442057 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077525943 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068627162 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067826623 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067382875 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067812462 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077209282 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078710828 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069274982 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067977516 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074147576 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.07763008 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067419238 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074690651 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074651237 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.07536521 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.068257101 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.068161391 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078516906 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080179924 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075446465 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.078243991 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077759838 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069581911 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077130012 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.080241405 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069446232 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083945117 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069372009 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080657069 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.080888916 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07673463 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.081271628 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.234784044 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.075672039 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.07554623 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077365426 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066370004 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066517766 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.0728357 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066421807 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.066627874 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.07261403 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067110815 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067652847 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079825547 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.067085802 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075784463 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.066211216 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073571872 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066110888 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066987862 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.078028361 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.06672387 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066874968 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073859157 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066662525 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072889703 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075625703 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.073063301 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.066512092 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066944675 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076309588 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.076293674 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06660064 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066445952 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067084808 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075331229 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074675481 seconds)
  done (took 18.53654401 seconds)
done (took 39.186400882 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170206207 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112562052 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.224655094 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203390365 seconds)
  done (took 2.251376268 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101568601 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063473223 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.105999169 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.11624394 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063762781 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.101902364 seconds)
  done (took 2.035350934 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.201983493 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.175772697 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.251867466 seconds)
  done (took 2.10735246 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.368015953 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150895346 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.258736256 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.516391235 seconds)
  done (took 2.874438212 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.135592208 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132046662 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075885396 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.145741787 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08301402 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060534306 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.146204357 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.068107286 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.09834417 seconds)
  done (took 2.48861009 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.141261599 seconds)
done (took 13.375039073 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.104155001 seconds)
    (2/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.324283278 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.319426193 seconds)
    (4/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.336656849 seconds)
    (5/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.255433554 seconds)
    (6/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.327641686 seconds)
    (7/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.325496895 seconds)
    (8/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.065983856 seconds)
    (9/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077075064 seconds)
    (10/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.307123614 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.186195977 seconds)
    (12/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.204978546 seconds)
    (13/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.2093273 seconds)
    (14/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.255722841 seconds)
    (15/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070349994 seconds)
    (16/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.182279126 seconds)
    (17/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.073730031 seconds)
    (18/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.095383759 seconds)
    (19/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066937784 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074886335 seconds)
    (21/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.328778406 seconds)
    (22/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.105848495 seconds)
    (23/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.159804619 seconds)
    (24/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.221968891 seconds)
    (25/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.279378969 seconds)
    (26/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.213989017 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.074882471 seconds)
    (28/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.070589905 seconds)
    (29/341) benchmarking ("sort", Float32, false)...
    done (took 0.13759106 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.075114492 seconds)
    (31/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.116028838 seconds)
    (32/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.174577547 seconds)
    (33/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.073255033 seconds)
    (34/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.163972205 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.073808156 seconds)
    (36/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.198414248 seconds)
    (37/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.066375896 seconds)
    (38/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065340847 seconds)
    (39/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.174339572 seconds)
    (40/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.240618809 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.147199758 seconds)
    (42/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.097336441 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.121835621 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.190662642 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.086410198 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.078547975 seconds)
    (47/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.201772866 seconds)
    (48/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.129023496 seconds)
    (49/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.209820086 seconds)
    (50/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.163584251 seconds)
    (51/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.201188489 seconds)
    (52/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.06640113 seconds)
    (53/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076812537 seconds)
    (54/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.07934012 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.09395707 seconds)
    (56/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066954196 seconds)
    (57/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.128963164 seconds)
    (58/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.068076397 seconds)
    (59/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.070597253 seconds)
    (60/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.155708497 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.08553948 seconds)
    (62/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.253399251 seconds)
    (63/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.102528105 seconds)
    (64/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.194738486 seconds)
    (65/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.069520199 seconds)
    (66/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.075611834 seconds)
    (67/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.077288387 seconds)
    (68/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.087088409 seconds)
    (69/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.076864622 seconds)
    (70/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.121754629 seconds)
    (71/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.064672014 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.161065994 seconds)
    (73/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.210602292 seconds)
    (74/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.104483019 seconds)
    (75/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.13931388 seconds)
    (76/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.084482837 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.072249506 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.086367056 seconds)
    (79/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.072502134 seconds)
    (80/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.148200772 seconds)
    (81/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.070382738 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071731235 seconds)
    (83/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.189096315 seconds)
    (84/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071282853 seconds)
    (85/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.144081889 seconds)
    (86/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073392215 seconds)
    (87/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064216054 seconds)
    (88/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.171360862 seconds)
    (89/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.086339196 seconds)
    (90/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.083677539 seconds)
    (91/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.140399268 seconds)
    (92/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.091777177 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.085695224 seconds)
    (94/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.157554167 seconds)
    (95/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.070883271 seconds)
    (96/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.172635657 seconds)
    (97/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.067548087 seconds)
    (98/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.151256366 seconds)
    (99/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.225337845 seconds)
    (100/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.175048509 seconds)
    (101/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.173990596 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.065110711 seconds)
    (103/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066131337 seconds)
    (104/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.246062094 seconds)
    (105/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.074206722 seconds)
    (106/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.069442674 seconds)
    (107/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.201369396 seconds)
    (108/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.065275243 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.096049947 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.072088015 seconds)
    (111/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.077918677 seconds)
    (112/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.179820796 seconds)
    (113/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.06491533 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.087204489 seconds)
    (115/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.187795578 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.06522467 seconds)
    (117/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073134284 seconds)
    (118/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.065008472 seconds)
    (119/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.065018201 seconds)
    (120/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.064665278 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.087368706 seconds)
    (122/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.081885959 seconds)
    (123/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.064329916 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090480329 seconds)
    (125/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.142236303 seconds)
    (126/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.072158518 seconds)
    (127/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.19886005 seconds)
    (128/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.099644312 seconds)
    (129/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.068033715 seconds)
    (130/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074083416 seconds)
    (131/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.066673541 seconds)
    (132/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075775821 seconds)
    (133/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.06972491 seconds)
    (134/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.164182146 seconds)
    (135/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.144785714 seconds)
    (136/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.065375039 seconds)
    (137/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.085439865 seconds)
    (138/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.159306352 seconds)
    (139/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.192654199 seconds)
    (140/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.21283231 seconds)
    (141/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075006563 seconds)
    (142/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.183554015 seconds)
    (143/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.067750649 seconds)
    (144/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.065529659 seconds)
    (145/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.165250328 seconds)
    (146/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.066651603 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072081459 seconds)
    (148/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.065957064 seconds)
    (149/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.074247697 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.085661774 seconds)
    (151/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.142388474 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.246935267 seconds)
    (153/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067405004 seconds)
    (154/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.069539372 seconds)
    (155/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.149673076 seconds)
    (156/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.142492343 seconds)
    (157/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.07296733 seconds)
    (158/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064830744 seconds)
    (159/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.074168989 seconds)
    (160/341) benchmarking ("sort", Bool, false)...
    done (took 0.141557379 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.083270883 seconds)
    (162/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130941663 seconds)
    (163/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.08382124 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.120694711 seconds)
    (165/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.146842758 seconds)
    (166/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.072139154 seconds)
    (167/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.172665659 seconds)
    (168/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.22167456 seconds)
    (169/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.173725187 seconds)
    (170/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.068795421 seconds)
    (171/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.083938264 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.079312343 seconds)
    (173/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065404173 seconds)
    (174/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.070779423 seconds)
    (175/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073478418 seconds)
    (176/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.063839022 seconds)
    (177/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.063841899 seconds)
    (178/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.215575121 seconds)
    (179/341) benchmarking ("sort", Int64, false)...
    done (took 0.065758061 seconds)
    (180/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075685383 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092199123 seconds)
    (182/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.184622664 seconds)
    (183/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066263459 seconds)
    (184/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.066140209 seconds)
    (185/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.064575724 seconds)
    (186/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.14782717 seconds)
    (187/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.064817214 seconds)
    (188/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.121561927 seconds)
    (189/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.064506656 seconds)
    (190/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063381999 seconds)
    (191/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.070815065 seconds)
    (192/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082417143 seconds)
    (193/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078219549 seconds)
    (194/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.07147537 seconds)
    (195/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064535083 seconds)
    (196/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086374544 seconds)
    (197/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.198094022 seconds)
    (198/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.074560018 seconds)
    (199/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.065340805 seconds)
    (200/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.069463837 seconds)
    (201/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.085854297 seconds)
    (202/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.069374811 seconds)
    (203/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.208271032 seconds)
    (204/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.067457151 seconds)
    (205/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.06505791 seconds)
    (206/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.067989892 seconds)
    (207/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.066759875 seconds)
    (208/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.06891711 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.184393559 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.086963248 seconds)
    (211/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.229446033 seconds)
    (212/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.070075469 seconds)
    (213/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070886842 seconds)
    (214/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.073116204 seconds)
    (215/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.064647364 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.155950674 seconds)
    (217/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.07355286 seconds)
    (218/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065212279 seconds)
    (219/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.074054422 seconds)
    (220/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.079316853 seconds)
    (221/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.069787786 seconds)
    (222/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.064855157 seconds)
    (223/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.069136097 seconds)
    (224/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.064969599 seconds)
    (225/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.071949168 seconds)
    (226/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.065321278 seconds)
    (227/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.071707418 seconds)
    (228/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.064653936 seconds)
    (229/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.156875694 seconds)
    (230/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.065502637 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065119671 seconds)
    (232/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.064822744 seconds)
    (233/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.07109581 seconds)
    (234/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.073057044 seconds)
    (235/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.072252486 seconds)
    (236/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.212437119 seconds)
    (237/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.066308299 seconds)
    (238/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.143303973 seconds)
    (239/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094521289 seconds)
    (240/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.086014733 seconds)
    (241/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066331157 seconds)
    (242/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.06534225 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091270094 seconds)
    (244/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.067768066 seconds)
    (245/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.077283264 seconds)
    (246/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.065884111 seconds)
    (247/341) benchmarking ("sort", BigInt, false)...
    done (took 0.271182951 seconds)
    (248/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067247152 seconds)
    (249/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067639829 seconds)
    (250/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.141667586 seconds)
    (251/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.178042469 seconds)
    (252/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.071885475 seconds)
    (253/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.087665019 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.257631777 seconds)
    (255/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.06918469 seconds)
    (256/341) benchmarking ("sort", Int8, false)...
    done (took 0.147861534 seconds)
    (257/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067152267 seconds)
    (258/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.079517044 seconds)
    (259/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.065417403 seconds)
    (260/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.063921843 seconds)
    (261/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.144672175 seconds)
    (262/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.068520629 seconds)
    (263/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.064802389 seconds)
    (264/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.06505239 seconds)
    (265/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.064488937 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.201283381 seconds)
    (267/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.071536348 seconds)
    (268/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.118206681 seconds)
    (269/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.065163628 seconds)
    (270/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.112938717 seconds)
    (271/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085049594 seconds)
    (272/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.064906129 seconds)
    (273/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.070894549 seconds)
    (274/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.068203708 seconds)
    (275/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.064154705 seconds)
    (276/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.064227609 seconds)
    (277/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.086785329 seconds)
    (278/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.080793922 seconds)
    (279/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.068863005 seconds)
    (280/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.139298323 seconds)
    (281/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.064945031 seconds)
    (282/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.064858282 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.129664011 seconds)
    (284/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.063781664 seconds)
    (285/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.06857842 seconds)
    (286/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063668171 seconds)
    (287/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.137482283 seconds)
    (288/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.080786041 seconds)
    (289/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.065917463 seconds)
    (290/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.071041896 seconds)
    (291/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.091413768 seconds)
    (292/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.107858382 seconds)
    (293/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.066648302 seconds)
    (294/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.074861847 seconds)
    (295/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.071860215 seconds)
    (296/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.064257007 seconds)
    (297/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.06675697 seconds)
    (298/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.063991122 seconds)
    (299/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.064258564 seconds)
    (300/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.064628564 seconds)
    (301/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.06558599 seconds)
    (302/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.159598105 seconds)
    (303/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.065641884 seconds)
    (304/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.072218354 seconds)
    (305/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.064969126 seconds)
    (306/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.069837173 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.146690625 seconds)
    (308/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079084951 seconds)
    (309/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.067190657 seconds)
    (310/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.065005717 seconds)
    (311/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.066837137 seconds)
    (312/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.065540476 seconds)
    (313/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.065327176 seconds)
    (314/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.071260918 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.145668953 seconds)
    (316/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.065542973 seconds)
    (317/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.086323159 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.189551579 seconds)
    (319/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071400656 seconds)
    (320/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065132054 seconds)
    (321/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.073999269 seconds)
    (322/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.064973187 seconds)
    (323/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064816561 seconds)
    (324/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.064864013 seconds)
    (325/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.064517505 seconds)
    (326/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065325067 seconds)
    (327/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.071182235 seconds)
    (328/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.070644032 seconds)
    (329/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.06894504 seconds)
    (330/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.065452702 seconds)
    (331/341) benchmarking ("sort", Float64, false)...
    done (took 0.136703178 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.064867776 seconds)
    (333/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076629552 seconds)
    (334/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.069337895 seconds)
    (335/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.067111691 seconds)
    (336/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.064500878 seconds)
    (337/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065332323 seconds)
    (338/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.065220503 seconds)
    (339/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.092375126 seconds)
    (340/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065387516 seconds)
    (341/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.065422404 seconds)
  done (took 38.698494013 seconds)
done (took 40.19530193 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.124434819 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.077739818 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075167588 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.072138087 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.075968705 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076240084 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.075969424 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073628536 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.077973772 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.074970234 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.106323638 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063384955 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.071028406 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.08047382 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072383572 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079059337 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.07880178 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078732031 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064265032 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078800775 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089448426 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.076831837 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072722414 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078784127 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.06466636 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072597948 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119862825 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.084071091 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069222735 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073983851 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071679338 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080166404 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071762189 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071312903 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073807948 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069297246 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.0743807 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070733843 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.120023268 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069579107 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064834318 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076795214 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071385314 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.072166297 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072712116 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.076285806 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069440674 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079976244 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063949812 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075338555 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120301918 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.069915759 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069122018 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072682406 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069547484 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073778246 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.068863115 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075857101 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069120754 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075770247 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073694763 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072008147 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064200518 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072943983 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.07136925 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071527996 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.062996235 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06965405 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064126203 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.063972047 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.063641608 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073093262 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071267347 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069141887 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063612395 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064359298 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063667445 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076085081 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.071469978 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073447119 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064803758 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069781029 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069296452 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.06495598 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070052178 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.076130778 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.064023469 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065312003 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063995589 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079663059 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071424655 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.064816579 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.0768029 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070515621 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070386739 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064906303 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064280478 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070315967 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072779703 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064886 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063812381 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070786439 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.069827631 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074136785 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.065445105 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070609941 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071479816 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064966508 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075099756 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073125323 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075405686 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079023935 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075490009 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080149221 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067389375 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065441117 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076652843 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.22657236 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069868705 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071635678 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068756284 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071342933 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063967685 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062697797 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.068925945 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.069009845 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063706673 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063696867 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063572078 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071987218 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070500688 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.062323835 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063397398 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.072903626 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072183161 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062883643 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062686379 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071989073 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063861812 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069299866 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068462171 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.072071175 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062929644 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063824992 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062523129 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062886607 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062519846 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068584634 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.069071152 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.063811938 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.072096146 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.070594091 seconds)
done (took 12.750788457 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068342131 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107104078 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.115643959 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.109351865 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077591753 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.065432662 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068169505 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084384718 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067670607 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08981352 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089565212 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085877675 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.128807026 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.063145689 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064602115 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065319965 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062699075 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076784138 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.113565086 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.08872886 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.10767183 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064485906 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.081109438 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.085085118 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077704628 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084054503 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.066158046 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065537509 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.06776323 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082303865 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090798509 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064693094 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065896898 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.084181411 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081077768 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073727693 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065630678 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071741545 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065581508 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064585202 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066708603 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.08355287 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071814305 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.072296265 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065752092 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065801534 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064844489 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072615768 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.07901703 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070972611 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077684949 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081966706 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.06656189 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064843869 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063061331 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072636946 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064844889 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.06559644 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.065437893 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064787511 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065527656 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067720244 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070343662 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075579812 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068966998 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072481193 seconds)
  done (took 6.581147697 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083655752 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092514984 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.078419199 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078654745 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.063935201 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064935566 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064830931 seconds)
  done (took 2.147134932 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068555557 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.104581881 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.111424562 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.112181112 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.121145784 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.109736717 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.06575688 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097290347 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064119498 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.105934685 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.119324473 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.114035982 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068077638 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.077152285 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065680682 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.114479243 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065972998 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072377208 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.110598271 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.116071402 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.06971839 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095552976 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.079000383 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.066116382 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.114976714 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.106701854 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067786665 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.066082126 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067660126 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065115339 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064963381 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088097019 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.106550598 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079894488 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065797488 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.06440731 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104295214 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.066174524 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.103523734 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072503681 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.103488685 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067361186 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067709815 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065207559 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066252169 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.109032334 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066397067 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065171234 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064902453 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.107792862 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064814517 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.106588213 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067690492 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070310479 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072495637 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071772331 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072787269 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.066042593 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.109896926 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075926329 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067512102 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.119282317 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.118146561 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.105736681 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.118408298 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075090917 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.109576626 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106423472 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065815152 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065622566 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066314419 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.119394466 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069595901 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068508226 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070960717 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.07324933 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.112138173 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.124715104 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.124806735 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081408743 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070471832 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067658495 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.238108518 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.119896805 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069674821 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064585877 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065392509 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064220015 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069401569 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.06635877 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069362025 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064371462 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074478848 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067125915 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066436533 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.112030939 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064696023 seconds)
  done (took 9.928751084 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069949098 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.067078548 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.065611973 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.065397401 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065749189 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065577889 seconds)
  done (took 2.033329801 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092711467 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065748955 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.077291557 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068266164 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087380342 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.108097557 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.10708865 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067372217 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081815637 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076885512 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.108061915 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.109820956 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.109827043 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.067061694 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.107506874 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.067074982 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.109088043 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069690578 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.07687362 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067769365 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079907321 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067343189 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067700965 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.116612481 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068700157 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067168971 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.067086164 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.085061094 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076949889 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067670867 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.067425223 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.0684501 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075307924 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.06757057 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110469964 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075583734 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066553743 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070967288 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068050729 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068416624 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.112414697 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067918972 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070613517 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070957874 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067581612 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075171919 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070838451 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070293352 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.110387875 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070888587 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070735976 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066712425 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068343043 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070748088 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075041625 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067362584 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070475344 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.110312786 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067596557 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075425758 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066572862 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068513784 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067662361 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068297537 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071652255 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071239759 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075708435 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.068140387 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068063045 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066791102 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071270704 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066679919 seconds)
  done (took 7.201408745 seconds)
done (took 29.483931413 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.54958536 seconds)
  done (took 2.146343067 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.962000359 seconds)
  done (took 2.60175445 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.527770045 seconds)
  done (took 12.174915512 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.391783823 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.478446488 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.760439581 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.139911886 seconds)
  done (took 3.440264978 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.875004199 seconds)
  done (took 2.521202789 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239599254 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.22587163 seconds)
  done (took 2.131623098 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.450323077 seconds)
  done (took 2.089492523 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.211288821 seconds)
  done (took 2.854201971 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.236006111 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161481401 seconds)
  done (took 2.046182419 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.627314632 seconds)
  done (took 2.26843182 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.757513569 seconds)
  done (took 6.404114769 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.324923893 seconds)
  done (took 2.023035774 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.239780184 seconds)
  done (took 1.88673357 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.613075807 seconds)
  done (took 4.254489154 seconds)
done (took 50.495680531 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086910074 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084097434 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083775546 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079051665 seconds)
  done (took 1.953938604 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.0757332 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068855192 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071272486 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071689224 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.06909091 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070733125 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071558921 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067820761 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069280766 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.068451875 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066707618 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068332395 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070832121 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.068005542 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070497255 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.071937882 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068373236 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.06864374 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070351406 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.06783617 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.070823985 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.068293801 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066181403 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067808272 seconds)
  done (took 3.314374878 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079663742 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070202653 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073108392 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068797102 seconds)
  done (took 1.940840134 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077746259 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074540278 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082914431 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087513158 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073803439 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074772865 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081710495 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081873382 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.06364104 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084694233 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.066107872 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064853853 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064784311 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083527858 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.081027758 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060504734 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061751309 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075171296 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074242579 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.077051281 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.06637746 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.063541608 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074012441 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075317022 seconds)
  done (took 3.4190972 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083363361 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063764462 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079945345 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.088802617 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.090044441 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063707043 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.078246723 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.09047132 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126802922 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.064113008 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072770218 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063903962 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.103392307 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063912736 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079279555 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108444192 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111665817 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067846799 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096692077 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063784968 seconds)
  done (took 3.318758264 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078543312 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.068072394 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.068440809 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.06366512 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074075569 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070453747 seconds)
  done (took 2.084449685 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069378213 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066281413 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.06531564 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070316738 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065845314 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065846567 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065198239 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064302716 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064290971 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064912736 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065098189 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065534429 seconds)
  done (took 2.444471089 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.21573947 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070919881 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.068612358 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064135801 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065861429 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064959212 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078788891 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066919898 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087658242 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.06530271 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065070093 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.067431729 seconds)
  done (took 2.634932429 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106456698 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10922808 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14194449 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114047917 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115851067 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093982098 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.163735461 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092678621 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.15938764 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.13719898 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116552754 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093824932 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086254387 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.068694846 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099587957 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119743935 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138615911 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071722427 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112703467 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.20790008 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132477315 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.13510563 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.147062226 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11617353 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091786743 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.146626553 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095684525 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101815367 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124673145 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127484268 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118307637 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097094142 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070555614 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069702851 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15126763 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.108847341 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123754305 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.092680501 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106020317 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088690948 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109170638 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069238322 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083449382 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.113161981 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086404084 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136934618 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.093572794 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117692038 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081405025 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.312247254 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125753093 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.135346591 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083986012 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10330502 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134934273 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109832894 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.132000254 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103820083 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080212764 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116419043 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.103709254 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097598155 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105967448 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07784761 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.174303132 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08730399 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109869986 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109476897 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.093759825 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093871987 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104664024 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134914995 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127376523 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.127027613 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140164117 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.095501843 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120302728 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101103252 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.128987643 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10435834 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.071959835 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.122940404 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130241169 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100805792 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101954095 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133346068 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093152852 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077560732 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.102035234 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120676875 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080480701 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.11608212 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081379199 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.111307595 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140590973 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100668342 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113860522 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.124440171 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.253480998 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151757925 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106394501 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071168187 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114283964 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109990989 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153602919 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093042126 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074350933 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098581995 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100862071 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150095853 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105530556 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078021757 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107004587 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137485007 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091913513 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.215878282 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093446313 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141502507 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108364515 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085098594 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073444647 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088481145 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112834519 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107936807 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11175075 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09376649 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.083569368 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085761065 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114813063 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093233223 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080156111 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.113865122 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.098873943 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074339583 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.087642535 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.07554822 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142756986 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.077749157 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138735785 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127206081 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.076668479 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108446063 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099144245 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109763016 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098450718 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12075052 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144658886 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.116447064 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.091947935 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.096678424 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110720283 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.152776603 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.13444644 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.267882763 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075993776 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09922175 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110447767 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095505721 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124305294 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093705692 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104714212 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10061509 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137825327 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140269173 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096148575 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098784253 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104856312 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.119828309 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074779959 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153466569 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101455532 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116260135 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.082572001 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138685715 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.109994324 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088111161 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085958426 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099041024 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105233143 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108202803 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.14470562 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.095679802 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.071679648 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092587888 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.144623286 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076973838 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109742086 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091003717 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.091876314 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118998676 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.095198328 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081093384 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067714793 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129195512 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.162156006 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070015771 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116151084 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.110965057 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105046958 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.125458903 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069647728 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123289199 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145514602 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123350305 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.327157271 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.165141898 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115896793 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116385723 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110980425 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10338313 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07718598 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.122623219 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131627043 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093213999 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092873881 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132600321 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116464817 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.133371783 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114594612 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116279433 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102854694 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106588498 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100927841 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102980577 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142489071 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121670191 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.123761396 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085274833 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105457779 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119807885 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13722832 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081394664 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14194534 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084873399 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120565946 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078030549 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124239775 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077059855 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108257952 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.078815376 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101514561 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069060159 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.073874822 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145150291 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.11441546 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109077521 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102859187 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.141504818 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.139854868 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079404878 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109601023 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119036717 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102941703 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120913907 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.112846316 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.092637792 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102273263 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114769635 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.089899728 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.086920252 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.125180284 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101701639 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136601546 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.087792139 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077631572 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152023594 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111910955 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103370313 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080977299 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116558375 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.127452277 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097077799 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090389151 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125467332 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111867454 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.153236043 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.095326545 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.1022132 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.133837242 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08425257 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096996691 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071891233 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.089123004 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.078635648 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.140599033 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079481356 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127957834 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.071310809 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.140397744 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.095155827 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097258783 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108434854 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118356366 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135585717 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098972152 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.152249551 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095986141 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129411596 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115745432 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100010762 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094199951 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109156514 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.106147164 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130879064 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100550416 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13344077 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157440245 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110794259 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.152692352 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09645566 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130504233 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11388996 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.481507397 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112816717 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169363558 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140048665 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113471671 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113736223 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075449247 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096304401 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105926646 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.113499944 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.176240617 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12708874 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072454789 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108495528 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094177224 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110220873 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105552323 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082509091 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1481976 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104039981 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088675775 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113753177 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.092208703 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105121587 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076457874 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101047653 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.105797817 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095872747 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.097755497 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.118741556 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130710115 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113524975 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145646297 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.10097217 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091896649 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119126128 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111285476 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11024623 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085983157 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086356472 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13950292 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123316383 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129352679 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102859203 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110702311 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115114923 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10199542 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129030505 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110256076 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.130944796 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08116893 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077298297 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.068219562 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071995212 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.12664035 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110728095 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116367506 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103883834 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074386231 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108385648 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111928999 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074024002 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091575077 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10100478 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101365222 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.098767369 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116614381 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.117382804 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.095356688 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110639555 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104641115 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.160050531 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.107403863 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094806949 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.155403211 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.163556307 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094255487 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099640884 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073760445 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081926646 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120741492 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.162298646 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.165861525 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.083150025 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090770211 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.090995288 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092715167 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073679179 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.094154557 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.092604035 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112049876 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107410304 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.120497184 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112365435 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078954473 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107746128 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105073707 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097198391 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.114479969 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129893858 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.137014299 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.153705082 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121481221 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115562469 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079830085 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.085105885 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07877359 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082555048 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106719199 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081939209 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079686937 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.492416394 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092987634 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105843191 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108768075 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08794063 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075792394 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137607111 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.069713773 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135057626 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.071007754 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081428423 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081641198 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078388986 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092493075 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136672226 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11078885 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111389963 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107265662 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104112038 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.163725755 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161467054 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082465446 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.146585118 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076273676 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07661352 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07574944 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112136753 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090590341 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116554162 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143822955 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091189935 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102424934 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078117648 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14491696 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099273803 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105116412 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086321568 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079121735 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144912824 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079510244 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.081335543 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089443989 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111989184 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072571264 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105214717 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085721469 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080021065 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.168283992 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.712685473 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091691188 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.076314567 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097229322 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.147111604 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137984409 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099729731 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.285462814 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.117127034 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098968332 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0944665 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105728667 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.18848729 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073113959 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092697972 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.102222914 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09601934 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100067845 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.097078659 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.086486834 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.090673222 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.085303881 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.07774569 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105584566 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086601337 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09458326 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.10923483 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081779272 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.08637532 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.13046353 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104391192 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.082589111 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088132364 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105141357 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08777651 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103680835 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.069638072 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115205049 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091719184 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11987819 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.09854123 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108446628 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129242806 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094223883 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138587589 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.108030358 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122959154 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087425975 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.07808737 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127345485 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.09004581 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077418854 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147174057 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.097545971 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091556635 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104589286 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097187797 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114810289 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119055309 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114510001 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.097734344 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079017925 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10308849 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.277810093 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085188968 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077517244 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072727689 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.074679297 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104944462 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.0842911 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08166729 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112440833 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086714537 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100867372 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101337842 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120142222 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085961663 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099848961 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109357028 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089853594 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107939028 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099334306 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.126563722 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.173073131 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125829087 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129758158 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.135495981 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.077548139 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.075353215 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.068068697 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115995853 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079154379 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.089407697 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081197823 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135767969 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082302849 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113369823 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.243482077 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080496916 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094807226 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09657165 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.068982438 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083303819 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107877674 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086635877 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079693531 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11975013 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083084971 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129751893 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111786039 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099610821 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095627997 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080609242 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115808679 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105378247 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132287792 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09913636 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.07599764 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126580684 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105145006 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141849905 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.073546436 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08151343 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.301914924 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102045102 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128590887 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078255753 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146803278 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.14137871 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098805381 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1315318 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069488188 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086299388 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087002822 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.1246671 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082304386 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108923081 seconds)
  done (took 69.460099543 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.144013241 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.174002667 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.123033107 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.13348553 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.291561754 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.300739539 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.153374972 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.124439494 seconds)
  done (took 3.308922772 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.070301124 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081923322 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079579732 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.242423243 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096811708 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066797596 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.07215119 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080823973 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.066116243 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065797694 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100030172 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.06608858 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066248814 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.526220156 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065945321 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.072091581 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.066332425 seconds)
  done (took 3.749788134 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.349086926 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.520875959 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.322859529 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.74713689 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.166805883 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.722744247 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074628521 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.08176155 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.927084484 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.210607306 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.159081456 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.087553077 seconds)
  done (took 21.228687108 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.078349689 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.118893806 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.117952284 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.073167936 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072663072 seconds)
  done (took 2.368804061 seconds)
done (took 122.895529928 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085740594 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.171420733 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.067220908 seconds)
  done (took 2.12165642 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.120518332 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.117620594 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.116138344 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.117895012 seconds)
  done (took 2.327287312 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076252193 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074755216 seconds)
  done (took 2.005101241 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.22737369 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.217978882 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090266596 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084880716 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078166745 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079486962 seconds)
  done (took 2.105101856 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072910143 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.069571996 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069697676 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069849564 seconds)
  done (took 2.130852257 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.170343974 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065873609 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067988809 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069831813 seconds)
  done (took 2.224016126 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086625924 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085215549 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114307164 seconds)
  done (took 2.141108413 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085030448 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083122681 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077397921 seconds)
  done (took 2.101491926 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110665208 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.094961102 seconds)
  done (took 2.057748387 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080799834 seconds)
  done (took 1.93738446 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092969557 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096769202 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.183016861 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.148983163 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.185194426 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.171789085 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.076252906 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.076402575 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.072168441 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.07104582 seconds)
  done (took 3.026642135 seconds)
done (took 26.649855231 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085836287 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.199944956 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.316729034 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08551712 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.824474192 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.312843775 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.730925404 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088996722 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098596212 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067333445 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084035999 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.80368318 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.732986225 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.148562369 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.716760825 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.138778178 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.560722677 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068099567 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067695739 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068633304 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.717167952 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067381591 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067595242 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068130982 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.55907041 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.330810826 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068337 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.139438192 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067227879 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074299083 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.313953889 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068474412 seconds)
  done (took 14.572862013 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.07705086 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.144825494 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072068829 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082583906 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.069081863 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.068907574 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.071222789 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.06776596 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109740286 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067585368 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084603417 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.066950281 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.071980978 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068685376 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08797983 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.0673084 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069809788 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.068275741 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067659489 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.068175643 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086574013 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067153173 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068019627 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068173477 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067884012 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081872751 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068946486 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067473284 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06784378 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071678863 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.072952442 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069114498 seconds)
  done (took 4.283678362 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.129052133 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.129089691 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072422703 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107252726 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.11581894 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069983242 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.150213952 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.090249237 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114073081 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067955236 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084943687 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06742748 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.103264397 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.069237654 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.088592331 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067766622 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069940278 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.06809707 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067479125 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067988564 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086978144 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.067307603 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.068086662 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.068368005 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.06871469 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084843747 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069599849 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.068396976 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.06829065 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072420311 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073989198 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.069456781 seconds)
  done (took 4.545143605 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.070930227 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069604156 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075544769 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078439364 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064856474 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066951312 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067902731 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065408575 seconds)
  done (took 2.43977791 seconds)
done (took 27.708983971 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080311864 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066181083 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.069098401 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085831961 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072155616 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.10950645 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063705544 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.073378328 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069799095 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.07010838 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071702788 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06635766 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.06861902 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.06351153 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.070319056 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064429455 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.112349465 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068698594 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.109402204 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.110845216 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.067071789 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069990036 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.07310678 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.110727248 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.110051101 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.110130119 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073632494 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070547275 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064753319 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067801438 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.170484646 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.184417947 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074589852 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.117311461 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065398447 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.065084246 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.069312946 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.06769731 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.114086689 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.074333592 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.067311845 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073999708 seconds)
  done (took 5.371174498 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.189774858 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.192669296 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.185489109 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.078719177 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091127616 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078549851 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.192252925 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.076333599 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074611699 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.191626794 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.070552324 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.07475392 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.077021258 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067636219 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.07452447 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.070737746 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.07599437 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068575592 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.074523555 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.07409619 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.191605555 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.068208354 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.079069839 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075887737 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.070026261 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.075884018 seconds)
  done (took 4.540047964 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074783531 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087114416 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.090763434 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.144707058 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.108843291 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081646745 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080792208 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092376768 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.09997932 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.067042506 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070792139 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097492601 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.095383079 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07346456 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106042121 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.08487153 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078803077 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068406124 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073422079 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100574568 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.089240869 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.08496888 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.0994184 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086581591 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.066153746 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.076208011 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.074029715 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082942961 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.074793327 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.079709334 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.071324959 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070721796 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067597623 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.079031155 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.071678334 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.065419742 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.090801115 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.080820729 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.082834909 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107735775 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077979035 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.069061102 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.146664121 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.133117977 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.067479002 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.070088589 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071659732 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.080223408 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068796383 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098239387 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08344656 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.067392826 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.086787407 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.069256691 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.0689594 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.084398013 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.069517377 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.069557387 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.079627448 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.073785126 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.088577148 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.072944304 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.088676245 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.067416265 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.079061038 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.069159495 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.069130893 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.066004308 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101650781 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.07536483 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.118343128 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.069019481 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.065311029 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.080390303 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.079022915 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.074815732 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.067312502 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.0867497 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079571463 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.071148682 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.078371615 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.070077113 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070822286 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104192402 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.066133039 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.065187877 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.065110015 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069553001 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070706812 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067706434 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080134342 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066833357 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070649523 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082319553 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067689769 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.068151877 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069878482 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.068763899 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066832897 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.07818333 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071710346 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.06949156 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080318514 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069035567 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.071305583 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082993289 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.077113675 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067383727 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068826333 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.069968929 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.069867739 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.072683895 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.071386505 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.069832332 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.072818067 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.075675354 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074463224 seconds)
  done (took 11.165911789 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.207490845 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.193617274 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.068240696 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.190623414 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075915797 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.124248775 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.192535485 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.130401509 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067555656 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068303442 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066552028 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.137381539 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.132800446 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.143938282 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.11496127 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.068084003 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093990511 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.143679674 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.198050336 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.192568256 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.094059719 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075995151 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.070331055 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.069153134 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.069457587 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076311759 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083991084 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.07649584 seconds)
  done (took 5.167269183 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.075730213 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082398828 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070341963 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090875172 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083276084 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066977742 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.06919798 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.068196427 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.084106654 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072587464 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066780823 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071384366 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.070110613 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.06764526 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067781047 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073360628 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073516121 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065579614 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070292444 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071306137 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077702447 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154889052 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071435056 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070116439 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069310615 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.067193557 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.0736768 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.075515177 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066651033 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100580614 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.064256564 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.07119539 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081958571 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.068154475 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.06711027 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.068144838 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067422094 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067619948 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067886151 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065465201 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.065371293 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073496304 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066539598 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072678354 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.082162823 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076491695 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068947109 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069963639 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069931935 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064382864 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070771959 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070962895 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070429442 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.076309227 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.071372732 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069970852 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.069337789 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098667663 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073806865 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.06744136 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.06762055 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065885184 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069177082 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075546163 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084350086 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069184016 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065866924 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067806416 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075197061 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081958939 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.067047165 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.073031535 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064349281 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067529046 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069774011 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070566066 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.069193267 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065935591 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067422138 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067740755 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068477519 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067412015 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067847422 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070387083 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065305747 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065803593 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.06825513 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.068948206 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072930184 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066304628 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.069948636 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.068902755 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066500816 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070416127 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.07373703 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.07093671 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088270839 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.076118255 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068532724 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065737231 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082870474 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069604641 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066985411 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071569705 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072594247 seconds)
  done (took 9.528902225 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098341273 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.068039156 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086630787 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098190304 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076761799 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071481139 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.081008414 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.0674621 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.0885315 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065838688 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075553486 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064849681 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080366352 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.076065377 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.068201414 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077237327 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.069273453 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087840948 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081726454 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.065167566 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075877946 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079316241 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079381292 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085265128 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084753781 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.085853311 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.079118969 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.069160567 seconds)
  done (took 4.136102745 seconds)
done (took 41.774050901 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.973671144 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.171712815 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.962844315 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.442426938 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.039383662 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.960929836 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.035817093 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.946993563 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.615747105 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.020748778 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.841960964 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.665661528 seconds)
done (took 69.671701887 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.073409762 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.126661424 seconds)
    (2/2) benchmarking "String"...
    done (took 2.193985271 seconds)
  done (took 6.220791081 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.392405846 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.954596285 seconds)
    (3/3) benchmarking "different"...
    done (took 1.993835804 seconds)
  done (took 8.223890803 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.224015034 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.561606937 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.233951131 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.954745746 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.962949075 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.43917736 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.109057047 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.598046861 seconds)
  done (took 33.753131814 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.967790191 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.234615356 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.340458332 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.424091652 seconds)
  done (took 21.932959993 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.399317144 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.302118088 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.302464069 seconds)
    (4/4) benchmarking "different"...
    done (took 2.411239709 seconds)
  done (took 11.393370356 seconds)
done (took 93.890483837 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.965244528 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.060511621 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.962886068 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.136941476 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.023940382 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.037351904 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.961070703 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.968722466 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.490376626 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.962437143 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.913626857 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.962513103 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.970115447 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.997150147 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.962900008 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.968834037 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.091354552 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.96267737 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.998940655 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.472286843 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.146928952 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.967843019 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.97589854 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.17492581 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.158098468 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.020243104 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.28545225 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.968847695 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.976385135 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.965634211 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.963441299 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.964380274 seconds)
  done (took 210.322565742 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.958848618 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.695783809 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.721212005 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.978586267 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.24055256 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.302442357 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.750659911 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.262476759 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.963356686 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.958949165 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.983941702 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.959120926 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.931508088 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.474844875 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.993849178 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.969019255 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.782415537 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.714440968 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.000116695 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.829038009 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.959913676 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.386649116 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.392527134 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.712802772 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.96198971 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.991445395 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.962027049 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.986217441 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.41689566 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.720592913 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.968004238 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.968414339 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.398461397 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.193279722 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.961500414 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.973711754 seconds)
  done (took 183.323798457 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.185494519 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.967660645 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.000317356 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.070356535 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.780339304 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.610865179 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.961654936 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.957645251 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.957794431 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.964916321 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.963403805 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.023715166 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.295795051 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.985535817 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.962693141 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.959093103 seconds)
    (16/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.95959096 seconds)
    (17/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.958856547 seconds)
    (18/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.244965128 seconds)
    (19/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.971288774 seconds)
    (20/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.958657238 seconds)
    (21/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.959401305 seconds)
    (22/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.059629264 seconds)
    (23/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.304534509 seconds)
    (24/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.069372933 seconds)
    (25/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.962346738 seconds)
    (26/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.976495602 seconds)
    (27/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.068723284 seconds)
    (28/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.969278346 seconds)
    (29/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.959800478 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.067827944 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.963710482 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.081600017 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.071890217 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.976277534 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.015746086 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.971031536 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.056615413 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.964773323 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.95987397 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.961582759 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.00638245 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.964059522 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.80067383 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.058869957 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.963770865 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.978718572 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.414375065 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.523416012 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.968086517 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.961533671 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.960527005 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.960309478 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.961364085 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.223217025 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.964553434 seconds)
    (56/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.960202913 seconds)
    (57/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.994054312 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.89576096 seconds)
    (59/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.965304757 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.961378826 seconds)
    (61/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.963646002 seconds)
    (62/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.960600427 seconds)
    (63/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.96149164 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.967382925 seconds)
    (65/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.0064138 seconds)
    (66/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.460568827 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.684851455 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.317430134 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.612446149 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.966681057 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.160055801 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.02923795 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.96641247 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.12919533 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.965486567 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.962264872 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.961649116 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.962284619 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.803389612 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.800041712 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.966755953 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.069219243 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.965316598 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.961494935 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.153269387 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.244735479 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.150171143 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.979790806 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.034660639 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.963361464 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.959822604 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.987121501 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.045133005 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.966269071 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.961023663 seconds)
    (96/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.960858396 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.439828196 seconds)
    (98/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.965503088 seconds)
    (99/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.960957383 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.438585769 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.326795641 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.063226612 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.364658765 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.686000141 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.970682272 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.961096895 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.979886311 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.96269808 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.960469084 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.978430058 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.961608393 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.961919668 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.964335735 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.962291866 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.961147717 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.966069555 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.980107467 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.962974199 seconds)
  done (took 427.173410915 seconds)
done (took 825.004965591 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.606325158 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.675375181 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.522068472 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.573739347 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.530879841 seconds)
  done (took 14.799964062 seconds)
done (took 16.72396217 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.992754026 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.99238854 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.977203114 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.989337712 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.986976634 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.984217764 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.994065657 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.003881595 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.995735734 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.983038164 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.991728719 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.985646186 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.995649618 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.998910049 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.011648988 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.000078766 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.989283324 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.978731983 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.993654021 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.986547796 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.987234738 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.990029452 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.986066397 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.994494022 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.003054975 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.989030611 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.984091942 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.992653311 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.989755081 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.993919658 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.004891633 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.999120246 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.997771853 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.998167186 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.996399753 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.001108944 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.99281525 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.002533494 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.988584247 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.003136157 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.995779195 seconds)
  done (took 83.615620797 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.980850287 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.142063582 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.251908011 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.021445346 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.979744228 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.25952638 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.046853406 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.132231621 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.142844798 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.255064501 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.265500108 seconds)
  done (took 25.376967879 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.979201567 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.151031296 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.274276877 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.023913511 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.981013554 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.297198899 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.053215063 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.137864103 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.14560467 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.293942728 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.273218873 seconds)
  done (took 25.52509818 seconds)
done (took 136.446131459 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.516193925 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.028247807 seconds)
  done (took 6.441139381 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.972143313 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.989345842 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.143997336 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.97109943 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.970959769 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.972275016 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.971583436 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.971261832 seconds)
  done (took 17.859294727 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.971167361 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.970187994 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.970760353 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.970628379 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.97011728 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.971080269 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.970801346 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.970800687 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.970976198 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.971232709 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.971298079 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.970813271 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.970721769 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.971614211 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.971029598 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.97221975 seconds)
  done (took 33.433982456 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.971367751 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.971255607 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.969525459 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.970157414 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.970148728 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.970587624 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.974588506 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.971153829 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.97120835 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.970238405 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.969949584 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.969603171 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.969781273 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.970488472 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.970546543 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.970266927 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.970404176 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.971058044 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.972131168 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.97045806 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.97034669 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.970377608 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.979033155 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.97014416 seconds)
  done (took 49.20333855 seconds)
done (took 108.885491235 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.562602229 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.971468538 seconds)
  done (took 9.432062765 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.976277193 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.972650995 seconds)
  done (took 5.944902379 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.972291982 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.971437569 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.972131781 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.971551704 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.971787632 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.972101374 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.971365614 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.971810865 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.972031863 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.971411428 seconds)
  done (took 21.617491365 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.97340252 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.97279033 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.973446374 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.97340206 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.973181383 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.973458735 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.973343403 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.973430095 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.97398671 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.973019876 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.974271534 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.974300022 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.973477696 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.974034332 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.973873759 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.974281542 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.973868502 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.974140003 seconds)
  done (took 37.42642416 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.97401328 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.974379369 seconds)
  done (took 5.849107227 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.97362008 seconds)
    (2/7) benchmarking "second"...
    done (took 1.973949382 seconds)
    (3/7) benchmarking "month"...
    done (took 1.973589332 seconds)
    (4/7) benchmarking "year"...
    done (took 1.974344941 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.974397624 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.974056204 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.974322398 seconds)
  done (took 15.719412897 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.974672358 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.126341348 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.168612626 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.47289481 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.975936085 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.977743915 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.602509444 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.976535635 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.978244779 seconds)
  done (took 21.153943216 seconds)
done (took 119.073865651 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.805577878 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.971838367 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.587125444 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.074824969 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.045812886 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.301723564 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.99115022 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.547234878 seconds)
done (took 45.258016247 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.019509557 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.971973433 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.013656263 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.013316172 seconds)
  done (took 22.900427806 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.995783796 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.642047632 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.004699363 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.029271337 seconds)
  done (took 23.658428523 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.483367537 seconds)
    (2/2) benchmarking "read"...
    done (took 2.493101463 seconds)
  done (took 6.889475073 seconds)
done (took 62.40327183 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.972875717 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.972777448 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.972425923 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 1.972295463 seconds)
    (5/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.973434899 seconds)
    (6/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.973110463 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.973294251 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.973286928 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.97360091 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.973310627 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.974567642 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.972698677 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.972736175 seconds)
    (14/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.973419139 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.972937793 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.973311421 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.973432962 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973796433 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.974170339 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.973832411 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.973333686 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.974277359 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.974485165 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.973410906 seconds)
  done (took 49.2610571 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.974304678 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.973949082 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.974710126 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.973742133 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.97465887 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.973431581 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.974391186 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.974639334 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.974544564 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.974754862 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.974577275 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.974299236 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.975181282 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.974796084 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.974847202 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.975867487 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.975323882 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.974993544 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.97440315 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.97577123 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.975738721 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.97514026 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.975245822 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.975133155 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.975431005 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.97537975 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.975255217 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.976040621 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.976411781 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.975452444 seconds)
  done (took 61.149399453 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.975738167 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.975340729 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.976273002 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.975866104 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.976012857 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.976254729 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.975792775 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.97603435 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.975472182 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.975686119 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.975967138 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.978896683 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.975455008 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.976647229 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.976774713 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.976480596 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.975920033 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.977145801 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.976240442 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.976711714 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.976512875 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.976491089 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.977220256 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.976341524 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.976725746 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.976844416 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.9767684 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.977353294 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.977742445 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.976772721 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.976769119 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.976876505 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.977329216 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.976964936 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.977911234 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.97792906 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.977460366 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.98140732 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.987747319 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.97777794 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.977662417 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.977906888 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.977361527 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.976716108 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.977167321 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.97798591 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.978019393 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.978383075 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.977544553 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.978455562 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.978264274 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.978805724 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.978592614 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.97776782 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.978421917 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.978453997 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.978631538 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.978914407 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.978190702 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.979067721 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.978879118 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.978767911 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.97839428 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.978725491 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.979408565 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.978431367 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.979521658 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.97891083 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.978578738 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.978827365 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.979284303 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.97976886 seconds)
  done (took 144.29579892 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.97907049 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.979054047 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.979645496 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.979909891 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.978799002 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.979151312 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.979164271 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.979478541 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.980295326 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.97986761 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.979496625 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.9800505 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981403679 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.979675029 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.979941277 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.980082079 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.979954897 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.980391414 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.980147597 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.979755086 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.979975592 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.980294663 seconds)
  done (took 45.462709664 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.979969674 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.980675374 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.980970452 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.98057319 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.98064412 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.980669806 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.981713186 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.980701275 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980429185 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.980648212 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.980941114 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980921188 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.981205991 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980977417 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.980716919 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.981678979 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.981399293 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.980983151 seconds)
  done (took 37.562787564 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.98145857 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.981674791 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.981569295 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.981433286 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.981197242 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.982490338 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.982234077 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.982147425 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.982024974 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.982185639 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.982066718 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.982115907 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.98207377 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981799862 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.98103773 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.982027567 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.981744083 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982502306 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.982372386 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.982038082 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.981932888 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.982532857 seconds)
  done (took 45.510999792 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.981968358 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.982689663 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.98236821 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.982763446 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.982181586 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.982376685 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.982328579 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.982716725 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.982652893 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.982566038 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.982444184 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.98293857 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.982943627 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.983650586 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.982975079 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.983508769 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.983805278 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.983655015 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.983184053 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.982451331 seconds)
  done (took 41.565227984 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.985762491 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.985376666 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.985676707 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.985107197 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.986193333 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.985563344 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.98581157 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.98595331 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.986266165 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.986791715 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.986289036 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.986230397 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986084113 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.986298826 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986367913 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.986652646 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986098864 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.986832416 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.986196714 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.987490594 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.986978977 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.987234596 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.986756783 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.986961802 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.987365044 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.987249992 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.987446034 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.987186546 seconds)
  done (took 57.530615435 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.984606959 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.98397788 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.984040534 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.98514595 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.984560775 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.985100664 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.98493428 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.985446373 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.984921516 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.98486839 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.985449873 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.985335609 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.985112849 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.985421021 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.98498329 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.985864516 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.985384863 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.985639611 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.985223436 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.985528188 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.985601375 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.985326286 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.985804346 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.98594788 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.9858447 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.986628202 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.986399943 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.986698965 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.986068458 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.985753309 seconds)
  done (took 61.473211265 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.006512097 seconds)
    (2/2) benchmarking "in"...
    done (took 2.010108665 seconds)
  done (took 5.929080173 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.985672226 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.986470454 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.985377989 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.986096399 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.986803525 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.986926986 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.986531447 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.986768037 seconds)
  done (took 17.802399219 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.987099458 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.992803019 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.986390734 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.986714266 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.989444325 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.997592349 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.988458608 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.990725092 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.992003503 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.989003462 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.99428516 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.993739523 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.999537035 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.995402398 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.987772258 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.989203828 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.991971019 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.992655662 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.99200545 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.987353665 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.993745528 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.990555327 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.988495677 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.991019534 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.987192095 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.993718489 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.001193453 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.991984491 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.992355542 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.98794535 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.998567537 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.987561654 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.99101289 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.992480365 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.991084621 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.988159112 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.998879502 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.991250028 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.991617082 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.988645395 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.994221415 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.994299466 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.995542743 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.000546119 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.991366201 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.989530318 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.988717447 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.99214561 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.98983196 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.996695752 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.998285517 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.992729632 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.989718081 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.989274027 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.994946459 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.991828527 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.992244618 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.995095688 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.999656789 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.999036834 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.996748778 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.016366866 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.004128173 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.992942786 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.992520596 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.005442837 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.023514085 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.994262021 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.994974596 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.989807523 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.001129674 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.99053321 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.990475752 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.990526697 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.009431369 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.00365766 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.993216495 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.991289523 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.991517713 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.992985184 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.995191557 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.993697535 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.994565041 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.994137281 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.006856663 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.025524065 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.993867827 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.994258773 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.995762595 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.994003163 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.99855002 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.9972069 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.992267102 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.991728471 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.995436154 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.995293126 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.994335227 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.994299347 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.991782551 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.00427974 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.991986752 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.991758646 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.999662942 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.005030744 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.99237611 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.994448745 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.995834879 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.994731764 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.003511279 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.995807395 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.995229042 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.993018567 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.994281661 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.000068077 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.992064456 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.000234072 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.004616019 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.0041168 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.995343335 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.000212591 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.999606219 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.998523104 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.008766314 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.02699732 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.992299509 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.999514237 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.002724076 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.010497663 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.000926958 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.993340862 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.998645477 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.992913927 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.993672588 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.998963365 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.993711342 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.996702659 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.993360995 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.996220689 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.993437736 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.996746225 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.997255027 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.998220134 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.99938115 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.997146586 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.001700707 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.996650393 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.999847974 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.004552402 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.996457717 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.996916806 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.994356106 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.999986381 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.996415833 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.998017488 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.994567557 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.994580073 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.996775841 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.996161538 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.002505691 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.997877041 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.994493762 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.997104945 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.000610959 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.998238414 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.998239426 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.996726356 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.998435511 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.998477686 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.999009136 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.999324435 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.001279464 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.998272889 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.002568372 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.996284464 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.996303497 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.99819161 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.995760909 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.996793472 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.003456644 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.011739181 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.003556455 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.009651152 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.995626333 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.007413889 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.996847156 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.000400544 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.000657751 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.999471224 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.999350852 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.996690602 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.996390851 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.00469273 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.024894166 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.01187002 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.00238628 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.999775548 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.005100168 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.001263723 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.006071808 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.997582852 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.000397277 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.002806455 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.999579868 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.999857935 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.996596106 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.003603951 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.998136275 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.997595355 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.004527374 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.999791243 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.998113617 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.001509974 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.998224309 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.003055606 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.997700071 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.998609064 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.999181937 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.998309774 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.009573769 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.003568822 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.997868323 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.001063128 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.003639885 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.001020012 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.998409645 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.002774286 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.00598177 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.999210441 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.003227111 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.009376611 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.999917049 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.999639794 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.99912272 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.999297433 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.004147097 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.998943393 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.005864493 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.009270058 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.005154517 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.999305857 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.007939842 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.998802677 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.005642573 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.002093989 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.003557648 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.002233099 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.004390737 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.001882108 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.999510563 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.010538435 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.999372772 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.004032648 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.999610657 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.003983243 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.001776796 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.00580841 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.002703152 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.007386623 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.012934045 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.009208476 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.001751241 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.004469141 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.005267813 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.003028563 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.004923072 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.005034451 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.01830441 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.015230976 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.00078431 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.001228072 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.003164135 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.006412598 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.000839668 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.003402517 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.01213558 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.002182753 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.003559577 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.006307633 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.003701043 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.003201812 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.011020349 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.006044958 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.008395949 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.006582314 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.005987016 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.005240964 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.001627384 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.007746419 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.004616253 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.007115967 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.006733531 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.001965527 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.005783317 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.001889324 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.014561466 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.002503772 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.006039284 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.013244525 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.006688486 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.003400335 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.006293238 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.0028375 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.006384507 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.007002231 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.003142694 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.00429873 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.005477211 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.01100411 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.018701473 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.010852859 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.015497695 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.008494496 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.01729539 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.005059808 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.002717443 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.005806593 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.010281529 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.016018572 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.003116579 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.003393731 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.014257533 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.004415056 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.005736538 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.01007507 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.002523132 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.006375443 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.006021682 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.005692971 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.012548942 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.010110548 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.003076716 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.006802851 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.003190753 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.004100996 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.010427712 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.009179767 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.006931385 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.005110931 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.00411516 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.007414292 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.00720088 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.006947747 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.007502881 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.004140982 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.003979515 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.015691628 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.007263933 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.006999559 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.012719716 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.005133854 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.017183886 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.007965955 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.008133717 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.007258763 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.005302603 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.009191444 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.005382305 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.007614498 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.006870485 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.004875338 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.008593356 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.021175307 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.016573722 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.010028386 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.010528393 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.008362613 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.009989161 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.021117085 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.036368552 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.008519771 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.01236088 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.010650047 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.016432361 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.013683057 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.015923049 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.013704874 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.019685166 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.010743015 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.007651025 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.013009227 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.024761403 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.008581054 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.007022991 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.006342479 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.014269082 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.0095926 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.006550315 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.008983623 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.0130641 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.009848384 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.022983894 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.007050494 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.009546221 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.009423706 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.007458247 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.009849567 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.007740438 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.012198124 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.011821523 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.009839751 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.010330204 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.013065103 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.016175356 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.007494587 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.015150108 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.022741269 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.010752525 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.010498517 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.010418811 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.011518414 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.013848924 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.011293299 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.00940884 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.011502501 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.007951935 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.010125737 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.015422423 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.022023109 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.012790048 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.008952658 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.008640002 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.015925775 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.00898912 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.011837438 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.013935573 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.021320355 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.016778262 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.026760518 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.02345403 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.011654858 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.0115501 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.021483458 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.021898854 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.011391601 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.009473896 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.011592469 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.015259345 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.01491557 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.013524427 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.012540737 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.011598896 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.01901495 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.010892223 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.012084104 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.01327846 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.010275286 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.01579072 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.015669825 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.019272336 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.010105272 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.009411421 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.009087995 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.01437688 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.014998297 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.016205108 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.012762078 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.010377835 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.016254601 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.016000834 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.015454748 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.010601881 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.011056306 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.016480627 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.011410824 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.010629558 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.012424726 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.011525785 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.011450855 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.019061848 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.022227712 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.011051594 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.015345082 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.013220507 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.018811009 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.013864349 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.014248354 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.014017026 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.011251485 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.022174497 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.011398184 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.014678932 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.017448312 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.012009131 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.020873426 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.016938706 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.020308412 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.014310828 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.012999905 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.011838259 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.019692815 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.024055297 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.019836061 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.019341085 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.022302638 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.020961287 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.017368026 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.012046731 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.012837462 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.013373538 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.014723777 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.020251217 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.018124664 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.018958182 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.015454404 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.017644181 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.015308876 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.018420808 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.013805239 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.012038329 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.020943778 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.026996007 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.025653986 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.01307594 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.017710377 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.016842503 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.020530981 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.027171544 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.015636984 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.01615934 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.016599324 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.017771219 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.016064154 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.097271341 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.092615855 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.101372575 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.070573934 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.023841655 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.043142921 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.019587771 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.029390393 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.056330075 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.016205573 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.017043927 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.017880306 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.016785634 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.017250354 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.018834963 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.017588461 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.02510145 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.018199503 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.015366443 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.025869126 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.014999533 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.014600696 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.017426309 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.017825175 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.024673691 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.017610255 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.025220511 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.018125241 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.015014753 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.016230994 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.01923856 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.015048681 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.014521697 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.01472651 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.020235794 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.015188151 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.018203466 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.028119174 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.019115352 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.020619297 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.033917541 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.030138842 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.018363438 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.01611384 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.01872054 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.024470484 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.022151133 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.01596353 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.023756833 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.026011517 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.023658219 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.026211623 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.020369272 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.020397623 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.021536412 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.016440321 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.018642176 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.033598984 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.032733908 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.018003293 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.018398597 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.027946517 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.016895927 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.02827412 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.026627092 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.019171389 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.021911311 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.01956238 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.017655494 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.016587512 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.016902595 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.024477276 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.0273084 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.020017572 seconds)
  done (took 1198.360607124 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.01708193 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.017226464 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.017109229 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.017330862 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.017198224 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.016518225 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.017437197 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.01724897 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.016631336 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.017084043 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.017280058 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.017381606 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.016718779 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.01805604 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.01765279 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.017870677 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.017606229 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.017699346 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.017393672 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.018255513 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.017743885 seconds)
  done (took 44.307674833 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.017618199 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.018787721 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.018226194 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.017726296 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.018531747 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.018758262 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.0180794 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.01870992 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.018083892 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.018516162 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.018240629 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.018961641 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.018237291 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.018927611 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.018901632 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.018583532 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.018818292 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.01893032 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.017949966 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.018794444 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.01888451 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.01865 seconds)
  done (took 46.350577313 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.022688293 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.022133005 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.023834462 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.019028777 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.019288325 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.022570833 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.019853467 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.022661095 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.020696581 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.021942755 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.032395754 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.029962032 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.018835763 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.023781742 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.019851527 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.022362786 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.139317537 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.022781223 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.023250163 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.020210672 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.023595807 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.030170294 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.020026129 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.020058177 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.021054517 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.023483536 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.020891211 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.020710693 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.021043265 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.023911653 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.027759298 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.020621391 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.025249698 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.026877061 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.026666032 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.025169425 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.028867906 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.023438507 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.021279563 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.021366928 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.036865094 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.051898356 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.021531528 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.024152352 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.032077084 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.020998758 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.020627449 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.029064002 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.031976764 seconds)
  done (took 101.255049327 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.021490557 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.021940254 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.022096074 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.021957953 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.022452793 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.022132797 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.022748894 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.022643002 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.02191872 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.022054154 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.023332415 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.023436256 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.022211365 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.022471485 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.023103342 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.022552482 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.022833151 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.02314048 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.021880342 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.023199275 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.022868523 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.023301246 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.023148476 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.024247971 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.023399597 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.022368942 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.0228176 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.023177836 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.023184545 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.022932645 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.023803992 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.022980378 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.023473756 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.023393725 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.023566871 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.023320372 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.024095176 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.02346341 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.023728986 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.024232045 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.023257954 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.024216418 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.024633549 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.024531114 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.023682619 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.024417268 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.02513107 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.024774517 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.025687885 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.025162252 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.024263746 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.0255842 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.024587726 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.024697898 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.024238575 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.024896283 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.024812495 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.024537265 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.025555913 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.025303149 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.025505564 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.024937399 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.025812927 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.025141339 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.025094238 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.026179612 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.025619718 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.025657117 seconds)
  done (took 139.563688885 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.028553393 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.028719778 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.028823746 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.028395799 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.028588108 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.028303161 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.028739084 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.028385561 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.027846676 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.029051445 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.028546852 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.025756044 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.028650607 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.026398716 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.028469456 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.02884456 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.02821513 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.029121085 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.02922373 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.029023494 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.028591098 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.028728832 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.029641541 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.029830866 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.029848612 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.029937728 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.029932402 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.029438185 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.030006639 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.029003901 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.030648613 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.030504301 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.031646175 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.029730119 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.030308163 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.030858351 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.029981942 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.030744484 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.030171082 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.030554089 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.030587508 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.030737664 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.030743562 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.030218982 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.030926501 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.030922422 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.03004858 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.030839814 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.028575581 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.0311883 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.030745998 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.030867938 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.031158482 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.031309621 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.031111283 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.029228088 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.031303899 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.031221064 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.031475294 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.031476441 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.032011908 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.029344646 seconds)
  done (took 127.796128522 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.029178284 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.028654279 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.029735168 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.029600643 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.028980736 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.029571035 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.029417379 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.030068118 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.030047118 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.029770669 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.029826045 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.030269846 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.031684156 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.029839653 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.030048403 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.031917618 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.030581045 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.030377003 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.029798352 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.030454747 seconds)
  done (took 42.553769192 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.029630723 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.029793153 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.030588546 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.030760552 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.030040679 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.031037358 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.030030561 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.030049323 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.031135834 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030469318 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.030587053 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.030855772 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.031083615 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.031692235 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.031167018 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.030935512 seconds)
  done (took 34.445232195 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.03126286 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.031329132 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.033998065 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.033189313 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.031059195 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.031178382 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.031694608 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.031493316 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.030657515 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.031772758 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.031203839 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.031880561 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.031693391 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.034280485 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.031937378 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.032269736 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.031980538 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.032435174 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.032127614 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.034244331 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.03240987 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.031994835 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.032484603 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.03197888 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.03209537 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.033315817 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.032469475 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.032423653 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.033430172 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.033844182 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.032296922 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.033285669 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.032703546 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.032209387 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.03578563 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.032930327 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.032849826 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.033091981 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.032799398 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.033335194 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.032946098 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.035357663 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.033098946 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.032784057 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.032992872 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.033519042 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.033447235 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.033745503 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.033825891 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.033652233 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.033780216 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.035861316 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.033088329 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.033900897 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.034021696 seconds)
  done (took 113.763049814 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.033838722 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.033949613 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.033326153 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.034810094 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.034519082 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.034148347 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.034342518 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.034375393 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.033984364 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.033820788 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.034938241 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.034204498 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.034385446 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.034314016 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.034593497 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.03429851 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.034609753 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.035060893 seconds)
  done (took 38.576062473 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.035298266 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.035238164 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.034849071 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.034925373 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.03433393 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.035392774 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.035100818 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.035159026 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.035053033 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.035108251 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.035050348 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.035891867 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.034833639 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.035820113 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.035942923 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.035475143 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.035535871 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.035574855 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.035736133 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.035762697 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.035930706 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.036106681 seconds)
  done (took 46.738301837 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.03666475 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.037018727 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.055456281 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.064112174 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.062609107 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.082039394 seconds)
  done (took 14.298377329 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036221441 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036651921 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.036721139 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036348901 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036897109 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036462159 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037085622 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03659897 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037078858 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036992331 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037336682 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037061299 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037112905 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037572593 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038193326 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037688792 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037915158 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037384678 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037335318 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038170635 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03756632 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038148022 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037586753 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037770962 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038407332 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.03826313 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038251382 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038326344 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038073488 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038504563 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.0385907 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038624731 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.03849642 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.039180133 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038972441 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.038668824 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038774813 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039117255 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03906945 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038752655 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.039215049 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038837686 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038964416 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039176935 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040165711 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041382999 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.038068996 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038250762 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038159374 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.052145906 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05492703 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.054676785 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.05158471 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.215275608 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.24025347 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.077743691 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.076386698 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.075984247 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.074902721 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.076635366 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.076238142 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.075610694 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.075961458 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.075723051 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.076052201 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.076323844 seconds)
  done (took 137.334115911 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.076633191 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.076283894 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.074897273 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.075943153 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.075870137 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.075550374 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.076352337 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.076205868 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.076128207 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.086838819 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.173701926 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.044414196 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039302332 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.037868302 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.038849574 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039406428 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.039950429 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038584114 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.039044269 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039527614 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038640926 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038229094 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039370236 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.0388686 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038554422 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039643806 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039398211 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.039411754 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.038758129 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.038747555 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040354262 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039079741 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039124584 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.039081377 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03949598 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040156128 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.040151096 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.039269846 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.039957863 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039760281 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040271911 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040234443 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.040010205 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040275044 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.040459376 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.040844709 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.040111373 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040254675 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.040133441 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.040457338 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.041525485 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04045009 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.04073 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04109071 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.064645196 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.084596677 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.085710202 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.08075283 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.085897337 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.082769824 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.085633108 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.08729295 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.085566696 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.085422121 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.088479013 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.085125742 seconds)
  done (took 137.657802076 seconds)
done (took 2792.477475981 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.154871473 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.175595875 seconds)
  done (took 16.338702107 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.224028525 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.219772356 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.238316621 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.188285686 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.091749749 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.135020303 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.092473751 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.088891757 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.181710307 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.093556347 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.117776606 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.097547421 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.086027529 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.052198326 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.050525352 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.051504944 seconds)
  done (took 56.057558737 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.055529791 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.053989959 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.05225125 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.050424802 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.075712289 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.149720785 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.080323906 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.059021923 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.072500138 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.101862829 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.080304802 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.061966765 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.067188343 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.062583921 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.154790038 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.110635902 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.123788233 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.144675537 seconds)
  done (took 39.525239706 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.186243492 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.104906215 seconds)
  done (took 11.268692045 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.072404324 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.06094286 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.054151593 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.082082637 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.072601687 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.082556575 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.052699273 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.057866869 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.087672854 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.075992121 seconds)
  done (took 72.695631396 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.055510742 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.053903293 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.336180987 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.064684328 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.060816011 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.083822564 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.050782594 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.088874099 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.053274614 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.049546364 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.064248318 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.344174975 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.070080679 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.052431986 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.479598386 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.071656647 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.058786799 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.089252327 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.09598122 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.058141305 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.059645211 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.058666437 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.297580515 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.824291394 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.056763806 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.067157508 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.060380663 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.046341472 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.047201415 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.052546061 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.056146128 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.051741405 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.059793819 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.050648968 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.071072568 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.059715114 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.674953865 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.077619482 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.061018147 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.140826442 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.112082302 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.061101983 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.051148313 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.0612285 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.048015164 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.059977148 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.785069706 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.126986743 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.053038372 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.210370464 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.549936969 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.074999203 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.211142165 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.184089774 seconds)
  done (took 143.725189407 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.046695569 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.514394508 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.217563083 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.050745119 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.412344127 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.260213395 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.647782588 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.093074479 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.050775758 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.251117467 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.211958642 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.178785101 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.051727254 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.049845649 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.052004666 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.04985264 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.218508631 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.119084058 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.051994254 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.048700436 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.070680336 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.278708281 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.169838532 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.053389044 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.069034744 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.266449173 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.099475883 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.177949498 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.447811758 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.048466774 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.112517567 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.052012478 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.047641822 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.0497344 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.091894259 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.161382791 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.146962128 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.052802026 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.686249622 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.049416909 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.65204028 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.253367253 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.164297863 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.176831653 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.195368802 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.262805821 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.735813606 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.04844258 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.790797712 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.217733212 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.267426456 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.257264566 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.146651003 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.053425368 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.481314952 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.049856919 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.049524146 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.306688913 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.199928071 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.168803213 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.054277582 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.051631327 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.050785064 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.284866586 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.053636556 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.15762422 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.053178584 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.051545221 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.159457527 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.17099273 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.196058598 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.275483468 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.084668845 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.005012029 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.336199378 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.259551953 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.117055281 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.306769799 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.055462278 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.05399106 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.152165382 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.509516706 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.201095887 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.288925581 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.35841909 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.08847524 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.543909178 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.050768558 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.261955443 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.194536145 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.361754686 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.199299144 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.10699956 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.909234532 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.051492354 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.051418802 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.887162939 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.171828202 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.056894462 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.591702814 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.291574323 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.798200495 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.071706928 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.527719529 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.158495356 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.056553052 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.667376766 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.052820968 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.269289436 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.097148033 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.055063578 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.053912555 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.196521326 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.975135371 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.053291319 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.34840536 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.112803757 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.054706823 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.208324904 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.056442491 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.310671253 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.766373826 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.289327356 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.056702371 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.087400438 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.227114554 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.198048038 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.058003632 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.379627935 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.294362738 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.149381333 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.36294477 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.057222218 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.054374306 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.341814296 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.05715811 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.054968447 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.220196643 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.757162293 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.211450055 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.057584425 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.397688859 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.077207854 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.109186721 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.05929522 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.29022614 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.090919058 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.105169739 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.058873438 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.193444686 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.058252611 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.01508313 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.215900585 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.05656317 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.05600018 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 6.048406273 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.058928908 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.213315769 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.285301895 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.071613735 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.12635888 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.424772022 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.055080348 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.162748103 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.082525474 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.494123238 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.573572405 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.214661446 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.058952297 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.055743892 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.056046225 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.288405676 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.330700242 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.058557424 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.057934575 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.82138736 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.301600783 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.056302589 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.234966997 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.880737228 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.227836775 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.273590158 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.062560876 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.109601869 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.063042334 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.327641644 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.586434604 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.059970476 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.056601053 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.057377275 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.057603251 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.056824278 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.258015854 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.091768765 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.816345648 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.197387945 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.323169327 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.273975517 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.365547005 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.117726123 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.060792471 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.305525685 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.060624978 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.119831205 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.059872147 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.067876492 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.296690011 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.064120074 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.362317663 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.415272206 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.236264671 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.104823867 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.061771776 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.060496655 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.058995649 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.219981567 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.162607856 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.062368036 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.265620232 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.101728016 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.175689255 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.281039685 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.143475369 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 3.007922838 seconds)
  done (took 928.017485124 seconds)
done (took 1269.674947128 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.058089235 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.06178693 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.061361088 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.0603957 seconds)
  done (took 30.225477107 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.059574056 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.060435457 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.061788402 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.063581538 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.060999676 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.063673679 seconds)
  done (took 14.361194723 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.058887474 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.061487939 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.061122631 seconds)
  done (took 23.165217499 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.463987348 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.361722497 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.151283188 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.223301546 seconds)
  done (took 11.187444912 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.067501932 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.063581085 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.063333848 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.062763154 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.061885229 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.06321892 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.064271 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.062228811 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.063791364 seconds)
  done (took 20.566736638 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.546827659 seconds)
done (took 108.069927933 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.278671273 seconds)
    (2/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.323297858 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.528904325 seconds)
    (4/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.577265673 seconds)
    (5/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.913889399 seconds)
    (6/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.191642237 seconds)
    (7/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.641374314 seconds)
    (8/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 3.034713077 seconds)
    (9/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.064165017 seconds)
    (10/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 8.883820806 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.217521774 seconds)
    (12/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.480584632 seconds)
    (13/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.399194679 seconds)
    (14/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.068825522 seconds)
    (15/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.214294251 seconds)
    (16/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.16994578 seconds)
    (17/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.885299745 seconds)
    (18/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 3.062541383 seconds)
    (19/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 7.0648803 seconds)
    (20/341) benchmarking ("perf_sum", Bool, true)...
    done (took 4.402875086 seconds)
    (21/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.60648266 seconds)
    (22/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 3.046713817 seconds)
    (23/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.486940573 seconds)
    (24/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.589732164 seconds)
    (25/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.52022282 seconds)
    (26/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.075776749 seconds)
    (27/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.084258883 seconds)
    (28/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.211567022 seconds)
    (29/341) benchmarking ("sort", Float32, false)...
    done (took 7.061799761 seconds)
    (30/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.087237241 seconds)
    (31/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.762611221 seconds)
    (32/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.260651139 seconds)
    (33/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.19820642 seconds)
    (34/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.598206283 seconds)
    (35/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.077579402 seconds)
    (36/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.438016471 seconds)
    (37/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.356923531 seconds)
    (38/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.514655874 seconds)
    (39/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.400717959 seconds)
    (40/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.195551837 seconds)
    (41/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.194675665 seconds)
    (42/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.399011361 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.234423392 seconds)
    (44/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 9.047683369 seconds)
    (45/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.269694843 seconds)
    (46/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.369378287 seconds)
    (47/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.266016251 seconds)
    (48/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.078703811 seconds)
    (49/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 8.655872449 seconds)
    (50/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.16365916 seconds)
    (51/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.737332609 seconds)
    (52/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.904923771 seconds)
    (53/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.272591316 seconds)
    (54/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.839708796 seconds)
    (55/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.496796025 seconds)
    (56/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.620516443 seconds)
    (57/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.197745379 seconds)
    (58/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.220245893 seconds)
    (59/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.215998437 seconds)
    (60/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 3.008190152 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.402350666 seconds)
    (62/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.076730729 seconds)
    (63/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.066805657 seconds)
    (64/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.398410795 seconds)
    (65/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.254858671 seconds)
    (66/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.137819361 seconds)
    (67/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.775019916 seconds)
    (68/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.495255498 seconds)
    (69/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.078112098 seconds)
    (70/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 9.224047149 seconds)
    (71/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 9.354456152 seconds)
    (72/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 3.081332049 seconds)
    (73/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.088490811 seconds)
    (74/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.256842163 seconds)
    (75/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.214629637 seconds)
    (76/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.431065608 seconds)
    (77/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.105050488 seconds)
    (78/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.476934089 seconds)
    (79/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.975119235 seconds)
    (80/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.5728852 seconds)
    (81/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.26929989 seconds)
    (82/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.210247029 seconds)
    (83/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.281750684 seconds)
    (84/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.283813162 seconds)
    (85/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.281057681 seconds)
    (86/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.170477418 seconds)
    (87/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 9.156237553 seconds)
    (88/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.896914636 seconds)
    (89/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.209982381 seconds)
    (90/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.469004739 seconds)
    (91/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.404766736 seconds)
    (92/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.16367091 seconds)
    (93/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.742589513 seconds)
    (94/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.149396721 seconds)
    (95/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.245666817 seconds)
    (96/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.258631107 seconds)
    (97/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.226603005 seconds)
    (98/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.173020594 seconds)
    (99/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 3.026801063 seconds)
    (100/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.238562237 seconds)
    (101/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.51267897 seconds)
    (102/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.543543927 seconds)
    (103/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.137777894 seconds)
    (104/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.380207664 seconds)
    (105/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.100969481 seconds)
    (106/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.298063417 seconds)
    (107/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.47151277 seconds)
    (108/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.596179059 seconds)
    (109/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.565411724 seconds)
    (110/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.1396725 seconds)
    (111/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.137867713 seconds)
    (112/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.409400308 seconds)
    (113/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.709750961 seconds)
    (114/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.357498972 seconds)
    (115/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.232231952 seconds)
    (116/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.933691937 seconds)
    (117/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.497362579 seconds)
    (118/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.624029829 seconds)
    (119/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.381832852 seconds)
    (120/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.557007708 seconds)
    (121/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.752976729 seconds)
    (122/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.436564453 seconds)
    (123/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.367213463 seconds)
    (124/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.298043865 seconds)
    (125/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.150426708 seconds)
    (126/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 4.291411903 seconds)
    (127/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.581748114 seconds)
    (128/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 3.209595598 seconds)
    (129/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.592189241 seconds)
    (130/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.345058487 seconds)
    (131/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.115576911 seconds)
    (132/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.732876962 seconds)
    (133/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.557300579 seconds)
    (134/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.106725815 seconds)
    (135/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.87810582 seconds)
    (136/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.38408359 seconds)
    (137/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.625646971 seconds)
    (138/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.31119693 seconds)
    (139/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.131667022 seconds)
    (140/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.199090474 seconds)
    (141/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.115310866 seconds)
    (142/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.308843332 seconds)
    (143/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.320001985 seconds)
    (144/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.531200752 seconds)
    (145/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.112583141 seconds)
    (146/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.093621953 seconds)
    (147/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.279991629 seconds)
    (148/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.422822228 seconds)
    (149/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.536521491 seconds)
    (150/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.413833207 seconds)
    (151/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.270918855 seconds)
    (152/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.402470732 seconds)
    (153/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.416056974 seconds)
    (154/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.204146134 seconds)
    (155/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.287064284 seconds)
    (156/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.636246172 seconds)
    (157/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.087089055 seconds)
    (158/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.223554848 seconds)
    (159/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.388122864 seconds)
    (160/341) benchmarking ("sort", Bool, false)...
    done (took 2.297852397 seconds)
    (161/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.221740294 seconds)
    (162/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.241094595 seconds)
    (163/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.427021001 seconds)
    (164/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.07499534 seconds)
    (165/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 6.066462665 seconds)
    (166/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.098708016 seconds)
    (167/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.17225827 seconds)
    (168/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.494023155 seconds)
    (169/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.242463377 seconds)
    (170/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.388531084 seconds)
    (171/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.724361729 seconds)
    (172/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.485864751 seconds)
    (173/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.08801979 seconds)
    (174/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.095381525 seconds)
    (175/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.093888856 seconds)
    (176/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.46177413 seconds)
    (177/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.426523827 seconds)
    (178/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.077029292 seconds)
    (179/341) benchmarking ("sort", Int64, false)...
    done (took 7.07700097 seconds)
    (180/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 3.105834526 seconds)
    (181/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.985880548 seconds)
    (182/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.087250992 seconds)
    (183/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 8.596992583 seconds)
    (184/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 4.711659871 seconds)
    (185/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.625743786 seconds)
    (186/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.138144619 seconds)
    (187/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.741525733 seconds)
    (188/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.07848701 seconds)
    (189/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.447857979 seconds)
    (190/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.3128079 seconds)
    (191/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.089634358 seconds)
    (192/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.236045697 seconds)
    (193/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.934654918 seconds)
    (194/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.483308501 seconds)
    (195/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.414601543 seconds)
    (196/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.572237569 seconds)
    (197/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.405356044 seconds)
    (198/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.093846287 seconds)
    (199/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.095836189 seconds)
    (200/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.087675911 seconds)
    (201/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.41916896 seconds)
    (202/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.252895973 seconds)
    (203/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.497587214 seconds)
    (204/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.8859009 seconds)
    (205/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.220934345 seconds)
    (206/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.151778038 seconds)
    (207/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.223519633 seconds)
    (208/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.27770715 seconds)
    (209/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.077757447 seconds)
    (210/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.537870315 seconds)
    (211/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.086669809 seconds)
    (212/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.227700654 seconds)
    (213/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.076607236 seconds)
    (214/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.092485822 seconds)
    (215/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.587096552 seconds)
    (216/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.08373803 seconds)
    (217/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.089834212 seconds)
    (218/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.582686308 seconds)
    (219/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.082718126 seconds)
    (220/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.194520603 seconds)
    (221/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.170364855 seconds)
    (222/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.306837624 seconds)
    (223/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.243699477 seconds)
    (224/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.843255071 seconds)
    (225/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.093849979 seconds)
    (226/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.366775765 seconds)
    (227/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.101413124 seconds)
    (228/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.331616225 seconds)
    (229/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.086619847 seconds)
    (230/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.553396889 seconds)
    (231/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.567076642 seconds)
    (232/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.200498611 seconds)
    (233/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.257546733 seconds)
    (234/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.113899289 seconds)
    (235/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.092169521 seconds)
    (236/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.49587226 seconds)
    (237/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.731682373 seconds)
    (238/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.232972237 seconds)
    (239/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 3.02599033 seconds)
    (240/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.655032615 seconds)
    (241/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.588955873 seconds)
    (242/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.434646037 seconds)
    (243/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.220518243 seconds)
    (244/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.75919751 seconds)
    (245/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.820796318 seconds)
    (246/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.20180891 seconds)
    (247/341) benchmarking ("sort", BigInt, false)...
    done (took 7.079380774 seconds)
    (248/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.424556028 seconds)
    (249/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.430788344 seconds)
    (250/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.216658965 seconds)
    (251/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.281830723 seconds)
    (252/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.354559726 seconds)
    (253/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.89266713 seconds)
    (254/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.504468885 seconds)
    (255/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.14736507 seconds)
    (256/341) benchmarking ("sort", Int8, false)...
    done (took 5.723520937 seconds)
    (257/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.232385484 seconds)
    (258/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.126029937 seconds)
    (259/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.484310789 seconds)
    (260/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.423213394 seconds)
    (261/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.083457953 seconds)
    (262/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.322026105 seconds)
    (263/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.386369787 seconds)
    (264/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.615324856 seconds)
    (265/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.190751506 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.234270201 seconds)
    (267/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.093744087 seconds)
    (268/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.204871384 seconds)
    (269/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.076821943 seconds)
    (270/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.33286807 seconds)
    (271/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.087079979 seconds)
    (272/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.435297572 seconds)
    (273/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.09845205 seconds)
    (274/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.166538325 seconds)
    (275/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.079992664 seconds)
    (276/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.613846232 seconds)
    (277/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.110446864 seconds)
    (278/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.077800977 seconds)
    (279/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 3.889940142 seconds)
    (280/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.408500325 seconds)
    (281/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.612695437 seconds)
    (282/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.622303659 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.235499048 seconds)
    (284/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.129579721 seconds)
    (285/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.377329616 seconds)
    (286/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.140937736 seconds)
    (287/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.179118526 seconds)
    (288/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.257951059 seconds)
    (289/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.089247661 seconds)
    (290/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 3.055328362 seconds)
    (291/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.111996657 seconds)
    (292/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.31552792 seconds)
    (293/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.226058095 seconds)
    (294/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.077721028 seconds)
    (295/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.40303421 seconds)
    (296/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.293387855 seconds)
    (297/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.142427522 seconds)
    (298/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.079255894 seconds)
    (299/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.651060386 seconds)
    (300/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.1766539 seconds)
    (301/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.081803835 seconds)
    (302/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.911645915 seconds)
    (303/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.085736519 seconds)
    (304/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 3.895875538 seconds)
    (305/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.375355044 seconds)
    (306/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.235102034 seconds)
    (307/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.105058688 seconds)
    (308/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.186703568 seconds)
    (309/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.637370323 seconds)
    (310/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.099158179 seconds)
    (311/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.468687826 seconds)
    (312/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.089699619 seconds)
    (313/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 4.018839448 seconds)
    (314/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.091209348 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.107812521 seconds)
    (316/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.079318635 seconds)
    (317/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 4.192906586 seconds)
    (318/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.221986284 seconds)
    (319/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.090301385 seconds)
    (320/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.212672253 seconds)
    (321/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.081363662 seconds)
    (322/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 9.39417556 seconds)
    (323/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 4.661479048 seconds)
    (324/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.229214484 seconds)
    (325/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.231607599 seconds)
    (326/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 3.055562944 seconds)
    (327/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.216286658 seconds)
    (328/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.090798537 seconds)
    (329/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.094362973 seconds)
    (330/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.62344642 seconds)
    (331/341) benchmarking ("sort", Float64, false)...
    done (took 7.086669573 seconds)
    (332/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.571732071 seconds)
    (333/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.286287676 seconds)
    (334/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.256641147 seconds)
    (335/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.899863851 seconds)
    (336/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.556064682 seconds)
    (337/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.50602028 seconds)
    (338/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.261955201 seconds)
    (339/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.137938769 seconds)
    (340/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.491931245 seconds)
    (341/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.998481541 seconds)
  done (took 1214.898199125 seconds)
done (took 1217.058103454 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.104288255 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.078901027 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.653166546 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.095013365 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.077003369 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.079795691 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.628655191 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.115740823 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.086585903 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.630351461 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.094884447 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.078376455 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.086711896 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.097079289 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.084600785 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.088354994 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.085422675 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.103259866 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.095908205 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.08289612 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.156801487 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.083081768 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.078093994 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.126176357 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.079791964 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.087109025 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.099093204 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.145242842 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.144079833 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.081340367 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.085505399 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.475857725 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.145096625 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.085774 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.085213131 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.087513113 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.084425462 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.087695617 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.099312331 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.087156852 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.080789552 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.090198669 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.083943081 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.082280011 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.079694064 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.079158886 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.082095893 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.175433149 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.092890594 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.482416466 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.155012365 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.100596413 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.146255553 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.082998422 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.082508476 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.082875932 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.146812137 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.084473806 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.084700515 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.484922582 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.197235809 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.089873979 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.48548432 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.159369414 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.091250893 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.090694216 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.080459915 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.100090438 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.475932129 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.685511505 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.119287436 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.104210019 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.081442896 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.082727871 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.09200274 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.63099706 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.099708739 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.761098077 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.11512787 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.090429638 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.086723004 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.084391828 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.083296735 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.090456513 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.106582131 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.081511881 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.086433042 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.087177211 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.09448246 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.477569744 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.14079445 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.655628919 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.095844547 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.103263583 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.107806537 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.76300336 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.117921303 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.102582797 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.085370945 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.476063493 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.138095199 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.104842517 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.085091981 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.090876254 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.179120284 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.103243559 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.104513268 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.083669001 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.106414052 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.089850842 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.083754303 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.095094553 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.106401806 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.102931535 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.092011402 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.084216959 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.094461026 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.088822196 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.10357453 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.094254978 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.090694782 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.092350239 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.085419004 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.131677001 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.110319676 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.09281522 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.180789378 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.089634118 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.17952167 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.09436528 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.091945074 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.084612034 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.490306151 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.143569795 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.108127033 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.091612153 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.109173436 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.10788115 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.093744905 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.087706892 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.093453058 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.087266804 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.132756646 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.08555983 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.109841618 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.132411578 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.098256368 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.091409042 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.104727343 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.103224136 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.108352293 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.090747585 seconds)
done (took 329.071325635 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.142294737 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.438782796 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.158835635 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.090780325 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.167669898 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.152951702 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.091191999 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.091248029 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.091050491 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.529749188 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.09127577 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.092049488 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.459920693 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.091710758 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.147548275 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.09179684 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.091680512 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.361733215 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.095232665 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.152364337 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.106464554 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.09159055 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.091693485 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.519103758 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.090089614 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.098009374 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.152446767 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.091428107 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.36316498 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.092543411 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.10851832 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.364773509 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.152771256 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.095346202 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.093439333 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.092894185 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.169078074 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.098971742 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.143489245 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.143703314 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.16084817 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.101097113 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.094643428 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.120646018 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.097676531 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.096453148 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.092580774 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.097935137 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.091107311 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.094534599 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.361920849 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.094091366 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.094110998 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.092799226 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.093305822 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.098892545 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.0935507 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.096403012 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.153942872 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.09676389 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.144367894 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.520386379 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.532633641 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.093565642 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.110862258 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.093703132 seconds)
  done (took 165.622445885 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.17686184 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.191043602 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.182611293 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.099622127 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.155143353 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.176867668 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.09890282 seconds)
  done (took 17.09757512 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.103298585 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.09546161 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.126664972 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.121009674 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.096923896 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.269547038 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.108665275 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.096631428 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.124032972 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.097125997 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.45941071 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.122565785 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.097069871 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.106994902 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.1093994 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.13105691 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.098518664 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.0996558 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.204091687 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.172235808 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.097041295 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.097096077 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.134185766 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.109545024 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.096821159 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.097967706 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.099673615 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.105324437 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.09748326 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.097126324 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.09741285 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.111950619 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.097080298 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.091986312 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.096585902 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.097345752 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.100068938 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.097274227 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.09756998 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.484889126 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.097292368 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.097800953 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.098355175 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.097896703 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.098347958 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.123585317 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.097808506 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.097591234 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.098125683 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.098177589 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.135403666 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.097539711 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.098639325 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.099245482 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.133995536 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.098892048 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.100835256 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.099010135 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.098591191 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.098430453 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.098037202 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.173413553 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.126437606 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.098494282 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.127701304 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.139058 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.100832979 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.099271073 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.098030119 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.131046199 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.099235167 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.132752518 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.099853583 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.189330498 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.099132782 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.269335955 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.124985278 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.103835508 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.103568087 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 3.059938986 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.108613932 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.099962944 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.098670497 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.103384026 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.096558011 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.096986469 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.096393174 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.097404467 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.104574101 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.095737871 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.146979013 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.096771554 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.09896719 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.18765642 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.096907882 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.204345827 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.12531593 seconds)
  done (took 210.759548244 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.103433083 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.09831962 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.114578195 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.098512063 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.097544132 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.102129757 seconds)
  done (took 14.632781481 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.100203129 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.101647949 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.097514709 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.097075266 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.101258722 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.100099254 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.097520832 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.100441744 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.105804842 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.098356283 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.100716284 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.101816398 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.100706749 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.101373938 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.098619843 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.098256132 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.098311038 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.098013501 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.099691208 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.100702312 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.297527296 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.101230732 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.100929238 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.103408856 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.106581302 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.0980447 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.108557002 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.098639642 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.098558009 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.107033661 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.105814969 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.101086453 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.104134909 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.107419752 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.103582952 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.103948677 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.10361395 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.103059997 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.099884387 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.101875548 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.103128281 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.101924309 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.098551565 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.102793408 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.101874479 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.109199178 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.108400157 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.108905385 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.099207192 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.10320401 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.103519389 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.098834547 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.10222967 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.103823853 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.107593045 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.106929229 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.108960007 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.100176755 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.10281406 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.105061771 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.104873589 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.103276587 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.103035453 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.105231878 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.100754614 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.10488914 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.10517101 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.108321088 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.102849311 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.100066609 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.104093558 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.100599806 seconds)
  done (took 153.593744837 seconds)
done (took 563.75253007 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.115163282 seconds)
  done (took 9.136770619 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.140828834 seconds)
  done (took 9.296759304 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.396824054 seconds)
  done (took 14.428395525 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.105589052 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.128592807 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.127276781 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.103866911 seconds)
  done (took 30.512463667 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.222603632 seconds)
  done (took 9.247681958 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.12250245 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.105193483 seconds)
  done (took 16.338687766 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.20581145 seconds)
  done (took 9.237723284 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.389368667 seconds)
  done (took 9.426047679 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.1090025 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.118003154 seconds)
  done (took 16.286548079 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.102235779 seconds)
  done (took 9.123570599 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.658936648 seconds)
  done (took 10.772953913 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.11190549 seconds)
  done (took 9.168294127 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.168098814 seconds)
  done (took 9.191429754 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.823072701 seconds)
  done (took 9.845073183 seconds)
done (took 174.069025801 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.115242137 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.101369433 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.101444465 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.101182496 seconds)
  done (took 30.441791705 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.141019369 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.141044492 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.144116892 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.15139056 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.131145797 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.130611294 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.141440859 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.142468772 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.130546617 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.147698537 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.14197958 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.147594654 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.160561471 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.144577471 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.144116035 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.147268177 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.148128826 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.14255099 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.131275294 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.144788565 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.147802674 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.148188569 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.102295796 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.102483012 seconds)
  done (took 53.380759235 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.311461222 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.190892544 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.254678912 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.147079683 seconds)
  done (took 10.927110925 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.102062378 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.177069038 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.16172089 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.161035518 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.161168367 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.268728565 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.162313766 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.309646037 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.279938026 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.239443579 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.108085927 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.119118945 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.120291729 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.147373085 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.26939974 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.102070164 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.102030774 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.239628973 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.177926303 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.316080513 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.103773716 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.162938086 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.163063871 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.163157377 seconds)
  done (took 54.342090398 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.104496897 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.115946023 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.115363812 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.104299362 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.104790491 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.104008175 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.11532256 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.105744672 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.13266562 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.107500232 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.105121555 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.104535148 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.105266944 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.104779099 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.10508759 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.122043402 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.121254322 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.105504937 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.107439116 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.11645478 seconds)
  done (took 44.233149848 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.10330892 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.34371733 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.34422291 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.26598134 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.103753484 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.104625298 seconds)
  done (took 33.29108111 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.121222136 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.126367683 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.114108443 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.142926405 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.173904064 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.118511479 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.194930352 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.320916575 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.118628059 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.189944992 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.133082617 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.114434503 seconds)
  done (took 27.898392945 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.103865516 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.107725379 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.10732073 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.120534591 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.119627767 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.114935658 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.117074604 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.10339656 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.121620963 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.130001663 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.115175302 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.123080878 seconds)
  done (took 47.411908876 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.306662773 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.255689326 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.413170983 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.767421904 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.623018838 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.178121614 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.497011721 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.614923663 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.167694118 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.194322107 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.598289014 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.14319009 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.61194343 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 5.057906761 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.105741303 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.376268797 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108485262 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.582853303 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.530435336 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.183100024 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.111725003 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.107802138 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.111269337 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.629371681 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.421670723 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.112185562 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.297263299 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131137561 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.106358458 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.312359519 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.107694033 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.133844833 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.288567052 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.403613824 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.62257465 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.195830886 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.19307915 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.08638772 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.161958103 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.144745005 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.120249486 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.123982903 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.107193745 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.12168835 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.355526499 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.110085508 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.109200079 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.696514566 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.061497817 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.236718245 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.28245919 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.972499322 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.163813611 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.789753602 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242077743 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.378414263 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.115167405 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.082642193 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.182243615 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.154582548 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.28115153 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.193052553 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.308217822 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.06320397 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.606396549 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.295715432 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.110896955 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.115681465 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.366519157 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.38196909 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.19193928 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.238177582 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.85016062 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.109939561 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.112708156 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.538064922 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.225077318 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.108968551 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.836669521 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.615573926 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 5.062875225 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.209547353 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.789600503 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117044463 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.108358933 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.121704241 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.693421213 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.059343218 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.192107666 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.17565483 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.470108581 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.110153194 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.110486226 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.139109024 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112390544 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.097124091 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.756885121 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.186447433 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.061538865 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.662444784 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.109368271 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.069569927 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.10933915 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.117955273 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.483587452 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.153886102 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.850219301 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.726223148 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.389046639 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.673719763 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.118820093 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.111463493 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.194502718 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193164995 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.110878803 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.802248717 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.102329067 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.219472662 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.290290721 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.111337013 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.06328298 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.126225268 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.292138794 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.111160608 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.140025255 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.113201033 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.119414562 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.111225466 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.117068303 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.695097722 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137669773 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.616137679 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.227833323 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.112513637 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.05428164 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.120952412 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.602642746 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.202120288 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.164653056 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.537501009 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.828739421 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.6374237 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.076847889 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.875754945 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.565965137 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.22037194 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.197687638 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.704293422 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.266260008 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.196675532 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.112490158 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.273680313 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.123271644 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.117268932 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.112986473 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.846303645 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.775225147 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.162168523 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.113463434 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.069880074 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.092423351 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.341129326 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.765760259 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.153385263 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.121620502 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.205422697 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264216965 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.116964069 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.063387873 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.452450779 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.351308753 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.621988643 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.512409582 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.768576455 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.206650425 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.127618039 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.303652361 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.201137351 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.739681287 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.504560664 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.430170622 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.552722484 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.111865797 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.624937151 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.180172716 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.510468423 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.138820197 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.872620495 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.163410111 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.583321787 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.150503807 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.567954108 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 5.066189939 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121378326 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.552665668 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.116374781 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.669304147 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.345355873 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146590585 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.117177526 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.116276942 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126406184 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.11334717 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.241257812 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192554562 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193031898 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.06800962 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.551573068 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.162071717 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.118614692 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.115380015 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.319077544 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.054895049 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.137854226 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.114973672 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206484175 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.97721333 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.819368576 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.123315274 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.123445071 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.596037194 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.127289056 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.118168269 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.123491335 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.019717687 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159069559 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.171284801 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.24417718 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.642662215 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.226906409 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.200619087 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.119104766 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125383265 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.384219592 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.133061841 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.382513858 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.609531121 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.727911331 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.785637201 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.221734775 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.734224207 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.141661865 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.121018094 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.67153371 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.158445685 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121943138 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.300887587 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.814816681 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.256918803 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.164006526 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.208284532 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.120140588 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.572946021 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.713232452 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.152230713 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 3.056362558 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.234726723 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.121423182 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.284484963 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 3.006791354 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.12232119 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.626663851 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.13162151 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.321896592 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.302678025 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.488602924 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.621846678 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.817690517 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.072357598 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.129103054 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.218698612 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.394417915 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.121461225 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.158679022 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.747241166 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.773317126 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.895420533 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.647315119 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.339847175 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.262641465 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.57027498 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.226073294 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.134968186 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 3.058021359 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.318723169 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.084244821 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252595317 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.073144834 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.181264891 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.422051665 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.147825291 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.572285485 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.163395118 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.636785913 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.484172838 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.175450874 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.262793606 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.15552156 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.123672346 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.193559441 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.124174399 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.161081857 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.249269705 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.132266122 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.526643157 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.173629097 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.171177505 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.131620164 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.680914255 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.157196603 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128959139 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.864593655 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.153687953 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.254917326 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.209145593 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.195015425 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.218257688 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.126911176 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.138080304 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.698377889 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.67783358 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.265596209 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.727904308 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.196224688 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.865472958 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.126301592 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.316521082 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.133291661 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.784902558 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183545429 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.494370557 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.127520994 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.350359087 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.533627492 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.230390289 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.140114336 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.090078067 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.749216723 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.274943124 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.632312901 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.182069226 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.94789892 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.674421272 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.273473814 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.71881768 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.17182995 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.191321523 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.57591647 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.953752555 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.938139265 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.181505615 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144961258 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.282109434 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.352265128 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.283298013 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.841064205 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.140789582 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.15372324 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.317081083 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.250599513 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.068847947 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.656691608 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.876729828 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.510617992 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.252613122 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.314047262 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.268753813 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.331023612 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.188875014 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.209899368 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.883158915 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.620206654 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.24320447 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.088749586 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.162152478 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.819611935 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.588150702 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.216495493 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.411502561 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.565893187 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.239238981 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.237775444 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.145798851 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.628315657 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.833775953 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.827111287 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.435796514 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.612039879 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.704564128 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.873453681 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.899553161 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.317512244 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.243435415 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.502757154 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.018582063 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.503249113 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.401857453 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.136456544 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.079187458 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.310410533 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.142614377 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.202990715 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.916823921 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.419438002 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.18518379 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.900914803 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.707219928 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.176081934 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.157642161 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.713118831 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.154072129 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.151140475 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.128912776 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.656893911 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.516945132 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.144361988 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.084807049 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.879889418 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.080023883 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.319567345 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.124279148 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.174602932 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.933485665 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.211020353 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.284594149 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.651246707 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.214049795 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.175312349 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.082248936 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.202253187 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.112662664 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.780708601 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.904336403 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154665989 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.134140824 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.310624236 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.113283192 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.176442818 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.137150424 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.4210797 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.575280321 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.585940907 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.300221183 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.466721863 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.405860461 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.058241464 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.233930105 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.359323197 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.082591384 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.183765247 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.110473123 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.180299048 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206827073 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.131809324 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.136492396 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.371429916 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.251284701 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.29088103 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.298121783 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.138861479 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.1560891 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.250250356 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.274714901 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.133873134 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.139871952 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.214407893 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.314761067 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.132352714 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.107442037 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.322045903 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.214113325 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.514667718 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.209076495 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.723348665 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.140395933 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.061235277 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.287935907 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.63752056 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.133366593 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 5.233627565 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.201792475 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.132277321 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.586945396 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.792403251 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.314067749 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.813581144 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.054014115 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.136639043 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.18516233 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.137549235 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.143322769 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.736338643 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.505173601 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.133727416 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.588146092 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.2116677 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.142549324 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.894720801 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.611216907 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.133087225 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.911989335 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.086124493 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.578031826 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.793508747 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.144753025 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.280353273 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.138946574 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.087848418 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.135098198 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.158256929 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.6405772 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.14439319 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.663401941 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.276746432 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.274532537 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.136797998 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.136717545 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.133958309 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.324601725 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.726304677 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159813303 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.400951896 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.315876808 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.141883101 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.662062503 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.803963341 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.24309068 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.187151874 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.16619224 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.481361465 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.904526174 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.121585818 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.675868392 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.287853601 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.13798429 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.363226515 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.385379252 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.136605381 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.335808138 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.236171122 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.387327922 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.436865233 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.692058147 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.242316364 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.122977057 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.357499245 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.150208546 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.657831755 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.587438607 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.225880426 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.136406452 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.149675962 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.135416138 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.207899136 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.719294254 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.30811074 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.267672381 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.496318464 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.653966855 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.139549189 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.08913257 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.136479577 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.164902845 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.141096671 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.087734451 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.19469447 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.997082586 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.313951128 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.469636915 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.088619483 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.31821397 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.125199265 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.090314581 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.615599999 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.138267266 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.442658869 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.089767109 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.142777527 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.092325511 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.249689071 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.382303472 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.412980096 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.138623488 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.828969594 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.146654231 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.138522905 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.138188086 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.228275066 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.139891398 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.382870267 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.595117334 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.381330392 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.30111049 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.003303336 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.202815035 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.108278956 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183352966 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.954459759 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.68504858 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.255176915 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.333576092 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.928634338 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.118847518 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.659270689 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.164301241 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.846234707 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.147060856 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.143075358 seconds)
  done (took 2445.531271959 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.157076255 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.240432765 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.202767803 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.191534003 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.172924483 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.181635695 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.198257163 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.158639492 seconds)
  done (took 59.56301817 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.138459987 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.143662823 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.154793436 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.141954518 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.142520358 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.150639416 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.354779572 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.180189745 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.145424706 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.571056416 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.14263192 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.149739343 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.142932422 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.14439115 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.152767606 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.512580073 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.169222497 seconds)
  done (took 82.650333677 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.178328603 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 8.272936126 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.150379985 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.361881005 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.192309065 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.39102827 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.148854983 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.143808747 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.797812837 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.421054555 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.226448998 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.158884047 seconds)
  done (took 91.542059026 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.14411357 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.142543739 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.142689199 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.142605929 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.14263426 seconds)
  done (took 12.775607579 seconds)
done (took 2996.182122488 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.365549266 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.295875004 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.242906813 seconds)
  done (took 6.600276469 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.202665807 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.275828112 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.336211041 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.283685603 seconds)
  done (took 11.174210642 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.41106361 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.621453399 seconds)
  done (took 7.094427478 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.656633231 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.146956047 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.661532051 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.145604091 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.147218778 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.147448438 seconds)
  done (took 23.518453007 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.143119065 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.143600384 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.143493399 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.143372022 seconds)
  done (took 10.644578393 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.141850542 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.124876122 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.14437017 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.159134612 seconds)
  done (took 22.632676141 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.395696214 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.379737207 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.878936757 seconds)
  done (took 9.716285178 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.956129822 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.518084789 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.935700265 seconds)
  done (took 10.47255529 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.096533399 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.062308538 seconds)
  done (took 8.221625182 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.297792772 seconds)
  done (took 4.360431175 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.622193041 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.623686464 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.986773851 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.98385156 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.135537532 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.453837032 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.512662823 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.536804771 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.800760673 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.643086168 seconds)
  done (took 29.363253304 seconds)
done (took 160.725964791 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.992685909 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.553127702 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.322059984 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 4.316815423 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.312112758 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.319015763 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.212654953 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 4.074197073 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.726870253 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.727033126 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.832458414 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.311503806 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.208320959 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.569634459 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.209187254 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.506262879 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.554517853 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.968363291 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.861712046 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.662237009 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.221330491 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.424087754 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.509031271 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.423503401 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.559410618 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.267882027 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.240202108 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.510056587 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 5.127805473 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.244299632 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.272726415 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.945072759 seconds)
  done (took 186.051515903 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.146954386 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.172571131 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.150973508 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.150200357 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.025974766 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.152008982 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.153117401 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.149332662 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.957451156 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.959095439 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.151557556 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.023533752 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.151717278 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.149954172 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.15056207 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.150316651 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.083816984 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.150160841 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.173032079 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.150937304 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.151759481 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.817474052 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.151809674 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.819963834 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.082239459 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.152702169 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.151027213 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.152997191 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.152006102 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.150824955 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.154271099 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.151398328 seconds)
  done (took 221.519966389 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.14869832 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.150579843 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.152766495 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.15291566 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.1519031 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.153706024 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.155157146 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.15112766 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.150684456 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.151309311 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.151937478 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.151291402 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.153106423 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.152257092 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.156195494 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.152202857 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.152986119 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.155477975 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.155019679 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.152921189 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.153490587 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.152106696 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.152004942 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.152521396 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.152791648 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.154672001 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.152849502 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.154249506 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.153710354 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.154411514 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.153232903 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.152878378 seconds)
  done (took 230.973027706 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.449719691 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.151316911 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.15188394 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.526933522 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.15169035 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.151172271 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.506482679 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.44878616 seconds)
  done (took 22.619526005 seconds)
done (took 663.280301017 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.903075708 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 3.057674855 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.327373652 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.183319214 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.798370934 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.246202987 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.174679614 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.274209477 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.942292761 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.297324952 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.627923481 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.184993626 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.986970872 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.218913301 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.334243759 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.258485114 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.580509867 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.893306519 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.353374608 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.995445501 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.423598082 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.191597273 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.299870363 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.998253321 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.641413708 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.221136611 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.313317149 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.594652712 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.185973473 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.452026451 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.225058603 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.609219151 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.205201336 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.184092587 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.254075191 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.237803393 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.529477031 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.199096515 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.317625471 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.969079794 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.998313594 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.81874508 seconds)
  done (took 115.57887482 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.161473798 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.158969685 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.159759251 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.158756391 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.160700186 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.158908533 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.159712978 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.159634984 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.159283279 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.159630123 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.159887272 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.160991074 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.159776237 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.159938784 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.160496073 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.159715191 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.160482296 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.160731486 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.160390882 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.160284469 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.159879539 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.159644061 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.157459923 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.160342837 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.159721918 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.161017236 seconds)
  done (took 58.254369617 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.154642829 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.335942548 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.501362286 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.194393668 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.156109607 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.159134738 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.197330033 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.166289874 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.158654452 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.158726415 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.287601271 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.162125075 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.17159835 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.495608296 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.192741521 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.155938016 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.155715846 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.156639855 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.344707583 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.178218825 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.198976391 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.166858421 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.198093639 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.178365676 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.159291309 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.158268545 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.161139853 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.65586211 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.171312465 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.287460782 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.257653115 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.208961524 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.629913731 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.510256516 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.235153479 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.16612067 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.156336327 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.337945722 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.173504882 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.158233631 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.19953149 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.16971979 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.499720583 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.767606388 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.179498324 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.157047024 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.654184578 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.352477811 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.213634838 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.17319957 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.509441277 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.194319771 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.156635321 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.158101967 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.199440758 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.167965718 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.157114552 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.501688352 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.174985846 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.198160052 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.16723085 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.158386978 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.350828324 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.171679511 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.338545937 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.172907599 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.166868381 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.1606715 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.501413092 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.196850666 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.752984431 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.180535643 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.15806462 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.28829323 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.344061575 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.688870711 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.178139783 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.354465076 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.649893802 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.212690778 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.173191292 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.63944342 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.212652951 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.173221597 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.158597008 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.157686294 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.158219941 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.204754671 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.199687553 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.674184972 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.764576178 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.523813301 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.214041737 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.17708729 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.160482616 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.502689276 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.17227346 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.159490092 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.494718223 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.789209612 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.182519516 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.16753093 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.739545345 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.183868457 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.200240418 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.174933731 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.508386045 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.198221226 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.206028282 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.158892387 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.167961061 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.163909678 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.200780616 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.174436993 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.15995273 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.730689432 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.364530117 seconds)
  done (took 269.100842511 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.164950591 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.161945296 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.160131497 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.162547119 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.158866643 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.162015427 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.160054015 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.158857896 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.161580243 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.159120147 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.158438914 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.160511444 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.165438077 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.163443095 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.193509102 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.162007745 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.774976216 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.158463689 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.158901817 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.163244624 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.991996431 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.169450949 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.160117155 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.164936176 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.16074827 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.160010993 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.170265074 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.188850423 seconds)
  done (took 176.125718698 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.161459156 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.230481377 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.178952465 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.229887612 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.177290165 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.161946215 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.192359719 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.18684258 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.171712831 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.16208356 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.161643427 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.201951696 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.173523037 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.267506398 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.208051928 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.205231719 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.275509303 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.174162755 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.162121358 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.161978873 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.232125737 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.182505694 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.202139002 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.242216588 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.177545246 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.231802698 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.182800494 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.162793992 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.163337387 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.290574013 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.189837843 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.203368344 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.213665143 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.190859935 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.298091906 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.29598683 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.279918097 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.205962288 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.170697281 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.164111477 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.163283999 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.169288675 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.232291178 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.177655269 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.164521836 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.299405635 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.1907315 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.164527564 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.186612036 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.164451781 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.181758743 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.188885789 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.212855538 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.305304271 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.230320317 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.199247412 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.195090407 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.186083613 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.167339012 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.269452679 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.180816734 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.291632526 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.192655228 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.170105995 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.165521553 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.168473985 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.23485441 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.21048331 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.277567766 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.177614832 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.270616885 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.246859144 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.18055975 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.165692841 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.165188491 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.235188116 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.285893355 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.24681673 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.249417732 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.215256733 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.182167189 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.165409081 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.171019492 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.20494217 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.175537951 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.293580429 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.298296968 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.177617833 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.16659579 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.165751278 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.166499441 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.201082215 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.248758643 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.220990817 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.290338652 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.217907629 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.216136111 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.177198463 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.184224955 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.175627929 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.209495628 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.177126897 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.183669958 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.542930539 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.220988903 seconds)
  done (took 234.024184339 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.573113029 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.232955157 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.253349229 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.438239577 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.58282745 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.458767322 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.224564733 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.24175702 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.229603201 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.376584778 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.299393365 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.289381767 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.221832599 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.199493851 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.233172974 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.23019844 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.268061731 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.625061901 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.360050903 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.180029609 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.225230913 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.541470994 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.552642921 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.595761616 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.290026844 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.686237927 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.877396797 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.333097684 seconds)
  done (took 71.719345125 seconds)
done (took 926.907534339 seconds)
SAVING RESULT...
DONE!
