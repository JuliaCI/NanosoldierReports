cset: moving following pidspec: 2021180
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.766804111 seconds)
loading group "shootout"... done (took 1.075059569 seconds)
loading group "string"... done (took 0.654214937 seconds)
loading group "linalg"... done (took 8.526380553 seconds)
loading group "parallel"... done (took 0.16281578 seconds)
loading group "find"... done (took 2.976867889 seconds)
loading group "tuple"... done (took 2.054817696 seconds)
loading group "union"... done (took 14.213446585 seconds)
loading group "dates"... done (took 1.395611806 seconds)
loading group "micro"... done (took 0.215659194 seconds)
loading group "simd"... done (took 4.693634183 seconds)
loading group "io"... done (took 1.369095682 seconds)
loading group "random"... done (took 9.50963662 seconds)
loading group "problem"... done (took 1.590731406 seconds)
loading group "array"... done (took 24.918852444 seconds)
loading group "misc"... done (took 1.813312299 seconds)
loading group "scalar"... done (took 41.986137218 seconds)
loading group "sort"... done (took 3.194115999 seconds)
loading group "sparse"... done (took 12.729711053 seconds)
loading group "collection"... done (took 17.890026903 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.436560154 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.113257467 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.161005822 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.109201973 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.230582488 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124265418 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.1269154 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.092709818 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.058644777 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.14033593 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.135133048 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.422066271 seconds)
done (took 5.575035445 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.322661276 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.24007286 seconds)
    (2/2) benchmarking "String"...
    done (took 0.161312325 seconds)
  done (took 1.553282497 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.091054305 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.057642444 seconds)
    (3/3) benchmarking "different"...
    done (took 0.064408777 seconds)
  done (took 1.361390355 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.063140489 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.138533771 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.063912403 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.064162254 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.064054082 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.063881332 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.063696071 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.063554483 seconds)
  done (took 1.671425693 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071826852 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.065290215 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.063273284 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.064966049 seconds)
  done (took 1.414183173 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065409699 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.118401862 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.062308833 seconds)
    (4/4) benchmarking "different"...
    done (took 0.062129716 seconds)
  done (took 1.453517152 seconds)
done (took 9.010777178 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.157894663 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.758447326 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.849760379 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.144647442 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.311371946 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.342158198 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.119296492 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.200091338 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.112428953 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.07476465 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.162473234 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.07986668 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.480521601 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.475882969 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.070546087 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.184952228 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.609639973 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.083738623 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.112127172 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.22387122 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.080978336 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.082112667 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087122798 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.070945173 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.133802381 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.175770347 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.617751734 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.098419825 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.067788261 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.192366817 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.069860053 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.07384149 seconds)
  done (took 10.483838947 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.114455622 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.110410008 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.066245783 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.100008102 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.092764711 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.06744176 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.072695314 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.066103255 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.085380495 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128859073 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089300285 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.121938489 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.065848263 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.067173849 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.097196517 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.159023902 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081778743 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.080203465 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.066387896 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.079524583 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.092187175 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078526681 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.076466484 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.076086452 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.110337776 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.131463363 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.088766979 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.106722086 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066418379 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078459906 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.093215216 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.106129724 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066857952 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.064743101 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.107063915 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.083400201 seconds)
  done (took 4.420806224 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.027680256 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.092972454 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.104380838 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099203208 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.104789329 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.09268424 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.145955598 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.120500741 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.098130701 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.066766315 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.173962054 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.679177949 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.070728997 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070611046 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.145624015 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.362771542 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.906499174 seconds)
    (17/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.141028032 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.067957706 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066727638 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.096154212 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068802886 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.138153638 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.065677207 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.176151564 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.645939866 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.197133302 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.06818976 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.095484639 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.06380373 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.138737013 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.092558085 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.068742542 seconds)
    (33/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.06247456 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.578645591 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.065428595 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.062761978 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.083358941 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.091678032 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06493642 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.066033379 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.076352388 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.063881516 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.114618477 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079139444 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.547706734 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.068479392 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.628374828 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.330056584 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072668618 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.070996787 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.10108174 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.06637906 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.066901399 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.620403944 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.149840183 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.066463043 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.284053973 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069982415 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067353383 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068139301 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.099359401 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06642536 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.067583966 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072007096 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.083381934 seconds)
    (66/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.06581633 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.011692024 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.151149092 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.085611014 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068030966 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.421131681 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.076721004 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.06952007 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070453792 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.0967038 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.135919234 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06684026 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06594949 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.11230411 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.231873729 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088653033 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.068543262 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.065597248 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.064702606 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.581346683 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.957229339 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06897193 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.066318743 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.504341791 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.064051591 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.064940649 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.066572288 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.086893944 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.063070327 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.064828797 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.062314341 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.063187072 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098310339 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067477039 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.543727026 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.066497909 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.48268234 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.069065082 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096938478 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.121904937 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.066466379 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.104769374 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.066546545 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.063816884 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.072141476 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.064485776 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.063408484 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.068407831 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.064666244 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.065453385 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.06751308 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.067247717 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066177429 seconds)
  done (took 23.189664146 seconds)
done (took 40.277137684 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 0.395323588 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 0.076901481 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 0.07682422 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 0.076528441 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 0.076611267 seconds)
  done (took 1.902977006 seconds)
done (took 3.215584086 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.254201014 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.076631384 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.062525781 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.203892095 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.0871947 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.177804842 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.217953373 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.292315083 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.089768987 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.08848431 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.088908963 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.222053506 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.23317497 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.090024788 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.162172722 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.233382388 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.091170735 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064454977 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.089270631 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.090554486 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.090828037 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064359441 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.089195891 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.090684274 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.162151902 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.089917827 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.063782962 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.165431455 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.091878429 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.167859524 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.091864343 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.090812274 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.091613037 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.163976802 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.092094663 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.164095514 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064164827 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.09269688 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.093892901 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.096708501 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.093902527 seconds)
  done (took 6.369560051 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.076820672 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079498644 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.080721622 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.060023302 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06905969 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079183168 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.060065841 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.078822401 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100079243 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079603435 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079222212 seconds)
  done (took 2.143230253 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070753686 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.079992087 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081155256 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.059722007 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.070646722 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.080057573 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.059853484 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079621214 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.082691957 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080262671 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.080302978 seconds)
  done (took 2.058199022 seconds)
done (took 11.800045801 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.189720916 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.087228497 seconds)
  done (took 1.491502101 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.256011372 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.495717901 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 4.250771932 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.124484294 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.102318785 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.116698845 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.231178418 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.099659485 seconds)
  done (took 7.071450911 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.098017725 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.065751364 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.065649392 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.06634624 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.096047537 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.067768527 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.067505927 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.065505785 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.06506121 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.065253147 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.065375809 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.065208527 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.066181504 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.065660911 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.066436122 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.066275013 seconds)
  done (took 2.474445159 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 0.100344849 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 0.067191179 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.095931725 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 0.059819312 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 0.069682428 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 0.06078741 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.068603858 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 0.069972832 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 0.067659457 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 0.067962652 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 0.069330133 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 0.067859157 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.068866547 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 0.069112174 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.0700949 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 0.070925519 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 0.072088604 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.068351375 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 0.070975216 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 0.072183231 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 0.070913839 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 0.07198662 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073071238 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 0.070226031 seconds)
  done (took 3.064906669 seconds)
done (took 15.343418719 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176841629 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.072810713 seconds)
  done (took 1.479080304 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.093316993 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.090860671 seconds)
  done (took 1.431749829 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.072790163 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.058437503 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.074796516 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.067371736 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.059024645 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.058793456 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.074050143 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.059069528 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.058964998 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.058957767 seconds)
  done (took 1.893055535 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063376808 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.06546857 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.06340793 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.061826891 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.063953787 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.059830896 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.062202731 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.060033592 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.065758043 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.058988851 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.062763607 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.080477494 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.062393366 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.080761263 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.062311583 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.062944579 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.06479272 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.063387032 seconds)
  done (took 2.415210859 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061698469 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.059246663 seconds)
  done (took 1.375332774 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064341815 seconds)
    (2/7) benchmarking "second"...
    done (took 0.059303687 seconds)
    (3/7) benchmarking "month"...
    done (took 0.061075565 seconds)
    (4/7) benchmarking "year"...
    done (took 0.060960487 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.059268914 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.059030487 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.059424153 seconds)
  done (took 1.67045856 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.42658552 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.192777013 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.424915049 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.06805637 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.081595865 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.267533458 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063049451 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.067264928 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.067354475 seconds)
  done (took 2.947915257 seconds)
done (took 14.480375701 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.083869023 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.18091397 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.109990739 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.415897627 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.077662686 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.065590175 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.093435085 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.208946342 seconds)
done (took 2.514351003 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.285026239 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.19508328 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.255318586 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.145915856 seconds)
  done (took 2.855542233 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.418320189 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.165634081 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.075689334 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.065318877 seconds)
  done (took 1.99457697 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065822481 seconds)
    (2/2) benchmarking "read"...
    done (took 0.069418804 seconds)
  done (took 1.402165135 seconds)
done (took 7.817630024 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.073457215 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.094066019 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.059007542 seconds)
    (4/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.059187412 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.060990626 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.061128363 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.060717116 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.060312139 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.059244011 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.061186232 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.059066021 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.061058801 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.061000127 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061075166 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.060780106 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.060769075 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061081226 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.061000147 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061300069 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.061041506 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061875687 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.062168449 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.061358298 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.061912099 seconds)
  done (took 2.792530571 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079891041 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.063475842 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.064127159 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.063762371 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.064571346 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.064267053 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.064323949 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.063368214 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.064359009 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.063228827 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06468345 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.064688597 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.063048992 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.064720331 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063216891 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.064845796 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.064376138 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063552287 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063153402 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.064784891 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.064257828 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063872277 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.065385634 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065214234 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.065640978 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.065749741 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.06402776 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.064417781 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06539795 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.065816882 seconds)
  done (took 3.227232212 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067012055 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.057678163 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.057860997 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.067709842 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.057403296 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.057810704 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.058481838 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.057611961 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.057890333 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.058824005 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.058220411 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.057746577 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.058450399 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.057826017 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.058006742 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.058398375 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.062927702 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.078127106 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.058159821 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.057982768 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.062593173 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.058175679 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.057912536 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.057813543 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.05836436 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.058259946 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.058013148 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.058674449 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.058544504 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.059176121 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.058556922 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.063154761 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.064611737 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.058527405 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.068754962 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.063618977 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.05869692 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065349925 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.059582129 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.058587955 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.058503072 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.058650124 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.058804181 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.058639885 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.069129716 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.058910027 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.059749496 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062018119 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.058962794 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.058573566 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.058562308 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.060311049 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.064287489 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.05982836 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.058391597 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.059746553 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.058511433 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.059326209 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.058705245 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.058496555 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.058546155 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.062792266 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.060130695 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.059451486 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.079720247 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.060048664 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.069081423 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.058725061 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.059086082 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.062695958 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.059237034 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.077998042 seconds)
  done (took 5.656593872 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.072850651 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068718689 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.076276037 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067756871 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061473107 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058780642 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061840463 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058811483 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067910456 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062253797 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058802604 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.061677375 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067862198 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062279137 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.059849939 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067818395 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.062338799 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061463709 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.059122796 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06274475 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060218354 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062536777 seconds)
  done (took 2.702325378 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.144747415 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064129009 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.106098288 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.067919647 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06642212 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.067695475 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.064778577 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064316556 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064386493 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064788401 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064786961 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064385809 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06634368 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064802009 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064771481 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064610465 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064688614 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064922192 seconds)
  done (took 2.576787172 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077408381 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.063932797 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090256437 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.063353498 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.063854251 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.063703955 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067360276 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.067549578 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.063519573 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.063996775 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.067532332 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063593767 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.063417881 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064043575 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063786484 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.064015296 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.064279617 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065107106 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067725681 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067555184 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.067845075 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.068119913 seconds)
  done (took 2.755161527 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078848268 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06300758 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.078612359 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.064174747 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.057931364 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.058216347 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.064803478 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.063226314 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.064557351 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.062809583 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06321441 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058193294 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.065089414 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.063296082 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.065380316 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.063387084 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063023565 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.063309502 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063029629 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058460473 seconds)
  done (took 2.5669551 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.09773692 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.060818681 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.060597498 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064985357 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.060737809 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.060966706 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065561606 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.060974129 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072344511 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085064289 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.061114983 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060878285 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065363761 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.063589726 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.060770161 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065480653 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065614263 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.066306881 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.061623332 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061539439 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085674606 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06176686 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.066865363 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.061888437 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061744196 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.061796056 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.061682947 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.06469455 seconds)
  done (took 3.13331938 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065508072 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.061435405 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.061507775 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.061414988 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.061343911 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.061250663 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.061586567 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064457031 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061416522 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.061809752 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.061427657 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.061441088 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061381973 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.061258228 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.061469903 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.061569336 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061417564 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.061745165 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.061636012 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06154321 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.061411812 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061421744 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.061599444 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.061787137 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.061728508 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.061392018 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.061893212 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.062117836 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.061701354 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.062296018 seconds)
  done (took 3.149579333 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073466168 seconds)
    (2/2) benchmarking "in"...
    done (took 0.068987704 seconds)
  done (took 1.434448396 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062267253 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.075177004 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.057388703 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.070321593 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.06605965 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.061997373 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.066674573 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.066483104 seconds)
  done (took 1.813023021 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.092370718 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.114344355 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.059637707 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.060205609 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.090655979 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.12619548 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.099573951 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.071886371 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073818035 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.062661379 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.059857062 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.099385824 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.059297531 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.073347519 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.060780031 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.069322168 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067544064 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.078277403 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.073454823 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.058366059 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.073140787 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.060838628 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.059740328 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.061060977 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.060831538 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06741557 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.076623716 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.073063772 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.069141537 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.05813475 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079509761 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.059062314 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.060304119 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069129398 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.091554971 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.059576669 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.097122511 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.059606594 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.064150735 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.058695012 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.071784739 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.080583885 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.074070789 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.077675656 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.06069796 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.060914508 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.05862905 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.060930885 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.063245142 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.068840832 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.058705806 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.066952268 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.058318599 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.060534988 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.070037737 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.059548833 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.06420629 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.069037295 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073492892 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.070409508 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071981426 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.075313958 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.068730662 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068004047 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.060165381 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.079652537 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.061054358 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.073261733 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074770638 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.060489939 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.073058974 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.059094727 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.058532589 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.05935505 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094297994 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.061323624 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06134378 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061032936 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061072817 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062430961 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071170605 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066496673 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068855388 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064441754 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077727212 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070661823 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.060780321 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069222984 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080097285 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064895853 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.06132211 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079191909 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065279524 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060951693 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080453733 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072248709 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.063864753 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.06313637 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.066030978 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076868869 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063594639 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.060897792 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071243323 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063968783 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.250374443 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06365773 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067841878 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.058779504 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.069490169 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.064145818 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.060004704 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.057449649 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.063310662 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.059133877 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.057235876 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068149858 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.058407945 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073176013 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.065311671 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.07339382 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.073808259 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.069395685 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.074598468 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.058282839 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060126965 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.076715069 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.068224795 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.059461085 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.076580796 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.05775496 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.069232564 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.057609663 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.059488732 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.0679872 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.057325194 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.059840456 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.058287686 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.063714954 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.05947655 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.05975925 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.064358346 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.067396875 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.070729979 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.059302252 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.067682853 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.058727803 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.074537682 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.069122009 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.063810671 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061833027 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.059700012 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.071543599 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06646216 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.069299733 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.058952717 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.060014546 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.059484724 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.070557572 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069488562 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.061091934 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.067582642 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.064355837 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.060013798 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.059642115 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.060450179 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.063535921 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062577698 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.060104187 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.067742292 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.068601913 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.073855783 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066511461 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.068873209 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.058477449 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.058897146 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.060917765 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.058770849 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.064273889 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.068970022 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075184179 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.071342345 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.081089401 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.059655483 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.069822503 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.060922248 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.0768248 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.073379478 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.060436197 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063905323 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.058426439 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061331668 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070573244 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072970526 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075823115 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076912087 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066074256 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066093846 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06059288 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076823382 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.06137191 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070001298 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070807968 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067365685 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061097289 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.062778017 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.07074754 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.065939578 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062030198 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077521146 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069634257 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061341174 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077001136 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062330631 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073698739 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061651336 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066108236 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067639817 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064283328 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072452089 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.235349079 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.058436765 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.059599552 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.074968825 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.060352239 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.059975893 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.067273995 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.074198267 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.063520615 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.066849452 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069383426 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.068918663 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.063367168 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.068584541 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.059077289 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.068081485 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.060962266 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.070219211 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.058381057 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07660769 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.057136764 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.073931303 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.058606234 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.069666473 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.059006598 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.068215677 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.059230411 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.075535693 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.059752691 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.059117497 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.070382201 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.057236328 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068158843 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.057930175 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064031631 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.065512039 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.068264985 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.060042022 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068175286 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.059894044 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.06787685 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.063493195 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.06702043 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.068193439 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.063792101 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.058689678 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.067987222 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070638181 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.067985834 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.060538534 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.060495425 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.05967316 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.069062655 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.060823662 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06074151 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068266383 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.0646532 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.065799237 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061039012 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.061206992 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.061138653 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068516103 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069281462 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080970284 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06856439 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.067439986 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069158169 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.058983561 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075678738 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.059596392 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.067398602 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.058376926 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066463947 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.069162567 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.05961193 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07912815 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.06068982 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.067770905 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072306644 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.068549262 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.063530901 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.078084098 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.06272412 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.068483845 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.06801372 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.06454704 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.066785128 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.061479976 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.068652709 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.069911941 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.071723178 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062096282 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069279911 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070651934 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.062983162 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071045519 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.063005939 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.07025596 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063078811 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060172011 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066121636 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073446044 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066392247 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066667051 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061361662 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059989539 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061574399 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070976017 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067240605 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.07150063 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07866412 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061101218 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.063544924 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.06185171 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066219328 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081642172 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.233041898 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.068100497 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.064228786 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.058058819 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.060123524 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.060118583 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.058785984 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.061349842 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.057532118 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.058093158 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069353517 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.059810487 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.063286466 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.058734362 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.059286201 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.068715016 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.062308174 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.058926089 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.06533099 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.05805818 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.063893085 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.057433886 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.059682187 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06332331 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.057825674 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.062614285 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.069233492 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.075269879 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.065552746 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.067811746 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.059457122 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.066899371 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074330838 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065710018 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059418651 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.068063607 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.057529861 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077148764 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.068067784 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.067427056 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.068288934 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.059429985 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.075456119 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.063465261 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.068840379 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075074261 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.060478132 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066778357 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.058845626 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075522784 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064202086 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.058777531 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067817278 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067778288 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065391771 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07137691 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.059919268 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068048261 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06454385 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063434048 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.061165041 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.060929986 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068963633 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076070898 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.060148453 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.064897264 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.067971473 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068372975 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.064473456 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072114143 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068096915 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.060726488 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061155778 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.063587435 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060229339 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.071903807 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.059918375 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064368473 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064346057 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.058916256 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066511153 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076482134 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.069339881 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069508714 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.059186124 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.058702291 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078099199 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.063789535 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.063012889 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.068444836 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070179844 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072765341 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.070520443 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079035349 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061890507 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067359459 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074084587 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.062129935 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061056615 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065268349 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062823239 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070938309 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071596647 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069146158 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063309845 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071280388 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075385265 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062692471 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066810457 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.069491388 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063096144 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073472785 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070939991 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071521012 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063905921 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061830865 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.224729254 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.068987782 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.067118539 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.068410703 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.059636724 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.065433805 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.072562758 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.066575986 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061269257 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.057880623 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.061204484 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.067892664 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.063285228 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.057799586 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.063425997 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.062487599 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065270508 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.067921102 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.063142914 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.057779212 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.075422408 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.066639874 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.067815905 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.059905481 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.059959493 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058860496 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.057863248 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.069820474 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.05777447 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.059778392 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.063452538 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.059745855 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.076245775 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.066979723 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074525466 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.059262491 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.063319568 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.057814778 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.068136201 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.063404779 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.058640877 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.069177878 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.057649895 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074223676 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.070614676 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.065428306 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.058840379 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.064951253 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.067704441 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.074846714 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.06927835 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.068705529 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.062492195 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.069322848 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.060844615 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.070623529 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.059035133 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.05823146 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.069728699 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068618725 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072350205 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.059064664 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.069958463 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.061339334 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068316063 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068158293 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.0612497 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061181688 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061426313 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069426189 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064582956 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069411148 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.064622724 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.077076616 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.060626593 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.071067028 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.069081134 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.070983343 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.0740085 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072315137 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.068113953 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.060243267 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067530057 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.068175234 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.060795432 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.06514083 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.063019507 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082387931 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.061675745 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.061356571 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07473524 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067991237 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.060787249 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.06968363 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066432096 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072000672 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.062393133 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072284526 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067163885 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062040193 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.06656015 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066361329 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.06004726 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.060679977 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061075604 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071785116 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066110424 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.061871507 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082916089 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064252441 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071457339 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074497093 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069496718 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064258222 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.218647734 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.060625656 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.072912813 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074774856 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.062590213 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.067773932 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.060088088 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.068267416 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.05750611 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.067647582 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.066818105 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.067424244 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.057858043 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.058692448 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.073838548 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074228059 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.063554928 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.074659758 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.067877349 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.059561863 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080250483 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.067894401 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.0593544 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.069538044 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060357492 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.057770556 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.057652126 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.059774158 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.070215774 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.058091862 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.060443551 seconds)
  done (took 41.709744828 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.103115906 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.059656591 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.06098395 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.058110386 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.065568218 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059638693 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.058482064 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.059620222 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.059631501 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.060684609 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.05852419 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058405324 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.064416822 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073357494 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.066164053 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.062049634 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.058510684 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.059631633 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.058452475 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.059818082 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.065002111 seconds)
  done (took 2.72404752 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.065096523 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.062319273 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.0616775 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.061924268 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06121378 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.058629673 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.061979808 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.058585503 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.062376739 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.058923282 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.062497782 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.058772169 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.059016125 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.058948565 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.05890456 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.060081905 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.06251936 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061691152 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.058712605 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.062040324 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.060320571 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.062509234 seconds)
  done (took 2.717730213 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06303005 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.059218915 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.067560837 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.057701155 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.057584165 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.061004729 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.058009843 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.063254541 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.063221125 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.063113516 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.06787952 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.059071848 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.058463625 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.064636829 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.057901816 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.059181967 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103425514 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.059530272 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.059340346 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.05808023 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.06093396 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.067941468 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.058230567 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.058621249 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.063478043 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.061663523 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.058534678 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.061247325 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.059366746 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.063407923 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.059833803 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.058367753 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.068249115 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.06764722 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.063577247 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.063494903 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.060458517 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.059643817 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.058473604 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.058525593 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.067705655 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.060124781 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.058777465 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.060189208 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.068279811 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.058599583 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.058833506 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.068305717 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.058350075 seconds)
  done (took 4.433126933 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073362556 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.108422958 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.064186852 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.090678974 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.070488493 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.063629665 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.064311041 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.091466963 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.059497434 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.059862558 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.071186941 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.071248727 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060874571 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.062252289 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.065418312 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.060957291 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06203033 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060893765 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.063724955 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.061106184 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.063809506 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.065992168 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.071022958 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.071333221 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.062289271 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.060646985 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.060997076 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.062625165 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.071094834 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.064260693 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.062756548 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.063221365 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.071463272 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066410521 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061072682 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.061134689 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.072344877 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.062001806 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.061754464 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.060258145 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.061583715 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.062921122 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.066237625 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.072841994 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.061914286 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.066760303 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.061843531 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.059831947 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.072223028 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.061674891 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.065209515 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.072878216 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.062908607 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064836011 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.063110444 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.072024161 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.061851911 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.060628648 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.061983803 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.071640404 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.060175408 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062726472 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.072584678 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.061498625 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.065367503 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.072772727 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.066993577 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.062960354 seconds)
  done (took 6.024665943 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071303198 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.093187916 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072638159 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072778436 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.068582918 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.068666309 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.068650791 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.068571649 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.06842169 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.071257044 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06862347 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.131541284 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.065776628 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.070183104 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.06875467 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.069459204 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.069366274 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.069282073 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.069326353 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.069207308 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.069211089 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07379871 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.069280564 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073900806 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.073870058 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06596704 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.069121491 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.069198747 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074170061 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.069233798 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073810953 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.069354584 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.069741037 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073929451 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.073896406 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.069348258 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.060180814 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.069497027 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.069775649 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.069665621 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.066265739 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074814892 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.069625245 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.0662509 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.0698335 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.069533102 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074741427 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074463096 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.071355101 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072748414 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.069893502 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074762816 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06960183 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.069825279 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074753379 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.077672268 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075000542 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.075034696 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.070114465 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074948485 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.075071345 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.07818779 seconds)
  done (took 5.902109708 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075952096 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064461012 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.07686551 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.058210062 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.058242816 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.067588007 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.058302053 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.058349702 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064289526 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.064232603 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065489417 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067539028 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069508911 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065748655 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.067610993 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069368434 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06747544 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068126693 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065035196 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068336128 seconds)
  done (took 2.745697757 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.06352095 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06345191 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.058825567 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074036824 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.058938395 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066547408 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.059228145 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059110652 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.059178361 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059091882 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063507217 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063444261 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.059003066 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066899275 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.062488837 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066424592 seconds)
  done (took 2.403538379 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.064417658 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.066368066 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.092278392 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.059906298 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.061482971 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.058831111 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.059766058 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.058727496 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.060840034 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.072660356 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.059853055 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.06151015 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.059719697 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.058871994 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.05882166 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.061492684 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.060613442 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.059665089 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.059471196 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.093725651 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068270104 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.060573906 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.06221878 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.060749209 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.061907533 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068043647 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.061550892 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.061778993 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.06004427 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062176893 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.061848434 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070819328 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062547073 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063618888 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.058976684 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.059791269 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.060232901 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062334753 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.062309957 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.060214342 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.059146856 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.061749175 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.060148422 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.060537223 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061573061 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062425542 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061589851 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070709637 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.060651766 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.062551193 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.06082742 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.062240039 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.061322034 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.072268742 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06307982 seconds)
  done (took 4.879434756 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079134183 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.063989246 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.058150781 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.05807287 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.063367188 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.064215175 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.0639554 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.064060418 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06443924 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.058326553 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.064412003 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.063472996 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064401979 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.063987916 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.064384057 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064045198 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.058286332 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.064316614 seconds)
  done (took 2.570090221 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.068427203 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.063503302 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.064285419 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.059756284 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.059923768 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.064332607 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.058622884 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.059782508 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.059759927 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.060161866 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06012371 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.059866498 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.059735689 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.059738014 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.063668541 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.060044345 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.059705375 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.058652632 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06004136 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.058354193 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.064629107 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.059036803 seconds)
  done (took 2.749532145 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.117831035 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.082284304 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.157407004 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.078732914 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088694394 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.070240442 seconds)
  done (took 2.004047693 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095334434 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.095988103 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063719192 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.063456122 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067763013 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066454172 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066424376 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.066703997 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.06971861 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072254394 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066458081 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069641999 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069416847 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071109247 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067978917 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068110658 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066856929 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067037092 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.064404025 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074798874 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067245039 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070563055 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067334191 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067096261 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067334712 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072066364 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07052766 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073161113 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06720992 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070594303 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068858078 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067234516 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070567632 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072997991 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.064416064 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070158049 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067354303 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074979938 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069110455 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072635885 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064621934 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069354178 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070888464 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070683721 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071135427 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067821066 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070446523 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067707155 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067775781 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07912965 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069595506 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072529866 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069355884 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071121808 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070939454 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079421598 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073810264 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072850975 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069651898 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074049095 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073070028 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069821023 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073097805 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074552488 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071646632 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.0752868 seconds)
  done (took 6.078047326 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105401601 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064281289 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069199398 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071825703 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071175432 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066556416 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.066662956 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06668408 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066751888 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.064277213 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102206744 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067012751 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071342933 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071345056 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066813314 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.066599898 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067046371 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071874322 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.064778095 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078539308 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067325426 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072020163 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072034744 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07203965 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073077181 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069035996 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067266174 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06722616 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067178627 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067247648 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070225262 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067416029 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07203185 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064729114 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07207273 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067553558 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067409087 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07006237 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06750722 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069458359 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072741145 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07565957 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067717976 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067691028 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073778876 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067693626 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067634784 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.065087452 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067801167 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.065234665 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07367621 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073744182 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073712497 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072805891 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067845801 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067805458 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06773099 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.067768008 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067968581 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069699575 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072917491 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067866502 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07980364 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068222258 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068140557 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07462101 seconds)
  done (took 6.091527038 seconds)
done (took 126.110012137 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.26013783 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.2236334 seconds)
  done (took 1.877325479 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.074993632 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.266470157 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075896522 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.072231422 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.132747867 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.131974655 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 0.106407419 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 0.07018945 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.072376622 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.069921526 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.168578205 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.106832592 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.070234929 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.069978717 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.069866708 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.069790549 seconds)
  done (took 3.050312592 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.144948023 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.207840151 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.080133892 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.067945601 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.151145924 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.076112022 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.071313463 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.074551986 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.075764803 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.336171991 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.118472048 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.083126357 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.07351301 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.074728503 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.070867767 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.073340582 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.074348254 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.075524078 seconds)
  done (took 3.354797323 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.103815032 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.111819569 seconds)
  done (took 1.643214336 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.160906828 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10720734 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145108441 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.35200648 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.140380907 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.141002965 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.145246325 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.14067947 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.114998123 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.138631406 seconds)
  done (took 3.007266713 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.106774395 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.102634785 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.304766242 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.1006238 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.079921272 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.074867672 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.072612379 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.077744879 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.072884389 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.074357979 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.120410881 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.073194121 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.070406788 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.122519874 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.097506199 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.104910998 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.069268474 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.076614879 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.078196829 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.069097428 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.074009206 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.078408606 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.177220285 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.077180711 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100280792 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.073418632 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.0752755 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.072660848 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.07247971 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.076470121 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.076942562 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100308957 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.076973522 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.082825748 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.074685222 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.096366024 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.070228855 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.098773409 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.072938063 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.070822477 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.073221766 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.077070883 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.070525209 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.079253743 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.073549526 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07601384 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.078954337 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.069524321 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.073602288 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.073121059 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.071212334 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.074785392 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.074451516 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.075742437 seconds)
  done (took 6.123928548 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.12301936 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.109762403 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067769061 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.116918218 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108887228 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068240164 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.123924201 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104312688 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.122325603 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067757935 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067705004 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.066956477 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07464974 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.078793388 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119312162 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.113354291 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070110103 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.068348043 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.112511043 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.11287675 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067281484 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.124539282 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.115576554 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.1120144 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06722444 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068411149 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066859202 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.067503943 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075672609 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075441115 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067490875 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077914324 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.079340503 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074694135 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066640935 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.066986252 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066689386 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.075375625 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076809294 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077008518 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.073918353 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066542996 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.066850624 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.067369611 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.067781514 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.066315978 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.07685392 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.0758242 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077262908 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068402238 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067654266 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.067147818 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.068666739 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074972626 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.074003152 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.075425899 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078490268 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.06820427 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.067721413 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069157614 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078864992 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076209832 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075852478 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.068701173 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077180617 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.067744045 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078242716 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.080733923 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.067592578 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.068037589 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067560035 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067560606 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.06815329 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074756081 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074982654 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069332463 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070104166 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068937211 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078377956 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076707817 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068896435 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078880711 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068660772 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069144365 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.06945616 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070580528 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.08092799 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.079235807 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071057625 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.072032244 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070441219 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070360599 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069494552 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.23585491 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075081773 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.074187882 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075527235 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066959865 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075917623 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075446172 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067910631 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.072765059 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.066437443 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066636906 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066611275 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.072632358 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07239656 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.074181313 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066153693 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06595315 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074072845 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.075831238 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.066280845 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.072361845 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.075355787 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.073014106 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.0660699 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.075901773 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066491062 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.075298411 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066514895 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07476775 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066560175 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.073051978 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.066496211 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.065811918 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.066432691 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075529177 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067639295 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066178204 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.066650221 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.066240469 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.072983901 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.076743456 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.067212611 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.074142701 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.074051468 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.067607699 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076201619 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.067292444 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076481616 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.067448076 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067561272 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.066599707 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078675326 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.067247705 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068289563 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070334748 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.076680985 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.067496925 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.076513145 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074006538 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.066962703 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077599027 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.076496066 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.074177851 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077151594 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06827429 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.067661355 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.067262584 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.067569234 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076820902 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07839439 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069107496 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.067716109 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073856773 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.07744151 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.067234411 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.074281829 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.074208225 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.074497493 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.067729928 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.06781011 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078195824 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.081580108 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076986705 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.079868211 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077818377 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06920228 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076670924 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07997668 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069224419 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082899855 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069499699 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081360681 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.082015901 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077632798 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.081928917 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.237355154 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.076440541 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.075433786 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.077284411 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066336635 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.066327137 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.07272909 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.066251004 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06636398 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.072256982 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.066727613 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.067555318 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079226855 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066850638 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.075283199 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.065970668 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.073129889 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.065908617 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.066851594 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077819925 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.066585588 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.066822398 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.073557753 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.066279084 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.072464518 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.075544258 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.072560735 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06633607 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.066721142 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075967776 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075846429 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.066376283 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.066047569 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.06664344 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.074834762 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074180334 seconds)
  done (took 18.470997729 seconds)
done (took 38.980102846 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.170126724 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.112420133 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.224432785 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.20331665 seconds)
  done (took 2.230685524 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.101339202 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.063453821 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.106205445 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.115701595 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.063990841 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.101738142 seconds)
  done (took 2.017963594 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.203174031 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.176300601 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.252120137 seconds)
  done (took 2.092760563 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 0.367006018 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.150341039 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 0.257984366 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 0.514568352 seconds)
  done (took 2.855613181 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.13531482 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.131743022 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.075498355 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.145433715 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.08250411 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.060504594 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.145348143 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.067848209 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.097432432 seconds)
  done (took 2.469627545 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.140867905 seconds)
done (took 13.279703306 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.31188396 seconds)
    (2/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.355976764 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.305747119 seconds)
    (4/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.182875389 seconds)
    (5/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.137493539 seconds)
    (6/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.194343219 seconds)
    (7/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.117948323 seconds)
    (8/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092492372 seconds)
    (9/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.263142619 seconds)
    (10/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.33990616 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.151574374 seconds)
    (12/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.204182999 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075352162 seconds)
    (14/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.295328801 seconds)
    (15/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.242715115 seconds)
    (16/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073501451 seconds)
    (17/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.158013941 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.074423498 seconds)
    (19/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.068622828 seconds)
    (20/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.231904403 seconds)
    (21/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.25548815 seconds)
    (22/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072886274 seconds)
    (23/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.204891795 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.075053473 seconds)
    (25/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.159538624 seconds)
    (26/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.070490451 seconds)
    (27/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.177745998 seconds)
    (28/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.215814272 seconds)
    (29/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.071524816 seconds)
    (30/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.23389672 seconds)
    (31/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.193379533 seconds)
    (32/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.241028035 seconds)
    (33/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.093463383 seconds)
    (34/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.228521397 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.097154691 seconds)
    (36/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077830598 seconds)
    (37/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.101773106 seconds)
    (38/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.146822917 seconds)
    (39/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.19227027 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074562659 seconds)
    (41/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.065993461 seconds)
    (42/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.212124193 seconds)
    (43/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.085963374 seconds)
    (44/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.250679862 seconds)
    (45/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.074458573 seconds)
    (46/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.297501364 seconds)
    (47/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.141948538 seconds)
    (48/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.131221847 seconds)
    (49/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.114438669 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.087174783 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.079535135 seconds)
    (52/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.129204843 seconds)
    (53/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.07061693 seconds)
    (54/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066082122 seconds)
    (55/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.19523809 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.094827597 seconds)
    (57/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.06699097 seconds)
    (58/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.241783909 seconds)
    (59/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.088926282 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.269378411 seconds)
    (61/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.088356958 seconds)
    (62/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.07730202 seconds)
    (63/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.067066178 seconds)
    (64/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.06674011 seconds)
    (65/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.066623409 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.07380003 seconds)
    (67/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.064960921 seconds)
    (68/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.164192666 seconds)
    (69/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093541207 seconds)
    (70/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.147974946 seconds)
    (71/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.068233357 seconds)
    (72/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.079680382 seconds)
    (73/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.064757879 seconds)
    (74/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.209972564 seconds)
    (75/341) benchmarking ("sort", Int8, false)...
    done (took 0.145813979 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.128702386 seconds)
    (77/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.075690233 seconds)
    (78/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.078716602 seconds)
    (79/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.14096486 seconds)
    (80/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.063399671 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.071805108 seconds)
    (82/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.203791862 seconds)
    (83/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.071581787 seconds)
    (84/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.081680247 seconds)
    (85/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.069746969 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.085970393 seconds)
    (87/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.103576786 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.071492336 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.248347385 seconds)
    (90/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.16635098 seconds)
    (91/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.080178441 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.0833753 seconds)
    (93/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.066171211 seconds)
    (94/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.07636791 seconds)
    (95/341) benchmarking ("sort", Float32, false)...
    done (took 0.135948389 seconds)
    (96/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.064477026 seconds)
    (97/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.074275301 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.063521079 seconds)
    (99/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.074380977 seconds)
    (100/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.185743268 seconds)
    (101/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.191852864 seconds)
    (102/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.065148912 seconds)
    (103/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.07363428 seconds)
    (104/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.082333648 seconds)
    (105/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.073718449 seconds)
    (106/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.072185788 seconds)
    (107/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.075652224 seconds)
    (108/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.072587688 seconds)
    (109/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.200618163 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089906689 seconds)
    (111/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.087204186 seconds)
    (112/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.150572339 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.122537805 seconds)
    (114/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.07196954 seconds)
    (115/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.170789887 seconds)
    (116/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.173478438 seconds)
    (117/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.182064105 seconds)
    (118/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.16345351 seconds)
    (119/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.073573019 seconds)
    (120/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070012167 seconds)
    (121/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.198386524 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065377277 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.075335507 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.069350294 seconds)
    (125/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.174314072 seconds)
    (126/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.07818233 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.088169556 seconds)
    (128/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.263986357 seconds)
    (129/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.182973646 seconds)
    (130/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074715108 seconds)
    (131/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.073989353 seconds)
    (132/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.065449311 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.093250695 seconds)
    (134/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.072336516 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.147502915 seconds)
    (136/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.203132808 seconds)
    (137/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.089913677 seconds)
    (138/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.065699383 seconds)
    (139/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.065425353 seconds)
    (140/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.341737349 seconds)
    (141/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.072285371 seconds)
    (142/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.066242906 seconds)
    (143/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.070598188 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.077107286 seconds)
    (145/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.067452267 seconds)
    (146/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067495445 seconds)
    (147/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066994667 seconds)
    (148/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.145050742 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.089407344 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076982909 seconds)
    (151/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.067336588 seconds)
    (152/341) benchmarking ("sort", Bool, false)...
    done (took 0.330484849 seconds)
    (153/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.153962485 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.065247742 seconds)
    (155/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.079257197 seconds)
    (156/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.071573435 seconds)
    (157/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.075864527 seconds)
    (158/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.065697603 seconds)
    (159/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.073631391 seconds)
    (160/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.071272645 seconds)
    (161/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.073552933 seconds)
    (162/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.070232264 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.120171948 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 0.06570188 seconds)
    (165/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.066791758 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.141798136 seconds)
    (167/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.090644545 seconds)
    (168/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.064731414 seconds)
    (169/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.155284747 seconds)
    (170/341) benchmarking ("sort", BigInt, false)...
    done (took 0.265774008 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.06440751 seconds)
    (172/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.140811244 seconds)
    (173/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.179505359 seconds)
    (174/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.149599015 seconds)
    (175/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.179085973 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.063923057 seconds)
    (177/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.067459635 seconds)
    (178/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082118201 seconds)
    (179/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.065715692 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.18821114 seconds)
    (181/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.066596712 seconds)
    (182/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.072554605 seconds)
    (183/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.078428748 seconds)
    (184/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109335877 seconds)
    (185/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.06824296 seconds)
    (186/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.063768059 seconds)
    (187/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.065695861 seconds)
    (188/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.071596307 seconds)
    (189/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.068326084 seconds)
    (190/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.066500037 seconds)
    (191/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.195795412 seconds)
    (192/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.065397046 seconds)
    (193/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.064408792 seconds)
    (194/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.064278983 seconds)
    (195/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.144548762 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.155437516 seconds)
    (197/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.069338491 seconds)
    (198/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.07294079 seconds)
    (199/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.208266443 seconds)
    (200/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.077232054 seconds)
    (201/341) benchmarking ("sort", Float64, false)...
    done (took 0.136809683 seconds)
    (202/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.138119106 seconds)
    (203/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.064695941 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.122704586 seconds)
    (205/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.073912627 seconds)
    (206/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.071594678 seconds)
    (207/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.17461874 seconds)
    (208/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.065611258 seconds)
    (209/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.07056962 seconds)
    (210/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.149230154 seconds)
    (211/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.174496594 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.11492043 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.130292219 seconds)
    (214/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.068842077 seconds)
    (215/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.082323761 seconds)
    (216/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.065814325 seconds)
    (217/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.0692496 seconds)
    (218/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.070354288 seconds)
    (219/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.069160731 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086183552 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07163267 seconds)
    (222/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.06527085 seconds)
    (223/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.07275131 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.066963066 seconds)
    (225/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.065069934 seconds)
    (226/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.172792987 seconds)
    (227/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.069514504 seconds)
    (228/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.210027794 seconds)
    (229/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.065002387 seconds)
    (230/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.072011661 seconds)
    (231/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.069917795 seconds)
    (232/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.065877599 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.134213992 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.186051393 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.077598575 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.075961819 seconds)
    (237/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.065619545 seconds)
    (238/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.065551364 seconds)
    (239/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.067570558 seconds)
    (240/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.072248306 seconds)
    (241/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.065645184 seconds)
    (242/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.083141262 seconds)
    (243/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.067560107 seconds)
    (244/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.06545311 seconds)
    (245/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.067106807 seconds)
    (246/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.072839605 seconds)
    (247/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071160623 seconds)
    (248/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.066765232 seconds)
    (249/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.066829046 seconds)
    (250/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.086650375 seconds)
    (251/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.071752795 seconds)
    (252/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068916463 seconds)
    (253/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.066641453 seconds)
    (254/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067069281 seconds)
    (255/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.195297255 seconds)
    (256/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.253581625 seconds)
    (257/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.067364745 seconds)
    (258/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.065875926 seconds)
    (259/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.150096026 seconds)
    (260/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.083030557 seconds)
    (261/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.139063644 seconds)
    (262/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.072085489 seconds)
    (263/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.063764686 seconds)
    (264/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.064761882 seconds)
    (265/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.064322474 seconds)
    (266/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.063370612 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.082979199 seconds)
    (268/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093061872 seconds)
    (269/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.070987596 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.083369017 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.091141241 seconds)
    (272/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.13693835 seconds)
    (273/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.068876784 seconds)
    (274/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.06451065 seconds)
    (275/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.06395771 seconds)
    (276/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.063654068 seconds)
    (277/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.064116427 seconds)
    (278/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.064878342 seconds)
    (279/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.158742715 seconds)
    (280/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.064204536 seconds)
    (281/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.064058561 seconds)
    (282/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.063912893 seconds)
    (283/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.20727832 seconds)
    (284/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.064476986 seconds)
    (285/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.064036146 seconds)
    (286/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.072981137 seconds)
    (287/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.064228238 seconds)
    (288/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.063313989 seconds)
    (289/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.089420487 seconds)
    (290/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.063459628 seconds)
    (291/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.06439515 seconds)
    (292/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.063918065 seconds)
    (293/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.227361265 seconds)
    (294/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.081501672 seconds)
    (295/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.070955954 seconds)
    (296/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.083767337 seconds)
    (297/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.064902564 seconds)
    (298/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.063819779 seconds)
    (299/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.064185935 seconds)
    (300/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.064517687 seconds)
    (301/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.064127945 seconds)
    (302/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.075608454 seconds)
    (303/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.064545649 seconds)
    (304/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.065061373 seconds)
    (305/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.064150071 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.063997493 seconds)
    (307/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.064857125 seconds)
    (308/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.065188229 seconds)
    (309/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.065717097 seconds)
    (310/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.065904364 seconds)
    (311/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.065131229 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.064134552 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.184763559 seconds)
    (314/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.066364587 seconds)
    (315/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.079651337 seconds)
    (316/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.0722624 seconds)
    (317/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.071786139 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.084439353 seconds)
    (319/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.06490892 seconds)
    (320/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.064898248 seconds)
    (321/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.066004773 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.076158465 seconds)
    (323/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.071346808 seconds)
    (324/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.069581233 seconds)
    (325/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.064599214 seconds)
    (326/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.146736537 seconds)
    (327/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.069548449 seconds)
    (328/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.065068982 seconds)
    (329/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073805239 seconds)
    (330/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.067081511 seconds)
    (331/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.068786358 seconds)
    (332/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.0689655 seconds)
    (333/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.085814641 seconds)
    (334/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.067262372 seconds)
    (335/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.065153035 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.06475859 seconds)
    (337/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.06522484 seconds)
    (338/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.064444373 seconds)
    (339/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.066690722 seconds)
    (340/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.067067838 seconds)
    (341/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.228704073 seconds)
  done (took 38.632771252 seconds)
done (took 40.127227368 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.125818058 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.078241809 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.075740754 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.07244945 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.076337996 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076595684 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.076239276 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.073905928 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.078594654 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.075183609 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.106323655 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.063478558 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.07116941 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.080503209 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.072357068 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.079089539 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078803294 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.078763082 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.064527731 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.078802051 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.089492907 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.077126636 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.072865028 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.078733022 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.064752162 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.072594798 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.119761605 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.083953236 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.069032439 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.073744322 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.071631697 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.080132027 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.071706597 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.071314615 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.073894318 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.069337611 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.074348974 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.070567086 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.119981692 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.069273765 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.064676764 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.076688421 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071097974 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.07202784 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.072501635 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.075940994 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.069473693 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.079546528 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.063834651 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.075362262 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.120400675 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070131412 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.069251144 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.072650341 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.069370991 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.073732083 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.069031688 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.075816476 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.069224119 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.075800343 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.073640553 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.072042402 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.064116632 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.072886695 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.071290166 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.071499036 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063015826 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.069743825 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.064057248 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.064133708 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.06365311 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073071069 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071238787 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069244882 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.063588037 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.064361853 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.063886055 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.076258736 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.07150043 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.073363869 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.064920827 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.069842157 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.069359507 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.06503743 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070108755 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.07618878 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.063749365 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.065001856 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.063697894 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.079304656 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.071099728 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06477545 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.076607741 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.0703077 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.070218105 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.064814025 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.064329146 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070333955 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.072818715 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.064805961 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.063508273 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070274213 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.070556236 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075132453 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.066332592 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071399521 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07128315 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064747418 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.074807854 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073062566 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.075745402 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079809759 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.076222917 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.080497339 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.067337729 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065638864 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076656655 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.229375462 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070325161 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.071630151 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.068788459 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.071488526 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.063929234 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.062506417 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.06890049 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.068957869 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.063668723 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.063685558 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.063499435 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.071969781 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.070487766 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.0622368 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.063330383 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.071942476 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.072607272 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.062676416 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.062531603 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.071833763 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.063807095 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.069051256 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.068332013 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.071867646 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.062707408 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.063666551 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.062232547 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.062794029 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.062477721 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.068406571 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.068788466 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.06374552 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.071813213 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.07046152 seconds)
done (took 12.760022979 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068344079 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107230763 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.115242927 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.109150751 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.077581253 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.06558843 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.068129411 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084310656 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.067663089 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089636475 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.089564959 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.085792349 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.128392826 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.06307 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.064441378 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.065013477 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.062493952 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076391354 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.113558822 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.088464349 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.10720258 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.064305444 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.080656148 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084817443 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077500417 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083802196 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.065919507 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.065332506 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.067674776 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.082307063 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.090682937 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.064617866 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.065785704 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083894006 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080817928 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073485574 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.065500755 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071624003 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.065443586 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.064598368 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.066611995 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083371586 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071707602 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071971398 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.065670479 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.065496986 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.064837068 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072594398 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.078899373 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070955219 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077634864 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081667903 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.066463869 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.064837013 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.063081084 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.072471955 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.064769604 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.065538577 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.06540896 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.064823331 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.065462799 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.067596982 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070477498 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.075594412 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.068880752 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.072361768 seconds)
  done (took 6.559729482 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083668932 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092570991 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.07829802 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.078458458 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.06375249 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.064798736 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.064833098 seconds)
  done (took 2.13340975 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.0684601 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.104551074 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.111452953 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.112283766 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.12078655 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.109882729 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.065665717 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.097637264 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.064130616 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.105886963 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.119121482 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.113703924 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.068014204 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.076934943 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.065469103 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.114254885 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.065859007 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.072248818 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.110307943 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.11568765 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069712635 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.095667876 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.078817842 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.065989281 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.114533578 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.106417512 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.067669483 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.065929994 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067532694 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.065021457 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064816334 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088001531 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.106143346 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080184319 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.065947787 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.064380714 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.104354804 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06604791 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.1032345 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.072631867 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.105318551 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067344895 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067721532 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.065317691 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.066284713 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.108847582 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.066421852 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.065119731 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.064679454 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.107861526 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.064690536 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.106348621 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.067664569 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.070181491 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.07238661 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071914891 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.072776647 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.065836218 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.109030549 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.075484388 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067392358 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.119044476 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.117946051 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.105468826 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.118345989 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075049252 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.109240705 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.106023491 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.065727019 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.065511044 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.066384192 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.119691827 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.069752471 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.068848029 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.071402264 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073902036 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.113254471 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.124637459 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.127028718 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.081904427 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070159344 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067340975 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.24009181 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.120040495 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.069719046 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.064591999 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.065411331 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.064164526 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.069348993 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.066357965 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.069237506 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.064233005 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.07457903 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.067091568 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.066454893 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.112039287 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.064781767 seconds)
  done (took 9.917094782 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.070092255 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.067280347 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.06577427 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.06568405 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.065892007 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.065604727 seconds)
  done (took 2.026645499 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092615426 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.065725812 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.07729678 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068271943 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.087416738 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.107832957 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.107183795 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067284016 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.081798138 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.076699577 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.107838053 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.10943696 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.109743164 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.066965023 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.107189004 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.066824816 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.108500448 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.069297592 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.076662408 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067546374 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.079569114 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.067161811 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067426101 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.116167774 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.068462496 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.067055572 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.074802322 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.077404779 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.076818664 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.067436757 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.06711009 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.068241724 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.075177615 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.067408366 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.110113841 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075371575 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.066331102 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.070820388 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068098171 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.068287986 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.11212867 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.067873247 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070230622 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.070864136 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.067420519 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.075108147 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.070714864 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070250894 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.10999449 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.070798101 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.070723172 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.066662061 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.068192714 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.070647266 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.074967288 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067317251 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.070576776 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.110078119 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.067604491 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075334332 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.066466471 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.068534387 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067626246 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.068473794 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071564567 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.071209982 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.075564485 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.067969827 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067956777 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.066639342 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.071194315 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.066619478 seconds)
  done (took 7.181342416 seconds)
done (took 29.413439398 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.54680762 seconds)
  done (took 2.134531154 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.965120721 seconds)
  done (took 2.595200798 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.212098306 seconds)
  done (took 11.841701797 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.33792344 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.455282295 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.759505501 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.139217715 seconds)
  done (took 3.340690756 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.874639301 seconds)
  done (took 2.510737206 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.239241914 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.225722255 seconds)
  done (took 2.121405697 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.452997806 seconds)
  done (took 2.077378225 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.212804723 seconds)
  done (took 2.843121454 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.236881502 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.161275622 seconds)
  done (took 2.033651701 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.626595239 seconds)
  done (took 2.255021801 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.744709694 seconds)
  done (took 6.379622421 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.329703977 seconds)
  done (took 2.021669204 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.239856249 seconds)
  done (took 1.875613843 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.616757196 seconds)
  done (took 4.246702751 seconds)
done (took 49.9374792 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086711902 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.084117534 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.083717858 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.079150402 seconds)
  done (took 1.939500515 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075790779 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.068809431 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.071138184 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.071602452 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.068929966 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.070754452 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.071480832 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.067789739 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.069182158 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.06836746 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.066651161 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.068516793 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.070739903 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.067900932 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.070503197 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.07179411 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.068381703 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.068561744 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.070246672 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.067871783 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.0706652 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.06814223 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.066111473 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.067745365 seconds)
  done (took 3.298871744 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079580611 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.070204379 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.073222425 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.068846624 seconds)
  done (took 1.931346256 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077651889 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.074557417 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.082996455 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.087551053 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.073741428 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.074716846 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.081650407 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.081891301 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.063624007 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.084592554 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.065958644 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.064682135 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.064711176 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.083328485 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.080897437 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.060256993 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.061549992 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.075092115 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.074281145 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.0769882 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.066266713 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.064301178 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.074049489 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.075342483 seconds)
  done (took 3.408555632 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.083336907 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.06382891 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079976729 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.08882587 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.09016938 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.063826113 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.077886659 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.090155928 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.126647978 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.0638525 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.072408235 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.063697734 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.10350512 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.063755558 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.079131664 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.108483051 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.111618095 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.067671652 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.096939232 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.063833973 seconds)
  done (took 3.308035637 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.080255662 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.069704368 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.069749355 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.064256052 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.074653768 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.070563565 seconds)
  done (took 2.08144684 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069655661 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.066400468 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.065417489 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.070094097 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.065971652 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.065831722 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.065179409 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.064334759 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.064433016 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.064971804 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.065239361 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.065450974 seconds)
  done (took 2.436540266 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.219738199 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071251079 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.072067715 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.064171672 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.065738972 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.064989041 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.078981181 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.066975107 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.087778882 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.065131132 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.065123919 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.06735661 seconds)
  done (took 2.636977642 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10647652 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109241149 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141632925 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113537417 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114898745 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09353688 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.164970895 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.092695051 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.159261137 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.136147443 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115853219 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093254381 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086669037 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.06835788 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098953303 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119270635 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.138155428 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.071537736 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112218029 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.208149246 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132151294 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.134888308 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14667467 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116248588 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.091686565 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14671755 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095789019 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101763538 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125233156 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127156221 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118351581 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.097472391 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.070715353 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.069621307 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150500956 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.108567014 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123914443 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.09259075 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10605321 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08875263 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108965907 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.069206199 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.083618617 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.112853963 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086389374 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135619825 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.094961952 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.119364781 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083770614 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.316825677 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125613877 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.134987717 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083874886 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10294953 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.134576527 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109244635 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131319473 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10357797 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079976832 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.115987721 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102746808 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096812325 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105143268 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077392491 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.173821489 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086857781 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.109311997 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109257758 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.093193372 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0936852 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104447921 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135405879 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.127744409 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.127861595 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141225711 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.096059517 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.121543251 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.101169841 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129192306 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10470162 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.072434673 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.12324287 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130437169 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.100735481 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102424259 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134005449 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.09356437 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078312324 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.102694441 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.121449654 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080817625 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.116032511 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081514741 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.112060655 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.141758279 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102376083 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11673854 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.125402766 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.257145418 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152059393 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.105881531 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070918092 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.113948562 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109381387 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152303749 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09241756 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.074101289 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098225869 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099955114 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.149973228 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104880844 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077505102 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106198164 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136735901 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091277365 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.21533208 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.093158249 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.140096908 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107855133 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08469736 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073279263 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.088480678 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112407509 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107589789 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111666091 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094123215 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.084266224 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086078388 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115222764 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.093973921 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080335763 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.114778809 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099975165 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074733486 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088241577 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.076089686 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.143067448 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079660908 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138628901 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126924362 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.077242587 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108953484 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.099666088 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110681025 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.098931334 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121267744 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145397843 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117331053 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092182485 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.097574882 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113728823 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.154476015 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.136495247 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.271783922 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.075902167 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099138357 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110000676 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.095685257 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.12414306 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.093716704 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104110164 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100188657 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137680721 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.140292298 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09607254 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099017593 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105014342 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.120386491 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075482629 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154175718 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101874101 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.117414918 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.083737902 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.139381217 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111609365 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.088627684 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086620561 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099287334 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105376557 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10813527 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145449047 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096185455 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.072230995 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093265458 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145208892 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07722401 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110844062 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.09115243 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.092343005 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11908155 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.094868125 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080793115 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.067867928 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129676339 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.161715695 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070115864 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11652195 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.11155099 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105250168 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.125183168 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.069958028 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.124497791 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146604643 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124602845 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153668214 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.342113722 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116428337 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116234446 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.110712201 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.102978618 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077032613 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.12220113 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.131517912 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097020072 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089720088 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131839448 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116179958 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.132588136 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.114006945 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1162444 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.102800581 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106138739 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100386881 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101998841 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.142003274 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121266004 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.123853392 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085534143 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105303723 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119591092 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136510776 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081240637 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141575435 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.084399015 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120130108 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078282659 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124140587 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.077019253 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.108553708 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.079396141 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101639301 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.069394975 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074820884 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145502621 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114757671 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109029471 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102761467 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.14145414 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.140100082 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.079498749 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109752285 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.120042001 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104634771 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121894239 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114222535 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.269172808 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093804917 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107014781 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083203325 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.079339357 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112854561 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091309233 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121782135 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08199085 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.072897409 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1364271 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101956953 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092412123 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075813398 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104946339 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.121608937 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090862873 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08456217 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115469964 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103010222 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138821477 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.088879802 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.095639568 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.122254441 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07821118 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.090435163 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.067641329 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.084255753 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.07470344 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.12733535 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.075109036 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11733367 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.068063618 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130920701 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087115085 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.092629861 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102137752 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109794299 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127751258 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09417287 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141645336 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089586307 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121222236 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108566481 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095093329 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089482865 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104203013 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101647929 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.12479977 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097002653 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126429957 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14823837 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10509284 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146950059 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093399092 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129064386 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113699678 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.307610456 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11014652 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.164049937 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136653338 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109010292 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109581476 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073192997 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.092876548 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102233976 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.109491449 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.169581175 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122221576 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.070344665 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.104570378 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091727885 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105946602 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101081459 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07980494 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141088676 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099684716 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.085910719 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109474759 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.089134911 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10262911 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074887756 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099633269 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.104205164 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094719186 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096840292 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.1177722 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129550147 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113022409 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.145368682 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100923048 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.091745063 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.118662904 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110986132 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11012894 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086053645 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086467985 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140077044 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124549393 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129794085 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102860816 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111439135 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115583963 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102253597 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.128620769 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110654885 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.135629951 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083692903 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.080376322 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.243955605 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071580107 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.121673819 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105205102 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109168205 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096333882 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.070444687 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100806908 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103841799 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069953999 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085279408 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090985429 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.093203467 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.089340749 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104071883 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.109776629 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.088948409 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101306461 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097130439 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14396174 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099360996 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086037993 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140894117 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146801601 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085746756 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091204659 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.070599166 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077975602 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111427741 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150097211 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.15302199 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078296219 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086926832 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.086139607 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086653996 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.070934725 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.088222829 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.088313336 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105827845 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10152884 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113935481 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106058557 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0751319 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10221018 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099801906 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093582045 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109583353 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123643789 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.12957844 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.145691142 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116728601 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110133897 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076852906 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081354786 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076170991 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080794503 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104041345 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080365609 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078495188 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.32156015 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.090932899 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102840921 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105703154 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085724089 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073459823 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133878826 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.067726597 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131728959 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.069372406 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.079566354 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.079942497 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076738549 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090594662 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133914914 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108731015 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108526581 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105379865 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101634568 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157666524 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153545968 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078950126 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141072129 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073861743 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074730071 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.074373126 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109051707 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088105785 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115067254 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142048609 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090128525 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101495836 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077520546 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144125936 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.098589211 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.1040604 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085581957 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078695785 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144319863 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079191647 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.080988559 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089418173 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112640663 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.072591452 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105208505 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085687525 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079743029 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167596836 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.713327292 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091555066 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.076217421 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096984785 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.146897072 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137629597 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10175878 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.290107713 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.117763281 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099046255 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094145007 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105330669 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.188543746 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07262347 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091884459 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.101164262 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095137405 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099408566 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096551771 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.085438343 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.089673414 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.084879242 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077178128 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104998868 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08587338 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094229025 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108690826 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081350546 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.085585722 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.128395934 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.101182259 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.080186553 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085873806 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103638882 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085605456 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100672803 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.068778681 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113037411 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.0910216 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117778827 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.097795538 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10746351 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.128610073 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093944146 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13735297 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.107491752 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.123182955 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087224922 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.077875804 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126780532 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.090250048 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077781803 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.146990011 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.098213933 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.091648626 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105157461 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097397865 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114685836 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120103436 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115158581 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100059796 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080893849 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105738785 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.107164844 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.26372774 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078279429 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.072799166 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.07494232 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104913875 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083722683 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081668944 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.112485042 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086549499 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.100577977 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.100746722 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.120391173 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085694677 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09935286 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108546903 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089128813 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106995219 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098888269 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.125657131 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.170212539 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121589783 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.126637038 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131373912 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.075710847 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.07405727 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.067361611 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114662187 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.078263866 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.088379139 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080227328 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13410052 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.081837758 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112576194 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.243779562 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080191705 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.094389002 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096196809 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.069143864 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.083007464 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107644866 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086891662 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079668915 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119617228 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08293019 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129688515 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111639982 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100300102 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096143801 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081320821 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116290256 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105786418 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.132211295 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09896995 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076017029 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126441816 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105348081 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143800386 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.075298892 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084879524 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.139094633 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.280000629 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129067074 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.078367473 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146491194 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.141033711 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098357761 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130859134 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.069236678 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085856845 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.0866408 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.12379549 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081569581 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108245334 seconds)
  done (took 68.523004313 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.183087266 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.174080713 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.119730095 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.132728794 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.290245678 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.299790771 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.152850578 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.125019698 seconds)
  done (took 3.281208907 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.070366451 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.081928602 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.079745557 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.24369315 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.096916815 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.066553719 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.071966939 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.080826944 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.06611822 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.065748088 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.100007616 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.066009587 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.066152589 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.524393196 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.065592434 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.071593453 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.066051698 seconds)
  done (took 3.680656475 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.350363473 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.544246888 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.328201217 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.77781842 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.166633157 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.725452101 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.074629541 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.081792555 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.936971184 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.21536648 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.159275795 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.08756645 seconds)
  done (took 21.248580138 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.077882242 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.119038151 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.117655994 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.072768865 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.072377046 seconds)
  done (took 2.248385491 seconds)
done (took 121.732062775 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085456217 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.171084662 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.06736972 seconds)
  done (took 2.061063495 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.120499262 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.116745694 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.115773856 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.117453142 seconds)
  done (took 2.268602811 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076304673 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.074956373 seconds)
  done (took 1.948874546 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227679075 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.212127636 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.089616332 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.085047302 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.078129789 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.079535226 seconds)
  done (took 2.047786118 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072973526 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.06965749 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.069694577 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.069875623 seconds)
  done (took 2.073147114 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.170003053 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.065995405 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.067918857 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.069848289 seconds)
  done (took 2.166755389 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086970754 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085383597 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114427047 seconds)
  done (took 2.085047777 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085105329 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.083306815 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.077249868 seconds)
  done (took 2.04540626 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111018978 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.095073684 seconds)
  done (took 2.001312028 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.080930603 seconds)
  done (took 1.880839037 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093348787 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.096759084 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.182665762 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.147920621 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.18396736 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.170022912 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.075668338 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.07598907 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.071690856 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.070660248 seconds)
  done (took 2.963402522 seconds)
done (took 25.963262408 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.085876456 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.190727122 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.315089819 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085162273 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.652932615 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.312826407 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.730407266 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.088702212 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.098190058 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067038651 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.083530608 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.631902714 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.730054565 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.14442416 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.716090228 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.136170513 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.56043421 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067266345 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.066528086 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067115185 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.71504867 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066601193 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.066846204 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067500915 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.55864703 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.330273775 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068049162 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.136022394 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.066793599 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073685646 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.31336704 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068089245 seconds)
  done (took 14.130751116 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.077456275 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.145047443 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072282182 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.082493667 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.06897699 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.06887191 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.070992778 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.067818269 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.109536957 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067400805 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084296442 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.06668793 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.07165377 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068331528 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087482908 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067131372 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069317056 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067932764 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067185772 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067703385 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.085933833 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066739469 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067571675 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067588617 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067524073 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.081300244 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068492873 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067016741 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067225105 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071186732 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07240963 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068628154 seconds)
  done (took 4.212141256 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.128960792 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12915119 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.072338893 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.107257673 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.115664892 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.069843165 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.149948221 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.089702007 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.113096676 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.067663076 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.084453915 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.067046418 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.102664399 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.068782492 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.087990543 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.067204999 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.069410634 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.067526749 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.067034564 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.067589143 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.086227874 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.066764956 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.067433394 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.067641999 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.067681689 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.082955261 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.068366296 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.067190159 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.067239562 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071341586 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073153605 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.068823304 seconds)
  done (took 4.46306026 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071152903 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.069836639 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.075582497 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.078470802 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.064690202 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.066790139 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.067823491 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.065063623 seconds)
  done (took 2.377549836 seconds)
done (took 27.010033608 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080487169 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.066117883 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.068890455 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.085458235 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.072059937 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.10910159 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.063292623 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.072929568 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.069575911 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.069755315 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.071186961 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.06569145 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.068210055 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.063181144 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.069984597 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.064159839 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.111716118 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.068460512 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.108516073 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.110359923 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.066753641 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.069753302 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.072640339 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.110242675 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.109436086 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.109698376 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.073192238 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.070167583 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.064639466 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.067656915 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.169605159 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.183222554 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074191912 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.116523495 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.065000984 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.064663005 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.068858181 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.067234194 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.113465145 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.073717628 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.066900949 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.073370234 seconds)
  done (took 5.288724874 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.189919519 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.192554857 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.185144608 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.078641164 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.091265783 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.078497624 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.191646355 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.075994421 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.074191231 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.190346872 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.070270512 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.074329258 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.076523754 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.067374005 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.074096753 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07030932 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.07563834 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.068433501 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.073994898 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.073919518 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.190465781 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.067912184 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.078737157 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.075734766 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.06989877 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.075617792 seconds)
  done (took 4.465543064 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074306086 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.087358178 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.09113461 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.145762919 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.109085139 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.081725388 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.080810035 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.092568076 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.100124102 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.066845505 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.070593778 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097061815 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.094979284 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.073475528 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.106190596 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.084525965 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.078611876 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.068228109 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.073101326 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.100463507 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.088879995 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.084897915 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.099277389 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.086483272 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.065933556 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.075828124 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.07375474 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.082165397 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.073847128 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.078697503 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.070504752 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.070126273 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.067110838 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.078141782 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.071075318 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.064642632 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.089187442 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079918491 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.081823972 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.106762716 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.077235419 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.068529358 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.144603556 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.132034888 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.066740055 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.069242263 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.071082955 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.079713881 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.068423119 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097680446 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082579668 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.066971465 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.08589945 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.068462724 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.0683694 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083034448 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.06878362 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.068722385 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.078718709 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.072983671 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.087765229 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.0722992 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.087979983 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.066908564 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.078315644 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.06840631 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.068738995 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.065844224 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.101137531 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.074636732 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117412431 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.068355826 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.064904362 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.079529473 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.078429727 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.073879567 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.066702024 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08626804 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079053888 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.070772403 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.077915943 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.069686867 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.070206629 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103445011 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.065885111 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.064779411 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.064755165 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.069097856 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.070612323 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.067752874 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.080022062 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.066762902 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.070747662 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.082276886 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.067316689 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.067888303 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.069420178 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.06834011 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.066632109 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.077714802 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.071467029 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.06920724 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.080317868 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.0687722 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.071112615 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.082706934 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.076722284 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.067146114 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.068881183 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.071203398 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070943156 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073884033 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072714264 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071272378 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.074052261 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076897469 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075908558 seconds)
  done (took 11.061892838 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.208895272 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.194101758 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.06802477 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.189902253 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.075465421 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.123658276 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.19164534 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.130191885 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.067537997 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.068189909 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.066388658 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.137784377 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.132217555 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.143258811 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.114549844 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.067709777 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.093521316 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.143163473 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.196514396 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.191143889 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093285987 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.075413831 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.06999773 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.068841407 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.068866398 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.076890158 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.083302099 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.076292453 seconds)
  done (took 5.102378879 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.076076987 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.082761809 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.070573702 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.090925731 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.083429245 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.066874393 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.069024326 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.067974829 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.083852215 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.072389137 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.066673884 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.071274883 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.069946794 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.067312287 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.067557556 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.073153146 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.073262619 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.065508223 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.070075152 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.071014797 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.077606712 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.154689401 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.071442501 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069948052 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.069102065 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.066933633 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.073351662 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.074987466 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.066451322 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100089609 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.063793852 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.071045742 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.081427179 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.067877795 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.066899279 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.067978896 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.067401344 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.067288768 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.067738769 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.065307015 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.06517081 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.073336228 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.066032203 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.072425631 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.081874586 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076194143 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.068678974 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.069745307 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.069654695 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.064071682 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.070604432 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.070580285 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.070183637 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.07583317 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.07096335 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.069399888 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.068879895 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098212683 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.073219855 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.066639847 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.067204988 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.065566531 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.069034111 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.075287591 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.084173309 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.069002493 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.065696428 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.067372837 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074978784 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.081864263 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.066846312 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.072725113 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.064054954 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.067335307 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.069539169 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.070331472 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.068893954 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.065675123 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.067342647 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.067509827 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.068418004 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.067094429 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.067571967 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.070008224 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.065031908 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.065650522 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.068099109 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.06869967 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.072610648 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.066019895 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.070030961 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.069322786 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.066560508 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.070642036 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.073796137 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.070996507 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.088162177 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.075901845 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.068089381 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.065407432 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.082722533 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.069535647 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.066824072 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.071298422 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.072170887 seconds)
  done (took 9.446620526 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.098547893 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.06837168 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.086924187 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.098419305 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.076647416 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.071545323 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.080953555 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.067452539 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.088263912 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.065448275 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.075164406 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.064653353 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.080191341 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.075853265 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.067942772 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.077021195 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.068988612 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.087537971 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.081466968 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.065117873 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.075807728 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.079017307 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.079076687 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.085007406 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.084467773 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.08551726 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.078972721 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.0692461 seconds)
  done (took 4.073840553 seconds)
done (took 41.259211801 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.881037211 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.101337154 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.895136704 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.356241431 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.095068589 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.89821232 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.957066349 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.87948286 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.518950975 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.961131312 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.686803014 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.565874897 seconds)
done (took 68.688761602 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.038359468 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.052405192 seconds)
    (2/2) benchmarking "String"...
    done (took 2.141187575 seconds)
  done (took 6.101512578 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.321920284 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.884892397 seconds)
    (3/3) benchmarking "different"...
    done (took 1.920872202 seconds)
  done (took 7.949451894 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.264786893 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.731917139 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.164242951 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.883844686 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.89369573 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.416252054 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.062874698 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.533913408 seconds)
  done (took 33.517983318 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.897410778 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.162055949 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 5.254594309 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 5.333038084 seconds)
  done (took 21.552854358 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.328768162 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.27812243 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.278889622 seconds)
    (4/4) benchmarking "different"...
    done (took 2.340577122 seconds)
  done (took 11.145300451 seconds)
done (took 92.538399404 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.887018831 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.06186069 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.891182755 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.060566639 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.942977096 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.966237813 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.896342015 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.895081156 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.417962134 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.896460954 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.838570658 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.890421123 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.902542868 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.933050282 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.888860387 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.947832353 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.039915635 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.896398438 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.90751581 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.395995349 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 4.225007887 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.892975649 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.8988163 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.946993954 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.043265378 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.893566581 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.180441334 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.900447157 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.48317904 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.891224542 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.891577778 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.898851732 seconds)
  done (took 207.5269321 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.886935617 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.668946276 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.681886296 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.908940645 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 5.172412549 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.231946366 seconds)
    (7/36) benchmarking "scal!"...
    done (took 2.678143504 seconds)
    (8/36) benchmarking "gemv"...
    done (took 5.195066734 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.891183224 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.900986863 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.799209322 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.887260705 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.843399319 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.402084537 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.921169277 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.912204917 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.704099566 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.63600263 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.926283147 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.739830601 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.895967873 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.322003004 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.333205972 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.632822075 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.902446386 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.917392571 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.904830971 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.905584497 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.345788497 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.65741407 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.904951738 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.905449289 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.060183301 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 3.121578271 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.900213714 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.891013756 seconds)
  done (took 180.42402261 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.118363131 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.895458674 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.931695028 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.999022153 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.681940171 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.534564475 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.890938232 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.886879428 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.887396707 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.893761493 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.89038861 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.952543915 seconds)
    (12/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.173960333 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.077304963 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.890032594 seconds)
    (15/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.887781981 seconds)
    (16/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.544382912 seconds)
    (17/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.89518129 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.891275702 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.888685308 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.888500331 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.011552763 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.233530289 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.216076104 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.892320865 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.907422647 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.997585486 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.898394918 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.889492322 seconds)
    (29/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.996652225 seconds)
    (30/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.893087293 seconds)
    (31/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.012793831 seconds)
    (32/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.001294849 seconds)
    (33/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.891800373 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.905092067 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.944595452 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.898847249 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.985051233 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.892683746 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.888859622 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.890872431 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.935536719 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.892991562 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.735402828 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.989872656 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.892270743 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.907438816 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.357796713 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.481970478 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.896879954 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.890339269 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.888536111 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.889757053 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.89036481 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.1086279 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.895067497 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.923159573 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.9463696 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.894809032 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.890874532 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.891988368 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.890259928 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.890527573 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.896219731 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.939044901 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 3.425408863 seconds)
    (66/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.894070745 seconds)
    (67/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.603337549 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.248320968 seconds)
    (69/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 3.539711492 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.894931485 seconds)
    (71/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.052008464 seconds)
    (72/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.964600408 seconds)
    (73/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.894681256 seconds)
    (74/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.057335753 seconds)
    (75/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.894250318 seconds)
    (76/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.890633899 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.890980839 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.890933472 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.933538685 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.845860831 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.89568537 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.998841608 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.895357929 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.891012123 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.333475237 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.376305291 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.897925215 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.909639192 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.957700488 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.89403501 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.890788864 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.897623618 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.778487915 seconds)
    (94/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.895814189 seconds)
    (95/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.891286936 seconds)
    (96/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.890759157 seconds)
    (97/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.890674808 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.045818691 seconds)
    (99/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.895369108 seconds)
    (100/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.349330142 seconds)
    (101/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.253200179 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.987827975 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.292599695 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.651603047 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.898305289 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.892004708 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.910677264 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.894219784 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.891334667 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.909203737 seconds)
    (111/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.892364811 seconds)
    (112/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.891748245 seconds)
    (113/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.893031101 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.892973427 seconds)
    (115/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.891747518 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.895168267 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.910427631 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.893556427 seconds)
  done (took 419.643258914 seconds)
done (took 811.611113068 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 512)...
    done (took 2.563379731 seconds)
    (2/5) benchmarking ("identity", 4096)...
    done (took 2.643019579 seconds)
    (3/5) benchmarking ("identity", 2)...
    done (took 2.482102051 seconds)
    (4/5) benchmarking ("identity", 1024)...
    done (took 2.540749161 seconds)
    (5/5) benchmarking ("identity", 64)...
    done (took 2.486592923 seconds)
  done (took 14.546027844 seconds)
done (took 16.368856082 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.921872264 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.921045463 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.902918526 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.920268151 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.915834403 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.913080724 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.922926854 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.933448184 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.925141333 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.913038133 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.920863792 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.915788883 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.924298261 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.92817524 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.938676095 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.925782346 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.916142474 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.907398522 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.922560267 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.916210039 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.9151009 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.915852202 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.914590352 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.920901163 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.932647406 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.91790117 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.912647411 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.920781272 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.917748728 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.922422307 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.933199135 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.928469439 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.925566564 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.929993731 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.925141968 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.929238968 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.919155207 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.931599802 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.917637358 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.931627896 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.925885544 seconds)
  done (took 80.626282941 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.906704055 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.072019833 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.185187634 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.94520319 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.908037841 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.188741354 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.972129692 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.057986065 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.067927167 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.188140836 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.192314275 seconds)
  done (took 24.521466823 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.905186126 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.072192853 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.186641243 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.947559797 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.909446219 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.192686385 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.977824529 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.062615657 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.07285543 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.194175354 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.20790024 seconds)
  done (took 24.579142631 seconds)
done (took 131.552941693 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.446147954 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.955819979 seconds)
  done (took 6.236491083 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.899189505 seconds)
    (2/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.919707352 seconds)
    (3/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.074848899 seconds)
    (4/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.904778795 seconds)
    (5/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.907062475 seconds)
    (6/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.901023515 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.901962792 seconds)
    (8/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.907426812 seconds)
  done (took 17.251316424 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.899171728 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.899279021 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.898843495 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.899531533 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.899038276 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.900102814 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.900027231 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.899364709 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.899012886 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.899073508 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.899723478 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.899962996 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.900266237 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.899778868 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.900806344 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.900582009 seconds)
  done (took 32.230377869 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("minimum", (8,))...
    done (took 1.900017468 seconds)
    (2/24) benchmarking ("sumabs", (4,))...
    done (took 1.89951078 seconds)
    (3/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.900384788 seconds)
    (4/24) benchmarking ("minimum", (2,))...
    done (took 1.900864812 seconds)
    (5/24) benchmarking ("sum", (8,))...
    done (took 1.899830363 seconds)
    (6/24) benchmarking ("sumabs", (2,))...
    done (took 1.9005949 seconds)
    (7/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.903397101 seconds)
    (8/24) benchmarking ("minimum", (4, 4))...
    done (took 1.901426045 seconds)
    (9/24) benchmarking ("sumabs", (8,))...
    done (took 1.90090199 seconds)
    (10/24) benchmarking ("sum", (2, 2))...
    done (took 1.901240401 seconds)
    (11/24) benchmarking ("minimum", (2, 2))...
    done (took 1.900834729 seconds)
    (12/24) benchmarking ("sum", (4,))...
    done (took 1.900818925 seconds)
    (13/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.901167629 seconds)
    (14/24) benchmarking ("sumabs", (16,))...
    done (took 1.900968974 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.901385441 seconds)
    (16/24) benchmarking ("sum", (4, 4))...
    done (took 1.901390567 seconds)
    (17/24) benchmarking ("sum", (8, 8))...
    done (took 1.90101367 seconds)
    (18/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.90173783 seconds)
    (19/24) benchmarking ("minimum", (8, 8))...
    done (took 1.903181456 seconds)
    (20/24) benchmarking ("sum", (16, 16))...
    done (took 1.901294336 seconds)
    (21/24) benchmarking ("minimum", (4,))...
    done (took 1.90177975 seconds)
    (22/24) benchmarking ("sum", (16,))...
    done (took 1.90093499 seconds)
    (23/24) benchmarking ("minimum", (16, 16))...
    done (took 1.911165532 seconds)
    (24/24) benchmarking ("sum", (2,))...
    done (took 1.901359623 seconds)
  done (took 47.474035424 seconds)
done (took 105.036579219 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.498505481 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.917870287 seconds)
  done (took 9.25372899 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.9060964 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.90119109 seconds)
  done (took 5.742604835 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.901723077 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.901893729 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.901998848 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.901888128 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.901566564 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.902414008 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.90158804 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.902056126 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.9016278 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.902274002 seconds)
  done (took 20.856576898 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.902093353 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.901774059 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.901624633 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.902022387 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.902072196 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.901927809 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.902746399 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.902170395 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.902100526 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.901643351 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.902182403 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.903294991 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.902912864 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.903378219 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.902315794 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.902670806 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.903271297 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.902466331 seconds)
  done (took 36.080261745 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.903360856 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.902618972 seconds)
  done (took 5.643856063 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.90269906 seconds)
    (2/7) benchmarking "second"...
    done (took 1.902877957 seconds)
    (3/7) benchmarking "month"...
    done (took 1.902892672 seconds)
    (4/7) benchmarking "year"...
    done (took 1.903136282 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.90281139 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.903038899 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.902857375 seconds)
  done (took 15.158935048 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.903995689 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.050050925 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.094618722 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.355659863 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.904508506 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.906183086 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.565642539 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.905941708 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.907723618 seconds)
  done (took 20.433762342 seconds)
done (took 114.999134644 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.726280875 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.905755879 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.561319367 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.012595869 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.983675705 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.260678072 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.911036342 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.416600584 seconds)
done (took 44.60910132 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.970495566 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.903542417 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.946134336 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.947333842 seconds)
  done (took 22.637395478 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.915113116 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.557187138 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.942981419 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.952501904 seconds)
  done (took 23.310238035 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.41731636 seconds)
    (2/2) benchmarking "read"...
    done (took 2.321135748 seconds)
  done (took 6.592514562 seconds)
done (took 61.344376621 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.907209627 seconds)
    (2/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.90751568 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.907570155 seconds)
    (4/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.907876327 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.907149208 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.907941383 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.908300379 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.90780101 seconds)
    (9/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.908190761 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.907568988 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.90806152 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.907849032 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.907780661 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.907682314 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.908304463 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.908837422 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.908506785 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.908451838 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.908462478 seconds)
    (20/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.908417741 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.907884832 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.907932372 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.908007541 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.909549 seconds)
  done (took 47.63613142 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.908543109 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.909135421 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.90988327 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.909019397 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.909746715 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.909721624 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.909669292 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.90901385 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.909380022 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.909337777 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.909189282 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.909865823 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.909151082 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.909604108 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.909970466 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.909817344 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.909921365 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.909922615 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.909900752 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.910105072 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.909242265 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.909904531 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.910586589 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.910258652 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.909499265 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.909614049 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.909817197 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.910825885 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.909984215 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.910539325 seconds)
  done (took 59.135608323 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.910570566 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.91006031 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.910110231 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.910240503 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.910113207 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.910861737 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.910550137 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.910861945 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.910388118 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.910916236 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.910755425 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.913274044 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.911220231 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.910925267 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.910159446 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.910945245 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.910848697 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.911458351 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.911000557 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.910933617 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.910997131 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.910744565 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.911265691 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.911368935 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.911400267 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.911367734 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.911310305 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.911291266 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.910556333 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.910947324 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.911784606 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.91252319 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.911911857 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.912799148 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.912007081 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.912386799 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.91209678 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.916493514 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.922074921 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.911900166 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.912420156 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.912342179 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.912738952 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.912183896 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.913108825 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.912533461 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.91326993 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.912433798 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.912801186 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.91328383 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.913151912 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.913832374 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.913215536 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.912617868 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.913034759 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.914247667 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.913347172 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.913134208 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.913311212 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.913124395 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.913379375 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.913558364 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.914031271 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.914456657 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.914084442 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.913458203 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.913727804 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.913425186 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.91464265 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.914352518 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.913595559 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.914323956 seconds)
  done (took 139.538676384 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.913658005 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.91416198 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.914162509 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.914774951 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.913793393 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.914260828 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.914059334 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.914528578 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.915254511 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.914128771 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.914254735 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.919426817 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.915823301 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.915197326 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.916267296 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.915894458 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.915817253 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.916638756 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.920059609 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.013329197 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.924557886 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.921839062 seconds)
  done (took 44.101794159 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.916741748 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.919750723 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.916018037 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.927317667 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.920449005 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.921874265 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.919740971 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.92222178 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.918909035 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.918461657 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.920074361 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.917235814 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.920269164 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.920087004 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.916444354 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.917613011 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.918601886 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.918389016 seconds)
  done (took 36.402111384 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.91560985 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.916435568 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.915130258 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.915100291 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.916057873 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.916318907 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.914962486 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.915263988 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.91605989 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.916213054 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.916696738 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.916057821 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.916176474 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.917539124 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.918321745 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.919733474 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.918448167 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.919399634 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.919154288 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.918209524 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.918464598 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.918415073 seconds)
  done (took 44.02558653 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.91789586 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.916412574 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.918214083 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.918368966 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.917522816 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.917509153 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.917449632 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.917916071 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.91669384 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.918022412 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.917274605 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.916784261 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.917527752 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.917762599 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.91694186 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.918054358 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.919417632 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.918184862 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.921125646 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.91718614 seconds)
  done (took 40.209461447 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.918706842 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.924755977 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.930612747 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.93701077 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.950637126 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.965082141 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.952200701 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.938834302 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.927138706 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.922310557 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.926215922 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.940509818 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.956807937 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.932297486 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.935121278 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.921303802 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.917316318 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.916181687 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.916557553 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.916934482 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.917289284 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.916655732 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.917024075 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.91753619 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.916553971 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.917170801 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.917846674 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.918381803 seconds)
  done (took 55.838502153 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.916376771 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.916078043 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.918606674 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.916896899 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.916205547 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.916835516 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.917911228 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.922529611 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.918922882 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.917004998 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.91970602 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.916719422 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.917026739 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.916051378 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.917559386 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.917137937 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.917262502 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.916697783 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.917109716 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.917281706 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.916640396 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.917051332 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.917147774 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.917282057 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.917012011 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.917661916 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.91710361 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.917656046 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.917182468 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.918811567 seconds)
  done (took 59.374668387 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.938511797 seconds)
    (2/2) benchmarking "in"...
    done (took 1.940439518 seconds)
  done (took 5.731069587 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.917372697 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.918472696 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.91702059 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.918164294 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.918197023 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.92234512 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.920948858 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.933283503 seconds)
  done (took 17.21695728 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.920279305 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.923816793 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.925219529 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.933021165 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.936367081 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.955097448 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.938522876 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.923343158 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.923407023 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.931177975 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.938569219 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.941207218 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.947488172 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.952673677 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.922056279 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.93419023 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.925924473 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.924127606 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.922605532 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.919558443 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.924009708 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.920125632 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.918707171 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.920638133 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.919025556 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.924066279 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.932208091 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.922797109 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.922657722 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.921300302 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.92892308 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.922034841 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.920460366 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.922773 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.921333274 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.919893792 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.928825293 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.922684853 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.921275412 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.91979302 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.924074651 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.924505527 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.924966492 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.930065051 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.921101865 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.920138101 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.920885705 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.921585706 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.92127615 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.928354804 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.93037102 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.922807884 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.920169265 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.92131017 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.92457184 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.921821137 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.92170018 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.926481184 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.966502176 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.955138222 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.954243286 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.968968327 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.934131785 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.922351098 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.924184131 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.939682914 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.953392587 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.923795996 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.928039883 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.922242626 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.930893416 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.922022218 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.921844118 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.922201496 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.938566066 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.933619072 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.922995953 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.922482106 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.924170501 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.934137534 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.967890949 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.955782871 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.94735771 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.95359111 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.973026534 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.006904878 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.944665849 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.950454357 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.951817465 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.937657963 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.94844384 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.938646636 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.942430092 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.931084485 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.931295233 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.944325719 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.938015145 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.936000524 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.9494389 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.95153651 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.945648421 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.951930254 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.974896043 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.963068466 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.946259787 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.947002919 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.93171265 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.92997663 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.960866459 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.934475477 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.927716873 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.933225327 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.930050045 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.931668055 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.92656642 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.942497645 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.948042873 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.946224929 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.935294879 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.945187692 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.949699321 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.933932466 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.996782184 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.977361288 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.947211159 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.93988599 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.937632544 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.962672564 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.934532871 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.944589968 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.946017245 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.925349545 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.925557677 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.92895444 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.925117291 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.926954004 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.92559452 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.925920373 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.926053484 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.926470609 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.932449421 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.929700259 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.930673842 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.92756853 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.931442118 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.926820625 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.929626334 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.933984502 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.928073576 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.927737854 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.926681139 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.92946184 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.928718286 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.930551205 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.926046315 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.925959729 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.928115173 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.92875888 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.932679434 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.927853724 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.92669972 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.930250846 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.931939947 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.933550064 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.927785094 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.928856085 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.927787105 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.927322256 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.929146989 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.929618304 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.930722651 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.928092886 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.93347486 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.929803496 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.928034795 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.927970659 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.927749032 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.928614 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.93360165 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.942664382 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.932839138 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.939926175 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.927587628 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.936371186 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.928901863 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.932190759 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.928914561 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.928367614 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.929657865 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.928149973 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.928857091 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.933556719 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.955709747 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.941271543 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.931094015 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.938349261 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.953091918 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.938053571 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.944942933 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.938175702 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.938430989 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.942043477 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.938862805 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.95779067 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.949471435 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.953058994 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.945234537 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.949730224 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.95573917 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.951932082 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.943454456 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.966454179 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.947716261 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.942774269 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.965229967 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.942614614 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.95971946 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.936438675 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.947330673 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.939983521 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.933446646 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.938184743 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.940875685 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.937021443 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.935768481 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.941485937 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.956361212 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.962838985 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.947131894 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.942147542 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.932495069 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.933261696 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.931591512 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.930527798 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.934149298 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.942012062 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.946798845 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.940354939 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.934364442 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.93034029 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.938650387 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.954988442 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.965439348 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.977623291 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.023141685 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.028679771 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.107206332 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.973077843 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.970282596 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.989068013 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.017327482 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.013628369 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.153292245 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.985219408 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.97005499 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.976815861 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.963220173 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.965838057 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.998175548 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.972626825 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.95759614 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.941308652 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.942245346 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.945231451 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.952380965 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.976983493 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.980560774 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.989311666 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.975503263 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.985919576 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.963190821 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.970633908 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.074384411 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.981375663 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.024869706 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.043142262 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.027871781 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.000666366 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.995836292 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.963210647 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.992653137 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.980388247 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.994232203 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.975999531 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.964343763 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.938089598 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.942018709 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.940050994 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.943319395 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.954441876 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.98489287 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.976699586 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.989066696 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.963595148 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.961556542 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.951689506 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.955409999 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.960926421 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.964620065 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.936884018 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.938491461 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.939753672 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.954263417 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.946233067 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.936967252 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.940199128 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.936628617 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.956260379 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.951927371 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.955072092 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.945563823 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.939460091 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.966682982 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.936240147 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.94011128 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.93662047 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.941355138 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.950475876 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.936343157 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.935753725 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.945754091 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.937479614 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.941815342 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.941303032 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.935689421 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.936428278 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.941352608 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.949091895 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.943701037 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.941227176 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.9356566 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.937297448 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.935693834 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.941999764 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.941483043 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.939395383 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.938300001 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.940534247 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.944267325 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.93776196 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.937810733 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.937392231 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.939163096 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.943958196 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.936866372 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.946518328 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.937729074 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.939466569 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.949166351 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.937520514 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.948667273 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.93794884 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.938914153 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.939048524 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.941837539 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.941127706 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.937276146 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.938623562 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.938594195 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.941727962 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.941186234 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.951240894 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.946211836 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.942051477 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.946207537 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.9384561 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.940807844 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.951641107 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.97025698 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.943334467 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.942045891 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.945772205 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.947196939 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.943225246 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.957268944 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.944384006 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.949854491 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.941431899 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.939205366 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.943192761 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.962924452 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.940499626 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.939013519 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.938787976 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.945322017 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.949088775 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.939196636 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.94143401 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.974268197 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.962676604 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.977836855 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.958948642 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.959847155 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.961459495 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.952202384 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.963046495 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.958201682 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.966861161 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.966505506 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.963036855 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.965228605 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.96511147 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.969196035 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.99948207 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.980409577 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.006786856 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.994030009 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.994580211 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.994554781 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.959353743 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.985471667 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.965723019 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.977570841 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.991242527 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.979416039 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.978579725 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.995688381 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.999935711 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.97365237 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.969755481 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.968273634 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.986938967 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.973601725 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.955921328 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.973112831 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.994917775 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.994341576 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.99301586 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.970212803 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.98258452 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.994200339 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.99803059 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.987528519 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.971379172 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.976461751 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.981627317 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.989557471 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.982943945 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.979377012 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.000884642 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.955351613 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.980457349 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.976542383 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.985797871 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.966515024 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.981880162 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.994844327 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.989955572 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.988246705 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.97475296 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.981772594 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.982010927 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.98029635 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.988008411 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.995494964 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.974358971 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.980040608 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.991622443 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.994281581 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.995762175 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.995709324 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.997516986 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.996440824 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.997444927 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.987866871 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.98552447 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.989841504 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.995140697 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.984625758 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.993662621 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.984347272 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.984834629 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.991344959 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.991269843 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.008414302 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.960042546 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.991480352 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.997391472 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.009718195 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.988127711 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.986824895 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.970985225 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.984755016 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.987468341 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.990310998 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.988218084 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.956352284 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.990716405 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.989240462 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.984728567 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.997484124 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.004627239 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.993220094 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.988721498 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.001281298 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.989696827 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.986950132 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.990145843 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.990137226 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.976484079 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.985974833 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.989265129 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.998326752 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.986223575 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.986208053 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.97619667 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.991817685 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.99043889 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.996094897 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.996288781 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.013404595 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.978965757 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.96450513 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.974481957 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.968790738 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.975970752 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.98216509 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.977485433 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.976725977 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.962593187 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.969889623 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.967013373 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.98861152 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.980098082 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.975084525 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.965725505 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.982204089 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.997326886 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.986484521 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.996378174 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.016040918 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.977640256 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.988666413 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.977229493 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.984102063 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.994408965 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.986940193 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.984948974 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.979115177 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.964698854 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.990764283 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.004359142 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.97084608 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.971299014 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.975515806 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.979392459 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.006203111 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.984086078 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.001024623 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.983258813 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.9808686 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.977353383 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.012967877 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.979413634 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.000023659 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.000473049 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.011311823 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.989442475 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.986085319 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.995107024 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.989899534 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.974910112 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.999342837 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 1.984418613 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.979327606 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.985151839 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.984371745 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.998476568 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.010106146 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.009178103 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.990863638 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.00761058 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.991302298 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.990056073 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.000675443 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.997040483 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.00148221 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.006076331 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.985864551 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.999380091 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.002976436 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.983408982 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.979495824 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.008628178 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.973678843 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.002662538 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.996999078 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.990916611 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.006374555 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.980397072 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.979435754 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.987471524 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.991128534 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.98935362 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.003313166 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.997497733 seconds)
  done (took 1169.377038723 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.014005643 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.995918216 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.014535435 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.997830621 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.982069447 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.003095516 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.978698887 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.982399015 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.975196633 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.007401722 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.99690843 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.994893559 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.007559302 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.99322462 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.981770795 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.972725889 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.985653286 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.994202752 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.012224563 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.046782108 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.061607091 seconds)
  done (took 43.93221483 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.001746619 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.994130921 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.983863628 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.992369078 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.99264659 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.984668757 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.987470084 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.035243811 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.036174265 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.048794444 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.033799323 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.000536429 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.003319386 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.98742423 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.003432139 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.006430163 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.977516903 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.997415042 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.999104723 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.047074079 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.020053653 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.078695953 seconds)
  done (took 46.144799621 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.021495179 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.025020485 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.036030229 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.003236578 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.012010146 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.018664539 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.02087071 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.99137668 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.99148719 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.978110748 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.029509509 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.995278748 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.022787544 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.027004968 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.997860916 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.025988441 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.089983928 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.974980197 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.9821597 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.976037733 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.971524874 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.977815407 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.971482166 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.97464979 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.97856252 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.977509643 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.004405477 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.019360322 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.024620456 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.047646276 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.021676611 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.000440004 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.045261051 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.043614512 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.06306446 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.988187876 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.027083816 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.007361445 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.061984374 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.02133912 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.053295381 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.012324522 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.989712205 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.011811391 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.044072812 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.029571169 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.019141753 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.004077145 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.061143369 seconds)
  done (took 100.61405143 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.04667709 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.038524255 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.017916387 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.984747186 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.000355229 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.02990989 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.975733112 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.974129535 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.978501516 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.973348509 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.002862539 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.989197096 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.99674654 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.999206482 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.982042595 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.974049557 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.00971485 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.037229408 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.025777626 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.999218336 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.017960549 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.040255783 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.001935244 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.002916489 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.971456329 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.972656975 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.973195804 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.974345707 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.976435308 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.974602185 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.992255492 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.015222762 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.018770289 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.012032261 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.071845818 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.011090045 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.996717552 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.009711759 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.054748239 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.991072772 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.013357537 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.022400992 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.02941367 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.02556576 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.022860464 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.996647482 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.983797393 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.985132772 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.980897778 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.005485968 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.988843112 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.982600851 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.977675482 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.989813747 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.986294283 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.979799115 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.010812148 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.998761574 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.007326649 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.008635445 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.021648495 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.995522264 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.016726725 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.98670904 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.977394389 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.970757499 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.972032069 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.97401052 seconds)
  done (took 138.013213078 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.980601645 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.979694637 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.992637036 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.988360608 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.997291819 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.016764437 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.984666753 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.999850697 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.007786928 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.036918613 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.01007232 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.989183339 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.999076146 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.002167749 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.026958543 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.080526402 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.00913298 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.984553658 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.009166455 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.013718241 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.012322228 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.012779369 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.009694969 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.994898407 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.022240781 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.99009011 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.019481062 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.017910629 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.012679078 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.02837121 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.999573819 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.02224248 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.989975946 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.036715599 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.015193187 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.066797429 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.044450871 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.005787203 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.030964396 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.984421869 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.022418238 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.022700334 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.023659639 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.00217523 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.984243099 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.020720029 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.009210006 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.004653553 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.999999289 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.995863704 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.014922193 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.026711222 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.02349542 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.013292086 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.012033355 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.015100631 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.023756685 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.024949602 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.054854432 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.070558934 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.063093974 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.024587833 seconds)
  done (took 126.789596238 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.971992918 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.969162412 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.983261602 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.983681659 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.978901816 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.006514708 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.994786763 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.996743679 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.992231872 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.013037524 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.01342347 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.992522506 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.972085986 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.985342577 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.995401562 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.98215378 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.038671611 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.009544992 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.023185201 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.014841682 seconds)
  done (took 41.904667761 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.9735916 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.975445038 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.002664848 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.021817453 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.046342068 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.014173008 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.999010613 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.985178002 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.018403076 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.031210904 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.995945123 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.99653487 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.997338632 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.998210262 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.001327971 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.98673995 seconds)
  done (took 34.024453532 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.994294769 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.007452449 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.999510167 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.003091681 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.978366053 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.977325958 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.980042715 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.988275349 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.994550295 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.989322448 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.998890407 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.006376372 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.00429864 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.003940332 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.001991298 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.000984019 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.98048318 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.024715661 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.031548371 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.028954796 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.032134411 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.021524578 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.99765062 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.996644583 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.993738524 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.000208508 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.996055134 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.992387927 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.990173938 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.993736655 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.998346166 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.007477617 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.007305049 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.995897936 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.004596482 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.003090864 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.002452169 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.982110859 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.993321811 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.988079808 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.993073122 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.004187626 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.00201366 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.010536855 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.999185828 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.002685223 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.004813231 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.00535972 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.997739339 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.991810049 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.998610711 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.005476282 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.00166569 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.005210488 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.004244674 seconds)
  done (took 111.945056349 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.009178489 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.006388382 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.000859426 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.004676042 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.973753421 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.972939811 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.967767935 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.966018668 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.965876394 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.966238287 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.97160888 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.966889613 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.967200224 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.967487921 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.968024373 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.973750076 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.966334515 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.966985038 seconds)
  done (took 37.532353857 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.966390654 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.970600629 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.974578784 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.98739232 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.9794739 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.969918186 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.968852346 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.972161492 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.966343171 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.966212019 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.96600968 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.967832914 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.971634916 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.967152157 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.966365274 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.966863573 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.966478977 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.972203215 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.966602799 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.966159977 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.966142498 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.966582029 seconds)
  done (took 45.231934168 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.968554651 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.967527153 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.985058168 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.994261628 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.998565813 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.012462337 seconds)
  done (took 13.83225081 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.968137419 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.96764471 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.974185027 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968547271 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967431135 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967462111 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969758488 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.976798446 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.972417125 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.987583578 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.977331266 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.984090278 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967378227 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.972799405 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.966555366 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.967111189 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.967877926 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.967515082 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.971738509 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.96845441 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.968409726 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.967864012 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.967812873 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.974808765 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968130253 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.968382321 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.967683611 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.968753804 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.972598982 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.968228381 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.968663348 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.968206524 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968877322 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.973963988 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.967892052 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.972268812 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.968750357 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.968977454 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.975345639 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969274701 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.967943291 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969003829 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969566433 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.972844294 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.968729799 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.968744958 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.969515756 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.968875397 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969345023 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.975038265 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.968995142 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969935482 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.969459497 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969477132 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.974333701 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.970378556 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.969666947 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.969544777 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.969417735 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.976533049 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.969484476 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.969330886 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97070729 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.969897888 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.97641321 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.969377809 seconds)
  done (took 131.960072986 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97032238 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.969368336 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.976025059 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.97116786 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.970648043 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.980435603 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970466518 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.977616455 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.971073147 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.970148899 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.97006228 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970349599 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.975049387 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.970895742 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.970945799 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.977661082 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.013813843 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.990991106 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.030924844 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.084577728 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048861725 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.004394394 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.003649552 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.988511132 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.992486871 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.001094185 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.988266202 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.987807849 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.998935822 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.995431904 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.004669158 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.996623068 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.990866636 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.006998828 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.985218951 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.99267776 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.005129128 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.981325372 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.992363755 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.002611756 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.989435538 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.991296207 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.998043319 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.996460081 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.993384058 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.989620065 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.992273737 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.005046494 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.992082886 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.993166124 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.999863648 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984126953 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.992423442 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023186864 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.985818417 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.988186041 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.996062041 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.992996015 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.004340077 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.993696301 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.982225563 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.006907109 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.987376766 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.993823592 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009166249 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.98683289 seconds)
  done (took 133.422945507 seconds)
done (took 2725.77133455 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.080656687 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.032445179 seconds)
  done (took 16.056712459 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.127314236 seconds)
    (2/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.072812382 seconds)
    (3/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.167607926 seconds)
    (4/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.085588214 seconds)
    (5/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.00920109 seconds)
    (6/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.030992276 seconds)
    (7/16) benchmarking ("transpose", (600, 600))...
    done (took 2.005810211 seconds)
    (8/16) benchmarking ("transpose", (600, 400))...
    done (took 2.00432493 seconds)
    (9/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.094739624 seconds)
    (10/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.990445258 seconds)
    (11/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.09395861 seconds)
    (12/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.01171661 seconds)
    (13/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.994914212 seconds)
    (14/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.007806436 seconds)
    (15/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.000397522 seconds)
    (16/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.989450261 seconds)
  done (took 54.668470762 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.022804912 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.991263304 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.009938571 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.00325295 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.024171084 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.109968524 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.042216915 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.035388453 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.067523277 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.041351968 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.038781491 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 2.03162255 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.007566559 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.015894557 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.123244833 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.074037143 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.081066824 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.097130714 seconds)
  done (took 38.741339014 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.118962162 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.012892036 seconds)
  done (took 11.067166319 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.022201017 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.016896798 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.012322374 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.005672476 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.011928002 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.00951367 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.037180294 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.039394559 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.036960562 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.995163446 seconds)
  done (took 72.155741253 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.013836279 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.001813175 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.37395224 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.03112693 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.003287765 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.077350344 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.027779216 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.048722966 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.053594145 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.027323491 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.029478852 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.420328667 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.0345438 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.002342019 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.434394823 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.009787333 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.031447413 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.072182298 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.060031824 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.029602349 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.043074416 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 2.03771655 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.30174035 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.765368278 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.077226393 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.045367242 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.013552849 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.033523079 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.028681752 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.033195676 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.030464533 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.998354534 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.020861139 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.033981246 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.040412442 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.0192841 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.668491454 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.022984433 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.03247221 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.118640012 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.051863197 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.034071467 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.010912754 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.999536199 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.029724873 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.023848866 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.757331195 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.108052561 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.003024993 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.187514743 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.554730744 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.052827708 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.204425582 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.174747659 seconds)
  done (took 142.268826292 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.052502389 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.628932448 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.236969744 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.054280212 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.42576051 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.206886315 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 5.796632226 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.157109167 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.132533591 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.321777612 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.170889101 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.131419328 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.019295309 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.095024313 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.05682881 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.077032719 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.262186958 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.130252275 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.060083176 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.063763061 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.075320875 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.281327605 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.178860541 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.056503518 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.081238536 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.271534555 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.10598697 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.178522193 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.444362134 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.055630291 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.114144364 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.063280263 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.052493931 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.048960622 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.094283683 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.16136908 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.160720376 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.050729645 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.722654216 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.05500432 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.650730082 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.267519711 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.173012865 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.191033141 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.306853981 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.27083943 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.734210137 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.055844417 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.777126077 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.221190159 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.288967082 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.287926383 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.150063482 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.049267455 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.505229271 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.059900763 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.053891236 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.281739719 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.217721105 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.181448597 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.054083392 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.058132047 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.055685279 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.291818987 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.046138834 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.16795663 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.068256091 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.053647233 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.163034872 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.179506436 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.21865979 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.281858637 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.086905917 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.331417248 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 5.021450012 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.258010425 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.121871775 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.290549552 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.057157003 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.065210782 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.084399848 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 2.431342751 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.137292073 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.222348788 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.288448833 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.019862703 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.50352307 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.979433523 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.199287311 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.129928508 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.201240921 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.233049199 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.037722354 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 2.827492356 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.981051744 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.982650644 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.222516219 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.100649478 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.984784876 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.511173615 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.226604635 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.556711334 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.003281537 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.429441326 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.087476724 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.985339294 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.585619607 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.982306946 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.195472551 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.027356963 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.984628582 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.986585682 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.134116761 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.695913126 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.982290987 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 6.051508521 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.045455238 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.987796081 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.142458032 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.985267871 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.235842833 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.695544652 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.221161958 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.986135477 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.017998069 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.152183631 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.241051361 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.987962652 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.31858331 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.223804217 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.07939451 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.196644154 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.49865775 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.984097043 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.258516884 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.986460824 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.002660193 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.154437687 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.691358761 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.146143479 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.987767019 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.232151108 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.006497488 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.039249029 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.988444831 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.233841198 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.019778821 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.035304077 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.98819224 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.115048728 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.985672859 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.02449384 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.14651432 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.986507921 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.985404004 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.868768598 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.987249374 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.136460724 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.218597986 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.001146015 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.056042765 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.35496298 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.985027863 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.084644619 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.011714155 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.391360146 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 5.516685735 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.145243297 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.631149194 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.246058516 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.984881559 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.224462179 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.161268337 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.988681538 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.987200547 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.75224561 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 5.193067559 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.985193976 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.142134622 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.707005634 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 5.170368899 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.196842422 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.989190987 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.038692605 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.992116975 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.309804472 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.513628835 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.067740379 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.985645101 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.986455693 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.987875234 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.988562917 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.189497273 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.020447302 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.617795744 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.12700181 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.251834074 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.20573345 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.296075488 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.046791346 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.989712152 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.29954075 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.990617251 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.050535222 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.990436183 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.997832633 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.225905791 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.993613289 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.195220945 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.334088046 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.0562019 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.033064697 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.990120231 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.98794347 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.960319917 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.158071111 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.100234856 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.990827657 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 6.127942836 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.030197174 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.108871372 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.186085697 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 5.070006161 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.960272997 seconds)
  done (took 917.494514534 seconds)
done (took 1254.374121936 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.987344487 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.992458266 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.991629417 seconds)
    (4/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 6.99126451 seconds)
  done (took 29.884201827 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 1.991452065 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.989270494 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.991668907 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.991160296 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.99051123 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.990005259 seconds)
  done (took 13.87277637 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 6.989327324 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 6.990888416 seconds)
    (3/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 6.992299403 seconds)
  done (took 22.894622108 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((10000000,), 2)...
    done (took 2.454921384 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.284180151 seconds)
    (3/4) benchmarking ((1000, 1000), 1)...
    done (took 2.09058784 seconds)
    (4/4) benchmarking ((1000, 1000), 2)...
    done (took 2.16157067 seconds)
  done (took 10.916208947 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.99724428 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.992405996 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.992471788 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.994523509 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.994227921 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.992230394 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.994223082 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.994270084 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.992564734 seconds)
  done (took 19.87714407 seconds)
  (6/6) benchmarking "26942"...
  done (took 6.501574987 seconds)
done (took 105.85880331 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.188206243 seconds)
    (2/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.366684158 seconds)
    (3/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.433297265 seconds)
    (4/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.038256164 seconds)
    (5/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.374423801 seconds)
    (6/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.489090982 seconds)
    (7/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.01405315 seconds)
    (8/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.007093348 seconds)
    (9/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.521660614 seconds)
    (10/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.957798185 seconds)
    (11/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.018585374 seconds)
    (12/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.38023736 seconds)
    (13/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.019947282 seconds)
    (14/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.287136164 seconds)
    (15/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 6.993893188 seconds)
    (16/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.0108038 seconds)
    (17/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.891023581 seconds)
    (18/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.020855106 seconds)
    (19/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.051548551 seconds)
    (20/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.175187768 seconds)
    (21/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.407426531 seconds)
    (22/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.122286268 seconds)
    (23/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 6.992967283 seconds)
    (24/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 3.725806981 seconds)
    (25/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.36284927 seconds)
    (26/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.143017861 seconds)
    (27/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.498051384 seconds)
    (28/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 6.99457263 seconds)
    (29/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.147252875 seconds)
    (30/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 6.992340806 seconds)
    (31/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.213836053 seconds)
    (32/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.310525729 seconds)
    (33/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.306067068 seconds)
    (34/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.915428553 seconds)
    (35/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.143487062 seconds)
    (36/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.004343101 seconds)
    (37/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 6.141201329 seconds)
    (38/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.001917972 seconds)
    (39/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.268861368 seconds)
    (40/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.009818152 seconds)
    (41/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.648685436 seconds)
    (42/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.266290219 seconds)
    (43/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.1406859 seconds)
    (44/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.149398283 seconds)
    (45/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 6.997487321 seconds)
    (46/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 5.182794758 seconds)
    (47/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.088840662 seconds)
    (48/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.458850938 seconds)
    (49/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.702400793 seconds)
    (50/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.056784179 seconds)
    (51/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.313147378 seconds)
    (52/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.456617708 seconds)
    (53/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.148136881 seconds)
    (54/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.368142995 seconds)
    (55/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.143565655 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.154394335 seconds)
    (57/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.379672466 seconds)
    (58/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.154667352 seconds)
    (59/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.478096149 seconds)
    (60/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 3.1291162 seconds)
    (61/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.362799303 seconds)
    (62/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.535978319 seconds)
    (63/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.777114462 seconds)
    (64/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.89884439 seconds)
    (65/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.176698665 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.3276471 seconds)
    (67/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.254300262 seconds)
    (68/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 6.997983355 seconds)
    (69/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.039186528 seconds)
    (70/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.821227237 seconds)
    (71/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.12961118 seconds)
    (72/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.026147817 seconds)
    (73/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.425152815 seconds)
    (74/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.109958565 seconds)
    (75/341) benchmarking ("sort", Int8, false)...
    done (took 5.743930817 seconds)
    (76/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.800636431 seconds)
    (77/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.98488406 seconds)
    (78/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.007705659 seconds)
    (79/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.029866207 seconds)
    (80/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 3.947043717 seconds)
    (81/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.016144184 seconds)
    (82/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 6.994609919 seconds)
    (83/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.301064255 seconds)
    (84/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.85061213 seconds)
    (85/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.148805617 seconds)
    (86/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.32784011 seconds)
    (87/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.167516578 seconds)
    (88/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.012302371 seconds)
    (89/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.154859144 seconds)
    (90/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.12818799 seconds)
    (91/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.170814528 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.117691895 seconds)
    (93/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.453557837 seconds)
    (94/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.341480698 seconds)
    (95/341) benchmarking ("sort", Float32, false)...
    done (took 7.002794577 seconds)
    (96/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.004127928 seconds)
    (97/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.111298943 seconds)
    (98/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.523675961 seconds)
    (99/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.002596642 seconds)
    (100/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.11726828 seconds)
    (101/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.133621618 seconds)
    (102/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.120554413 seconds)
    (103/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.003282375 seconds)
    (104/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.53972106 seconds)
    (105/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.925780259 seconds)
    (106/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.164266865 seconds)
    (107/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 6.995666844 seconds)
    (108/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 9.012456198 seconds)
    (109/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.289517872 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 3.137289336 seconds)
    (111/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.500315769 seconds)
    (112/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.005405783 seconds)
    (113/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 7.002633382 seconds)
    (114/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 4.56760886 seconds)
    (115/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.430478777 seconds)
    (116/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.330196447 seconds)
    (117/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.242592763 seconds)
    (118/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.008147308 seconds)
    (119/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.008950767 seconds)
    (120/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.14575593 seconds)
    (121/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.374206634 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.507983249 seconds)
    (123/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.426224164 seconds)
    (124/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.30715519 seconds)
    (125/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.245970517 seconds)
    (126/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.315251285 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.500562097 seconds)
    (128/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.362341106 seconds)
    (129/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.314661166 seconds)
    (130/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.012961532 seconds)
    (131/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.013497734 seconds)
    (132/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.341790031 seconds)
    (133/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.908565072 seconds)
    (134/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.135741378 seconds)
    (135/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.02280122 seconds)
    (136/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.511751573 seconds)
    (137/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.00116308 seconds)
    (138/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 8.603487281 seconds)
    (139/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.090262271 seconds)
    (140/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 5.079907755 seconds)
    (141/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.158189009 seconds)
    (142/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.315218266 seconds)
    (143/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.1532312 seconds)
    (144/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.31236611 seconds)
    (145/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.483776706 seconds)
    (146/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.003190919 seconds)
    (147/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 5.108818062 seconds)
    (148/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.139608748 seconds)
    (149/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.95810768 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.337735854 seconds)
    (151/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.401192919 seconds)
    (152/341) benchmarking ("sort", Bool, false)...
    done (took 2.231901506 seconds)
    (153/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.005358563 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.39676727 seconds)
    (155/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.856247797 seconds)
    (156/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.041002764 seconds)
    (157/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.985817248 seconds)
    (158/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.40138023 seconds)
    (159/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.228485441 seconds)
    (160/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.016219549 seconds)
    (161/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.018947975 seconds)
    (162/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.003290542 seconds)
    (163/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.129487062 seconds)
    (164/341) benchmarking ("sort", Int64, false)...
    done (took 6.592526572 seconds)
    (165/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.068550549 seconds)
    (166/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.153175471 seconds)
    (167/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.15527682 seconds)
    (168/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.985090249 seconds)
    (169/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.003284035 seconds)
    (170/341) benchmarking ("sort", BigInt, false)...
    done (took 7.006362867 seconds)
    (171/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.354812075 seconds)
    (172/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.245549905 seconds)
    (173/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.235419649 seconds)
    (174/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 3.063343378 seconds)
    (175/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.235768015 seconds)
    (176/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.234966451 seconds)
    (177/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.074135342 seconds)
    (178/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.173046598 seconds)
    (179/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.011553871 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.317942226 seconds)
    (181/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 6.998802506 seconds)
    (182/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 4.194939004 seconds)
    (183/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.089871259 seconds)
    (184/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.141153101 seconds)
    (185/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.013720874 seconds)
    (186/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.409626286 seconds)
    (187/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.160148018 seconds)
    (188/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.213435691 seconds)
    (189/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.122004047 seconds)
    (190/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.060676517 seconds)
    (191/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.263343386 seconds)
    (192/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.145298417 seconds)
    (193/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.009372737 seconds)
    (194/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.116651947 seconds)
    (195/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.469729279 seconds)
    (196/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.006502419 seconds)
    (197/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.559661742 seconds)
    (198/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.017238933 seconds)
    (199/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.743550061 seconds)
    (200/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.026615614 seconds)
    (201/341) benchmarking ("sort", Float64, false)...
    done (took 7.00085311 seconds)
    (202/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.009998132 seconds)
    (203/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.107810613 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.007803173 seconds)
    (205/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.110023459 seconds)
    (206/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.016102847 seconds)
    (207/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.142288123 seconds)
    (208/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.542583734 seconds)
    (209/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.010638801 seconds)
    (210/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.306539217 seconds)
    (211/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.367783784 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.140609458 seconds)
    (213/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.154689485 seconds)
    (214/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.170730826 seconds)
    (215/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.150418195 seconds)
    (216/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.005543845 seconds)
    (217/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 3.916228487 seconds)
    (218/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.15676326 seconds)
    (219/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.31454557 seconds)
    (220/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.150352612 seconds)
    (221/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.039382238 seconds)
    (222/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.003695745 seconds)
    (223/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.048276114 seconds)
    (224/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.680414518 seconds)
    (225/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.112600479 seconds)
    (226/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.207087899 seconds)
    (227/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.691814135 seconds)
    (228/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.466569639 seconds)
    (229/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.342925175 seconds)
    (230/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.016018657 seconds)
    (231/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.114670233 seconds)
    (232/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.557204582 seconds)
    (233/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.162316854 seconds)
    (234/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.004039935 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.93703857 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.429331503 seconds)
    (237/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.483323406 seconds)
    (238/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.183931485 seconds)
    (239/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.167740465 seconds)
    (240/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.020659888 seconds)
    (241/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.113145474 seconds)
    (242/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.332019365 seconds)
    (243/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.163624379 seconds)
    (244/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.130149594 seconds)
    (245/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.007816776 seconds)
    (246/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 3.001530128 seconds)
    (247/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.173140692 seconds)
    (248/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.519032762 seconds)
    (249/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.926444721 seconds)
    (250/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.141314713 seconds)
    (251/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.101089494 seconds)
    (252/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.00545098 seconds)
    (253/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.140555948 seconds)
    (254/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.441766573 seconds)
    (255/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.313393868 seconds)
    (256/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.368298398 seconds)
    (257/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.016711237 seconds)
    (258/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.141667607 seconds)
    (259/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 5.373405441 seconds)
    (260/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.28250049 seconds)
    (261/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.144634815 seconds)
    (262/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.028482394 seconds)
    (263/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.435072993 seconds)
    (264/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.263000169 seconds)
    (265/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.552011598 seconds)
    (266/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.062102708 seconds)
    (267/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.301623924 seconds)
    (268/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.019341822 seconds)
    (269/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.132047605 seconds)
    (270/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.645215287 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.941105937 seconds)
    (272/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.21212048 seconds)
    (273/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.102742131 seconds)
    (274/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.57386846 seconds)
    (275/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.657982173 seconds)
    (276/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.250996553 seconds)
    (277/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.298841925 seconds)
    (278/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.01243207 seconds)
    (279/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 8.317017746 seconds)
    (280/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.353126318 seconds)
    (281/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.013934789 seconds)
    (282/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 6.160131943 seconds)
    (283/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.009751748 seconds)
    (284/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.163277765 seconds)
    (285/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.22231419 seconds)
    (286/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.028662617 seconds)
    (287/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.367944174 seconds)
    (288/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.402510547 seconds)
    (289/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 7.01514076 seconds)
    (290/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 4.710304827 seconds)
    (291/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.014543088 seconds)
    (292/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.442028768 seconds)
    (293/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.013190152 seconds)
    (294/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.253402668 seconds)
    (295/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.044673002 seconds)
    (296/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.623188667 seconds)
    (297/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.559903094 seconds)
    (298/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.351821317 seconds)
    (299/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.125610949 seconds)
    (300/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.307339716 seconds)
    (301/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.496630737 seconds)
    (302/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.739455227 seconds)
    (303/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.492831804 seconds)
    (304/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.961943149 seconds)
    (305/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.896460547 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.286957607 seconds)
    (307/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.350583576 seconds)
    (308/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.015181571 seconds)
    (309/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.143514226 seconds)
    (310/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 8.511069736 seconds)
    (311/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.609865092 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.427667846 seconds)
    (313/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 7.019495337 seconds)
    (314/341) benchmarking ("map", abs, BigInt, false)...
    done (took 9.241946455 seconds)
    (315/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 3.66942985 seconds)
    (316/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.047509742 seconds)
    (317/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.024916783 seconds)
    (318/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.332488135 seconds)
    (319/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.36721365 seconds)
    (320/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.438323607 seconds)
    (321/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.245167345 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 4.270750433 seconds)
    (323/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.131013666 seconds)
    (324/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.160033772 seconds)
    (325/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.209029548 seconds)
    (326/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.310952519 seconds)
    (327/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.179532459 seconds)
    (328/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.144879239 seconds)
    (329/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.023795144 seconds)
    (330/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.159543953 seconds)
    (331/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.155773653 seconds)
    (332/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.370186298 seconds)
    (333/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.025886111 seconds)
    (334/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.958210132 seconds)
    (335/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.17325491 seconds)
    (336/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.494741289 seconds)
    (337/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.336337435 seconds)
    (338/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.249786392 seconds)
    (339/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.018443079 seconds)
    (340/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 4.822026898 seconds)
    (341/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.022120015 seconds)
  done (took 1185.573834854 seconds)
done (took 1187.630200299 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.031158452 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.011931385 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.594583755 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.029547594 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.011852749 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.014174163 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.564806659 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.049784489 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.021170086 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.565246598 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.029061161 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.01198267 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.020587259 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.03018209 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.018163705 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.022658777 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.018693654 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.037401838 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.029917716 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.017356108 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.070495738 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.016441508 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.01220479 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.059423796 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.013015825 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.021482057 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.033921177 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.070701762 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.069858512 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.014393744 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.019790486 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.411329334 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.079736461 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.019171872 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.020088276 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.019967176 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.019035081 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.020993214 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.038091054 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.020679202 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.013795703 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.024340341 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.018446376 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.016303998 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.013443977 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.012898888 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.015845059 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.109576087 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.022854668 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.421919567 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.090206445 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.039654105 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.072025831 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.016777296 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.016183056 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.01727028 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.071488067 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.020081263 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.01910215 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.422789602 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.147522736 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.02428886 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.424009837 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.094561941 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.025810262 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.02453583 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.013902921 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.039883677 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.410587841 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.623376301 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.053882346 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.038354718 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.015970921 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.017027193 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.026391931 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.569457344 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.034560285 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.699459904 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.048796285 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.024697537 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.020646965 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.018365308 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.016932154 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.02465541 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.034669407 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.015209184 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.020074868 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.020853022 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.027133006 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.41340973 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.074693109 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.597532767 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.030385268 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.037361845 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.035567053 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.701805003 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.053177356 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.035470395 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.019083089 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.413903326 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.072402068 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.038013217 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.018805702 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.024261918 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.112405297 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.042033339 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.038198051 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.016520602 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.039895741 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.02384779 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.017596222 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.028758119 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.04001441 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.035105481 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.025738185 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.017116009 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.027215767 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.022777672 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.037325238 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.02713442 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.024593607 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.024633267 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.018015971 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.064909335 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.036516991 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.025823733 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.113448169 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.022819606 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.113904507 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.026830467 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.025431374 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.017130842 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.430773929 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.077891026 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.042247532 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.023004699 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.042692942 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.042144634 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.025739976 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.021065323 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.026122574 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.020683279 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.06595753 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.018862456 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.043071978 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.066289912 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.029480048 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.025362585 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.037970138 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.036000332 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.04177928 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.024189938 seconds)
done (took 318.914732192 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.073662383 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 4.396102669 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.089754298 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.019801337 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.095427061 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.080860596 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.019845029 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.020098436 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.019716221 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.455773368 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.019606632 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.021434418 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 4.366757993 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.019818237 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.075136677 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.020291144 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.020407692 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.290541545 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.021238679 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.083618804 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 3.036744007 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.021218681 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.02051188 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.469225505 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.019454807 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 3.02827011 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.083274522 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.020778572 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.296569469 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 3.022229011 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 3.03479928 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.297226419 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.082936721 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.023340958 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.023304778 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.021957748 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.096834644 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.0277365 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.075113025 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.079076794 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.091435247 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.029688391 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 3.025487189 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 3.052142864 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.028512426 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.025545392 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.023430204 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.028846711 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.021331554 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.024798637 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.293885234 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.024724573 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.024245799 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.024251495 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.023484945 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.027414005 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.02436775 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.025159615 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.084611434 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.025964982 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.077226456 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.467824972 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.459109022 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.024282674 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 3.036857221 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.024551427 seconds)
  done (took 160.960816732 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.107834788 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.125229326 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.107004458 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.029946078 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.088939422 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.114997208 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.030502758 seconds)
  done (took 16.556886568 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.031343778 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.024807737 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.050629987 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.055883099 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.024912012 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.190915502 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.037720758 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.025527521 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.056416612 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.033372299 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.385275292 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.056399876 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.025306263 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 3.038736326 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.037984434 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.056290584 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.027542317 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.02591048 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.132722658 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.099769619 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.026680361 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.026365393 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.062795039 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.037843297 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.025365442 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.034047295 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.026544232 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.032975132 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.02519371 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.02590508 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.025933166 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.040939139 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.026295908 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 3.026950417 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.025866355 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.02680561 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.026914208 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.02663124 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.026219734 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 2.413767345 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.026338331 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.025912524 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.026765258 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.026557369 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.026257999 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.052287553 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.027211971 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.026529826 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.026700659 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.027042344 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.064803073 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.026703184 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.026263777 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.02700367 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.062627081 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.029414693 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.02847877 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.027160527 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.027286016 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.027938219 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.027303681 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.102352064 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.058918679 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.026684836 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.058596108 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.070343491 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.029907873 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.027033108 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.027775741 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.055139545 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.027394874 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.05642465 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.027871674 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.118416961 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.027816211 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.205192236 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.053146688 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.031818518 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.03194643 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.992639326 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.036279384 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.027642692 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.03022449 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.036043309 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.029531936 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.028439343 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.028789114 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.029420828 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.036431719 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.028328088 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.079178001 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.028713406 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.029525049 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.122863256 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.028496259 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.136329089 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.060870529 seconds)
  done (took 203.8563475 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.034710176 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.032517763 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.04649175 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.031190791 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.030017483 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.036183066 seconds)
  done (took 14.167737811 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.032506991 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.034267928 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.029457171 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.029737647 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.03034531 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.031581631 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.030538441 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.03281073 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.035955862 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.0300966 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.031120963 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.030731762 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.030438707 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.031386432 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.029796088 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.030128266 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.030060627 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.029990946 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.030436293 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.030311754 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 2.229539274 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.031365546 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.031542957 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.040777383 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.036597956 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.030593947 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.040680612 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.031038854 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.030451516 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.039203524 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.036510875 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.031347912 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.041192345 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.039700616 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.03614111 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.041157323 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.036790539 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.032815573 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.03204521 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.032674534 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.033653413 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.032632008 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.031826899 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.032536178 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.03465268 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.046245269 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.038694623 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.042525865 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.032647378 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.03361699 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.033545861 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.03245404 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.033737866 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.033666176 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.044467996 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.039553378 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.0383349 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.031836314 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.03397365 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.042274535 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.036976509 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.033703429 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.035501617 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.037557807 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.034057672 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.034036325 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.042778205 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.038509477 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.033197009 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.032818374 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.034609452 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.032600348 seconds)
  done (took 148.632763949 seconds)
done (took 546.114165158 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.426886154 seconds)
  done (took 9.386769756 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.104989076 seconds)
  done (took 9.217945669 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 12.446340392 seconds)
  done (took 14.416697071 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.04054445 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.078976727 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.046136871 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.036836229 seconds)
  done (took 30.188984646 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.175790754 seconds)
  done (took 9.140531753 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.052706932 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.033892874 seconds)
  done (took 16.137280249 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.070805789 seconds)
  done (took 9.043404892 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.310685978 seconds)
  done (took 9.285580436 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.044001601 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.044525294 seconds)
  done (took 16.086362989 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.037090128 seconds)
  done (took 8.999227243 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.574358518 seconds)
  done (took 10.618479536 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.054179265 seconds)
  done (took 9.048287931 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.059827291 seconds)
  done (took 9.021528018 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.774715825 seconds)
  done (took 9.735356569 seconds)
done (took 172.278428218 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.047306289 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.032585146 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.032796916 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.032547064 seconds)
  done (took 30.10576285 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.073245073 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.073331001 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.075912086 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.091844713 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.062399911 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.063222413 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.073406429 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.073884775 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.062342971 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.079184221 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.073308545 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.078874057 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.09243381 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.076021925 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.075998622 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.079305525 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.080723336 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.074384624 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.063395903 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.076666846 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.079117312 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.0797094 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.034057126 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.034979795 seconds)
  done (took 51.692811332 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.242995549 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.122952688 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.187051417 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.0806938 seconds)
  done (took 10.595508734 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.034008454 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.108791227 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.093097874 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.092776149 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.093473478 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.200395962 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.094159519 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.232306641 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.181721012 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.171852268 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.039422295 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.050692909 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.05234297 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.09362282 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.200671293 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.034877735 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.034974711 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.171520619 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.109735601 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.280210501 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.035202992 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.09560086 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.094322867 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.095014171 seconds)
  done (took 52.653854305 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.035539201 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.04803429 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.047744784 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.036295276 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.03552705 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.036631912 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.047441894 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.037922647 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.065027609 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.039149094 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.035778167 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.037226921 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.03712425 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.03681735 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.037005383 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.053866038 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.053844815 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.036925693 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.039421557 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.048616263 seconds)
  done (took 42.810429901 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.033891176 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 7.034472894 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.239876377 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.198131878 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.034419155 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.036526979 seconds)
  done (took 34.54127983 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.05204073 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.057558496 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.044895734 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 2.074751464 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.104265096 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 2.04972603 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.124977768 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.253454759 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 2.049068979 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.120813929 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.064640893 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 2.046043652 seconds)
  done (took 27.011376022 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.034337621 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.03818913 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.038226114 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.052240128 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.050168517 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.046524985 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.049070484 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.035513629 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.052720464 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.06114357 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.047236991 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.05482258 seconds)
  done (took 46.525804854 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.224408474 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.174043669 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.362081095 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.715268927 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.548124862 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.102861237 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.422851885 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.548239919 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 5.067925302 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.101967851 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.526836973 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.06913646 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.543696171 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.988435668 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.037157683 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.319492411 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.039761056 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.514115787 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.461024507 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.109849369 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.042537604 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.037915742 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.040167483 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.557736843 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.35236211 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.039404178 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.207094615 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.062063034 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.038087132 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.253745576 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.075009246 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.056401791 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.202672673 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.334210141 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.549164583 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.128848207 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.123548409 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 6.030001518 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.092755662 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.076104851 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.051271074 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.05577367 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.039809074 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.055036017 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.287679778 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.040294439 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.044911699 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.627871564 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.993207523 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.159023934 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20912899 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.713516204 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.08035159 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.989357275 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17374457 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.320758652 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.046627036 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.038968763 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.114687277 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 6.063215688 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.215618572 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.12411351 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.225747727 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.993047583 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.515765715 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.221616623 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.041806515 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.046545547 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.297051169 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.310808606 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.125632324 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.148813004 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.776304538 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.041507682 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.04372713 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.072122675 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.155189662 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.040505156 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.765499201 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.54929834 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.993789605 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.14549948 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.658543493 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.048064073 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.039648241 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.052540545 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.88767749 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.992100863 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.124633701 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 6.078386515 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.375122809 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.042024937 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.041619237 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.07089029 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.043442426 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.996042146 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.65843413 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.118661099 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.991438206 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.593420795 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.093563279 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.993489347 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.082835555 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.046734141 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.434515498 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.086266499 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.783036447 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.663935566 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.327921979 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.614006267 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.048955109 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.857679606 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.128764474 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.124193972 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.042006868 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.788020065 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.036154637 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.13721006 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.214794352 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.042214952 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.993414628 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.056909996 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.207234877 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.095417273 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.069086097 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.043235419 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.050839215 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.043404073 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.047717122 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.299310997 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.067236835 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.539507677 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.153682748 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.044195755 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.986488914 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.051864936 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.520688772 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.180395627 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.089390691 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.463504267 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.635558889 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.590431975 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.00722996 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.88700327 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.490165373 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.145314545 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.127912865 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.652145449 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.200080194 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.127672731 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.043093268 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.200217262 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.056486555 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.047778333 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.043858438 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.705457982 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.010924994 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.098070683 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.04429436 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.001199143 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.032632358 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.256800123 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.689108521 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.082594941 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.052425609 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.135448081 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.181768184 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.046215834 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.995340829 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.401213587 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.263515005 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.545809328 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.432104462 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.67969082 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.133606714 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.058134739 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.21419624 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.133840044 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.682117942 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.252177727 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.376977976 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 6.541639218 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 5.042796033 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.046919842 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.100650002 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.444869967 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.070391895 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.804847173 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 6.05102825 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.018636087 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.083506005 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.032982295 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.997738964 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.05462357 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.498238061 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 5.050575277 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.599224899 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.311984252 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.070923531 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.047803971 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.047476699 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.056153338 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.291924728 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.165669189 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121959047 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.125388728 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.001456357 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.716858538 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.095404237 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.051268258 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.047707205 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 6.436521082 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.254053777 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.067934953 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.047617824 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134130808 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.135516427 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.653423051 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.053466521 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.053253547 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.513724082 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.057238639 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.565251901 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.058162777 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.190697816 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.08658114 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 6.080553068 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.903224547 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.568223323 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.151211701 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.130732868 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.048962367 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.052109408 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.31457151 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.062676867 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.313654772 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.527726221 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.652584621 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.733440437 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.148954367 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.674960855 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.071909669 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.050914754 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.689115832 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.086780223 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.052974784 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.215225488 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.649594455 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.159661436 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 7.206196144 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.133869573 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.051370243 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.498857092 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.637850721 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.138519493 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.981011026 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.158607473 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.051654722 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.212847064 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.804697526 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.053537971 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.051633242 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.06130267 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.238316859 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.216396934 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.438254317 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.548314122 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.387424301 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.003735309 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.059719202 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.145526576 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.333416225 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.052244222 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.088480626 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.697882724 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.700545016 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.825258746 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.575648309 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.260976996 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.198388252 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.499299992 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.150641486 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.066637766 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.979464175 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.241518901 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.014378521 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183335862 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 5.004071753 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.086406124 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.354576835 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.077861642 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.503159859 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.088188123 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.564729955 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.415818316 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.083603077 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.187891517 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.085370748 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.053258996 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.121304503 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.053833415 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.024686314 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.181406464 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.055186775 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 6.507016845 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.10410737 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.100041889 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.06158758 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.609024943 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.08407244 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.058448038 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.593538376 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.083910355 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184039034 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.139519166 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.104988232 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.084531858 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.174435133 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.138437343 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.625183771 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.506648699 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.139363647 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.624308954 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118404053 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.794729948 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.056096921 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.223419839 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.062797634 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.705379279 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.110734117 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.449397928 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.059358173 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.24300981 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.365634271 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.149262298 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.063583274 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.010062041 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.626620144 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.181868839 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.535293882 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.06022397 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.811780249 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.525151195 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.084236251 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.565666327 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.035057119 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.058788914 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 6.443636525 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.733918961 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.804089013 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.098931954 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.059338212 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.175416124 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.242733393 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.140509263 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.72715843 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.069138007 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.083992116 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.225082456 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181000757 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.998861348 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.582955672 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.805753022 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.3241588 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.074160313 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.22188404 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.176858541 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.229681871 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.101439294 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.134239361 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.797335201 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.509989139 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.157959943 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.008462123 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.057825093 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.312358973 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.527629476 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.141819141 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.329660091 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.480855971 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.107726452 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.101998084 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.224922228 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.552162219 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.764528618 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.747861487 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.383534007 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.5602924 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.512641277 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.058665398 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.798866511 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.22755704 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.174358504 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.451191321 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.950558363 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.44225816 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.345730162 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.066113618 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.009926078 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.225528901 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.062632851 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.130728251 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.776070151 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.343251185 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 6.109467468 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.801449211 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.651129504 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.053734792 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.088143564 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.093079756 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.084420811 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.081161854 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.060073515 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.585523086 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.447741857 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.075427229 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.015934333 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.810743188 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.010406877 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.228737312 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.070314748 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.10624514 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.890863777 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.113424721 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.210304091 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.579335695 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.130411313 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.106274652 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.011421004 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.10707925 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 5.041005337 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.70846694 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.834387216 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085779493 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.064155864 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.224886345 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.043593331 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.106865683 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.068332236 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.374178328 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.507252089 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.513189474 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.224692261 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.41601211 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.339233866 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.969714575 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.159001641 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.28916153 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.012087535 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.061360494 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.137118365 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.110878234 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.13746081 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.061450443 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.066763058 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.300927117 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.165302952 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.214462639 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.137736532 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.160938153 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.086805887 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.164697848 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.200074395 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.064049917 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.069322443 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.062433399 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.323317384 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.098495143 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.019216467 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.231683267 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.143807893 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.449031212 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.140188895 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.948182875 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.07043045 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.969738644 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.212483818 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.568690505 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.064505285 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.850973361 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.130926267 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.063983182 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.51647737 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.700870818 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.22836929 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.317633706 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.089803288 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.070828916 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.116084562 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.067976567 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.063359678 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.670249553 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.429267683 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.064265288 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.518221727 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.136015752 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.072941075 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.826217091 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.542458181 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.064832119 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.113951149 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.05244912 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.539904394 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.319969836 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.07345629 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.202440379 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.069973112 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 5.0179156 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.065288316 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.071792415 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.571101673 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.069983246 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.593162921 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.189020042 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.20113995 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.069500963 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.066199384 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.065923183 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.233876426 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.656575087 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.090102116 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.330868272 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.229558953 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.07361155 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.590298604 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.747353272 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.20394942 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.118002411 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.075863538 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.42731424 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.782233978 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.079143545 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.607505743 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.204949199 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.068610267 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.293294512 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.315504383 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.067696101 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.252842247 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.066565652 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.409602694 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.340636248 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.632076203 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.167624978 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.13470806 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.194941124 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.074995664 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.589989006 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.517828117 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.150311845 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.066078576 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.080332493 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.066351252 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.832303576 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.656403002 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.242389381 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.185403088 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.97516387 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.580584589 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.069782355 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 5.020792655 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.068604072 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.094762699 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.071254467 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.018846 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.831712166 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.891082373 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.257320911 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.387219452 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.018347915 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.233388158 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.058274295 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 5.022388105 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.54652138 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.068560498 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.377192459 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.02109936 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.072558266 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.023161136 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.147906773 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.202214797 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.444447166 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.06973417 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.024507189 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.077928862 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.071002236 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.066963968 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.155617751 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.06873437 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.312861379 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.51978436 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.27299607 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.22488311 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.937388089 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.118342171 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.036076321 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.112781124 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.885110382 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.614646634 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.150006529 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.256864295 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.834154113 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.045925772 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.590237431 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.093443782 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.774371539 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.075916143 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.072125227 seconds)
  done (took 2398.839325681 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.123080586 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.176659584 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.119334261 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.14754457 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.082630513 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.096082001 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.136636146 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.097598985 seconds)
  done (took 58.976419236 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 7.067895796 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.040119591 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 2.084440726 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 7.070756625 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 7.072879623 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 2.08063887 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.286444617 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.11009192 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 7.071494694 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 2.081232609 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 7.072785215 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 2.079509954 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 7.072871015 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 7.076907679 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 2.090744286 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 2.325018561 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.097486387 seconds)
  done (took 80.822956239 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.086252024 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.691449616 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.081054172 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 7.31222961 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.086212941 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.288908947 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.074400718 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.081687067 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.729602141 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 8.360815092 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.161937028 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.086667545 seconds)
  done (took 90.073773245 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 2.073429434 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 2.072614043 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.07257579 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 2.072765523 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 2.072182951 seconds)
  done (took 12.362810169 seconds)
done (took 2939.094726989 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.296912814 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 2.220231489 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 2.175400111 seconds)
  done (took 6.39482698 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.131314067 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.194995229 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.262760824 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.209680033 seconds)
  done (took 10.810428073 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.356752788 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.54648559 seconds)
  done (took 6.903001013 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.510219562 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.078463105 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.607971837 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.073423237 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.07682123 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.078281007 seconds)
  done (took 23.245414765 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.073202761 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.073393327 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.073071311 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.073471149 seconds)
  done (took 10.30124629 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.074280769 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.046000132 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.078399049 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.094686183 seconds)
  done (took 22.293568586 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.295846942 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.322277929 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.810344054 seconds)
  done (took 9.428795383 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.883782847 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.447602965 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.865382172 seconds)
  done (took 10.19723865 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.017896796 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.000200757 seconds)
  done (took 8.018875877 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.221117738 seconds)
  done (took 4.221756519 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.548968591 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.551690953 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.913334424 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.93042899 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 3.070366837 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.384544295 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.437354942 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.466243282 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.74414298 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.580382337 seconds)
  done (took 28.628483344 seconds)
done (took 156.927867674 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.913094389 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.466104727 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.24751475 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.742224467 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.172800006 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.255123032 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.136272979 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.512576564 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.644904273 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.643261847 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.750727384 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.170510001 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.132495758 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.466866971 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.13605273 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.43437255 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.481749138 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.887996967 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.290733316 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.83346005 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.144518828 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.323961097 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.434981342 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.330122483 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.488093165 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.199839738 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 4.161937416 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.442463533 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.546894158 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 4.165453635 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.200691682 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 5.094741944 seconds)
  done (took 181.854686358 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.075985197 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.079676816 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.081701517 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.079438523 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.876165137 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.080516549 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.079220054 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.078528756 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.904740728 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.905119255 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.080321356 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.872833721 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.083018627 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.079565525 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.081778402 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.079796887 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.996263216 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.080656343 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.080733029 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.079968098 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.081360016 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.734497216 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.080599316 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.734187004 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.989305215 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.082145723 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.080683552 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.080624465 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.080931954 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.081163091 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.081201371 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.081043278 seconds)
  done (took 218.959845471 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.078504633 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.080681165 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.082955796 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.081381654 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.081316673 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.082589121 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.081899668 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.080959092 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.080645111 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.080801535 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.082405598 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.080371306 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.0843284 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.081408892 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.085057205 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.081004513 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.082512373 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.082440791 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.081787405 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.080406488 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.083242601 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.08145159 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.084393034 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.083967692 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.08482246 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.086179716 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.082032832 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.082183396 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.082096394 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.083238561 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.081194815 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.082418758 seconds)
  done (took 228.647878505 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.378202423 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.079807815 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.080450037 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.456067241 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.081970779 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.080879729 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.435942853 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.377988508 seconds)
  done (took 21.990424115 seconds)
done (took 653.461953311 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.743220322 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.955958802 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.257230099 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.109988937 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.701242661 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.177443746 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.101402732 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.200804851 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.871366987 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.222205824 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.593361828 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.114388358 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.993012876 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.142461977 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.254944392 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.183060289 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.506560026 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.810619191 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.284432587 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.912026664 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.355793814 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.115234529 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.224390992 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.928297937 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.612832058 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.148098082 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.208191389 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.520589294 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.111346844 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.388639162 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.126066337 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.489607345 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.131874511 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.111240853 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.177303074 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.159680608 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.417951055 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.125647357 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.244666844 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.892983685 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.909408174 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.733935538 seconds)
  done (took 112.278101882 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.091549099 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.089166048 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.089503935 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.089488391 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.089623866 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.089555509 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.089139589 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.088863062 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.089314203 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.089509791 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.091611695 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.092689854 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.091461566 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.091960671 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.091971483 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.091336786 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.091972727 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.091955271 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.092384622 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.091848124 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.09157229 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.091981179 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.084907295 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.092345089 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.092037221 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.092184364 seconds)
  done (took 56.392297363 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.084196893 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.273681737 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.436633694 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.123487724 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.083118439 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.086219968 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.12340279 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.093783461 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.085876469 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.085460633 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.219804648 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.089491155 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.099725243 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.428744612 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.122013316 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.083586188 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.083469413 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.084982676 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.277815592 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.107025408 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.126920975 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.094239755 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.12574393 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.105840106 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.086612309 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.085231429 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.087958757 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.565139552 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.098863822 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.218148565 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.13554941 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.132800773 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.505148678 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.444397684 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.165868146 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.094384891 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.084658167 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.26798272 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.101898874 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.08559795 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.125449762 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.097148339 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.432117104 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.680612728 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.107680722 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.084196773 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.560868098 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.281292942 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.142717472 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.102021413 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.440269966 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.125792192 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.085544542 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.086355906 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.127818407 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.09829246 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.085899065 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.386003425 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.102746372 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.125916003 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.095873104 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.086783953 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.286066701 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.100195131 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.272499462 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.100117379 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.093566387 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.087560744 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.433580088 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.126083141 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.664525603 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.110594207 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.087037154 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.222029793 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.28122838 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.601965847 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.107190897 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.289065807 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.529409672 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.139969078 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.100779739 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.547046735 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.142109852 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.100851873 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.086035624 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.085684864 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.086080226 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.134093187 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.126279104 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.595515812 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.676811528 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.414668973 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.141113499 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.104683713 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.088701601 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.391491863 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.099540442 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.087284735 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.428283572 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.701213639 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.110645129 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.096220654 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.650392486 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.111783258 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.127433504 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.103614124 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.442205135 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.1281662 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.13575465 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.087448804 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.095910855 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.092005892 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.128740743 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.10215199 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.086885815 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.642779045 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.297707197 seconds)
  done (took 260.272895984 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.092184004 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.090027321 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.08795374 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.08981424 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.086817266 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.089114437 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.086257467 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.08571581 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.08866859 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.08623927 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.086318289 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.086695945 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.090206306 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.0939634 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.118548472 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.089639798 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.702373891 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.088314733 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.087342587 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.092467996 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.919944339 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.096254198 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.087407089 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.092746236 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.089135024 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.088195395 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.094577426 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.114960359 seconds)
  done (took 174.026162797 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.089430735 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.158096063 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.105322903 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.158167772 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.105112257 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.08925122 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.120821606 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.114309248 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.099346489 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.089560048 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.089828168 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.129171966 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.100608319 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.192982687 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.135198197 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.135868357 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.200087469 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.102089266 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.090201973 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.090321235 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.159232023 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.112690967 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.13059365 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.170391001 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.105169748 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.159077086 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.113215765 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.090752014 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.090053628 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.216463121 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.118406515 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.1306409 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.141443311 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.119039163 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.224236998 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.221648177 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.205603413 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.134280565 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.098473495 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.090437451 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.091198557 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.098982537 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.161641961 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.106522338 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.09338756 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.226822658 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.11839323 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.091897688 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.116805217 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.091728018 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.108306537 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.116598883 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.14027436 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.230328485 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.159081546 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.121752965 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.12360425 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.114582284 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.092988954 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.195475519 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.111039227 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.218291407 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.121406598 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.100504989 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.093568645 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.096889275 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.163129598 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.139810531 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.203829706 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.105207077 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.196121009 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.175280777 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.10772635 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.093688046 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.093703186 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.163784721 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.211701719 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.174536777 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.178673778 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.143086632 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.113174474 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.093143438 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.101895463 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.133389658 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.104984415 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.219285199 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.224305725 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.104246487 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.09383362 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.093733642 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.094794828 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.128225324 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.176523351 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.14924023 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.21824226 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.144950942 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.14548168 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.105238033 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.111542525 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.102367173 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.137789006 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.105861253 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.111850267 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.460750117 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.148798422 seconds)
  done (took 226.365043052 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.55077069 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.159162499 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.18217877 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.363013581 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.522540046 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.380746551 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.15236523 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.164155404 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.154164697 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.297865501 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.212623841 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.214493246 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.150211319 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.126281605 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.155941381 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.156431742 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.190578102 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.508694884 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.272122925 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.108951878 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.155607644 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.432319725 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.475131614 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.538823755 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.198528096 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.648018164 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.808487032 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.267499913 seconds)
  done (took 69.585106145 seconds)
done (took 900.918777648 seconds)
SAVING RESULT...
DONE!
