cset: moving following pidspec: 63077
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "problem"... done (took 2.795977907 seconds)
loading group "array"... done (took 3.094811843 seconds)
loading group "misc"... done (took 0.401339072 seconds)
loading group "sort"... done (took 0.241711694 seconds)
loading group "frontend"... done (took 0.004016864 seconds)
loading group "shootout"... done (took 0.708187237 seconds)
loading group "sparse"... done (took 0.469726219 seconds)
loading group "scalar"... done (took 1.006232953 seconds)
loading group "dates"... done (took 0.136677935 seconds)
loading group "alloc"... done (took 0.016718197 seconds)
loading group "find"... done (took 1.181585668 seconds)
loading group "io"... done (took 1.155635646 seconds)
loading group "tuple"... done (took 0.742560856 seconds)
loading group "string"... done (took 0.204066195 seconds)
loading group "random"... done (took 2.162149854 seconds)
loading group "micro"... done (took 0.046596624 seconds)
loading group "broadcast"... done (took 0.558129936 seconds)
loading group "parallel"... done (took 0.019385919 seconds)
loading group "linalg"... done (took 2.708277128 seconds)
loading group "collection"... done (took 5.714360447 seconds)
loading group "simd"... done (took 0.884989948 seconds)
loading group "inference"... done (took 2.479045176 seconds)
loading group "union"... done (took 2.82982589 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.133584941 seconds)
  done (took 1.842001632 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 0.139478397 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.247130562 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 0.606745115 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.154215624 seconds)
  done (took 3.837823518 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.68569255 seconds)
  done (took 1.386717654 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.980707089 seconds)
  done (took 1.69116958 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.984139974 seconds)
  done (took 1.686026287 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.231634343 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.196419976 seconds)
  done (took 1.125928856 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.942262349 seconds)
  done (took 5.648462292 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.531262537 seconds)
  done (took 2.240438882 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.050719764 seconds)
  done (took 0.785321715 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 0.228619352 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 0.221958654 seconds)
  done (took 1.194662171 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.23008874 seconds)
  done (took 0.949820817 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.424408741 seconds)
  done (took 1.140942643 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.322890316 seconds)
  done (took 1.043573602 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.385289172 seconds)
  done (took 2.105310763 seconds)
done (took 27.44684668 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.271660776 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123778319 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117113551 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.161730729 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000302279 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.162556318 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.092774653 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.318806836 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128208348 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.18398985 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.034075323 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.475781798 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02691025 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.253384082 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047930124 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029903168 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.183222306 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020424581 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.442560168 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.02175954 seconds)
    (21/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057631379 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.020534823 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.195586058 seconds)
    (24/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5919e-5 seconds)
    (25/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.358357143 seconds)
    (26/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027923116 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038442015 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042020334 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031414195 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064475409 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022480661 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.369120981 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058536521 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.596800902 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064270643 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.084712841 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091663667 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.120859019 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.030817944 seconds)
    (40/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023629281 seconds)
    (41/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.02355746 seconds)
    (42/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031117063 seconds)
    (43/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074407826 seconds)
    (44/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.029200419 seconds)
    (45/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 6.6423e-5 seconds)
    (46/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.068945964 seconds)
    (47/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067317189 seconds)
    (48/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.01847902 seconds)
    (49/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03243494 seconds)
    (50/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.020804729 seconds)
    (51/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.078202486 seconds)
    (52/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033936714 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056440309 seconds)
    (54/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020909403 seconds)
    (55/608) benchmarking "ind2sub"...
    done (took 0.082517233 seconds)
    (56/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.044417174 seconds)
    (57/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.0407461 seconds)
    (58/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.134373044 seconds)
    (59/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086530068 seconds)
    (60/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.026412068 seconds)
    (61/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015712506 seconds)
    (62/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047992672 seconds)
    (63/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037324576 seconds)
    (64/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059511558 seconds)
    (65/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0288649 seconds)
    (66/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057390792 seconds)
    (67/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.076598892 seconds)
    (68/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.033850465 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.01595024 seconds)
    (70/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083421582 seconds)
    (71/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023778756 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042337424 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.040421636 seconds)
    (74/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.07622619 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.04759088 seconds)
    (76/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041273088 seconds)
    (77/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042346918 seconds)
    (78/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040619148 seconds)
    (79/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.065581446 seconds)
    (80/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057164584 seconds)
    (81/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076947787 seconds)
    (82/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083714121 seconds)
    (83/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052226014 seconds)
    (84/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093640676 seconds)
    (85/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065453176 seconds)
    (86/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061290793 seconds)
    (87/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.042154285 seconds)
    (88/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.035352463 seconds)
    (89/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.17649547 seconds)
    (90/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.017602253 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.047626552 seconds)
    (92/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057007291 seconds)
    (93/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.016756235 seconds)
    (94/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000304951 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028637703 seconds)
    (96/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018991468 seconds)
    (97/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030980421 seconds)
    (98/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057716096 seconds)
    (99/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.1368e-5 seconds)
    (100/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040360906 seconds)
    (101/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042493978 seconds)
    (102/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.050927426 seconds)
    (103/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.010918124 seconds)
    (104/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047228009 seconds)
    (105/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000502002 seconds)
    (106/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.033384563 seconds)
    (107/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012102712 seconds)
    (108/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.1197e-5 seconds)
    (109/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059349579 seconds)
    (110/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.01293285 seconds)
    (111/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.000104539 seconds)
    (112/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023725633 seconds)
    (113/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02831238 seconds)
    (114/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.012529362 seconds)
    (115/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067273425 seconds)
    (116/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.023205714 seconds)
    (117/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052512069 seconds)
    (118/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070766787 seconds)
    (119/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016117875 seconds)
    (120/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.018779274 seconds)
    (121/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087674259 seconds)
    (122/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058432393 seconds)
    (123/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.024781239 seconds)
    (124/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030916099 seconds)
    (125/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04702125 seconds)
    (126/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.019049451 seconds)
    (127/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.01318055 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.6164e-5 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.081225772 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.014851101 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023986867 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.051671591 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.043278597 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.015423886 seconds)
    (135/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.016439114 seconds)
    (136/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053320388 seconds)
    (137/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.02308463 seconds)
    (138/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.030980145 seconds)
    (139/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.0048e-5 seconds)
    (140/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029217446 seconds)
    (141/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039205774 seconds)
    (142/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.010788017 seconds)
    (143/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.068363142 seconds)
    (144/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074497482 seconds)
    (145/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06004838 seconds)
    (146/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.011850198 seconds)
    (147/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.062990937 seconds)
    (148/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.073907662 seconds)
    (149/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.036478485 seconds)
    (150/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035630099 seconds)
    (151/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089296925 seconds)
    (152/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034829391 seconds)
    (153/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049063849 seconds)
    (154/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014338014 seconds)
    (155/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.051680683 seconds)
    (156/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.011376111 seconds)
    (157/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.030815528 seconds)
    (158/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032564411 seconds)
    (159/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050644721 seconds)
    (160/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.033870338 seconds)
    (161/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.9676e-5 seconds)
    (162/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049619464 seconds)
    (163/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027271468 seconds)
    (164/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.067473088 seconds)
    (165/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.06636263 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047277583 seconds)
    (167/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.019033628 seconds)
    (168/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026249233 seconds)
    (169/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048672133 seconds)
    (170/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036377923 seconds)
    (171/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043445806 seconds)
    (172/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044570538 seconds)
    (173/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071973597 seconds)
    (174/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.016607536 seconds)
    (175/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050490951 seconds)
    (176/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.019987133 seconds)
    (177/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021895115 seconds)
    (178/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.028267323 seconds)
    (179/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.036379824 seconds)
    (180/608) benchmarking "5d"...
    done (took 0.209697547 seconds)
    (181/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020747257 seconds)
    (182/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.022055367 seconds)
    (183/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.041290735 seconds)
    (184/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.8466e-5 seconds)
    (185/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038105086 seconds)
    (186/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021953324 seconds)
    (187/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006806902 seconds)
    (188/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.016645052 seconds)
    (189/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000221803 seconds)
    (190/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.010740164 seconds)
    (191/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033161373 seconds)
    (192/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.0138e-5 seconds)
    (193/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027768008 seconds)
    (194/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035435417 seconds)
    (195/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.07405693 seconds)
    (196/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.024662098 seconds)
    (197/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052800077 seconds)
    (198/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.00030562 seconds)
    (199/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.090780067 seconds)
    (200/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025237467 seconds)
    (201/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082433961 seconds)
    (202/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.035370231 seconds)
    (203/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049822667 seconds)
    (204/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5618e-5 seconds)
    (205/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.025440055 seconds)
    (206/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060704882 seconds)
    (207/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052387134 seconds)
    (208/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.04885804 seconds)
    (209/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.542196042 seconds)
    (210/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.084024612 seconds)
    (211/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062866885 seconds)
    (212/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.943e-5 seconds)
    (213/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027638506 seconds)
    (214/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.02860231 seconds)
    (215/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032615932 seconds)
    (216/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.00033631 seconds)
    (217/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.043922629 seconds)
    (218/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047034466 seconds)
    (219/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006933736 seconds)
    (220/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.036896965 seconds)
    (221/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.049744176 seconds)
    (222/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017500499 seconds)
    (223/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02367707 seconds)
    (224/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.3118e-5 seconds)
    (225/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.1641e-5 seconds)
    (226/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.020262966 seconds)
    (227/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02970524 seconds)
    (228/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006779257 seconds)
    (229/608) benchmarking "6d"...
    done (took 0.198555597 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025233775 seconds)
    (231/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.8004e-5 seconds)
    (232/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026171416 seconds)
    (233/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087032715 seconds)
    (234/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.025077337 seconds)
    (235/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.019063942 seconds)
    (236/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.084535142 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.02052844 seconds)
    (238/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027447567 seconds)
    (239/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060615721 seconds)
    (240/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071360926 seconds)
    (241/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017894425 seconds)
    (242/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.068479545 seconds)
    (243/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.014655359 seconds)
    (244/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046818943 seconds)
    (245/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086202979 seconds)
    (246/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047151897 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.8406e-5 seconds)
    (248/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039117307 seconds)
    (249/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034289514 seconds)
    (250/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042388279 seconds)
    (251/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032590496 seconds)
    (252/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047490224 seconds)
    (253/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.1437e-5 seconds)
    (254/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000103134 seconds)
    (255/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.028122222 seconds)
    (256/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046002708 seconds)
    (257/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043553184 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 9.765e-5 seconds)
    (259/608) benchmarking "3d"...
    done (took 0.059219236 seconds)
    (260/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061271503 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035871227 seconds)
    (262/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039167929 seconds)
    (263/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.023272896 seconds)
    (264/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046847658 seconds)
    (265/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.022014596 seconds)
    (266/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.064788771 seconds)
    (267/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04567297 seconds)
    (268/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022037842 seconds)
    (269/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000201004 seconds)
    (270/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.016525138 seconds)
    (271/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089355245 seconds)
    (272/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055697348 seconds)
    (273/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000166144 seconds)
    (274/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166905152 seconds)
    (275/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.018750642 seconds)
    (276/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054716927 seconds)
    (277/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.020680933 seconds)
    (278/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.097471965 seconds)
    (279/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.033230463 seconds)
    (280/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067962066 seconds)
    (281/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.021607705 seconds)
    (282/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.039714795 seconds)
    (283/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.037676345 seconds)
    (284/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.039132198 seconds)
    (285/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000124056 seconds)
    (286/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033716418 seconds)
    (287/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03975717 seconds)
    (288/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060903382 seconds)
    (289/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.030722176 seconds)
    (290/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.036443167 seconds)
    (291/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021192226 seconds)
    (292/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03411876 seconds)
    (293/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.015874386 seconds)
    (294/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000155855 seconds)
    (295/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.027534807 seconds)
    (296/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.051999987 seconds)
    (297/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014094329 seconds)
    (298/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015187154 seconds)
    (299/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.061495482 seconds)
    (300/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.014826173 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.000101151 seconds)
    (302/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.027383982 seconds)
    (303/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.026134598 seconds)
    (304/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036698842 seconds)
    (305/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000438139 seconds)
    (306/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.054574612 seconds)
    (307/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.016528169 seconds)
    (308/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.0198e-5 seconds)
    (309/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.3293e-5 seconds)
    (310/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04226018 seconds)
    (311/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.052002009 seconds)
    (312/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0209673 seconds)
    (313/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05214231 seconds)
    (314/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06185158 seconds)
    (315/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029827282 seconds)
    (316/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020730788 seconds)
    (317/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016197625 seconds)
    (318/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.070626729 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.02604033 seconds)
    (320/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02673821 seconds)
    (321/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074294923 seconds)
    (322/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.06544585 seconds)
    (323/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.030411889 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.022628027 seconds)
    (325/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021630558 seconds)
    (326/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019362223 seconds)
    (327/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057068048 seconds)
    (328/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054423268 seconds)
    (329/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034010397 seconds)
    (330/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055456426 seconds)
    (331/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.051051978 seconds)
    (332/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.051930515 seconds)
    (333/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.019340714 seconds)
    (334/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016070866 seconds)
    (335/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000115275 seconds)
    (336/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021842328 seconds)
    (337/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071786099 seconds)
    (338/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.060856826 seconds)
    (339/608) benchmarking "sub2ind"...
    done (took 0.294725656 seconds)
    (340/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 4.059e-5 seconds)
    (341/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000144316 seconds)
    (342/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02883947 seconds)
    (343/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070909844 seconds)
    (344/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.011905613 seconds)
    (345/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031429783 seconds)
    (346/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000102051 seconds)
    (347/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051830329 seconds)
    (348/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000304592 seconds)
    (349/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.073951251 seconds)
    (350/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 6.8844e-5 seconds)
    (351/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091482797 seconds)
    (352/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000486064 seconds)
    (353/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059595806 seconds)
    (354/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076414911 seconds)
    (355/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029951657 seconds)
    (356/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020225199 seconds)
    (357/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.015794665 seconds)
    (358/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.4003e-5 seconds)
    (359/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.061355803 seconds)
    (360/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043307187 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.166451251 seconds)
    (362/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052351134 seconds)
    (363/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 7.5137e-5 seconds)
    (364/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.044114977 seconds)
    (365/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.015801639 seconds)
    (366/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.3306e-5 seconds)
    (367/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.02410157 seconds)
    (368/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000487432 seconds)
    (369/608) benchmarking ("sum", "3darray")...
    done (took 0.048127508 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029223819 seconds)
    (371/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028491572 seconds)
    (372/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.053169032 seconds)
    (373/608) benchmarking "7d"...
    done (took 0.253172048 seconds)
    (374/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05184029 seconds)
    (375/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037143779 seconds)
    (376/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 6.3928e-5 seconds)
    (377/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023201528 seconds)
    (378/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.017817986 seconds)
    (379/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034448624 seconds)
    (380/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034608303 seconds)
    (381/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.062644135 seconds)
    (382/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.017496791 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.020810139 seconds)
    (384/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026020057 seconds)
    (385/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024788223 seconds)
    (386/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054524567 seconds)
    (387/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066303626 seconds)
    (388/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034050996 seconds)
    (389/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050801036 seconds)
    (390/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065227223 seconds)
    (391/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076807342 seconds)
    (392/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.035281882 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.047010024 seconds)
    (394/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024141492 seconds)
    (395/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048370394 seconds)
    (396/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.172701274 seconds)
    (397/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.017372122 seconds)
    (398/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061572831 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022450897 seconds)
    (400/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.013393782 seconds)
    (401/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060266209 seconds)
    (402/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042232943 seconds)
    (403/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000498151 seconds)
    (404/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053759942 seconds)
    (405/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043502146 seconds)
    (406/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062799104 seconds)
    (407/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075291639 seconds)
    (408/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064541156 seconds)
    (409/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.016026817 seconds)
    (410/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024010109 seconds)
    (411/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.049537562 seconds)
    (412/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.2098e-5 seconds)
    (413/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041192334 seconds)
    (414/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046088815 seconds)
    (415/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000123538 seconds)
    (416/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000298482 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02661587 seconds)
    (418/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 4.4062e-5 seconds)
    (419/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000108927 seconds)
    (420/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.01871013 seconds)
    (421/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014505473 seconds)
    (422/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.013756016 seconds)
    (423/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000154402 seconds)
    (424/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028753336 seconds)
    (425/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032298778 seconds)
    (426/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.015962361 seconds)
    (427/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.061188617 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019190078 seconds)
    (429/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.1421e-5 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064764891 seconds)
    (431/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023473478 seconds)
    (432/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.015927416 seconds)
    (433/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017244213 seconds)
    (434/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025011973 seconds)
    (435/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083885597 seconds)
    (436/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035130888 seconds)
    (437/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.013942766 seconds)
    (438/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034335626 seconds)
    (439/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057603013 seconds)
    (440/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069915056 seconds)
    (441/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02692104 seconds)
    (442/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.016789405 seconds)
    (443/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.027214208 seconds)
    (444/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.0857e-5 seconds)
    (445/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.053165282 seconds)
    (446/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.010269488 seconds)
    (447/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.7815e-5 seconds)
    (448/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019107995 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037958261 seconds)
    (450/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021518712 seconds)
    (451/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.2042e-5 seconds)
    (452/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03357359 seconds)
    (453/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062485154 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015033629 seconds)
    (455/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055494433 seconds)
    (456/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067143623 seconds)
    (457/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044447016 seconds)
    (458/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.079839209 seconds)
    (459/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.3129e-5 seconds)
    (460/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029944413 seconds)
    (461/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.063467117 seconds)
    (462/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04671464 seconds)
    (463/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.02590429 seconds)
    (464/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.024737072 seconds)
    (465/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.022209162 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013812043 seconds)
    (467/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2023e-5 seconds)
    (468/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070204169 seconds)
    (469/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.011753764 seconds)
    (470/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031052029 seconds)
    (471/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041620135 seconds)
    (472/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03251822 seconds)
    (473/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040726645 seconds)
    (474/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.015903959 seconds)
    (475/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073806558 seconds)
    (476/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023349169 seconds)
    (477/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.022189529 seconds)
    (478/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041901318 seconds)
    (479/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074059121 seconds)
    (480/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.025738141 seconds)
    (481/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050705476 seconds)
    (482/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.0475017 seconds)
    (483/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027549602 seconds)
    (484/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067412674 seconds)
    (485/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.167450568 seconds)
    (486/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.064116518 seconds)
    (487/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04520718 seconds)
    (488/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033263956 seconds)
    (489/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.015675344 seconds)
    (490/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.061019532 seconds)
    (491/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063844139 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039516575 seconds)
    (493/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050384292 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0657882 seconds)
    (495/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011260971 seconds)
    (496/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041565785 seconds)
    (497/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.456e-5 seconds)
    (498/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02770169 seconds)
    (499/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000562094 seconds)
    (500/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071303272 seconds)
    (501/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.059852659 seconds)
    (502/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038207069 seconds)
    (503/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.029785613 seconds)
    (504/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.071167999 seconds)
    (505/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048296118 seconds)
    (506/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016660481 seconds)
    (507/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.082772313 seconds)
    (508/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.9956e-5 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011130975 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.041162331 seconds)
    (511/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049863895 seconds)
    (512/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047782355 seconds)
    (513/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.451529977 seconds)
    (514/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.1227e-5 seconds)
    (515/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020136864 seconds)
    (516/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027617065 seconds)
    (517/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000324389 seconds)
    (518/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064634737 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039473105 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.050350685 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.012659931 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.085158879 seconds)
    (523/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039544349 seconds)
    (524/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029106743 seconds)
    (525/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021443151 seconds)
    (526/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030299058 seconds)
    (527/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058423274 seconds)
    (528/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058373069 seconds)
    (529/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.0834e-5 seconds)
    (530/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054221936 seconds)
    (531/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.03941727 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.026377466 seconds)
    (533/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.01597344 seconds)
    (534/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02194735 seconds)
    (535/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.028477005 seconds)
    (536/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.00011633 seconds)
    (537/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072234952 seconds)
    (538/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049061836 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04681488 seconds)
    (540/608) benchmarking "2d"...
    done (took 0.046591095 seconds)
    (541/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033372959 seconds)
    (542/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.7129e-5 seconds)
    (543/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022073301 seconds)
    (544/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.014351049 seconds)
    (545/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.8711e-5 seconds)
    (546/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065107047 seconds)
    (547/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.046989252 seconds)
    (548/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032518489 seconds)
    (549/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.2357e-5 seconds)
    (550/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029411077 seconds)
    (551/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.059485888 seconds)
    (552/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024126499 seconds)
    (553/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.051011789 seconds)
    (554/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028411437 seconds)
    (555/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02738491 seconds)
    (556/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.060991762 seconds)
    (557/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.2701e-5 seconds)
    (558/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017918318 seconds)
    (559/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065222853 seconds)
    (560/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.2386e-5 seconds)
    (561/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.064420814 seconds)
    (562/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046196431 seconds)
    (563/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03003407 seconds)
    (564/608) benchmarking "4d"...
    done (took 0.0946608 seconds)
    (565/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 3.7869e-5 seconds)
    (566/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012754092 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.1955e-5 seconds)
    (568/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04701588 seconds)
    (569/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085456433 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054895606 seconds)
    (571/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.053298221 seconds)
    (572/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041081898 seconds)
    (573/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068233713 seconds)
    (574/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02469764 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023490817 seconds)
    (576/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053304465 seconds)
    (577/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032467405 seconds)
    (578/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034738331 seconds)
    (579/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.015627729 seconds)
    (580/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.031161198 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064977342 seconds)
    (582/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.014165882 seconds)
    (583/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064537022 seconds)
    (584/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062872032 seconds)
    (585/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035344212 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000113554 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041902434 seconds)
    (588/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 7.2264e-5 seconds)
    (589/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06669923 seconds)
    (590/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.019636089 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041942359 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067385086 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.06128086 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025944246 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02830484 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077922541 seconds)
    (597/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.016271138 seconds)
    (598/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027407449 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025312415 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062951295 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029138448 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000344475 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047416223 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.181645141 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.048477012 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000105922 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024392932 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.063653825 seconds)
  done (took 29.039282185 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 0.061998078 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 0.230652503 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 0.038429621 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.05696505 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 0.058473072 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 0.052275643 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 0.032684571 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 0.192968902 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.063654994 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.052329428 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 0.039416915 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.067664833 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 0.039533348 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.051820737 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.048581678 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 0.034435915 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 0.039696635 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.051554018 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 0.098836101 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 0.066391988 seconds)
  done (took 2.209825964 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 0.200480006 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.0291472 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 0.093017798 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 0.07421499 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 0.075015332 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 0.525995802 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.057305093 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 4.867e-5 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 0.286279287 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.056020676 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 2.2013e-5 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.006216837 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 1.2649e-5 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 0.006771261 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 1.4929e-5 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 0.008345109 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 1.2484e-5 seconds)
  done (took 2.283128139 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.172967217 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.344957686 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.107137638 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.193965542 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.131576939 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.305621157 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.486759599 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.288338957 seconds)
  done (took 2.874745222 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 0.132670946 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 0.034035344 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.113930081 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.099216098 seconds)
  done (took 1.218063748 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.056218178 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024233515 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 0.03415431 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.024259754 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.044120245 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024060879 seconds)
  done (took 1.046444823 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.045350085 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 0.052211736 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.176795535 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.035426237 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.03461036 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 0.039093587 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 0.055189689 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 0.045694998 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.036714265 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.040012169 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 0.031868778 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.025995366 seconds)
  done (took 1.487131239 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.058277191 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.045515889 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.050877053 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.044160205 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.04024715 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.039236524 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.051133973 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.045274364 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.038807684 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.024632767 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 0.030070263 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.047608922 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031421756 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031357159 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.03034619 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.034204914 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.03582899 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.019847771 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.045993185 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.041972449 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.043831266 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.045356901 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.035235841 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.046389968 seconds)
  done (took 1.801250976 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 0.150399986 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 0.014314728 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 0.010620937 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.014494674 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.014877919 seconds)
  done (took 1.049173823 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 1.144680729 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.513569837 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.327402932 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.142346426 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009271627 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.005551199 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.562117987 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.639010625 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.326729892 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.748633345 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.600524086 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.095134622 seconds)
  done (took 26.956331949 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.051906318 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 0.048386477 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.052226111 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 0.046063466 seconds)
  done (took 1.041652788 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 0.0311266 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.4288e-5 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 0.04224803 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 1.1572e-5 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 1.0805e-5 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.043792596 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.038180003 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 1.9854e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.5526e-5 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 1.2406e-5 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 1.5068e-5 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 1.8986e-5 seconds)
  done (took 1.003788256 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.034993874 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.044810057 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.033507443 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.040453561 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.046438403 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.02775362 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026075388 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.040041191 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.040497592 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.037828986 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.02230101 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.045045004 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.040311156 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 0.029106396 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038079698 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.022481589 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.033203509 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.040489333 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 0.026741123 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.033783172 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023325473 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.044688427 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038102192 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.022606765 seconds)
  done (took 1.681848069 seconds)
done (took 74.41632934 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.09212372 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.036662185 seconds)
  done (took 0.976988983 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.205958019 seconds)
  (3/15) benchmarking "20517"...
  done (took 0.060141126 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 0.06096473 seconds)
    (2/2) benchmarking "conditional"...
    done (took 0.054440207 seconds)
  done (took 0.969984058 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.033756993 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.035048501 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.039767668 seconds)
  done (took 0.962342714 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.046121749 seconds)
  done (took 0.906173264 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.14815098 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.244444065 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.094917885 seconds)
  done (took 1.341166819 seconds)
  (8/15) benchmarking "18129"...
  done (took 0.167759886 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 0.056463627 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.054892329 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.022400971 seconds)
    (4/4) benchmarking "Float32"...
    done (took 0.03212093 seconds)
  done (took 1.025202042 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.044613511 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 0.030146293 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 0.020011151 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 0.019405462 seconds)
  done (took 0.970182366 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 0.0613553 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.063144691 seconds)
    (3/3) benchmarking "Float32"...
    done (took 0.059262119 seconds)
  done (took 1.041719441 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 0.06076656 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.021873259 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 0.022198356 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.021654995 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 0.022140424 seconds)
  done (took 0.949086459 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.174883254 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 0.082960851 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.037426098 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.093322326 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.097700287 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 3.0083e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.0307e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.6812e-5 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 1.4628e-5 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.074248645 seconds)
  done (took 1.415472314 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.121812222 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 3.3033e-5 seconds)
  done (took 0.986285923 seconds)
done (took 12.891853378 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.10545506 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.123958458 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.633908684 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.585047515 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.036072636 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.024556243 seconds)
    (7/17) benchmarking "all same"...
    done (took 0.029957804 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.3921e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.023775528 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.2874e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.915613967 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.028303083 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.575787386 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.026758822 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.081466218 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.030303721 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.3995e-5 seconds)
  done (took 12.074561943 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 3.3448e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000918535 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000368859 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.000928133 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.000569863 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.1935e-5 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.7295e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000351575 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.00096419 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000372986 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000363783 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.000579071 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.022921187 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000534603 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000415039 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.000551711 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000380938 seconds)
  done (took 0.971451352 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.6396e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 9.312e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.001e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 7.487e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 6.129e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.702e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.215e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.035e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.7609e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.231e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 7.278e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.202e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.148e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.154e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.1677e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.49e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.503e-6 seconds)
  done (took 0.91145445 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.4904e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 3.4124e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 9.357e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 1.809e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 1.569e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.225e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.787e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.625e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.6401e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.601e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 9.561e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 1.3411e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.000223921 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.0029e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.4496e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 1.1739e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 9.103e-6 seconds)
  done (took 0.911149851 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 0.037247076 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.034324962 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.701494048 seconds)
    (4/13) benchmarking "Float16"...
    done (took 0.971637774 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 9.017166576 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.037235194 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.189161821 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 0.030633165 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.396926439 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 0.033628577 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 7.718500465 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.282695497 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.22989691 seconds)
  done (took 21.591726639 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.2437997 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.210375741 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.13079244 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.062081341 seconds)
  done (took 1.586864317 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.147780046 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.107123993 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.072475232 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.060637487 seconds)
  done (took 1.324772343 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.104659388 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.049465568 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.066035337 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.054602962 seconds)
  done (took 1.213593152 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 0.038048068 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 0.055501423 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 0.037139016 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 0.02851544 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 0.034112362 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 0.054577537 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 0.024759185 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 0.024306684 seconds)
  done (took 1.236255002 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.7213e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000154975 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.5739e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 9.698e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.3437e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.066e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 1.0212e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.7714e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 8.3521e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.7533e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.6224e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.8485e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.001889785 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.2396e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.6256e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.0199e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 7.7657e-5 seconds)
  done (took 0.942137108 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.5563e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.0095e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.734e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 9.587e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 7.246e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.988e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.627e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.285e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.121e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.703e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 8.154e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.86e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.0091e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.544e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.2688e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.156e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.361e-6 seconds)
  done (took 0.931841014 seconds)
done (took 44.556571842 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.027114447 seconds)
done (took 0.958241667 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 0.090769879 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.074110285 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 0.055269116 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 0.118022654 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.065987279 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 0.112202717 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 0.089831103 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 0.486565447 seconds)
  (9/12) benchmarking "nbody"...
  done (took 0.073228776 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 0.072132679 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 0.395974978 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 2.839687832 seconds)
done (took 5.412444106 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.109712481 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.211126045 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.046607785 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.080494292 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.3274e-5 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.040833056 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.081272868 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.038130191 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 0.107789732 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.054719994 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.088765181 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.052123172 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 2.3136e-5 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.7645e-5 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.053448109 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082071091 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000732476 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.105620539 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.03603379 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 6.2712e-5 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.9644e-5 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000709789 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000702812 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.4783e-5 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.033228064 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000737022 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.0492e-5 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000824504 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.059289615 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.0757e-5 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000136557 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.0594e-5 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.3167e-5 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.2455e-5 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 1.2578e-5 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001096536 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.4669e-5 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.065253677 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 5.2939e-5 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000806828 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012426846 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.5964e-5 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000985549 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.7076e-5 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000136306 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.001002453 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.8404e-5 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.4656e-5 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.8299e-5 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000725581 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.8223e-5 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.4757e-5 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.9904e-5 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 9.28e-6 seconds)
  done (took 2.376589895 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 0.545249368 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 0.441961522 seconds)
  done (took 1.937980078 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 0.059606412 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.111451308 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 0.157449712 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.128074029 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.111382083 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 4.1864e-5 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 8.548e-6 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 1.1346e-5 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 0.208269644 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.5191e-5 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 1.7645e-5 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.1997e-5 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 8.825e-6 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.8648e-5 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.3615e-5 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 6.927e-6 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 1.5603e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.8027e-5 seconds)
  done (took 1.740897371 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.461833967 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.165817008 seconds)
    (3/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.306543945 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076647236 seconds)
    (5/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075959294 seconds)
    (6/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.128610723 seconds)
    (7/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000161467 seconds)
    (8/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073399237 seconds)
    (9/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.2404e-5 seconds)
    (10/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.078802484 seconds)
    (11/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.073113947 seconds)
    (12/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.0421e-5 seconds)
    (13/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.033986424 seconds)
    (14/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.6005e-5 seconds)
    (15/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.027829832 seconds)
    (16/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002563081 seconds)
    (17/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.13117726 seconds)
    (18/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.002747416 seconds)
    (19/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.091959047 seconds)
    (20/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076238779 seconds)
    (21/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 7.4067e-5 seconds)
    (22/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.033228753 seconds)
    (23/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.032939664 seconds)
    (24/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.068711857 seconds)
    (25/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 7.1422e-5 seconds)
    (26/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002211138 seconds)
    (27/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002071237 seconds)
    (28/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076016883 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.00195606 seconds)
    (30/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.035375599 seconds)
    (31/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.0001094 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001263586 seconds)
    (33/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.035054635 seconds)
    (34/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.030187383 seconds)
    (35/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.000727252 seconds)
    (36/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031571377 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.003175079 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.002063968 seconds)
    (39/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035158295 seconds)
    (40/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003457681 seconds)
    (41/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.002068414 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000110828 seconds)
    (43/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033332053 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000225531 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000133752 seconds)
    (46/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000178175 seconds)
    (47/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 8.9204e-5 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.8472e-5 seconds)
    (49/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.034946996 seconds)
    (50/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.3237e-5 seconds)
    (51/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.3562e-5 seconds)
    (52/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.2353e-5 seconds)
    (53/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002623986 seconds)
    (54/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000131938 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.7583e-5 seconds)
    (56/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.003820942 seconds)
    (57/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000114154 seconds)
    (58/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.002287583 seconds)
    (59/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.032745777 seconds)
    (60/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.1935e-5 seconds)
    (61/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000196079 seconds)
    (62/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004647943 seconds)
    (63/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.5197e-5 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000107054 seconds)
    (65/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.006205044 seconds)
    (66/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001626816 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 8.1122e-5 seconds)
    (68/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002991482 seconds)
    (69/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.00060066 seconds)
    (70/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002388803 seconds)
    (71/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000208015 seconds)
    (72/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.0001594 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002454437 seconds)
    (74/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.012324172 seconds)
    (75/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000175238 seconds)
    (76/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000106236 seconds)
    (77/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002907416 seconds)
    (78/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031827001 seconds)
    (79/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000101639 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.6625e-5 seconds)
    (81/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.041452862 seconds)
    (82/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000225245 seconds)
    (83/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003534647 seconds)
    (84/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.011599978 seconds)
    (85/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.002217844 seconds)
    (86/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000201158 seconds)
    (87/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006234537 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009115442 seconds)
    (89/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000200665 seconds)
    (90/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000117112 seconds)
    (91/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000194431 seconds)
    (92/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.007808535 seconds)
    (93/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000109608 seconds)
    (94/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.016162697 seconds)
    (95/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.002573749 seconds)
    (96/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 6.4357e-5 seconds)
    (97/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000211486 seconds)
    (98/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001379356 seconds)
    (99/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.2698e-5 seconds)
    (100/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.004317456 seconds)
    (101/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.001404744 seconds)
    (102/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008892046 seconds)
    (103/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.001323851 seconds)
    (104/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.5166e-5 seconds)
    (105/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001983447 seconds)
    (106/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000141374 seconds)
    (107/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000123213 seconds)
    (108/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.007618316 seconds)
    (109/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.002332066 seconds)
    (110/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 8.0526e-5 seconds)
    (111/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.04916438 seconds)
    (112/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000154223 seconds)
    (113/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.1428e-5 seconds)
    (114/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000217982 seconds)
    (115/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.002986551 seconds)
    (116/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008264983 seconds)
    (117/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.00813399 seconds)
    (118/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001377651 seconds)
    (119/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000148702 seconds)
    (120/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008305409 seconds)
    (121/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002002246 seconds)
    (122/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011027145 seconds)
    (123/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000117805 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001452504 seconds)
    (125/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.8674e-5 seconds)
    (126/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000114992 seconds)
    (127/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000185484 seconds)
    (128/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001557501 seconds)
    (129/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007414625 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005023011 seconds)
    (131/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.00016087 seconds)
    (132/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000224948 seconds)
    (133/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013346005 seconds)
    (134/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.00235426 seconds)
    (135/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000523706 seconds)
    (136/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008073819 seconds)
    (137/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000119654 seconds)
    (138/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012602364 seconds)
    (139/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.009089888 seconds)
    (140/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000258585 seconds)
    (141/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000798305 seconds)
    (142/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000137353 seconds)
    (143/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001620639 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002550358 seconds)
    (145/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 7.0147e-5 seconds)
    (146/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.7571e-5 seconds)
    (147/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000182144 seconds)
    (148/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011700515 seconds)
    (149/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 7.8999e-5 seconds)
    (150/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.016316159 seconds)
    (151/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 9.0122e-5 seconds)
    (152/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.1358e-5 seconds)
    (153/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002428609 seconds)
    (154/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.9737e-5 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000150777 seconds)
    (156/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001443684 seconds)
    (157/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000125954 seconds)
    (158/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.1979e-5 seconds)
    (159/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.1911e-5 seconds)
    (160/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002424883 seconds)
    (161/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 4.8816e-5 seconds)
    (162/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.017395207 seconds)
    (163/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 7.9042e-5 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.9852e-5 seconds)
    (165/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001151153 seconds)
    (166/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004765491 seconds)
    (167/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.00069503 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000145958 seconds)
    (169/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.1982e-5 seconds)
    (170/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.00018959 seconds)
    (171/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.000109352 seconds)
    (172/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.000535459 seconds)
    (173/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.1303e-5 seconds)
    (174/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001731613 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.005003743 seconds)
    (176/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000174477 seconds)
    (177/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008856682 seconds)
    (178/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003419565 seconds)
    (179/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.002121548 seconds)
    (180/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000853279 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.106e-5 seconds)
    (182/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001722183 seconds)
    (183/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 5.8425e-5 seconds)
    (184/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.00021612 seconds)
    (185/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000135143 seconds)
    (186/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002612987 seconds)
    (187/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000132836 seconds)
    (188/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.6915e-5 seconds)
    (189/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001663557 seconds)
    (190/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002760623 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.006962203 seconds)
    (192/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000124254 seconds)
    (193/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 5.4249e-5 seconds)
    (194/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002581532 seconds)
    (195/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.001423511 seconds)
    (196/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000137036 seconds)
    (197/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.00017707 seconds)
    (198/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000145948 seconds)
    (199/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.001960313 seconds)
    (200/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.00047973 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014267039 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.003668755 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000746624 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.9206e-5 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002165583 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009084644 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 6.86e-5 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000113326 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002809152 seconds)
    (210/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.002829738 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000127276 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000186699 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.7276e-5 seconds)
    (214/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.019482502 seconds)
    (215/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000123504 seconds)
    (216/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000228623 seconds)
    (217/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000950998 seconds)
    (218/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.795e-5 seconds)
    (219/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007254507 seconds)
    (220/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001230198 seconds)
    (221/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000145343 seconds)
    (222/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000161859 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.4769e-5 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001380008 seconds)
  done (took 3.806077465 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.059444472 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.155272425 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.237440822 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.032238728 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000184894 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.139211636 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000171613 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.249946625 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.00011897 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.984873757 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.000102264 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.05073561 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000243662 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.469979847 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.258939706 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.217413174 seconds)
  done (took 3.809544512 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 1.839353871 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.888335909 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.260801257 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.418176648 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.138451381 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 0.442790435 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.133772452 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.110772562 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.109786158 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.100909804 seconds)
  done (took 5.420478012 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.05987929 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.189569148 seconds)
  done (took 1.223000663 seconds)
done (took 21.253746435 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020462285 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020173133 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 0.019643445 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.021775662 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 0.019169691 seconds)
    (6/49) benchmarking "13786"...
    done (took 0.036147019 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019910394 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 0.01928006 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.049026699 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020191068 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.026638266 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.032167372 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 0.020166433 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 0.018906625 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 0.019193073 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 0.018951222 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 0.019664819 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 0.019222663 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.021216026 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 0.01931851 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 0.020123889 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.020859126 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 0.020170792 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020686146 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 0.01969196 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.025375463 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 0.020120525 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 0.019722133 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.025546466 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.020890832 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.020331714 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.020305866 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 0.019183825 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 0.019309736 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 0.019693691 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 0.018834275 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.026522846 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.02042047 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.02027136 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.021333917 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 0.019983556 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020973964 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.020363391 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.020961921 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 0.019395894 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 0.018887522 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021305401 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 0.020994311 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 0.019058317 seconds)
  done (took 2.025617749 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.035142282 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.6699e-5 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.034378373 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.000173328 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.1205e-5 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.3534e-5 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.0233e-5 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 6.968e-6 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.587e-6 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.236e-6 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.4856e-5 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.797e-6 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 5.567e-6 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 6.545e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.928e-6 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 6.657e-6 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.009121305 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.9549e-5 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.3264e-5 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 7.008e-6 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 6.495e-6 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 6.178e-6 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 5.801e-6 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 5.436e-6 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 5.725e-6 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 5.076e-6 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 5.77e-6 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 5.97e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 5.665e-6 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.92e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 5.899e-6 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 5.282e-6 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.0432e-5 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.6443e-5 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 6.099e-6 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 6.423e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.745e-6 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 9.379e-6 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 6.701e-6 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 6.46e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 6.213e-6 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 7.032e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.6132e-5 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 7.183e-6 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 5.823e-6 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 6.299e-6 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 6.278e-6 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.982e-6 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.129e-6 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.084e-6 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.63e-6 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 5.921e-6 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 5.816e-6 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 6.044e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 8.685e-6 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 7.065e-6 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 7.146e-6 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.821e-6 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 6.063e-6 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 1.2874e-5 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 6.599e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 6.145e-6 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.639e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 5.944e-6 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 6.254e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 5.831e-6 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 6.333e-6 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.949e-6 seconds)
  done (took 1.147194936 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.019602479 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.0165e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.839e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.165e-6 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 6.105e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.064e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.188e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.247e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.349e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.556e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 8.572e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.103e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.256e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.14e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.389e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.346e-6 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.357e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.442e-6 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.289e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.353e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.703e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018897033 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.3104e-5 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 6.186e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.946e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.373e-6 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.758e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.651e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.506e-6 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.711e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.382e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.525e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.039e-6 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.181e-6 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.437e-6 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.934e-6 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.07e-6 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.1946e-5 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.142e-6 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.021e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.88e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.195e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0304e-5 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 6.221e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.612e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.233e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.577e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.369e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.544e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.079e-6 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.333e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.848e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.402e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.332e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.5e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.653e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.697e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.569e-6 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.818e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.512e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.322e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.598e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.162e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.36e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.511e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.194e-6 seconds)
  done (took 1.013924472 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.043524931 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026470599 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.046234492 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.041890114 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.037223913 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.049224717 seconds)
  done (took 1.224310863 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 0.021293392 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.4756e-5 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020710617 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.2085e-5 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.0062e-5 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.783e-6 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 6.569e-6 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.403e-6 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.401e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 6.009e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.262e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 6.377e-6 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 1.1005e-5 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 5.99e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 5.954e-6 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.521e-6 seconds)
  done (took 1.016838071 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019398125 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 1.4978e-5 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.949e-6 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017340569 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018707412 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 9.904e-6 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.8103e-5 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.00016459 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 7.15e-6 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 6.422e-6 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.0624e-5 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.114e-6 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.604e-6 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.382e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 1.0713e-5 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.935e-6 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.722e-6 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.424e-6 seconds)
  done (took 1.029269073 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.019267884 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.385e-5 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.018482909 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.3079e-5 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 8.009e-6 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 6.897e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.214e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 6.328e-6 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 6.242e-6 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 6.58e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 9.836e-6 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 6.768e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.312e-6 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 5.982e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.175e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.085e-6 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.848e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.334e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 1.0943e-5 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.096e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.224e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 6.19e-6 seconds)
  done (took 1.015564741 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018986069 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.0757e-5 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.018886918 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.2909e-5 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 7.114e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.821e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.92e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.885e-6 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.822e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.304e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 8.643e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.893e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.424e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.488e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.841e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.245e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.633e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.61e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.653e-6 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.494e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.518e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.311e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.257e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.65e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.618e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.708e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.722e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.04e-6 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.1642e-5 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.019e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.958e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.045e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.57e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.564e-6 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.807e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.374e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.668e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.736e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.547e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.684e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.674e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.512e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.7043e-5 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.916e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.677e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.189e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.339e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.698e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.528e-6 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.724e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.358e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.317e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.545e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.452e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.286e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.61e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.553e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.217e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.597e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.611e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.153e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.186e-6 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.526e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.319e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.453e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.48e-6 seconds)
  done (took 1.012491092 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 0.019348167 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018670842 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.4772e-5 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 7.546e-6 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 6.956e-6 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.717e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 6.565e-6 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 6.236e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.84e-6 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.593e-6 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 9.491e-6 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.442e-6 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.594e-6 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.528e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.045e-6 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.024e-6 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 1.1843e-5 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 6.445e-6 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 5.668e-6 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.295e-6 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.812e-6 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.764e-6 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 8.458e-6 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.78e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.107e-6 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.593e-6 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.623e-6 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.325e-6 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.504e-6 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.157e-6 seconds)
  done (took 1.013556823 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.019600166 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.3764e-5 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020384136 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.1197e-5 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.646e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.136e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 5.127e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.274e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 5.476e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.196e-6 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 8.992e-6 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.615e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.213e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.328e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.426e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.142e-6 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.356e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.081e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 5.226e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 1.1522e-5 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.615e-6 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.337e-6 seconds)
  done (took 1.015145682 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 0.019309233 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.4051e-5 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 6.537e-6 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018578205 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.1164e-5 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.423e-6 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.602e-6 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.837e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.679e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 4.935e-6 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 1.607e-5 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.627e-6 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 5.273e-6 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.386e-6 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.913e-6 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 5.265e-6 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.599e-6 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.442e-6 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 4.828e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.274e-6 seconds)
  done (took 1.012053854 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.021346438 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018768676 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 9.32e-6 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 9.754e-6 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.204e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.782e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 5.388e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 5.716e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 4.874e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.238e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 9.85e-6 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.338e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 4.948e-6 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.073e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.979e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 4.939e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.128e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.1e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 1.195e-5 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.41e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.077e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.035e-6 seconds)
  done (took 1.018197856 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019440217 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 9.243e-6 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.737e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.548e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.139e-6 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.076e-6 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.225e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.096e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.974e-6 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.766e-6 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 8.422e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.266e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.25e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 4.952e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.135e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.64e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 4.855e-6 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.46e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.014e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.217e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 4.988e-6 seconds)
  done (took 0.993913985 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 0.019081857 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019172112 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020638809 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020020386 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015860493 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019526397 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015811618 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.023684206 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.01545277 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019227536 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 0.018795007 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 0.018838813 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 0.019658609 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 0.023056927 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015876035 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.019863249 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.01971219 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.021771388 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.019863611 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019958566 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.019981698 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 0.01556448 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.019352164 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.01957763 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.020181397 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 0.020222018 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 0.020539354 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015547388 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015492345 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019219975 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 0.019096619 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019134408 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.020651763 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 0.019351955 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 0.019544214 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.028394514 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 0.020369527 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015538883 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015587688 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020379446 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019613216 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020045089 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 0.018843686 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.0156542 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.019814274 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019081038 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 0.018989917 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015481092 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015516899 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019791879 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015567057 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.019330043 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015648001 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 0.018979843 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 0.019175872 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015567899 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 0.015504017 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 0.01914071 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015436594 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019275385 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015633961 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015579062 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019547745 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 0.015538025 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 0.018963298 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.015537449 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019364366 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019145571 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 0.01920667 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 0.019062366 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022338631 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020225585 seconds)
  done (took 2.322969621 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.01993932 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019671433 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.4662e-5 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.939e-6 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.908e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 6.321e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 6.495e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 6.323e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 6.042e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.88e-6 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 9.517e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 6.052e-6 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.221e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.912e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.267e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.896e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.36e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.279e-6 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.804e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.336e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 6.025e-6 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 5.691e-6 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.401e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.421e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 6.201e-6 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.845e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.84e-6 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.963e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.987e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 7.063e-6 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.719e-6 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.782e-6 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.693e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 6.458e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.504e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.73e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.318e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.559e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.764e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.858e-6 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.248e-6 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.328e-6 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.6139e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 6.666e-6 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 6.054e-6 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 6.171e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.642e-6 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.729e-6 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.679e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.809e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.406e-6 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.904e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 5.383e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 6.029e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.617e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 6.027e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.811e-6 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 6.195e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.901e-6 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.254e-6 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.663e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.16e-6 seconds)
  done (took 1.01997191 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 0.019330789 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.017305683 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017366489 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01882043 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017238762 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.1204e-5 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 6.3056e-5 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 7.265e-6 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 7.351e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.753e-6 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017169216 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 1.4534e-5 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.8698e-5 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.3712e-5 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 9.565e-6 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 7.134e-6 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 6.0034e-5 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.952e-6 seconds)
  done (took 1.085128484 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 0.019203769 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018702084 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.2401e-5 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.416e-6 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 5.78e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 5.606e-6 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.568e-6 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.597e-6 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.583e-6 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.301e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.4513e-5 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 5.795e-6 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 5.439e-6 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.355e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.001e-6 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.132e-6 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 5.459e-6 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.282e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.347e-6 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.824e-6 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 5.561e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.127e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 5.305e-6 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.043e-6 seconds)
  done (took 1.016331386 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.051838648 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.0468e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 6.294e-6 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 4.941e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.281e-6 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.167e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.354e-6 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.132e-6 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.32e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.124e-6 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 8.64e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.971e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 4.848e-6 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 4.866e-6 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 4.901e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.967e-6 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.194e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 8.269e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.273e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.237e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.4e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.254e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 4.944e-6 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 4.917e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.204e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.118e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.02e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 4.949e-6 seconds)
  done (took 1.029476128 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.01889351 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 0.019068199 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.66e-5 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.7182e-5 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 6.278e-6 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 5.915e-6 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 6.188e-6 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 5.7e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.906e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.646e-6 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.0252e-5 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.898e-6 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.773e-6 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.482e-6 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 5.438e-6 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.581e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.621e-6 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.573e-6 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.281e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.704e-6 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.664e-6 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.504e-6 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 6.746e-6 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 6.457e-6 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.823e-6 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.415e-6 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.468e-6 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.639e-6 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.612e-6 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 6.008e-6 seconds)
  done (took 1.015938227 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.020710615 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.018618171 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.024663053 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.1838e-5 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 5.977e-6 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.019994941 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 9.329e-6 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019126312 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022303717 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.02218571 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.023759854 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.7455e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019104606 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.4244e-5 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.0586e-5 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.020852514 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.1423e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 9.608e-6 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 9.588e-6 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 8.583e-6 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 8.449e-6 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 6.426e-6 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 6.056e-6 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.0262e-5 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 6.272e-6 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 5.865e-6 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 6.183e-6 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 5.889e-6 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 5.586e-6 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 7.866e-6 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 7.556e-6 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 6.047e-6 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 6.82e-6 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 5.808e-6 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 6.091e-6 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.921e-6 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 5.667e-6 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 6.228e-6 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 6.18e-6 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 5.649e-6 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020455565 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.2155e-5 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.7889e-5 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 9.902e-6 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 6.894e-6 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 7.06e-6 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.020567615 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 9.114e-6 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 8.834e-6 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 5.745e-6 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.0274e-5 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 7.974e-6 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 5.526e-6 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 6.89e-6 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 5.205e-6 seconds)
  done (took 1.230887389 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019207685 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 1.6796e-5 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.683e-6 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018496344 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.017e-5 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.8507e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 6.726e-6 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 6.418e-6 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 5.837e-6 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 6.248e-6 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 9.443e-6 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.489e-6 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.526e-6 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017266088 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.0882e-5 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 1.2228e-5 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.965e-6 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 5.4901e-5 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.29e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.297e-6 seconds)
  done (took 1.033397405 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019142212 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.566e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.02077095 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.2535e-5 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 7.368e-6 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 6.857e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.691e-6 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.06e-6 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.336e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 6.319e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 9.474e-6 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.551e-6 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.131e-6 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.76e-6 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.92e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.911e-6 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 1.2331e-5 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.916e-6 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.901e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.602e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.039e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.616e-6 seconds)
  done (took 1.018366265 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 0.018905084 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.018908942 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.4391e-5 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 7.104e-6 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 1.2312e-5 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 6.755e-6 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.491e-6 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 6.627e-6 seconds)
  done (took 1.01682139 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020481671 seconds)
    (2/2) benchmarking "in"...
    done (took 0.019863503 seconds)
  done (took 1.017487418 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.032008764 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.021060402 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.019167073 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.023206605 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.024316098 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.02419518 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.019833984 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027547168 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021068837 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.021784988 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020986928 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020526215 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.0241335 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.020554054 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.021998895 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021865742 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.02034652 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.021053237 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.022637565 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020951191 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020844532 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.022502129 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020648786 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020119737 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026701638 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.020973939 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021315632 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.019773417 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02247484 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020115129 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020659375 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025922539 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.020487839 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019874413 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.01992286 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.021528376 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.021397078 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.021181714 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.021602462 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.019751621 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019512264 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.02098762 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.02355717 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020050847 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004335405 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.023590105 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.020179931 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019634353 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.019933584 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.022690759 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.026770343 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.021791588 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.02194433 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.020890882 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.021003815 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.019747463 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020796969 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021644628 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.020455267 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.021919844 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.026118607 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.02664694 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021360431 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020143274 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.021136878 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.0262972 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.021706815 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020103793 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019428715 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.02106247 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024108442 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.02198305 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.022434466 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022171716 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020345261 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.021567021 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026956164 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.02023808 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022669192 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020357816 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.020514057 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.02078505 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.020027732 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.023550191 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.021053968 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026515932 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020977623 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.022445958 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.020605896 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021135352 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020765864 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.026549714 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.021847568 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.022873741 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.021939406 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.022331427 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019651723 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.01916085 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.019718998 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.019767806 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.018963439 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021227687 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026608427 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020624854 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.019915617 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021210119 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028204234 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.022492085 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003214993 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.021510517 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.02224136 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021216028 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021198323 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026441405 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.021278505 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.025861978 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.023223029 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020144472 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.019728766 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.020392624 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003423178 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019273296 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020040595 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020132583 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.021267162 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.022459207 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021135469 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019160991 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.02087231 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.021337307 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.019733836 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020283697 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020783819 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.020061456 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020106682 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.020151159 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.021778566 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.021001504 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.020623962 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.020447407 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022609271 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.022519923 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020067958 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.020534848 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021915482 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023246579 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.02085707 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.021777038 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021959322 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.019150657 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.021248561 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022050493 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019606217 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020133515 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.020721 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.021742288 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.02182226 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.021637768 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.019536092 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021231195 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019516243 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019232216 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.028067795 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019636477 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021512401 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.021719279 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.02097756 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003080054 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.002753386 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.020537833 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022391848 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.020677447 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020546145 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020094566 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020116181 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021131116 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021860447 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020352216 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.020794387 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022254231 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.020607838 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019435646 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.019909081 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022260737 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.018936114 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.020808552 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.021784677 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.022160029 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004225271 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.022269156 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.018729219 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021286151 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.019887685 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.021960247 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020486876 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020412373 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019063529 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021719185 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025815426 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020302569 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021792008 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.021218238 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.01985033 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02028734 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.020726776 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021398804 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.021144727 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.021142589 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.01953012 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02284965 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018862722 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.021674416 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019427308 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020713338 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.02060061 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020055669 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020205762 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.021241341 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020095077 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027743182 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.021409762 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.020171145 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026131141 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.025735597 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019193375 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020216113 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026204868 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.020727303 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.020912045 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.02130853 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.02578396 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.021994092 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.020628668 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.020756174 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.023233981 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.024317465 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.023164576 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018804837 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021015093 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.02142336 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.022250607 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.020027074 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019082967 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.02138569 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022216318 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.02317108 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021247949 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.022074492 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020135642 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.021780241 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020453636 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.022717629 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021664615 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.019453138 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.021596203 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023517367 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021737766 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020475054 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.021637644 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.025927542 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019757805 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020404567 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020331693 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020997634 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021400301 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.021658201 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021178353 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.022221494 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.02101444 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.022905977 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020219072 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026925321 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.019910739 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020061306 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019101476 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.027063387 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020601757 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.018582751 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020122918 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.021777549 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.020982159 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.02227527 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.01897784 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021200804 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019056833 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021335599 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026176033 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.023218833 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.021855051 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.021715985 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020319862 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020616771 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.020052846 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.020257989 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021087044 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021171659 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.020929548 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019727672 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.020699386 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.02035788 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.025210981 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.019205604 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.020411722 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.019149334 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021859589 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.019404552 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.021615682 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.021446448 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.020964212 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.019941628 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.022106005 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.021613741 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.020366159 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020404346 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020288448 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.020841595 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.020025092 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.019982432 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019414877 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.018815348 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.021254335 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021059214 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020580116 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022718878 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.021869439 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.019901282 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021553801 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.01991503 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.02145362 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022682065 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.022737947 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022911163 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.022207448 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.020901784 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.020852483 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020259232 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.025144228 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021262424 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019777901 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020560318 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.020729215 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.02023003 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021301661 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019249876 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.02180929 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.008796531 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020249154 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.020788636 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.020674609 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.022436012 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021583975 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.02037029 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021479113 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020095521 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.0195381 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019656899 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.019992833 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.020129168 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019777066 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025056379 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020277979 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020026032 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.024803743 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.02193815 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021528602 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.021202767 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.019698862 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020053088 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.023062202 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026660298 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020326162 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.021286945 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.020883539 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.021519466 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020230137 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.02233201 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019670124 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021617505 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.020930715 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020559973 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019773148 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.018644193 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.021598789 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020735737 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.020379302 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.020152905 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021791322 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019019687 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.019752898 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020630353 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021458813 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.019915401 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020249145 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021192976 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.020435752 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.0196531 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020031421 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020035656 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020681348 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.025937009 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.019245063 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021144031 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.019956535 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019460873 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.019651412 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019498693 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.02217183 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018614264 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.01894887 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.02578003 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021172911 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019779273 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.01889935 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021294359 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.020775639 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.019636209 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021539617 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.022315327 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.019717578 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.020767319 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.018777285 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.022523584 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019293528 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022158292 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.019755565 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.019719141 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.020771598 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.020682158 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.018750587 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019181428 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020000855 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022458337 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.021073019 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.020777966 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.020857006 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.01993872 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.020977138 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.018973448 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.021232123 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.021694806 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.025902779 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.021921855 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.019698277 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.019836919 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.02561359 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.019859517 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.021037752 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.021352306 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020031131 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.019605997 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020126628 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.0036243 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02252321 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020026908 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.02112101 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019894972 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022114471 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022110136 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020048253 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.018495358 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020219382 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.019793303 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020230807 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02178797 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.021657439 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.02014156 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.02052984 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003058227 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.018683953 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.019722122 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.02004274 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.019869371 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020062643 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020753813 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020615393 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.01971141 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.018711451 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.01962133 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003002201 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.020051958 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021002164 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020302211 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.019917428 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.02303201 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020125972 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021105596 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.020737536 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.020591376 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025707497 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003606162 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019164496 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.02135029 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.021757563 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020062631 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.01998987 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019603903 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020520503 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.019748524 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019787266 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019291991 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020227029 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.02033583 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.019984489 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.025455979 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.020742984 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.01871545 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019986618 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.019541278 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020074791 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.020983513 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022397599 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020087375 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.020795777 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.019534137 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.019422108 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021788714 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025594097 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022008053 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.022280741 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.020209094 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.018845481 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.021962357 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.019736155 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.019894236 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.021210903 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027314502 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.01880823 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.019804342 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020110339 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020206459 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.019480425 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.021020946 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.019753816 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020042621 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.019978381 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.02129045 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020155988 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020431139 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019307887 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.024818013 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.020917001 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020131076 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.01956567 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.02116381 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.019963435 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.019933622 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021200289 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02588482 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021881554 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.018974064 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022495863 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018558927 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021205021 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008454579 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022338546 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019093709 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.021272128 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.025714047 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020407829 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.019639303 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.020815963 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.020334103 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.019760734 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.019655045 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.020670912 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019693108 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.021489789 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.01983496 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019033041 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.019949906 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.025355548 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.019658217 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.018748408 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021391317 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.02284577 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020255056 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.022497491 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022471762 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.01894029 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020676048 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.022155895 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025070069 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.022597098 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.02034561 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019433496 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.018710534 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.019751392 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.021821455 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003746724 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021078999 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.008844868 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019500967 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.019421193 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022156078 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.020659354 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.003891552 seconds)
  done (took 13.363781325 seconds)
done (took 41.688882014 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019057433 seconds)
    (2/7) benchmarking "month"...
    done (took 0.018786552 seconds)
    (3/7) benchmarking "year"...
    done (took 0.018866669 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 0.019908311 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020452326 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.020521507 seconds)
    (7/7) benchmarking "second"...
    done (took 0.020359616 seconds)
  done (took 1.14613895 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 0.021250502 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.463862476 seconds)
    (3/9) benchmarking "Date"...
    done (took 0.021230904 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.025832295 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.274255703 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.190184374 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 0.182960175 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.025739026 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.025547436 seconds)
  done (took 2.247251453 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 0.02078115 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021456671 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021056048 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022946558 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.040349416 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019852062 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022664521 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019868012 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.02085304 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026589612 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021742323 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 0.02000293 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.029504591 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.024736241 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023463484 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.021018026 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.020953658 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.02200522 seconds)
  done (took 1.443664491 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 0.04115927 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.022051742 seconds)
  done (took 1.088501412 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.019553815 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020249111 seconds)
  done (took 1.062523717 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 0.019355096 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.148943411 seconds)
  done (took 1.190159125 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 0.036668187 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020637997 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 0.020612837 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 0.020626967 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 0.030654287 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 0.033241869 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 0.032906594 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 0.020399588 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020481085 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020050649 seconds)
  done (took 1.282623268 seconds)
done (took 10.490128051 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 0.060153166 seconds)
  (2/4) benchmarking "strings"...
  done (took 0.092006138 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 0.029960079 seconds)
  (4/4) benchmarking "arrays"...
  done (took 0.051987242 seconds)
done (took 1.258220209 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.041640529 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040608776 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.04044774 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028059259 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.053706699 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.037868528 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040642895 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.6238e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040168212 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.054383751 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.2712e-5 seconds)
  done (took 1.39515101 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040793649 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040320842 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.04006354 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030067624 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.050546856 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.027096452 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040250087 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.551e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040194858 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.052676629 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.8463e-5 seconds)
  done (took 1.391222963 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.086031634 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083786931 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083879387 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.090236242 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.086822296 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.026885495 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.0233e-5 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.081498865 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082122755 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.5315e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.087801514 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.083525099 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019304044 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.085428756 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.6272e-5 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 1.0147e-5 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.1411e-5 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 7.297e-6 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.086055357 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.08277442 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.4577e-5 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.3336e-5 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.0119e-5 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.39e-5 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 6.83e-6 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 6.22e-6 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 6.263e-6 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.2474e-5 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 9.058e-6 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.081284434 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082060343 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.3804e-5 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.4449e-5 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 9.769e-6 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 8.172e-6 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 6.596e-6 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.1098e-5 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 1.0352e-5 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.1043e-5 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.0687e-5 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.0092e-5 seconds)
  done (took 2.259196391 seconds)
done (took 6.071946646 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023557216 seconds)
    (2/2) benchmarking "read"...
    done (took 0.032059591 seconds)
  done (took 1.08215335 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 0.250471417 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.884880184 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.760478335 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.910805387 seconds)
  done (took 4.59189951 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.896742864 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.105261817 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.050304237 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.042140816 seconds)
  done (took 2.164130546 seconds)
done (took 9.126805893 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.070026805 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.022610345 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.020651998 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021577764 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020247282 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021036566 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.020748903 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.02234541 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020935118 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022903148 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.02154534 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.021778989 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020242256 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022497667 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.022780194 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.02056895 seconds)
  done (took 1.453798573 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.135877293 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.22486603 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.286104101 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.038752143 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.082677721 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.027819808 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.143911805 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022640673 seconds)
  done (took 4.002636959 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.022902546 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021407983 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.024269966 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 0.019981882 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 0.021988911 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023248892 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.021504221 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.022889022 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020051844 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.02103973 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.021759607 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 0.02151517 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.023111893 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.022291433 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.021887836 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.024559766 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 0.022250856 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.02224007 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026236656 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 0.022291345 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023545026 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 0.022810682 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.021637678 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026216512 seconds)
  done (took 1.589702682 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021294476 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.044687823 seconds)
  done (took 1.109906223 seconds)
done (took 9.191116377 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.023198947 seconds)
    (2/2) benchmarking "String"...
    done (took 0.023277499 seconds)
  done (took 1.084129601 seconds)
  (2/7) benchmarking "join"...
  done (took 0.275989179 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 0.040423596 seconds)
    (2/4) benchmarking "different"...
    done (took 8.574e-6 seconds)
    (3/4) benchmarking "identical"...
    done (took 0.021122055 seconds)
    (4/4) benchmarking "different length"...
    done (took 1.9277e-5 seconds)
  done (took 1.125438168 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020705404 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 0.133244477 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 0.00022075 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 4.186e-6 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.000896655 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 8.451e-6 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.647e-6 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 0.000579871 seconds)
  done (took 1.179815541 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.022653148 seconds)
    (2/3) benchmarking "different"...
    done (took 8.154e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 3.623e-6 seconds)
  done (took 1.070756224 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.036942452 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.02439725 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020952731 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.020802095 seconds)
  done (took 1.14957942 seconds)
done (took 6.949472716 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.02230844 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.020953971 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.030567312 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.023907434 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.021034598 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.023530575 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.023101711 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.020185051 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.037774188 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.05981567 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.0085e-5 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.033273595 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.020266901 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.032449677 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.021418315 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.023490905 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.020813407 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.3295e-5 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.020213735 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.1077e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.023071417 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.020671663 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.021848232 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.2423e-5 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.2482e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.025884996 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.834e-5 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.1391e-5 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.1777e-5 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 9.882e-6 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.133e-5 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.022332055 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.1613e-5 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.0818e-5 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.4531e-5 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 7.634e-6 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 6.759e-6 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 6.613e-6 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.023568155 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 9.927e-6 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.4027e-5 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.02328205 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.8451e-5 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 8.349e-6 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.4395e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 9.413e-6 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.0101e-5 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 5.939e-6 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.1658e-5 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.0256e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.249e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 6.868e-6 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.1761e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.020691707 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.023336534 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.3747e-5 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.1193e-5 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.6737e-5 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 9.484e-6 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 8.771e-6 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024536582 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.020738073 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.2944e-5 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.0589e-5 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.3697e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 9.941e-6 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.4508e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.048e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 9.841e-6 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034067847 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.034396374 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.1677e-5 seconds)
  done (took 1.816688775 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.038375161 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.044446033 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.024134467 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.023757276 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.023658656 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.019322147 seconds)
  done (took 1.22411681 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021863908 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021262562 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024613642 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.033669467 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.021449831 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.039529286 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020985251 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020846862 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.02417122 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.025144714 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.020651832 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.020899888 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020562487 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.031168408 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.02490801 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.021812803 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.02172571 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023950411 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.050246108 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024055875 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.021094587 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.023627721 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.033724262 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.023873475 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021924102 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.038370002 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.022471335 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.024918554 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020815153 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.02912609 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.034888904 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023846171 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.024651645 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.027953332 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022743306 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.031109315 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.036572115 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.032650368 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.047822957 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.031285391 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021077499 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.049750525 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.062605231 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.038880097 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.03326718 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.020122582 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020097238 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021014121 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.024074426 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021312245 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020272127 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.023379395 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.032482243 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.02707204 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.018993023 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.029470712 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022541591 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.030180677 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.022292857 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021305889 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021084957 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.021659406 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.021636835 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.021676627 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.02474976 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.028934482 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.032860076 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.023101965 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.021579847 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.02330028 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020709439 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.031316385 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.020791543 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.023825461 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.021360987 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023056648 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.034171837 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.020959468 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.024010708 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.02155721 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.033188648 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.039725391 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021209598 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.02353899 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.028218301 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.018573855 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.027517013 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.034207778 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.021505651 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.024525892 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.020868022 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.019710251 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.021712994 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.048198033 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.033488435 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.03401751 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030660725 seconds)
  done (took 3.656839906 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.050607247 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034673732 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.033815511 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.03140795 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.019765461 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020904354 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020872447 seconds)
  done (took 1.273017272 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.038872709 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.052953581 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.035285068 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.049510268 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.046922523 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.043745846 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.050072008 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.050935792 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.036583004 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.8342e-5 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.039062103 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.037571804 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.036633889 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.024857241 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002396342 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.0474932 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.034897608 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.038152146 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.9007e-5 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.040025695 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.042114806 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.047568427 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.024682283 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.046671158 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.026043514 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.039947112 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.6748e-5 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.03055156 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.021931815 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 3.2244e-5 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.001066309 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.028011023 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.5871e-5 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.2796e-5 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.025348318 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.034281647 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.025383868 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.6057e-5 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.028759642 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.024851564 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.022878878 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.034143704 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 3.3917e-5 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 7.169e-6 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 6.4118e-5 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.034746459 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.6649e-5 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 7.5078e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005526413 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 8.336e-6 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 9.238e-6 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001047419 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 5.0948e-5 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 7.755e-6 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.6796e-5 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 7.18e-6 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.2543e-5 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.023018032 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.4341e-5 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.00105465 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.0727e-5 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 9.082e-6 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.2968e-5 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.025238724 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 6.9849e-5 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 8.749e-6 seconds)
  done (took 2.371234311 seconds)
done (took 11.390360021 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.037151658 seconds)
  (2/8) benchmarking "mandel"...
  done (took 0.100162664 seconds)
  (3/8) benchmarking "pisum"...
  done (took 0.058947138 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 0.124249219 seconds)
  (5/8) benchmarking "printfd"...
  done (took 0.138562221 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 0.356283571 seconds)
  (7/8) benchmarking "fib"...
  done (took 0.02311041 seconds)
  (8/8) benchmarking "parseint"...
  done (took 0.037838952 seconds)
done (took 1.938026099 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 0.045256492 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 0.026747679 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.032760133 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 0.025323024 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 0.020524847 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.02922196 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.100145831 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 0.0236134 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 0.020199921 seconds)
  done (took 1.408095861 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.195982972 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.336699015 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.272746815 seconds)
  done (took 1.870840801 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 0.038095656 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.061852496 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.03226993 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 1.3835e-5 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 7.014e-6 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 0.047008224 seconds)
  done (took 1.25003518 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.234818666 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071943977 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.112957407 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.093962666 seconds)
  done (took 1.585733092 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 0.168481067 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.161249953 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.282330121 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 0.106250837 seconds)
  done (took 1.795157557 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.05967529 seconds)
done (took 9.032411098 seconds)
(18/23) benchmarking "parallel"...
done (took 1.079350526 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 0.025094975 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 0.022951893 seconds)
    (3/36) benchmarking "trsv"...
    done (took 0.039919603 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 0.035907349 seconds)
    (5/36) benchmarking "asum"...
    done (took 0.022295308 seconds)
    (6/36) benchmarking "trsm"...
    done (took 0.106329496 seconds)
    (7/36) benchmarking "symv!"...
    done (took 0.044198413 seconds)
    (8/36) benchmarking "symm!"...
    done (took 0.147212622 seconds)
    (9/36) benchmarking "trmv"...
    done (took 0.041672953 seconds)
    (10/36) benchmarking "dot"...
    done (took 0.023543316 seconds)
    (11/36) benchmarking "herk"...
    done (took 0.24595777 seconds)
    (12/36) benchmarking "dotu"...
    done (took 0.025104555 seconds)
    (13/36) benchmarking "scal"...
    done (took 0.029691857 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 0.036080342 seconds)
    (15/36) benchmarking "dotc"...
    done (took 0.023239897 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 0.122449398 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 0.029348132 seconds)
    (18/36) benchmarking "symm"...
    done (took 0.120358997 seconds)
    (19/36) benchmarking "ger!"...
    done (took 0.041003311 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 0.089315299 seconds)
    (21/36) benchmarking "gemm"...
    done (took 0.122492808 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 0.083747178 seconds)
    (23/36) benchmarking "herk!"...
    done (took 0.232276938 seconds)
    (24/36) benchmarking "scal!"...
    done (took 0.03141976 seconds)
    (25/36) benchmarking "syrk"...
    done (took 0.089259624 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 0.023568676 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 0.028553034 seconds)
    (28/36) benchmarking "trmm"...
    done (took 0.085238454 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 0.092073332 seconds)
    (30/36) benchmarking "her!"...
    done (took 0.047466359 seconds)
    (31/36) benchmarking "syr!"...
    done (took 0.044475971 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 0.029480945 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 0.028828438 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 0.027884916 seconds)
    (35/36) benchmarking "symv"...
    done (took 0.024793313 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 0.037573944 seconds)
  done (took 3.371302134 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 1.054034604 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.250526955 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.089971389 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.150191971 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.055247141 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.038195468 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.187061 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.144385267 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.248626493 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.003946334 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.000156039 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.167683328 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.003577101 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.130619301 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.142624973 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 1.282379425 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.171870228 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049081992 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.208998045 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.04030224 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 2.462141112 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.022340494 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.623448829 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.8855e-5 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.003662212 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 3.0098e-5 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.047921547 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.291413866 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.227570066 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.000581018 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 1.259412058 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 1.307896399 seconds)
  done (took 13.748431762 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.55321122 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.180377521 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.092654986 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.020688154 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.112136916 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.145259093 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.020279451 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.091758692 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.085153069 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.043641526 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.201308368 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 3.074e-5 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.073125526 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.241768519 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.033424905 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.107726963 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.215155077 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.058723089 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 3.160466439 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.052419412 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.15877159 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.124666169 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.050689719 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.007841857 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.06594452 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.059785766 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.033692815 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.063421898 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 8.4419e-5 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.774975235 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.042310713 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.11214853 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.181984609 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.051525313 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.115245086 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.025780504 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.0426e-5 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.065963168 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.026163932 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.041697771 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.000627979 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.9492e-5 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.020650473 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.019710032 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 3.5699e-5 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.030352848 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.129517237 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.101492281 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 3.2886e-5 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.090359216 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.027286837 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019998668 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.012179943 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.02232137 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 3.4509e-5 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067934134 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.83200872 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.088582342 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.026404979 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.048761013 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.210492536 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 3.728090038 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.2542e-5 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.013567395 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 1.197242226 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.062855093 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.111012693 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 3.757e-5 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.050904664 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 6.4714e-5 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.066718932 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 8.4348e-5 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019996736 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.109256178 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.053575292 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.4574e-5 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.001552229 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.107432161 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.027057936 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.001938905 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.9267e-5 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.0139e-5 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.503e-5 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.117455369 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.512527771 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.001471494 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.4323e-5 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 6.6721e-5 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.001228618 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.053356496 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.000142132 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.2856e-5 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021065323 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.2619e-5 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.5597e-5 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.106329327 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.109e-5 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.1676e-5 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.000146782 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.5931e-5 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.001490876 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.01432238 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.000722187 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.171110384 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.5966e-5 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 6.09e-5 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 3.588846062 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.7838e-5 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.004134804 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.337e-5 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.2824e-5 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 5.4574e-5 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.00494194 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.001123628 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 3.972014986 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.004172304 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.4626e-5 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.00753917 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.6983e-5 seconds)
  done (took 24.959476201 seconds)
done (took 43.702117418 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.089968453 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.059811922 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.02731246 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.048270392 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.037470108 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.146883591 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.099333338 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.035801952 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019315913 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.031907121 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.044018307 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.035693798 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020317803 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.05309892 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.041273115 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.028058683 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.031984525 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.030518898 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.020637705 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.025576948 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026332667 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.022514008 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019534838 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020098012 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.031707917 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.02253603 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027013858 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020017276 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026010127 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027041627 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.029433215 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.030485451 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019000993 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.040274498 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.05153882 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020138272 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.026607654 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.7694e-5 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.032518654 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.070036935 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.3369e-5 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.035953125 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.018984995 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.100810454 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071398077 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.02082458 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.074773523 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.056151041 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.039295821 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.027857716 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.038602499 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.0389068 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02548378 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025638693 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025328288 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.029802879 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.023887049 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.029677475 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.020485221 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.049365605 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.020515553 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.056998835 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.036577503 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.02563752 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.5979e-5 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020105255 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.038519594 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.027875325 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.025706726 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.026984391 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.026854097 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.019528959 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026077317 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.031022707 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.040806405 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.029913668 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.052664889 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.025306785 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.032200263 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.026687619 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.026574191 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.038561706 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.043481972 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032417015 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.058009672 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.020710818 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033009 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.028721243 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.5694e-5 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.036387754 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.2046e-5 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.057642253 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034309379 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.028805003 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.031423436 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029312026 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.028573853 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037104541 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.019185342 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035954512 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.019877757 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.031313031 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026346068 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.034888285 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.3879e-5 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028764488 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024428914 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.632e-5 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 8.425e-6 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.049235494 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.026268849 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.033627297 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.030816222 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.020545656 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.027569841 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020225956 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.035391622 seconds)
  done (took 4.973661337 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.033172176 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.051976407 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.135475318 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.023089338 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.09312008 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.066015782 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.038958458 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.10606969 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.040595204 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.163955163 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.040767329 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.14158691 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149279242 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.041711559 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.025895338 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.041302199 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.021330845 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.090675509 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.027175966 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.022929234 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.02847797 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.041347071 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.021855322 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.022821451 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.02103584 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.021893743 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 0.043405412 seconds)
  done (took 2.687890536 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.034615268 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.033715785 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026111843 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.040216637 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.023568806 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.032953276 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.025812928 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.031078882 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.036302947 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023293117 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.03644677 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021598611 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018976791 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.062186259 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026451433 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026805097 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.026289564 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018845126 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.022521724 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.021416558 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.019961332 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.028719299 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.054185235 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 0.025244422 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.2323e-5 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.020934383 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.036666254 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.033586608 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.021289915 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 3.2869e-5 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.020746531 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018772026 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021689226 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.026861635 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.020782325 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023850368 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.020856077 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.1766e-5 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 0.01881292 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.020732134 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.02186442 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.031620047 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019845386 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.027788674 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035062979 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.5655e-5 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.034154334 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.032485125 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023204572 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.040788906 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.029816918 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021864886 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 5.0129e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.9995e-5 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.023195721 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020215926 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 4.6491e-5 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.032577396 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.023911473 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019638719 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 4.6521e-5 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.037056533 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021055344 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.038126828 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.032681434 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.021413066 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 3.7809e-5 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000127616 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026980672 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.5442e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 9.543e-6 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 3.019e-5 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.037383933 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026292181 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.038844352 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023014072 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024484338 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.026451024 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.618e-5 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.035023058 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.028259475 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.6621e-5 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.020350381 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.425e-5 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.7709e-5 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.02679915 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023423218 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.032824821 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.4402e-5 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.1562e-5 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.040465988 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 3.3165e-5 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.024859139 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.5284e-5 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021305231 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 3.7899e-5 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.0698e-5 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.030741746 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.464e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.2398e-5 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.0596e-5 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.037801265 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.4291e-5 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.7977e-5 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.1852e-5 seconds)
  done (took 3.277732971 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.033767473 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.032207177 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.053135442 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.037060995 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.047721246 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037082624 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020948293 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.031499818 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.021202986 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.024929398 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.021088792 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.021039456 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.040638815 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.038070019 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 0.044429908 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.034498112 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.031562765 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.04689109 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021147323 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.043018223 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.042396859 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.032411565 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.036429435 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.03623378 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.031188259 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.04443769 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037171761 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.040425787 seconds)
  done (took 2.120892967 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027749776 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.027726556 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.024062006 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.026861267 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.027921221 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028572149 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.031837941 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.02164068 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026498786 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021963717 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027958121 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.027786185 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.02622925 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023174357 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.030243391 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.02483518 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027711879 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022425618 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.024405432 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.02722838 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.022595084 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.0258194 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.028316996 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029042036 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.027759112 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.025664048 seconds)
  done (took 1.821408052 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.023737334 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.02780168 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.030006328 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.031101781 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.036951069 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06550065 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.038115776 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.031970773 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020172372 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.03036141 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005679108 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.021354454 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.034571654 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.023846074 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.021369891 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.004777863 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.020895763 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.011789562 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 0.02700894 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.021113618 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.021667638 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011662107 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005346735 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.012823856 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.012163061 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.5823e-5 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.02872325 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.026386147 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.026421386 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.008831409 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003219098 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.011657746 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.021305154 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.011420686 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005321263 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.009894423 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.571e-5 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003425027 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.011300429 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.008295269 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008440017 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.4544e-5 seconds)
  done (took 1.913319982 seconds)
done (took 17.908035132 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 0.060205922 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 0.168711914 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 0.047093267 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 0.056602083 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.07269413 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 0.073372343 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.030865317 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.057844279 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.040929963 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.080308996 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 0.046877391 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.109333426 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.041288686 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 0.069076206 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 4.2252e-5 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 0.054880221 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 6.4551e-5 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.073426347 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 0.028037626 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 0.080002525 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.02869258 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 3.4387e-5 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.078267701 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.094541762 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 0.065857843 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.047139548 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.029788321 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 0.068959775 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 0.067868784 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 0.088213439 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.049472017 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.1151e-5 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 0.062550701 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 0.067732971 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.065348181 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 0.040105531 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.07784883 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.1708e-5 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.069591297 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.053212137 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.052841884 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 0.073519847 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 0.043705646 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.086119703 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.077955081 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.059505116 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.7127e-5 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.090828609 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.060337364 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.9286e-5 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.063488574 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 0.048021487 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 0.065842578 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.057932396 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.057321055 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 0.080191366 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.05771621 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.5719e-5 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 0.087215699 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.031833655 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.073004962 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.031417028 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.6131e-5 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 0.047452 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.060123398 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.031912688 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.046032314 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 3.2289e-5 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.075744464 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 3.5416e-5 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.9722e-5 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 0.0835515 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.3826e-5 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.043951938 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.062795518 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.046944511 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 0.088264268 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.7668e-5 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.7838e-5 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.0577163 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 0.063839818 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.066406285 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 0.040667244 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 4.5745e-5 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 1.9492e-5 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.069546617 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 4.013e-5 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 0.054566218 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 3.1472e-5 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.5801e-5 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.043413996 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.05658419 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 0.05627348 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.065354131 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.060542381 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.066427649 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.9932e-5 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 0.031800922 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.049989984 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 0.064906404 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.073507397 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 0.072688573 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 4.4876e-5 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.059077656 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.6497e-5 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 0.064776453 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 0.068913399 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 4.0767e-5 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.070266875 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 5.9495e-5 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.7697e-5 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.5809e-5 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.032061598 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 3.9328e-5 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.9229e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.0663582 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 0.06400772 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.050802834 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.05724416 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.6362e-5 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.028433015 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 3.4269e-5 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.029565061 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.058161812 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 3.2346e-5 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.069253908 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.033069069 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 3.0072e-5 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 4.7038e-5 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 3.0388e-5 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 0.065937309 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.5369e-5 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 0.069510915 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.031951011 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.4889e-5 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.062573936 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.06841692 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.053345629 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.061422441 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.6747e-5 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 0.077927581 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.07691565 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 0.050120279 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 0.068969863 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.1672e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 3.1471e-5 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.03188943 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 0.067651492 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 0.055955581 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 3.1359e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 1.6876e-5 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 1.7847e-5 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.0943e-5 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.063439878 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 3.4795e-5 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.051903548 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 3.1416e-5 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.7488e-5 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.6625e-5 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.069266144 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.9558e-5 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.5996e-5 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.7369e-5 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.3855e-5 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.066936105 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 3.1648e-5 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.7234e-5 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 0.050967243 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.2221e-5 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.036790791 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 9.0247e-5 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.247e-5 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.5102e-5 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 0.057003316 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.050845517 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 0.060103722 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 0.074628348 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 3.872e-5 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.057352445 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 0.06227387 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 3.3244e-5 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.5502e-5 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 1.7868e-5 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 1.9721e-5 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.2336e-5 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.1179e-5 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 1.4693e-5 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.64e-5 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.3335e-5 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.5954e-5 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 0.050721372 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 3.7754e-5 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.909e-5 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.9578e-5 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 0.05019246 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 0.040458122 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.9755e-5 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 3.1528e-5 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 0.0293259 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 0.056357933 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 3.384e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.6699e-5 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 0.037044822 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.7772e-5 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.063836751 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 3.2308e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 1.9853e-5 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 0.040019914 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.6902e-5 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.5311e-5 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 0.028570718 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.8231e-5 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.0844e-5 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.035493828 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 3.8625e-5 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 0.032085707 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 0.059007234 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.028108835 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 4.2759e-5 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.8756e-5 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 1.7086e-5 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 0.038876706 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.2149e-5 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.783e-5 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.064643928 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 3.1211e-5 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.4115e-5 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.069060552 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.5196e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.9442e-5 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.058919166 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 3.0621e-5 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.1853e-5 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.0321e-5 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031831749 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 3.4954e-5 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 0.055394478 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.2175e-5 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.1746e-5 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.7674e-5 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.2579e-5 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.035097617 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 3.7087e-5 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.5063e-5 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.058254687 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 4.7461e-5 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.024520417 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 0.071287952 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 3.0442e-5 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.0611e-5 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.7012e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 3.3488e-5 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.923e-5 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.8555e-5 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 0.060241462 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 3.02e-5 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 1.8558e-5 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.672e-5 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 0.044271792 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 3.6227e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.0671e-5 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 5.9926e-5 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.2129e-5 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.3547e-5 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.0164e-5 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.8924e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.0586e-5 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.6984e-5 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.2652e-5 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.2303e-5 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.028350419 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 0.063433236 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 3.2817e-5 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.6231e-5 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 0.039596427 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 3.2893e-5 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.0076e-5 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.7615e-5 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.032100473 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.024292085 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 4.5707e-5 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.1711e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 0.049780776 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.3603e-5 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.6657e-5 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.0701e-5 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.035577871 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 3.573e-5 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.643e-5 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 1.8926e-5 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.8981e-5 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 1.5647e-5 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.6382e-5 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.8606e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.073602413 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 0.031485082 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 0.036963118 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.047789377 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 3.4065e-5 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.7583e-5 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.069969664 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.2919e-5 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.8661e-5 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 1.9215e-5 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.9743e-5 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6228e-5 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.6562e-5 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.7861e-5 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.053530113 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 4.1946e-5 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.952e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.605e-5 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 1.5922e-5 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.0154e-5 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.305e-5 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.9042e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 0.077501377 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.063826978 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.0575e-5 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 0.045006479 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.4236e-5 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 1.8733e-5 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.8884e-5 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.8695e-5 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 1.6283e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.4646e-5 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.832e-5 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.032228292 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 5.7821e-5 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.4195e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.0421e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.96e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.1066e-5 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 3.5036e-5 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.5639e-5 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.3489e-5 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.047907342 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 4.0266e-5 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.7948e-5 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 0.055994312 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.0061e-5 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.062954822 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.6026e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.1806e-5 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.8797e-5 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.8532e-5 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.058188846 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.4597e-5 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.8672e-5 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.2998e-5 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.262e-5 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.5003e-5 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.095e-5 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.0038e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.4888e-5 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.835e-5 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.9246e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.5316e-5 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.011053152 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.6563e-5 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.442e-5 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 4.0906e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.7724e-5 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.9763e-5 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.2864e-5 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.7679e-5 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.9528e-5 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.0505e-5 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.8912e-5 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.5953e-5 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 1.4793e-5 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.6766e-5 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.7007e-5 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 4.1028e-5 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.0123e-5 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.6662e-5 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.5551e-5 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 1.8938e-5 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 1.6066e-5 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.7339e-5 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.01129365 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 3.5199e-5 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.0724e-5 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.8434e-5 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 7.0624e-5 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.6171e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 1.9411e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.9874e-5 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.349e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.6668e-5 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.4536e-5 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.5232e-5 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.7607e-5 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.4063e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.7864e-5 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.8146e-5 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.3117e-5 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 1.7714e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.6722e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.7705e-5 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.5257e-5 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 9.61e-6 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 0.084246967 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.0329e-5 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.6214e-5 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.2488e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.3914e-5 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 3.1534e-5 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 1.8506e-5 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.3039e-5 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.2066e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.031542471 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 3.6463e-5 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.4763e-5 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.3465e-5 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 1.8931e-5 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.3479e-5 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.4546e-5 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 1.6063e-5 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.5728e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.3413e-5 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.5803e-5 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.8589e-5 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.029759199 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.031264239 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.8434e-5 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.8827e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.057218379 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 4.5854e-5 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.5061e-5 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.7343e-5 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.279e-5 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.7162e-5 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.1382e-5 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 1.5855e-5 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.2409e-5 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.4033e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.3793e-5 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 1.8687e-5 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.1182e-5 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.6254e-5 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 1.1954e-5 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 1.8745e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.141e-5 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.4962e-5 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.4853e-5 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.0344e-5 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.6542e-5 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.3366e-5 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.0572e-5 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.4653e-5 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.1401e-5 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.8366e-5 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.8622e-5 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.3611e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 8.872e-6 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.353e-5 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.7597e-5 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.0398e-5 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.066583322 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.6187e-5 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.5393e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.9611e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.3818e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 1.7996e-5 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.083638653 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 0.074901357 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.7522e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 4.2189e-5 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.8934e-5 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.5161e-5 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.6373e-5 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 1.956e-5 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.1265e-5 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.5155e-5 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.6962e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 1.9492e-5 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.5924e-5 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.5568e-5 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 1.7958e-5 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 1.4109e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.253e-5 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.1238e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.064587725 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.5471e-5 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 1.9241e-5 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.509e-5 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.0842e-5 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.3497e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 1.9064e-5 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 1.7935e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 1.9693e-5 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.3522e-5 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.0666e-5 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.05978494 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.4891e-5 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.05929751 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.9009e-5 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 3.6566e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 1.907e-5 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 1.7178e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.5326e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.1894e-5 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 0.029719876 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 3.5064e-5 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.9391e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.9018e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.4084e-5 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.075e-5 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.7238e-5 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 5.0673e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 3.3759e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.9306e-5 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.293e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.6353e-5 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.4495e-5 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 1.981e-5 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.9393e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.0609e-5 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 1.6638e-5 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.2212e-5 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.3292e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.9021e-5 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 9.491e-6 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.2979e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.2645e-5 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.5376e-5 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 3.2559e-5 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.057934405 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 1.6306e-5 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 1.422e-5 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 0.027841974 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 3.8605e-5 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.3185e-5 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.9794e-5 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.1386e-5 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.4653e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.4081e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 1.8946e-5 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.0295e-5 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.2574e-5 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.6524e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 1.6544e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.1985e-5 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.6172e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.5144e-5 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.7341e-5 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.4085e-5 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.6844e-5 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.3982e-5 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.007e-5 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.011039324 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.031260249 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 4.3433e-5 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.0629e-5 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.4709e-5 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.5616e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.6981e-5 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 1.9525e-5 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.5466e-5 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 0.056901442 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.576e-5 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 0.039263349 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.3984e-5 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.488e-5 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.9241e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.0122e-5 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.4392e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.7038e-5 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.492e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 1.4286e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 1.939e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.2562e-5 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.7973e-5 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 3.0747e-5 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.261e-5 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.7154e-5 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 1.6819e-5 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.6088e-5 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 4.1197e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.4345e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.4191e-5 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.4318e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 1.838e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 1.9544e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 1.9929e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.2994e-5 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.0696e-5 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.3658e-5 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.7169e-5 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 1.6269e-5 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.01090515 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 3.712e-5 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.0039e-5 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.1449e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.1083e-5 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.4177e-5 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.9358e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.5892e-5 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.5505e-5 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 1.8221e-5 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.3298e-5 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.9351e-5 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 1.9284e-5 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 1.348e-5 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 1.9452e-5 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.4349e-5 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.2096e-5 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.2125e-5 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 1.771e-5 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.1654e-5 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.7336e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 1.6724e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.265e-5 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 1.6747e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.7307e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.1138e-5 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.2282e-5 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.2869e-5 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 1.5733e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.3586e-5 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.3241e-5 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.8583e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 8.348e-6 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.8607e-5 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.5904e-5 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.9115e-5 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.8917e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.3099e-5 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 1.2404e-5 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 1.3234e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.6562e-5 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 1.5836e-5 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 1.2226e-5 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.3597e-5 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 1.3211e-5 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.1078e-5 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 1.5568e-5 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.5179e-5 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.1791e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.6274e-5 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.5412e-5 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 9.349e-6 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.5379e-5 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.06e-5 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.3986e-5 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 5.8507e-5 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 1.4562e-5 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.0048e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 1.8133e-5 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 1.4145e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 1.4834e-5 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.5657e-5 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.3701e-5 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 1.8127e-5 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.3881e-5 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.0224e-5 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 1.2316e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.1585e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.4561e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.2466e-5 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.4804e-5 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.4351e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.4884e-5 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.0805e-5 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.548e-5 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 4.855e-5 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.0996e-5 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.3132e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.1067e-5 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.331e-5 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 1.386e-5 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 1.3376e-5 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.0697e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.3366e-5 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 1.039e-5 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.1947e-5 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.3629e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.624e-5 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.6071e-5 seconds)
done (took 11.643220169 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 25.206254368 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.256543579 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.376174162 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.175309803 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.481894116 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.875953225 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.787380896 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.588658061 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.269020236 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.108892189 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.782599674 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.082289807 seconds)
  done (took 40.149970556 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 9.281311698 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.24945288 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.383510772 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.11439779 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.300901349 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.701508753 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 8.585632242 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.401187757 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.473493915 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.112783574 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.622130632 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.083909088 seconds)
  done (took 23.986202285 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.736236139 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.091795753 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.155211416 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 2.13615925 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.143288536 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.146633693 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 2.741676636 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.059627467 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 0.650576639 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.040743513 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.39635508 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.045588278 seconds)
  done (took 10.504859654 seconds)
done (took 75.823318059 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.028348995 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.03042794 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.121545993 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077804607 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.06343985 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.039156308 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.039947869 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.036439161 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.117338779 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.145444898 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.7063e-5 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.047744516 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.03083536 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.12125711 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.03316311 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.031748468 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.026394573 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.033922826 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.06126 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.042411519 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.038623093 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.235580381 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.030214632 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.029933367 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024598248 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.037562586 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.032815069 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.111809183 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.173002156 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.038377038 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.029614103 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 8.927e-5 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.029922832 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.093820833 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.057403916 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.030253149 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.031116203 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.218733972 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.183449012 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.033303538 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.038953351 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.102393512 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.038127504 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.197701385 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.03050038 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.166882276 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.124821362 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.031630612 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.03139751 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.047726997 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.025949456 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.031399749 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.115970519 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.119205813 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 5.3619e-5 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.8002e-5 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.20052891 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.00024065 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 8.38e-5 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.037112813 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068735347 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.032091435 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.021436436 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.028089549 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.035614092 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.042608895 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.030546107 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.031005369 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.186635858 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.095800152 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.116585165 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.036685411 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.029879041 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.052434838 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.037577565 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.068046697 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.034333092 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.000107867 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.029250166 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.0446909 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027217511 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.090841796 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.108498301 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 8.4651e-5 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.029518591 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.034970841 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.027739287 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.135071092 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 8.1455e-5 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.028558418 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 4.6764e-5 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.028155501 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.141081992 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.029469138 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.028486266 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.027524938 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.029651872 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.000252484 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 3.355e-5 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.144792668 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.195001952 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.089678132 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.03153801 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030594851 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032368286 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.157711275 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.030884661 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.078932558 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.000103772 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.027447489 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.033018075 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001787421 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.030804134 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 9.1933e-5 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.031511317 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.028281703 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.114744195 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.030758731 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.03861093 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.030609144 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.147337057 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.095236232 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.031607913 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.03879602 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.028990614 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.166783924 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.02833862 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.038348311 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.09488799 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.019899757 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000104648 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.02833075 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.029377724 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.031632726 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.037448559 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.028835764 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.029609595 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.027110424 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.086206646 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.11267241 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001156117 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.088823458 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.048321983 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.029201326 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.108086261 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.032605798 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.053926024 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.027869138 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.089481208 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.666e-5 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.22388084 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.027584739 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.029875507 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 6.0845e-5 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.169750318 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.179326376 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.037267197 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 8.8844e-5 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 9.1485e-5 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002218556 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.25174743 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.000145211 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.032172195 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.04483372 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.02905356 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.148236783 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.135131409 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.089493791 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002231762 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.027139639 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.033686578 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.000909351 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 4.4056e-5 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.04825849 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.236070754 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.001248409 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029578774 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.14324942 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.036755494 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 7.3389e-5 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.090267839 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.029309664 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.034176923 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026784063 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.160767635 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.030041408 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.136966872 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.032438433 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.032628908 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.030112037 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.111130553 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000115239 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.028634466 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.180402057 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.02714507 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000112725 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024833945 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.031666293 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 7.1386e-5 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.090827349 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.030281914 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.0379744 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.098527966 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.034617825 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.000169348 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030330889 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.000110674 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.024905827 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.027814606 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.019866719 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.037078179 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 7.7353e-5 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.086172579 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029767692 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.108556136 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.267642932 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.153689535 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 3.8075e-5 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.6731e-5 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.030500033 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.293669035 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 7.3357e-5 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.030259178 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.032414928 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.034124908 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.000128223 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 8.3142e-5 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.031770628 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001739256 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.033901898 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 8.0372e-5 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.029564654 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 8.1956e-5 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.11106183 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 7.8238e-5 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.756e-5 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.037367764 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.034872463 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.0435145 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.089419969 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.092718356 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 5.578e-5 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.026136142 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.001329789 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 8.6562e-5 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.035468816 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.027833521 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 4.966e-5 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.03555898 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037786452 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 9.2208e-5 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.143008799 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 8.7892e-5 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.031703026 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.043223542 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 8.4076e-5 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 4.597e-5 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.028980885 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.025067536 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.066530281 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.046114306 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 7.7154e-5 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 7.7069e-5 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.1926e-5 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.031471356 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.030158563 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.6639e-5 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 4.0771e-5 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.5353e-5 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.033785645 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.000110681 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002619243 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.089990023 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.029815121 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.02881182 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.03372607 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.001706775 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.108403523 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 4.3885e-5 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.029693315 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.063545777 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 9.3669e-5 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.1441e-5 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.033983144 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.027669904 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.025500848 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.035270831 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.247852827 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.109852249 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 3.4885e-5 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.0142e-5 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.028840164 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.032830424 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.027773026 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.031514749 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 7.9991e-5 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.891979506 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.037464543 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.177738502 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.001862021 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.044332496 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.001727668 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.171507209 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 8.2214e-5 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.036438982 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 4.8287e-5 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.030050004 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.028966146 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.029364018 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.0362134 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.036687053 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 6.8594e-5 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027056236 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.026514519 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 4.5062e-5 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.000114336 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.6599e-5 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.033269535 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002518169 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 6.1092e-5 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000142948 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.033516481 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.035898938 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.218885171 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.034271463 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.058202801 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.044710326 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.000100094 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.001443198 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 7.5357e-5 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.031710723 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 4.9301e-5 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 6.899e-5 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.752e-5 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.000102819 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.093662322 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 4.5892e-5 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.002590714 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.8359e-5 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.6067e-5 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.5963e-5 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 6.3339e-5 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 3.389e-5 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.001067065 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032966571 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 8.3084e-5 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.033452864 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.000120153 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.069187632 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.219617827 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.038235725 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.044175431 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.029890316 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.046177965 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.000123212 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.001097622 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.135449803 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.000104482 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 1.001513914 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.032831623 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.6961e-5 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 7.4754e-5 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.3779e-5 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 3.3084e-5 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.030204083 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.5302e-5 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.029059753 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.6038e-5 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000138124 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.116949049 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.025819592 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.034141893 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001883256 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.028355437 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.030028554 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.9995e-5 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000831721 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 4.7157e-5 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.037962888 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.043221312 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.00194652 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.1792e-5 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.003042816 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.027372981 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.033442248 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000122928 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 9.2976e-5 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 8.6003e-5 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 6.8953e-5 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 4.9682e-5 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.8016e-5 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.031268299 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.7709e-5 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001809208 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.028500466 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 8.0025e-5 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 4.4835e-5 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 6.1438e-5 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.031616806 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.7002e-5 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.065660766 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 8.1397e-5 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 6.8838e-5 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.031144954 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.033690982 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000122233 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 3.6294e-5 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.4596e-5 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 4.7462e-5 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.026174067 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.001047474 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 8.3372e-5 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.0504e-5 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.000119444 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.7478e-5 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.072956128 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.031808564 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 7.1528e-5 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.027911656 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 6.5435e-5 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.478458182 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 3.3172e-5 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 4.1476e-5 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 3.5732e-5 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.00185644 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.7915e-5 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.031802075 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 6.9415e-5 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.043693601 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 3.0067e-5 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.036778753 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.314795186 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.033865615 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.0360719 seconds)
  done (took 23.032790601 seconds)
done (took 25.420239116 seconds)
RUNNING BENCHMARKS...
(1/23) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.933384347 seconds)
  done (took 10.30255141 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 7.394075403 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.439764325 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 7.416743036 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.396453182 seconds)
  done (took 32.021317154 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 8.183210298 seconds)
  done (took 10.560102247 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 8.151086759 seconds)
  done (took 10.527996405 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.594440824 seconds)
  done (took 9.970283871 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.441301645 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.413340642 seconds)
  done (took 17.231100341 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.71443968 seconds)
  done (took 12.091668476 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.742293473 seconds)
  done (took 10.120647657 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.389158003 seconds)
  done (took 9.768789124 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 7.386147174 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 7.3814618 seconds)
  done (took 17.146731096 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.397828884 seconds)
  done (took 9.779637415 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.379698232 seconds)
  done (took 9.760400784 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.504629743 seconds)
  done (took 9.883811159 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 8.018438311 seconds)
  done (took 10.398067791 seconds)
done (took 182.023014513 seconds)
(2/23) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.39447283 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.388729698 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.386206109 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 3.892744019 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.778608025 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.38377875 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.394206289 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.381966974 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.385672676 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.38372179 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.382709043 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.385956204 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.3817233 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.384147283 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.396178266 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.395652184 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.385613774 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.390591435 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.384956983 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.385320388 seconds)
    (21/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.389992654 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.387608902 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.389333269 seconds)
    (24/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.646045434 seconds)
    (25/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.39019391 seconds)
    (26/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.387944 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.391531958 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.386058091 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.39115744 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.386181096 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.386726045 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.390689342 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.390745774 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.394462762 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.391760854 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.389650162 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.391443605 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.39805617 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.392674608 seconds)
    (40/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.398963084 seconds)
    (41/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.39818981 seconds)
    (42/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.396089558 seconds)
    (43/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.391664723 seconds)
    (44/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.876252142 seconds)
    (45/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.65716279 seconds)
    (46/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.395705381 seconds)
    (47/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.3954867 seconds)
    (48/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.390297853 seconds)
    (49/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408043279 seconds)
    (50/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.399752574 seconds)
    (51/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.401357521 seconds)
    (52/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.405769407 seconds)
    (53/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.404962052 seconds)
    (54/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.398826385 seconds)
    (55/608) benchmarking "ind2sub"...
    done (took 3.135128035 seconds)
    (56/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.402189353 seconds)
    (57/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.399372237 seconds)
    (58/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.403843902 seconds)
    (59/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.400849826 seconds)
    (60/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.403140619 seconds)
    (61/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.403440037 seconds)
    (62/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.414689708 seconds)
    (63/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.412237137 seconds)
    (64/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.403177862 seconds)
    (65/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.405455245 seconds)
    (66/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.68891198 seconds)
    (67/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.404867553 seconds)
    (68/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.419506851 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.406794899 seconds)
    (70/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.411192163 seconds)
    (71/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.397627116 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.403753412 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.406910868 seconds)
    (74/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.406758591 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.401149552 seconds)
    (76/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.242219839 seconds)
    (77/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.449810273 seconds)
    (78/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.404694575 seconds)
    (79/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.404220763 seconds)
    (80/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.40549748 seconds)
    (81/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.417665309 seconds)
    (82/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.402748244 seconds)
    (83/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.403752624 seconds)
    (84/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.401671969 seconds)
    (85/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408987048 seconds)
    (86/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.421903437 seconds)
    (87/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.414622818 seconds)
    (88/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.401152107 seconds)
    (89/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.410331903 seconds)
    (90/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.440071034 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.404597567 seconds)
    (92/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.405868963 seconds)
    (93/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.404740261 seconds)
    (94/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.80072453 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.4055093 seconds)
    (96/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411601718 seconds)
    (97/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.401022176 seconds)
    (98/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.408040306 seconds)
    (99/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.600933261 seconds)
    (100/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.409464669 seconds)
    (101/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.404470306 seconds)
    (102/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.409229959 seconds)
    (103/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.566324451 seconds)
    (104/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.408436707 seconds)
    (105/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.843215324 seconds)
    (106/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.493420288 seconds)
    (107/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.403154099 seconds)
    (108/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.433369893 seconds)
    (109/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.422114073 seconds)
    (110/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 6.06395379 seconds)
    (111/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.634322143 seconds)
    (112/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.407284099 seconds)
    (113/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.398233482 seconds)
    (114/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 6.075382923 seconds)
    (115/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.417894106 seconds)
    (116/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.404947969 seconds)
    (117/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413758774 seconds)
    (118/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.407665442 seconds)
    (119/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415291619 seconds)
    (120/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.412480126 seconds)
    (121/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.406452881 seconds)
    (122/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410550999 seconds)
    (123/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 6.215953202 seconds)
    (124/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.415723264 seconds)
    (125/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.419046219 seconds)
    (126/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 6.111862646 seconds)
    (127/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.423322561 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.479668729 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.406229652 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.411154133 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.410371438 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.408859142 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 7.016756866 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.413918523 seconds)
    (135/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.412647021 seconds)
    (136/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.409735794 seconds)
    (137/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 7.405445665 seconds)
    (138/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.407887514 seconds)
    (139/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.255371717 seconds)
    (140/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.42782987 seconds)
    (141/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.411690746 seconds)
    (142/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.546305131 seconds)
    (143/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.416212433 seconds)
    (144/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.408511312 seconds)
    (145/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416739899 seconds)
    (146/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.406819828 seconds)
    (147/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.423050933 seconds)
    (148/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.40608632 seconds)
    (149/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410062888 seconds)
    (150/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.419825914 seconds)
    (151/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.409058963 seconds)
    (152/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.407362376 seconds)
    (153/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.405087043 seconds)
    (154/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.508888692 seconds)
    (155/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.40726804 seconds)
    (156/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.544306701 seconds)
    (157/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 6.358283694 seconds)
    (158/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414196102 seconds)
    (159/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410121689 seconds)
    (160/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411695432 seconds)
    (161/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.439479706 seconds)
    (162/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413322868 seconds)
    (163/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414780448 seconds)
    (164/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.583126238 seconds)
    (165/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.410748744 seconds)
    (166/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.412714349 seconds)
    (167/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.42121814 seconds)
    (168/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.422564936 seconds)
    (169/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.415569891 seconds)
    (170/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.418050816 seconds)
    (171/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.413043919 seconds)
    (172/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.415098558 seconds)
    (173/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.408102834 seconds)
    (174/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.422539162 seconds)
    (175/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.414519373 seconds)
    (176/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.548529645 seconds)
    (177/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.409773948 seconds)
    (178/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.417275701 seconds)
    (179/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.409366381 seconds)
    (180/608) benchmarking "5d"...
    done (took 5.795001951 seconds)
    (181/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411707636 seconds)
    (182/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.41230229 seconds)
    (183/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413650365 seconds)
    (184/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.796452287 seconds)
    (185/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.417353604 seconds)
    (186/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.40991843 seconds)
    (187/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.416753198 seconds)
    (188/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.415622588 seconds)
    (189/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.519120311 seconds)
    (190/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.413087453 seconds)
    (191/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.417114048 seconds)
    (192/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.579302643 seconds)
    (193/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.408637427 seconds)
    (194/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.418958775 seconds)
    (195/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.409532561 seconds)
    (196/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.416555073 seconds)
    (197/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.409081125 seconds)
    (198/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.812221773 seconds)
    (199/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.426653445 seconds)
    (200/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.415651041 seconds)
    (201/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.411709882 seconds)
    (202/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.414981401 seconds)
    (203/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.415233559 seconds)
    (204/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.674424843 seconds)
    (205/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.412772198 seconds)
    (206/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.418024912 seconds)
    (207/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.424415542 seconds)
    (208/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.310471655 seconds)
    (209/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.413954711 seconds)
    (210/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.418098491 seconds)
    (211/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.435437583 seconds)
    (212/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.583119931 seconds)
    (213/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412681744 seconds)
    (214/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.429606414 seconds)
    (215/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413278834 seconds)
    (216/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 4.005891365 seconds)
    (217/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.421607054 seconds)
    (218/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.422932902 seconds)
    (219/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.415259234 seconds)
    (220/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 6.195673047 seconds)
    (221/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.423227653 seconds)
    (222/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.40984022 seconds)
    (223/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.420286531 seconds)
    (224/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.523726863 seconds)
    (225/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.523897728 seconds)
    (226/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.413345268 seconds)
    (227/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415647357 seconds)
    (228/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.415595743 seconds)
    (229/608) benchmarking "6d"...
    done (took 7.417472729 seconds)
    (230/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412473459 seconds)
    (231/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.557529768 seconds)
    (232/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417739328 seconds)
    (233/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.411448026 seconds)
    (234/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.415465685 seconds)
    (235/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.412712058 seconds)
    (236/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.417226569 seconds)
    (237/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.416793626 seconds)
    (238/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.420131596 seconds)
    (239/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412992037 seconds)
    (240/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.411905838 seconds)
    (241/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.417738994 seconds)
    (242/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.423939545 seconds)
    (243/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.423962524 seconds)
    (244/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.418421911 seconds)
    (245/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.422768877 seconds)
    (246/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.40837221 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.672577027 seconds)
    (248/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.415263553 seconds)
    (249/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.418083215 seconds)
    (250/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.41495 seconds)
    (251/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.420851943 seconds)
    (252/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.412093897 seconds)
    (253/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.920131799 seconds)
    (254/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.915919636 seconds)
    (255/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.414598098 seconds)
    (256/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.40950517 seconds)
    (257/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413893119 seconds)
    (258/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.829707572 seconds)
    (259/608) benchmarking "3d"...
    done (took 4.001772613 seconds)
    (260/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.420209746 seconds)
    (261/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.419783692 seconds)
    (262/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.414776042 seconds)
    (263/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 6.397350265 seconds)
    (264/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.416395318 seconds)
    (265/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.408265567 seconds)
    (266/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 6.951608934 seconds)
    (267/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.414485198 seconds)
    (268/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.468431995 seconds)
    (269/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.191434306 seconds)
    (270/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.459656338 seconds)
    (271/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.425039382 seconds)
    (272/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41368284 seconds)
    (273/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.69802541 seconds)
    (274/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.420176056 seconds)
    (275/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.042563008 seconds)
    (276/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.417166963 seconds)
    (277/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.419304906 seconds)
    (278/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.416206254 seconds)
    (279/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.420245965 seconds)
    (280/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.411970417 seconds)
    (281/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.422657377 seconds)
    (282/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.417252711 seconds)
    (283/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.419030378 seconds)
    (284/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.419717339 seconds)
    (285/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.962099366 seconds)
    (286/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.427365265 seconds)
    (287/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.416841727 seconds)
    (288/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.416207135 seconds)
    (289/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.408070056 seconds)
    (290/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.425390353 seconds)
    (291/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412590287 seconds)
    (292/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.423473831 seconds)
    (293/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.382694702 seconds)
    (294/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.726330207 seconds)
    (295/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.417842082 seconds)
    (296/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.41579508 seconds)
    (297/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.511090069 seconds)
    (298/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.52400281 seconds)
    (299/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.413713635 seconds)
    (300/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.420113792 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.824723956 seconds)
    (302/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.422137115 seconds)
    (303/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.430773584 seconds)
    (304/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.436900414 seconds)
    (305/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.522886227 seconds)
    (306/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.423800925 seconds)
    (307/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.41702637 seconds)
    (308/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.569895035 seconds)
    (309/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.875679105 seconds)
    (310/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.418710056 seconds)
    (311/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.416052923 seconds)
    (312/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.418618264 seconds)
    (313/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.416291824 seconds)
    (314/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.419934525 seconds)
    (315/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.413775126 seconds)
    (316/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424541434 seconds)
    (317/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.416880162 seconds)
    (318/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.41507878 seconds)
    (319/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.493925406 seconds)
    (320/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.413868147 seconds)
    (321/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.412546794 seconds)
    (322/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 7.407334734 seconds)
    (323/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.431093286 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.410241833 seconds)
    (325/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.41658035 seconds)
    (326/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.410519029 seconds)
    (327/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.414968961 seconds)
    (328/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.42931438 seconds)
    (329/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412056018 seconds)
    (330/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.424088769 seconds)
    (331/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.420539266 seconds)
    (332/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.42802765 seconds)
    (333/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.428792075 seconds)
    (334/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.414894447 seconds)
    (335/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.998886593 seconds)
    (336/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.43001632 seconds)
    (337/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.410290331 seconds)
    (338/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.434658892 seconds)
    (339/608) benchmarking "sub2ind"...
    done (took 7.519469926 seconds)
    (340/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.668414833 seconds)
    (341/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.677330369 seconds)
    (342/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.412736662 seconds)
    (343/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413379107 seconds)
    (344/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.415601817 seconds)
    (345/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.256789067 seconds)
    (346/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.841323869 seconds)
    (347/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.429273011 seconds)
    (348/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.3466736 seconds)
    (349/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.421398425 seconds)
    (350/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.684834232 seconds)
    (351/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.448893657 seconds)
    (352/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.760867651 seconds)
    (353/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.424276074 seconds)
    (354/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.420471696 seconds)
    (355/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.441839133 seconds)
    (356/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.413682397 seconds)
    (357/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.4271864 seconds)
    (358/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.565608322 seconds)
    (359/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.42955816 seconds)
    (360/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.417502922 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.425805699 seconds)
    (362/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.413884885 seconds)
    (363/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.759113736 seconds)
    (364/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.441405217 seconds)
    (365/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.41570513 seconds)
    (366/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.347069025 seconds)
    (367/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.439059582 seconds)
    (368/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.759185178 seconds)
    (369/608) benchmarking ("sum", "3darray")...
    done (took 3.532032024 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.418076881 seconds)
    (371/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.423910895 seconds)
    (372/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.417208862 seconds)
    (373/608) benchmarking "7d"...
    done (took 5.678489146 seconds)
    (374/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.416953589 seconds)
    (375/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.424352918 seconds)
    (376/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.611319378 seconds)
    (377/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.419599638 seconds)
    (378/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.482082668 seconds)
    (379/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.655496367 seconds)
    (380/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.58048906 seconds)
    (381/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.476466995 seconds)
    (382/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.420457722 seconds)
    (383/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.413726226 seconds)
    (384/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.415542999 seconds)
    (385/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.420433774 seconds)
    (386/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.437939164 seconds)
    (387/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.420374327 seconds)
    (388/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.418522936 seconds)
    (389/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.420923249 seconds)
    (390/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.422579499 seconds)
    (391/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.419497949 seconds)
    (392/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 7.411777614 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.41587682 seconds)
    (394/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.42449017 seconds)
    (395/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.423621246 seconds)
    (396/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.420987363 seconds)
    (397/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.423189077 seconds)
    (398/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.413197015 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.763018176 seconds)
    (400/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 6.048266414 seconds)
    (401/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.412951119 seconds)
    (402/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.420462755 seconds)
    (403/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.760152178 seconds)
    (404/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.422844859 seconds)
    (405/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.419590789 seconds)
    (406/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.4276912 seconds)
    (407/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.426856105 seconds)
    (408/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41789234 seconds)
    (409/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.416795383 seconds)
    (410/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.417227466 seconds)
    (411/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.414108826 seconds)
    (412/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.665327438 seconds)
    (413/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.420252564 seconds)
    (414/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.41934466 seconds)
    (415/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 3.002040813 seconds)
    (416/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.343406688 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.421537201 seconds)
    (418/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.547795841 seconds)
    (419/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.993874336 seconds)
    (420/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.419291917 seconds)
    (421/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415748954 seconds)
    (422/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 6.05469301 seconds)
    (423/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.706371256 seconds)
    (424/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426861583 seconds)
    (425/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.426594211 seconds)
    (426/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.424063429 seconds)
    (427/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.419538094 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.424213668 seconds)
    (429/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.448577205 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.425002967 seconds)
    (431/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.418691055 seconds)
    (432/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.053695406 seconds)
    (433/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.420674864 seconds)
    (434/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41754569 seconds)
    (435/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.420763585 seconds)
    (436/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.427976179 seconds)
    (437/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.413730328 seconds)
    (438/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.701668083 seconds)
    (439/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417841548 seconds)
    (440/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.437328951 seconds)
    (441/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.548423237 seconds)
    (442/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.426063713 seconds)
    (443/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.544788823 seconds)
    (444/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.953495615 seconds)
    (445/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.472457977 seconds)
    (446/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.555074667 seconds)
    (447/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.528659097 seconds)
    (448/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.41966621 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.418947135 seconds)
    (450/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.419639232 seconds)
    (451/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.444656568 seconds)
    (452/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.430056259 seconds)
    (453/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.415932399 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.423407434 seconds)
    (455/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.417411508 seconds)
    (456/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417679372 seconds)
    (457/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.423973011 seconds)
    (458/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.429261899 seconds)
    (459/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.447544675 seconds)
    (460/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.423349975 seconds)
    (461/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.41966182 seconds)
    (462/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.421905049 seconds)
    (463/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.422971364 seconds)
    (464/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.420637281 seconds)
    (465/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 6.918362574 seconds)
    (466/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.419121921 seconds)
    (467/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.92150308 seconds)
    (468/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.457858367 seconds)
    (469/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.553427931 seconds)
    (470/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.423177697 seconds)
    (471/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.416676291 seconds)
    (472/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.41784759 seconds)
    (473/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.431565223 seconds)
    (474/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.434858568 seconds)
    (475/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.415810075 seconds)
    (476/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.427012613 seconds)
    (477/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 7.418575469 seconds)
    (478/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.415301613 seconds)
    (479/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.419466844 seconds)
    (480/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.42030875 seconds)
    (481/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.420510495 seconds)
    (482/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.427079769 seconds)
    (483/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.419007037 seconds)
    (484/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.424148412 seconds)
    (485/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.422908917 seconds)
    (486/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.419986725 seconds)
    (487/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.420697422 seconds)
    (488/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.42614707 seconds)
    (489/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.417962373 seconds)
    (490/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.418335814 seconds)
    (491/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.417292829 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.423975334 seconds)
    (493/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.42141515 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.418716789 seconds)
    (495/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.417403282 seconds)
    (496/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.411768202 seconds)
    (497/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 3.069891789 seconds)
    (498/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.430440951 seconds)
    (499/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 5.14605414 seconds)
    (500/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.418505852 seconds)
    (501/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 7.416086388 seconds)
    (502/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.428887508 seconds)
    (503/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.420951426 seconds)
    (504/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.425386327 seconds)
    (505/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.419088088 seconds)
    (506/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.419441947 seconds)
    (507/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.419265719 seconds)
    (508/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.588681907 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.418371093 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.42014584 seconds)
    (511/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.41496664 seconds)
    (512/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.416384162 seconds)
    (513/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.420762169 seconds)
    (514/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.526888573 seconds)
    (515/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.457919214 seconds)
    (516/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.420221305 seconds)
    (517/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.904997795 seconds)
    (518/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.42421709 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.421647722 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.430668349 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426286812 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.427160605 seconds)
    (523/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.422803252 seconds)
    (524/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.416958474 seconds)
    (525/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426713048 seconds)
    (526/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.423215036 seconds)
    (527/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.419345253 seconds)
    (528/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.418368162 seconds)
    (529/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 3.072961587 seconds)
    (530/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.471950808 seconds)
    (531/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 6.388685339 seconds)
    (532/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 6.196700036 seconds)
    (533/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.429703584 seconds)
    (534/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.539830432 seconds)
    (535/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.430916752 seconds)
    (536/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.985467527 seconds)
    (537/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.431592643 seconds)
    (538/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.417624506 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.44289586 seconds)
    (540/608) benchmarking "2d"...
    done (took 3.791643972 seconds)
    (541/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.420605694 seconds)
    (542/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.062875434 seconds)
    (543/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.595012694 seconds)
    (544/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.524998246 seconds)
    (545/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.657502847 seconds)
    (546/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.423917128 seconds)
    (547/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.42661107 seconds)
    (548/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.42999687 seconds)
    (549/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.492413267 seconds)
    (550/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.41850868 seconds)
    (551/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 6.976693212 seconds)
    (552/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.42018851 seconds)
    (553/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.423657185 seconds)
    (554/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.417113338 seconds)
    (555/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.418652393 seconds)
    (556/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.42963511 seconds)
    (557/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.720935395 seconds)
    (558/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.418922565 seconds)
    (559/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.431668112 seconds)
    (560/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.351817001 seconds)
    (561/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.435510681 seconds)
    (562/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.420044856 seconds)
    (563/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.423469446 seconds)
    (564/608) benchmarking "4d"...
    done (took 4.233792757 seconds)
    (565/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.877977076 seconds)
    (566/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.422940482 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.506459274 seconds)
    (568/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.442745937 seconds)
    (569/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.428769953 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.441198734 seconds)
    (571/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.423472673 seconds)
    (572/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.421163989 seconds)
    (573/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.426950059 seconds)
    (574/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.426802909 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.41752899 seconds)
    (576/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.421360483 seconds)
    (577/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.525103187 seconds)
    (578/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.420458099 seconds)
    (579/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.421793414 seconds)
    (580/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.434358843 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.420601993 seconds)
    (582/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.435711529 seconds)
    (583/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.429226448 seconds)
    (584/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.426160906 seconds)
    (585/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.42034842 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.988203884 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.428897964 seconds)
    (588/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.708887867 seconds)
    (589/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.4197527 seconds)
    (590/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.41966613 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.248832815 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.426613457 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.423142371 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.417882699 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.419404296 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.425313313 seconds)
    (597/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.418926785 seconds)
    (598/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.432867961 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.421780916 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.443745045 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.420924248 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.083014856 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.421845256 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.421190996 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 7.100158382 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.880547099 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.432145872 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.415414814 seconds)
  done (took 4018.02979459 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 3.643061354 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 2.504376412 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 3.322846393 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.397406687 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 2.836723821 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 2.984108125 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 3.355802953 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 2.854299982 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.232609007 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.285205193 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 3.304986266 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.330734926 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 3.157017615 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.241374605 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.294252326 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 2.596172199 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 3.298853679 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.535222356 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 2.525819546 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 2.952926523 seconds)
  done (took 65.073900509 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("catnd_setind", 5)...
    done (took 2.439101933 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.601578948 seconds)
    (3/17) benchmarking ("hcat", 500)...
    done (took 7.462930672 seconds)
    (4/17) benchmarking ("hcat_setind", 500)...
    done (took 7.418040563 seconds)
    (5/17) benchmarking ("vcat_setind", 500)...
    done (took 7.421776344 seconds)
    (6/17) benchmarking ("catnd", 500)...
    done (took 7.425776598 seconds)
    (7/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.4244235 seconds)
    (8/17) benchmarking ("catnd", 5)...
    done (took 2.468427652 seconds)
    (9/17) benchmarking ("hvcat", 5)...
    done (took 4.951315009 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 4.248045711 seconds)
    (11/17) benchmarking ("hcat_setind", 5)...
    done (took 4.432993719 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.425341855 seconds)
    (13/17) benchmarking ("vcat_setind", 5)...
    done (took 4.315986346 seconds)
    (14/17) benchmarking ("catnd_setind", 500)...
    done (took 7.424814329 seconds)
    (15/17) benchmarking ("hcat", 5)...
    done (took 4.974349165 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 7.422557191 seconds)
    (17/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.395870558 seconds)
  done (took 96.670731577 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.459656746 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.572337111 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.446340147 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.450996273 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.50858701 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.588426309 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.693682356 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.542821699 seconds)
  done (took 62.679940542 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 3.067558023 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 3.022109324 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.461609552 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 3.157776415 seconds)
  done (took 15.129229102 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.428984039 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 3.448240375 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 7.420488155 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.810498067 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.428473847 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 3.522081397 seconds)
  done (took 34.480252896 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.322889543 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 2.5592246 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.445712502 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.638834724 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.46214037 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 3.350216435 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 2.672285569 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 3.101403704 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 3.048829351 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.426108969 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 3.528073383 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.547934042 seconds)
  done (took 56.518556921 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.778433228 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.8993346 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.637841706 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.60516737 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.827289825 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.942328731 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.523762851 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.700248554 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.428571188 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.465630251 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 2.637764184 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.471888459 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.666268353 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 2.485191397 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.668007244 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.805750124 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.832093554 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.458584277 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.718262732 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.820519154 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.63410749 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.730559399 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.803293042 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 3.063799977 seconds)
  done (took 72.021422433 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 5)...
    done (took 2.657407574 seconds)
    (2/5) benchmarking ("setindex!", 2)...
    done (took 2.633866422 seconds)
    (3/5) benchmarking ("setindex!", 1)...
    done (took 2.659600964 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.66770531 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.67169307 seconds)
  done (took 15.707888647 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.500256271 seconds)
    (2/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.523805459 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.510049322 seconds)
    (4/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.543318015 seconds)
    (5/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.42535981 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.429307208 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.42038048 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.925922227 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 12.822647275 seconds)
    (10/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.902794631 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 13.013263957 seconds)
    (12/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.481632015 seconds)
  done (took 106.913485003 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.440390617 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 7.424828017 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.42816348 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 7.420322165 seconds)
  done (took 32.128728774 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 8)...
    done (took 2.474855646 seconds)
    (2/12) benchmarking ("push_single!", 2048)...
    done (took 2.50720823 seconds)
    (3/12) benchmarking ("append!", 2048)...
    done (took 2.833054802 seconds)
    (4/12) benchmarking ("append!", 8)...
    done (took 2.606420179 seconds)
    (5/12) benchmarking ("push_single!", 256)...
    done (took 2.490636153 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.686251041 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.647362325 seconds)
    (8/12) benchmarking ("append!", 256)...
    done (took 3.670900791 seconds)
    (9/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.502725402 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 4.538114346 seconds)
    (11/12) benchmarking ("push_multiple!", 256)...
    done (took 2.501563392 seconds)
    (12/12) benchmarking ("prerend!", 2048)...
    done (took 2.961260939 seconds)
  done (took 36.835829163 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.763753991 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.739689055 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.763601127 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.770246344 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.743569182 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.720720249 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.728010771 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.785479868 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.773850229 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.784455453 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.658167028 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.736465386 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.766333328 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 3.103764443 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.786760638 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.658233324 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.763424019 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.767645573 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 3.130792917 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.764064837 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.661342586 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.740263096 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.784065199 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.658406928 seconds)
  done (took 68.968758839 seconds)
done (took 4683.553256821 seconds)
(3/23) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 3.113895055 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.232835957 seconds)
  done (took 8.759750744 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.860184533 seconds)
  (3/15) benchmarking "20517"...
  done (took 3.044714009 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 3.266761393 seconds)
    (2/2) benchmarking "conditional"...
    done (took 3.286433349 seconds)
  done (took 8.97469858 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.484336798 seconds)
    (2/3) benchmarking "Float64"...
    done (took 3.039179548 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 3.074394375 seconds)
  done (took 11.013337571 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.598406986 seconds)
  done (took 5.018279845 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.000049399 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.769158628 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.612213955 seconds)
  done (took 10.85970983 seconds)
  (8/15) benchmarking "18129"...
  done (took 7.446939485 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 3.198751967 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.599424709 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 3.667201081 seconds)
    (4/4) benchmarking "Float32"...
    done (took 2.930340602 seconds)
  done (took 15.836957759 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.419860825 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 7.514184501 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 4.460729244 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 2.814605139 seconds)
  done (took 24.627568395 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 7.427120913 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.426474434 seconds)
    (3/3) benchmarking "Float32"...
    done (took 7.424711213 seconds)
  done (took 24.696814478 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 2.657543657 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.452705336 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 2.457357198 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.459158997 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 2.459817732 seconds)
  done (took 12.245487056 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.909589518 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 2.844117832 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.886612855 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.96089255 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.278772073 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.693076784 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.878417612 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.731517498 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 2.548087777 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.748381055 seconds)
  done (took 30.901928745 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.90892884 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.707075045 seconds)
  done (took 8.031215122 seconds)
done (took 179.386893056 seconds)
(4/23) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.425766601 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.441412544 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.431186839 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.434675813 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.435630488 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.430010243 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.428703298 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.435145478 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.437366913 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.439081565 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.433753574 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.437671713 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.573124497 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.431914968 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.440228982 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.435574993 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.443099266 seconds)
  done (took 43.951504991 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.455708207 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 6.820171335 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.209216256 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.673610548 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.246160216 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.450243454 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.632364816 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.140861272 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.265401643 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.217846385 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.182256018 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.03590182 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.433643757 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.034542061 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.364066649 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.140634283 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.357088163 seconds)
  done (took 84.074237684 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.425338196 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.427245915 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.428260218 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.431409424 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.427105829 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.425475259 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.42398488 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.429678524 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.42739567 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.425480148 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.427267881 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.426845866 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.470938019 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.430781407 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.437909756 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.426949588 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.444953894 seconds)
  done (took 43.758972109 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.430658454 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.470821367 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.44123014 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.464462382 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.456521317 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.426722841 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.430102356 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.440912165 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.460125287 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.438239301 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.443754801 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.449635618 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.315397687 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.447562733 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.455796878 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.45459512 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.449208741 seconds)
  done (took 44.89618068 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 2.424276187 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.429625 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 7.841454003 seconds)
    (4/13) benchmarking "Float16"...
    done (took 7.473470602 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 15.455543736 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.375222692 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.800753267 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 2.427825109 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.826863907 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 2.596546565 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.4884116 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.917878683 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.829462927 seconds)
  done (took 84.302178356 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.424306007 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.422736405 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.432026198 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.423599996 seconds)
  done (took 32.126321863 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.423569993 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.423340062 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.423840459 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.420315271 seconds)
  done (took 32.116818701 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 2.451193337 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 2.446037094 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 2.459578058 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 2.438851105 seconds)
  done (took 12.213841949 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 3.618329109 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 3.132959053 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 3.119699796 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 3.091962306 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 2.921234565 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 3.30289447 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 3.087020185 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 3.521458159 seconds)
  done (took 28.216023023 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.429914936 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.77348433 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.607885437 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.748559355 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.638945293 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.434522177 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.450541531 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.651238847 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.810206895 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.661359612 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.649008825 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.655226764 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.428480847 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.582497531 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.622112015 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.619012134 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.681140829 seconds)
  done (took 51.859256757 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.436030197 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.431172924 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.436050012 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.430529013 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.429067595 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.434075656 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.427119358 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.439004926 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.429762789 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.431976122 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.431388766 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.428083162 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.514997608 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.431546245 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.43915525 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.434188145 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.442644155 seconds)
  done (took 43.86548072 seconds)
done (took 503.796774222 seconds)
(5/23) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.417211895 seconds)
done (took 9.835623097 seconds)
(6/23) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 7.435781812 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.544621733 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 7.419710096 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 3.738316107 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.419254906 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 7.45246342 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 7.426174907 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 7.451483285 seconds)
  (9/12) benchmarking "nbody"...
  done (took 3.444284794 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 3.465741837 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 6.260767835 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 9.05483278 seconds)
done (took 75.529996462 seconds)
(7/23) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.668365213 seconds)
    (2/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.429979452 seconds)
    (3/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.521767305 seconds)
    (4/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.37003361 seconds)
    (5/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.049148448 seconds)
    (6/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.588667918 seconds)
    (7/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.241248243 seconds)
    (8/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.439558613 seconds)
    (9/54) benchmarking ("spmat", "range", 100)...
    done (took 2.826776898 seconds)
    (10/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.606254145 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.436258879 seconds)
    (12/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.331306397 seconds)
    (13/54) benchmarking ("spmat", "range", 10)...
    done (took 4.085744582 seconds)
    (14/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.640112325 seconds)
    (15/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.195384936 seconds)
    (16/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.582596488 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.155839655 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.826991301 seconds)
    (19/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.739487545 seconds)
    (20/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.785001336 seconds)
    (21/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 4.115243267 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.133458828 seconds)
    (23/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.42279795 seconds)
    (24/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.596287179 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.427121949 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.464864363 seconds)
    (27/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.250328724 seconds)
    (28/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.215652674 seconds)
    (29/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.677203326 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.510218538 seconds)
    (31/54) benchmarking ("spmat", "array", 100)...
    done (took 2.923270516 seconds)
    (32/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.20614027 seconds)
    (33/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.634679938 seconds)
    (34/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.693859942 seconds)
    (35/54) benchmarking ("spmat", "array", 10)...
    done (took 2.520798423 seconds)
    (36/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.423740463 seconds)
    (37/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.733919582 seconds)
    (38/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 3.083988726 seconds)
    (39/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.718282055 seconds)
    (40/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 7.148921009 seconds)
    (41/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.42835386 seconds)
    (42/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.768366092 seconds)
    (43/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.352784971 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.176228017 seconds)
    (45/54) benchmarking ("spvec", "logical", 10000)...
    done (took 3.083295419 seconds)
    (46/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.421253767 seconds)
    (47/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.320548932 seconds)
    (48/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.55899342 seconds)
    (49/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.585098045 seconds)
    (50/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.175173263 seconds)
    (51/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.568755433 seconds)
    (52/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.371576255 seconds)
    (53/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.662218776 seconds)
    (54/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 3.051077319 seconds)
  done (took 236.36620528 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 7.705873544 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 7.689022182 seconds)
  done (took 17.872215892 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("IJV", 1000)...
    done (took 2.685143403 seconds)
    (2/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.5190213 seconds)
    (3/18) benchmarking ("Diagonal", 100)...
    done (took 4.808453968 seconds)
    (4/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.355823273 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.616860829 seconds)
    (6/18) benchmarking ("Diagonal", 1000)...
    done (took 2.822972405 seconds)
    (7/18) benchmarking ("Diagonal", 10)...
    done (took 3.947436765 seconds)
    (8/18) benchmarking ("IJV", 10)...
    done (took 3.103384565 seconds)
    (9/18) benchmarking ("IV", 100)...
    done (took 2.86424992 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.582071511 seconds)
    (11/18) benchmarking ("IJV", 100)...
    done (took 2.963488858 seconds)
    (12/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.655057932 seconds)
    (13/18) benchmarking ("Bidiagonal", 10)...
    done (took 4.094129981 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.911622087 seconds)
    (15/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.934229277 seconds)
    (16/18) benchmarking ("IV", 10)...
    done (took 3.034146628 seconds)
    (17/18) benchmarking ("IV", 1000)...
    done (took 2.682853221 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.04126033 seconds)
  done (took 63.04670258 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.849832494 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.998696656 seconds)
    (3/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.834586116 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.425114721 seconds)
    (5/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.41348663 seconds)
    (6/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.417848522 seconds)
    (7/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.127321399 seconds)
    (8/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.682302949 seconds)
    (9/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.833331289 seconds)
    (10/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.902910592 seconds)
    (11/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.428416073 seconds)
    (12/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.95648044 seconds)
    (13/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.942014034 seconds)
    (14/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.212461458 seconds)
    (15/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.455333508 seconds)
    (16/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.417871024 seconds)
    (17/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.84313623 seconds)
    (18/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.42796212 seconds)
    (19/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.7243181 seconds)
    (20/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.452467453 seconds)
    (21/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.62059894 seconds)
    (22/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 3.007250995 seconds)
    (23/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.869645051 seconds)
    (24/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.428706005 seconds)
    (25/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.676179085 seconds)
    (26/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.429458828 seconds)
    (27/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.431504255 seconds)
    (28/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.590729024 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.420516984 seconds)
    (30/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.411357618 seconds)
    (31/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.935258517 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.435458481 seconds)
    (33/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.673294675 seconds)
    (34/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.434282756 seconds)
    (35/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 7.198746357 seconds)
    (36/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.422042659 seconds)
    (37/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.424289195 seconds)
    (38/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.424114204 seconds)
    (39/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.785055137 seconds)
    (40/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.436365813 seconds)
    (41/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.422168132 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.862680497 seconds)
    (43/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.431162481 seconds)
    (44/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.26069254 seconds)
    (45/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.955559342 seconds)
    (46/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.195299205 seconds)
    (47/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.772344498 seconds)
    (48/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.942195613 seconds)
    (49/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 3.010043012 seconds)
    (50/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.5977991 seconds)
    (51/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.650569124 seconds)
    (52/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.982372069 seconds)
    (53/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.441911503 seconds)
    (54/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.981140569 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.913531808 seconds)
    (56/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.428222882 seconds)
    (57/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.928786666 seconds)
    (58/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.421055999 seconds)
    (59/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.884899365 seconds)
    (60/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.86038591 seconds)
    (61/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.369875838 seconds)
    (62/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.419941451 seconds)
    (63/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.939906984 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.820655006 seconds)
    (65/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.429104777 seconds)
    (66/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.419689213 seconds)
    (67/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 3.012045226 seconds)
    (68/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.438267591 seconds)
    (69/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.530644453 seconds)
    (70/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.440502355 seconds)
    (71/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.615782291 seconds)
    (72/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 3.126687353 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.545665485 seconds)
    (74/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.50043502 seconds)
    (75/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.165059634 seconds)
    (76/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.935972445 seconds)
    (77/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.433487329 seconds)
    (78/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.422638035 seconds)
    (79/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.789133124 seconds)
    (80/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.851284691 seconds)
    (81/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.449189779 seconds)
    (82/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.383453223 seconds)
    (83/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.437993229 seconds)
    (84/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.423154348 seconds)
    (85/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.423798233 seconds)
    (86/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.276005646 seconds)
    (87/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.429040834 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.425308164 seconds)
    (89/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.258473878 seconds)
    (90/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.921094977 seconds)
    (91/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.361615883 seconds)
    (92/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.427623848 seconds)
    (93/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.916811976 seconds)
    (94/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.431131349 seconds)
    (95/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.428288632 seconds)
    (96/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.823096129 seconds)
    (97/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.292634729 seconds)
    (98/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.421811436 seconds)
    (99/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.648218866 seconds)
    (100/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.432967021 seconds)
    (101/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.332708453 seconds)
    (102/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.426104208 seconds)
    (103/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.809722628 seconds)
    (104/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.908561538 seconds)
    (105/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.426306585 seconds)
    (106/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.909801566 seconds)
    (107/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.963302181 seconds)
    (108/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.429857415 seconds)
    (109/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.428388695 seconds)
    (110/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.700748366 seconds)
    (111/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.435398019 seconds)
    (112/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 3.025316489 seconds)
    (113/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.979490353 seconds)
    (114/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.406504159 seconds)
    (115/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.420896493 seconds)
    (116/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.422403857 seconds)
    (117/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.426352627 seconds)
    (118/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.422710506 seconds)
    (119/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.905880777 seconds)
    (120/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.442743102 seconds)
    (121/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.419745313 seconds)
    (122/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.430216758 seconds)
    (123/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.891004623 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.424373502 seconds)
    (125/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.950020566 seconds)
    (126/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.960196777 seconds)
    (127/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.207642276 seconds)
    (128/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.431396406 seconds)
    (129/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.42507042 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.42307539 seconds)
    (131/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.069088287 seconds)
    (132/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.368530749 seconds)
    (133/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.430091156 seconds)
    (134/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.420839231 seconds)
    (135/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.930142741 seconds)
    (136/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.42589778 seconds)
    (137/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.911902669 seconds)
    (138/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.428930563 seconds)
    (139/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.439198016 seconds)
    (140/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.513508444 seconds)
    (141/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 7.14270352 seconds)
    (142/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.795291657 seconds)
    (143/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.430017155 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.417876378 seconds)
    (145/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.899161848 seconds)
    (146/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.653335341 seconds)
    (147/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.623626929 seconds)
    (148/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.537856971 seconds)
    (149/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.649727767 seconds)
    (150/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.447818254 seconds)
    (151/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.679794071 seconds)
    (152/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.890219351 seconds)
    (153/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.424928755 seconds)
    (154/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.640556794 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.104273238 seconds)
    (156/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.420768842 seconds)
    (157/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.800043405 seconds)
    (158/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.871932129 seconds)
    (159/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.703213011 seconds)
    (160/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.436363103 seconds)
    (161/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.794809107 seconds)
    (162/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.433644865 seconds)
    (163/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.708518794 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.935638459 seconds)
    (165/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.427011932 seconds)
    (166/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.427624531 seconds)
    (167/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.861123501 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.831716806 seconds)
    (169/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.61277259 seconds)
    (170/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.183900992 seconds)
    (171/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.989721598 seconds)
    (172/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.22676801 seconds)
    (173/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.99381767 seconds)
    (174/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.421616596 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.433395333 seconds)
    (176/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 3.113462459 seconds)
    (177/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.4324863 seconds)
    (178/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.42080888 seconds)
    (179/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.421823101 seconds)
    (180/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 7.188884501 seconds)
    (181/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.900959566 seconds)
    (182/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.42398382 seconds)
    (183/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.852862116 seconds)
    (184/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.394698294 seconds)
    (185/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.924785951 seconds)
    (186/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.429124713 seconds)
    (187/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.949577201 seconds)
    (188/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.749433598 seconds)
    (189/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.442286597 seconds)
    (190/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.420643258 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.424938739 seconds)
    (192/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.793040816 seconds)
    (193/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.905409812 seconds)
    (194/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.421734193 seconds)
    (195/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.423305307 seconds)
    (196/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.920911291 seconds)
    (197/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 3.14373288 seconds)
    (198/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.953854274 seconds)
    (199/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.42198268 seconds)
    (200/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 5.208260137 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.4298923 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.422898753 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.419100515 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.931776232 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.424713904 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.425322481 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.597490428 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.961087461 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.423488305 seconds)
    (210/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.42367971 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.972508629 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.10941567 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.697427457 seconds)
    (214/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.443758552 seconds)
    (215/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.903133108 seconds)
    (216/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.377864398 seconds)
    (217/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.422589086 seconds)
    (218/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.947164996 seconds)
    (219/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.431479775 seconds)
    (220/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.42118495 seconds)
    (221/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.973277813 seconds)
    (222/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.808727813 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.930415772 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.436363475 seconds)
  done (took 1142.190478338 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.943753327 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.486446796 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.792813406 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.24544627 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.241940795 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.510607676 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.982910787 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.594503402 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.849045213 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.917799139 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.720721304 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.469993542 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.329545532 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.698847729 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.704338267 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.622492244 seconds)
  done (took 88.532957384 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.504845969 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.49205622 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.492268685 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.469235415 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.512493206 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 7.500204566 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.511700382 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.463889628 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.500084999 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.481440331 seconds)
  done (took 77.344658102 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.890586554 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.52059053 seconds)
  done (took 12.825118629 seconds)
done (took 1640.616457953 seconds)
(8/23) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.460376441 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 2.812039119 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 2.530496937 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.499924147 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 4.04205287 seconds)
    (6/49) benchmarking "13786"...
    done (took 2.453792686 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.45804667 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 2.457816767 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.836487299 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 3.23200213 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.583121324 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 4.092969533 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 2.949263537 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 2.527024171 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 2.459002762 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 2.457091884 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 2.929839273 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 3.283466073 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.442918304 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 2.467854996 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 2.454389874 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.462539733 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 2.457101019 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 2.460844248 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 2.924737681 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 4.133682053 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 4.832800499 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 2.47716481 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.802612293 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.533203818 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.457467842 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.455018586 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 2.455160738 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 2.456231027 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 3.179871968 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 3.283283208 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.497576636 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.462075405 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.463604327 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.310306634 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 2.470748241 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 2.464882296 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.45597178 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.459424478 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 2.454324414 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 2.45265727 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.381817481 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 4.89471125 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 2.494779401 seconds)
  done (took 144.483287922 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.474363255 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.480883038 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.558639988 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.612398435 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.484587655 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.469442306 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.480705335 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.606581608 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.480480523 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.476962754 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.546920759 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.478659383 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.478072107 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.467456625 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.482432155 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.614785577 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.479288985 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.464743386 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.475951353 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.472397635 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.554229945 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.478708914 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.482185616 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.482318144 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.475817791 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.473368702 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.551069164 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.479638364 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.562713302 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.469840413 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.480089384 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.473880855 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.474991738 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.490546936 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.484823715 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.482668797 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.465886991 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.611721305 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.485478478 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.541788294 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.603858149 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.471543671 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.490134644 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.47523993 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.474324344 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.470741624 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.487268471 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.467596233 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.474589016 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.540489464 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.478441962 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.545479574 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.467011885 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.607092887 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.481449708 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.476436363 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.549898001 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.490379805 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.609586772 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 2.505441699 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.473860007 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.553422567 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.478377198 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.607550682 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 2.511634451 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.476416858 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.468848343 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.493550545 seconds)
  done (took 172.736667548 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.505899751 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.501289551 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.50695817 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.499363785 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.716383432 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.511342631 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.708104567 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.564483057 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.500590759 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.505265296 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.710639022 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.499232786 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.559890898 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.497359815 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.510082548 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.555309745 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.714356547 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.502302085 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.561829528 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.50083798 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.501483015 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.490802602 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.499523793 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.700346786 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.504251915 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.502548063 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.483325412 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.501192525 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.501028205 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.478228221 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.562355029 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.499219334 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.50473403 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.492881922 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.495658968 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.698702487 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.704659179 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.475224937 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.495058674 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.473302822 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.558886632 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.501729264 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.503610323 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.478331949 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.564256217 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.555902515 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.504669507 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.55447795 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.500619009 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.500035564 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.555047342 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.493919052 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.534650098 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.496983036 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.499681582 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.692770496 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.568057455 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.502971305 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.482794492 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.556573335 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.49944624 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.553405812 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.565568782 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.50192289 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.498138823 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.526783448 seconds)
  done (took 169.86723236 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.432749411 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.428075934 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.445280794 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.443774606 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.432502504 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.440317363 seconds)
  done (took 17.038096483 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 2.492665498 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.561762064 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.565994295 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.559693848 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.561781937 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.273488679 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.553509752 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.281678006 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.267195392 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.602588708 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.567644675 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.603462613 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 2.487098712 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 2.48892241 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.493158235 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.279762363 seconds)
  done (took 46.06678241 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.505671198 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 2.479247756 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.477027477 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.36964254 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.4711989 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.476781077 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.506591334 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.41397708 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.537069743 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.494889241 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.496537293 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.479661818 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.497387941 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.478947505 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.468954441 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.481729565 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.470938682 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.469959033 seconds)
  done (took 48.994710826 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.567230876 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.473457212 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.611373187 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.658294264 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.500380785 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.559562615 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.474714017 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.648603869 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.66339764 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.648528543 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.603328168 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.616221239 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.48083282 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.600015395 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.55190582 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.478770529 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.547449026 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.539365804 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.479623335 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.536944984 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.473068247 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.500049021 seconds)
  done (took 58.630878287 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.476753275 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.491076562 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.709616411 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.497414496 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.704844429 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.495155851 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.697609967 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.561679398 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.488777465 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.492013486 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.70979224 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.508901212 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.505049043 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.494017059 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.4932424 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.495786378 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.511525321 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.707422296 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.489163002 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.563112782 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.49305491 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.565665888 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.491031806 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.507072687 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.711444691 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.50914279 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.521926909 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.696907081 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.476731449 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.477001092 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.492471086 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.49264565 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.491163216 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.510697577 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.507841074 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.490540073 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.505890307 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.560912497 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.491123426 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.493221074 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.492633909 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.495073073 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.524068912 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.49869423 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.561728144 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.568460199 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.505003462 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.47836854 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.501726965 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.491564747 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.504632365 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.496849732 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.712124431 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.489569246 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.501796459 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.495003566 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.562343532 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.508517622 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.506259522 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.505469401 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.636139785 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.749208474 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.728082105 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.511110713 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.548968529 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.617290144 seconds)
  done (took 170.190219968 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 2.621490902 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.56598245 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.517737005 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.497173483 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.494226054 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.472459086 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.4972141 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.475301282 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.960641157 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.500968397 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.472174202 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.418800266 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.472073295 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.4940642 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.961389623 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.51532631 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 2.496195878 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.469893461 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 2.49891998 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.470493196 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.497684343 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.47313134 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 2.505135451 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.494492521 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.423357226 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.495418737 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.475945214 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.495654458 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.470770478 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.497767691 seconds)
  done (took 94.20119037 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.474125473 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.522553777 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.549481404 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.523834241 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.528345708 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.469425002 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.481479085 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.539470302 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.47723162 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.524075567 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.538804801 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.474428221 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.542602981 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.475300364 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.509952838 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.511037155 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.471227256 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.477753317 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.479549976 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.468421534 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.482656815 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.473585973 seconds)
  done (took 57.41262137 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 2.464363038 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.571273523 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.570746017 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.36129271 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.568849902 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.638728603 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.478605756 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.56340725 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.363874635 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.557147035 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 2.539975985 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.477112351 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 2.471303819 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.539801556 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.542103597 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 2.55719672 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.642621672 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.538345366 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.56987817 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.538476654 seconds)
  done (took 56.975937077 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.508229923 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.557663501 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.553848719 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.526552428 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.526489586 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.876847247 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.480807069 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.5543335 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.480814425 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.523810886 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.030183889 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.556725698 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.513197713 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.521417259 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.868118444 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.528620079 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.508265885 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.489725684 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.480226485 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.484004644 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.029943766 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.507315899 seconds)
  done (took 59.528328174 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.482109037 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.47891293 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.485617482 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.681815612 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.491645075 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.479380162 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.485370455 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.487099917 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.482995948 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.480910995 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.531985861 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.519759151 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.514077783 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.499657549 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.485233264 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.680573338 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.508495809 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.480268799 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.509394511 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.487346405 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.486484551 seconds)
  done (took 55.156070558 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 2.4585683 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 2.453085948 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.502280952 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 2.469294442 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.441330543 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.455236202 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.449596842 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.518724355 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.443080228 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.455956599 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 2.451232899 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 2.451258142 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 2.460077321 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 2.547129588 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.443620367 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.456482716 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.458125654 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.505079558 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.45650866 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.463632006 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.461123681 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 2.448134436 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.453024241 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.457645731 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.458705103 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 2.488122374 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 2.458407914 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 2.442997762 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 2.440270458 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.456051855 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 2.451815147 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 2.498990681 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 2.564652409 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 2.463000013 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 2.455923465 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.610033971 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 2.493772079 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 2.443542919 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 2.444070372 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.458353117 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.460400854 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 2.472644418 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 2.451743427 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.442050474 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.456075332 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 2.451312806 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 2.454981688 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.442212853 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.442112041 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.45940037 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.442010977 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.453194965 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.444464937 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 2.455508591 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 2.455446796 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.441640324 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 2.44473141 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 2.456454442 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 2.442419228 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.455403555 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.447253922 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.442714068 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.461167477 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 2.44630981 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 2.452897239 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.440705514 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.458315248 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.461465544 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 2.455710127 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 2.452447051 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.535901017 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.464511319 seconds)
  done (took 179.751988863 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.558708248 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.525109671 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.617123129 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.774648453 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.617223785 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.555959133 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.555490426 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.5249117 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.558324051 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.61275782 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.619180866 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.552575485 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.616929693 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.55211247 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.559264506 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.553236039 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.559942038 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.551968784 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.613593091 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.552492356 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.524021083 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.555552345 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.778667832 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.553258507 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.526709623 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.61432487 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.57744446 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.512314206 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.559247681 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.55380978 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.614335595 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.513684823 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.536548229 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.55201707 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.554979418 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.518815047 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.554430054 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.553985644 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.558280601 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.557927755 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.532591337 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.552744812 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.528221978 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.611503726 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.781490738 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.616793782 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.610476709 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.554467683 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.557328529 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.571362464 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.553735864 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.527771309 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.556027496 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.553564686 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.615690487 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.609545493 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.612926658 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.774821114 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.553018525 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.555766774 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.555675657 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.553550642 seconds)
  done (took 162.260044774 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 2.474564968 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.338776334 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.324487814 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.47426006 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.425997079 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.477006028 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.551420609 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.476499255 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.47406227 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.48128821 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.375640341 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 2.476635712 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.335084152 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.41058218 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.478373291 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.475325113 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.300826235 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.47524968 seconds)
  done (took 54.244028868 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 2.488385648 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.495040857 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.4866286 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.293270452 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.49505041 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.478334821 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.805115304 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.488601261 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.29439765 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.489908201 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.491334832 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.496775847 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.491011547 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.43351522 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.432381709 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.431975278 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 2.487070656 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.43339842 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.807547941 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.490693499 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.490493584 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.489146168 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.482145415 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.486898185 seconds)
  done (took 72.178507766 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.476610417 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.484570666 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.479449067 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.478703172 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.480907048 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.507538859 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.479146794 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.505486832 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.665454808 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.482005772 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.507237826 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.482252962 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.508461943 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.51087343 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.508716181 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.508526484 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.664699114 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.485181654 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.476093946 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.480259273 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.48726692 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.47865312 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.476723036 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.507538085 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.479335136 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.481504605 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.484328856 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.480892058 seconds)
  done (took 72.470256589 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.498357065 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 2.482325052 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.505514534 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.554898044 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.552472502 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.504181232 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.485287915 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.497556199 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.480618787 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.495511907 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.553591904 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.55919632 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.544872259 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.503075968 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.48709336 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.483359391 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.510085277 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.477267711 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.474105194 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.485592512 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.511145169 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.482615993 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 2.482216384 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.557586568 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.477674449 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.479079367 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.543878619 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.508424854 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.55249517 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.506463524 seconds)
  done (took 77.660078934 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.458908687 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.504665557 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.467387598 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.478079899 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.501489763 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.471729013 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.475077254 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.492689375 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.46697538 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.46912531 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.840956201 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.469558578 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.488087728 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.509659823 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.462602074 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.46736892 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.484558944 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.467236178 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.459145621 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.950709796 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.473776522 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.493854745 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.486310178 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.468811716 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.47292068 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.467889965 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.488358938 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.490272742 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.490060049 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.836333174 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.500338793 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.473777114 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.470069654 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.465652305 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.473809089 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.500829384 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.824249619 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.944203816 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.486318237 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.467664443 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.463201842 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.503771613 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.46044902 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.487290284 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.463917625 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.46812667 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.460081302 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.460367867 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.489098007 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.492841661 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.461867026 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.511146499 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.507551164 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.471663542 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.827932077 seconds)
  done (took 141.11233026 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.498663022 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.474573049 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.474536551 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.477384927 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.476977726 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.498249037 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.51432087 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.540057153 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.532437327 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.486062865 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.475796846 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.527608473 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.494600121 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.403608013 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.473747646 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.481507543 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.47600998 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.383561682 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.480167722 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.485292099 seconds)
  done (took 54.074388036 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.501138095 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.498286871 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.480008182 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.497011962 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.537100127 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.480490916 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.889486479 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.53099466 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.549392522 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.549474494 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.959849218 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.479473179 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.483901156 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.888515767 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.500958755 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.467191547 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 2.484610455 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.479453197 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.485001809 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.467414645 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.95346765 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.493887485 seconds)
  done (took 59.07844007 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 2.471309922 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.658707559 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.582144065 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.60585749 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 2.4712058 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.534294069 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.5374796 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.61111215 seconds)
  done (took 22.894658261 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.458410631 seconds)
    (2/2) benchmarking "in"...
    done (took 2.456715323 seconds)
  done (took 7.337438549 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.703413134 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.586170006 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.45568241 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.577913987 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 5.450830539 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.12080135 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.482452504 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.929784426 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.548690624 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.460562014 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.46072129 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 4.140260031 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.547601788 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 4.01483575 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.435826752 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.472052451 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.398940102 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.52469036 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.686637594 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.819720819 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.867016436 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.589096088 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.464033828 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.886249681 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 5.029092103 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.639025658 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.685623126 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.458497628 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.541509419 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 4.003245341 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.308786259 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.332066286 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.857801482 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.816171099 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.523675931 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.861755331 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.523669514 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.470405726 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.550388327 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.271109739 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.744576022 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 3.291488992 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.660637268 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.576640956 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.528403928 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.348046657 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 4.06768867 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.460640771 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.45757495 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.444775412 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.449564739 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 3.034179653 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.715212461 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.514301856 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.935455426 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 3.286423036 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.463695906 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 4.038011324 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.702273301 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 3.308874859 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.131571083 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.305902428 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.330629244 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 3.28256191 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 4.014700815 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.68285148 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.460736026 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.466457348 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.458027899 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.464945987 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.318119456 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 5.336090466 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.381034583 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.293352392 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.284617478 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.7034657 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.533347338 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.505602729 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.122891828 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.60878368 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.40763897 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 4.001602253 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.523386051 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.154074325 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.382223201 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.794686227 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.698606541 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.574171607 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.46436157 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.463889356 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.164807241 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.655449333 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.257893383 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.161963616 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.858389353 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.859200815 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.638347028 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.455810961 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.455372768 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.877423408 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 3.287806247 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.151044121 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.71664323 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.571318681 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.456799143 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.573762942 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 4.07844267 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.661334728 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.587836234 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 4.061252196 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 4.008672741 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.605525839 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.586379871 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.381865532 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 5.014132979 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 5.16739715 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.016232341 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.626808972 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.461285361 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.872382556 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.53038238 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.463075471 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.463401008 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.463880614 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.337085791 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.563544145 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.328778868 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.484477633 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.423339348 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.691616708 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.660527924 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.571152635 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.578524386 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.462612904 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.461752285 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.46465287 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 3.151747 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.370047152 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.500885333 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.46330855 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.853549884 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 4.056968834 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.604976289 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.940568779 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.086492281 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.997333602 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.484358768 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.185779983 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.254268965 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.58974496 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.491506906 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.840647318 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.582443648 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.460599386 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.471719669 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.913582952 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.573380539 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.528669757 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.457638103 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.350108691 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.526135132 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.461404648 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.756663064 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 3.126989012 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.650720605 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.281182332 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.921404046 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.649562522 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.969082347 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.722331661 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.743411984 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.761116475 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.540628384 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.529119231 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.544391393 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.558724198 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.671922331 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.603798975 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.467935364 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.33143546 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.586522617 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.192464119 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.276579382 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 3.142435847 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.285108498 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 3.134083499 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.370126783 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 5.342353241 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.639472702 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.587009949 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 3.996074462 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.472459913 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.461557389 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 4.052297733 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.603483108 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.778755024 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.523599737 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.260720502 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.375203674 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.477410784 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.734120526 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.300856086 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.942689211 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 3.026461701 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.533912845 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.328314794 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.494804108 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.295388725 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.595901482 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.139945479 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.636453946 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.778176348 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.216131058 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 3.294484853 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.463634438 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.461240801 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.400013146 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.528256619 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.338253612 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.808380522 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.555877222 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.871748591 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.854207757 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.882824358 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.613907346 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.462583905 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.269357754 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.826137917 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.424002549 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.078697242 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.906472612 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.577514201 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.510260185 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.466569957 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.684410476 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.13044255 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.394937707 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.606070173 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.489219812 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.476376975 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.300934363 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.513306646 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.45748699 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.350190356 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.085880923 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.875364752 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.7037576 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.793283498 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.912924954 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.764727222 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.582058115 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.56176804 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.020576064 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.594491732 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.943424013 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.789729798 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 4.072555138 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.465691086 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.319533928 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.827930651 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.701395602 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.477581731 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.461044896 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.205959657 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.317855193 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.337385011 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.983030578 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.921721341 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.685539004 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 5.441848573 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.883848227 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.453666168 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 4.042946896 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.509847389 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.462211291 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 4.132591492 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 3.294251414 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.46049589 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.461316863 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.793264791 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.298809455 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.857588938 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.664500994 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.333880237 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.521942097 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.707974964 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.951566795 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.867273774 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.349766324 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.053735853 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.72114732 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.576461509 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.597685149 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.562862845 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.348045301 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.738891944 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 4.005760064 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.229974113 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.047813949 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.612114443 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.904640231 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.747319146 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.459878953 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.462026328 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.324909526 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 4.059970739 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.817244095 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.777016017 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 4.922156906 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 4.058890385 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.812505684 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.049009148 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.19530614 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.265103081 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.60142922 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.897852602 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.294502534 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.470245457 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.461584538 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.468149085 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.532792005 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.788407608 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.532026879 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.627448166 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.931374605 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.731349521 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.355477259 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 4.060954047 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.538198 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.20919869 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.063255099 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.632302387 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.741584889 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.92521618 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.01495559 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.835413787 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.579083784 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.397665351 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.586405846 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.296037676 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.274670473 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.261017293 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.92973042 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.520944844 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 3.153167569 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.886162852 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.823892265 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.531353301 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.600297037 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.606419411 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.334146647 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.594324475 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.718895149 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.917317031 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.575114595 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.460416735 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.462289966 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.474390273 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.831836245 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.497036126 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.544523914 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.576943568 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.692737631 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 3.057857756 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.033080291 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 4.070255879 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.595142556 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.466761997 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.735793073 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.178450647 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.791109954 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.921413925 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.812997091 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.336994053 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.866860022 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.147722398 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.71818042 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.80155814 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.499203322 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.542099136 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.463306 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.462529963 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.172019197 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.624606052 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.468060081 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.417515333 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.599306359 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.596878261 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.465177658 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.408994065 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 5.125301028 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 4.014376858 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.418079483 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.254393442 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.59876004 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.465233706 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.466057375 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.351798286 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.453735656 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.437918394 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.719856749 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.368174447 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.5170846 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.18545054 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.285052371 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.169677062 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.205984248 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 3.285578222 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.468852377 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.927006807 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.799772909 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.828148658 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.528499703 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.631003309 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.577822709 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.466899899 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.16980182 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.118202843 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.72809 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.466561421 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.463813102 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.831960255 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.592320403 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.866817243 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.587931525 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.471399841 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.58559168 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.925596531 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.663536638 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.462335044 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.466094361 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.888218056 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.701213394 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.372232764 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.605185006 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.604551997 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.803514895 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.656458513 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.155025037 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.040378924 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.659092797 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.026169153 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.736137352 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.465638455 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.475547666 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.9169284 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.405161372 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 4.112354059 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.224338243 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.528735415 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 3.124830309 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.654825299 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.723565424 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.624927716 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.340538173 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.588215016 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 3.994908106 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.093460207 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.563084949 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.467901238 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.788332399 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.527850886 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.821080037 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.638508176 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.682472987 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.607442802 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.475990941 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.477120993 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.465649531 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.475276551 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.792406472 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.537161349 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.308628128 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 3.864329661 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.47339287 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.467034621 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.465605258 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.484391662 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.610394629 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.483024134 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.590235089 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 5.366271675 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.84494409 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.363291333 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.608031069 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.601908951 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.774320391 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.438499771 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.339300361 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 4.871553987 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.471299157 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.652203728 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.850709932 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.457350486 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 3.03382305 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 3.025578812 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.540545382 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.470410685 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.468738864 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.170231738 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 3.414510789 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.473113202 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.469007886 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.846268713 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 4.06146765 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.59578933 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.465850338 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.466356169 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.470104001 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.572661229 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 4.028256927 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.471877169 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.29209681 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.601122537 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.464161843 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.311879734 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.843438754 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 4.736841323 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 4.090757616 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.474515947 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.469993448 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.967215191 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.719935474 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 3.110518829 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.630816887 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.297825863 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.663186082 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.453613844 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.485714099 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.477893625 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.468298989 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 4.058949759 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.594754278 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.47224758 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.473078443 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.960730238 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.749744691 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.546416697 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.499053364 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.501658323 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.616053247 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 4.337869353 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.534011895 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.740307085 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.477160807 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.844364653 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.7848426 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.843679879 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.56836833 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.60574175 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.770793657 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.624981426 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.51381037 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.522278097 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.576939513 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 4.508611088 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.515649251 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.484357987 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.639819975 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.474492568 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.534866915 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 4.025536601 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.474074743 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.472640696 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.988562145 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.641929746 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.182138231 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.609620297 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.475455443 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.486482565 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.421039663 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.551723762 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.46838468 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.67626196 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.861013778 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.623945861 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.844126427 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.852414904 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.619687112 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.47848822 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.016705719 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.044449404 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.764770947 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.528719357 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.471983222 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.467196178 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.445068613 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.747635713 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.596096133 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.604076573 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 5.013438444 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 3.142863587 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 4.011470187 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.583193433 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.153870813 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 4.139797224 seconds)
  done (took 1964.921768013 seconds)
done (took 4021.693783574 seconds)
(9/23) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.662802888 seconds)
    (2/7) benchmarking "month"...
    done (took 2.574438645 seconds)
    (3/7) benchmarking "year"...
    done (took 2.557009327 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 2.47511895 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.485738465 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.489957957 seconds)
    (7/7) benchmarking "second"...
    done (took 2.486370845 seconds)
  done (took 20.162203985 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 3.109116431 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.930530966 seconds)
    (3/9) benchmarking "Date"...
    done (took 2.94483795 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 3.084426794 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.490079486 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.28663106 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 2.474280815 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.192466566 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.301208062 seconds)
  done (took 29.246862333 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 2.562547395 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.484742069 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.485858888 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.494973508 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.685387843 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.614232562 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.497974986 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.611562633 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.644883624 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.674315905 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 2.627638637 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 2.477697677 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.651506233 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.672317185 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.601564834 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.636232017 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.479263186 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.632720265 seconds)
  done (took 48.971039032 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 2.455436862 seconds)
    (2/2) benchmarking "Date"...
    done (took 2.45418102 seconds)
  done (took 7.337615232 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.467397521 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.478066189 seconds)
  done (took 7.373941185 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 3.621535713 seconds)
    (2/2) benchmarking "Date"...
    done (took 3.559748714 seconds)
  done (took 9.614176526 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 2.998564865 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 2.471421595 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 2.468710045 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 2.47356598 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 2.726607163 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 2.929277952 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 2.794104268 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 2.471988423 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.474112791 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.471626392 seconds)
  done (took 28.775974137 seconds)
done (took 154.670937224 seconds)
(10/23) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 7.433367191 seconds)
  (2/4) benchmarking "strings"...
  done (took 7.526610104 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 7.984853529 seconds)
  (4/4) benchmarking "arrays"...
  done (took 7.666720552 seconds)
done (took 33.041153652 seconds)
(11/23) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.612319686 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.612034174 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.702378472 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.743729858 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.698137331 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 2.99940092 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.704712192 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.586249133 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.698327052 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.610773932 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.59221045 seconds)
  done (took 31.990844797 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.602143297 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.605129975 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.689397945 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 4.713899784 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.701417665 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 3.336181897 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.698013923 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.648057729 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.701044909 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.607951096 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.725048597 seconds)
  done (took 34.47683815 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.509932961 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.538831532 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.539645944 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.611374726 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.550424275 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.561345271 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.542208034 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.570290548 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.578467823 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.502051885 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.546211413 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.483169219 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 4.769461406 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.560664353 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.49830483 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 4.816725159 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 3.153113295 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.558537504 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.568598447 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.698630724 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.503254765 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.543608833 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.499778206 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.584497159 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.485472656 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.483070875 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.478018562 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.59250328 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.553078154 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.525739101 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.567013337 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.49582674 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.607619295 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.4789713 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.542885965 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.479786005 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.54023332 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 3.021695958 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.522761733 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.492834604 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.584504392 seconds)
  done (took 112.172729759 seconds)
done (took 181.073651594 seconds)
(12/23) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.899872888 seconds)
    (2/2) benchmarking "read"...
    done (took 2.959674524 seconds)
  done (took 8.286803424 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 7.508799701 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.78960301 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.915779931 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.581818531 seconds)
  done (took 25.720684558 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.496962026 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.714157849 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.631303656 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.551765539 seconds)
  done (took 27.902519112 seconds)
done (took 71.845180005 seconds)
(13/23) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.438527038 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.440821426 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.440286525 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.441700508 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.437069097 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.44676257 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.438162896 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.441662773 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.439121673 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.443404027 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.43935871 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.437621869 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.43682758 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.445683738 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.439799298 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.438786204 seconds)
  done (took 41.471813814 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.438233875 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.443067371 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.449920382 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.443411902 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.438581342 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.43816404 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.440454236 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.441288447 seconds)
  done (took 21.961379985 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.440426474 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 2.454847016 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.446320661 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 2.4363482 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 2.445010244 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.443211912 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.443180349 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.437532828 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.445097251 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.439805808 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.441553437 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 2.440427353 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.441135733 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.441209265 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.438426693 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.441618172 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 2.440637699 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.446735812 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.442807376 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 2.438643199 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.44018307 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 2.440471641 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.439346078 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.440574516 seconds)
  done (took 61.03315119 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.471176051 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.904300347 seconds)
  done (took 7.803637725 seconds)
done (took 134.692764121 seconds)
(14/23) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.559249337 seconds)
    (2/2) benchmarking "String"...
    done (took 2.644741057 seconds)
  done (took 7.632584536 seconds)
  (2/7) benchmarking "join"...
  done (took 7.475617733 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 2.603099787 seconds)
    (2/4) benchmarking "different"...
    done (took 2.53370766 seconds)
    (3/4) benchmarking "identical"...
    done (took 2.74312262 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.599075561 seconds)
  done (took 12.908394471 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.455718321 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 7.210065413 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 3.422818355 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 3.075389548 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.900853454 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 2.633951104 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.08809155 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 5.341185939 seconds)
  done (took 34.101315396 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.747518118 seconds)
    (2/3) benchmarking "different"...
    done (took 2.49776042 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.471231568 seconds)
  done (took 10.150463135 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.605006638 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.579686877 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.230040615 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.641797518 seconds)
  done (took 16.483923905 seconds)
done (took 94.65095763 seconds)
(15/23) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.4842924 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.47266696 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.478905351 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.999137162 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 3.252975926 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.484109602 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.519457681 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.464896079 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.556496606 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.703564722 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.677410368 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.332561737 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.464688708 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.427029096 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 4.708293614 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.476318995 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.464448444 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.535462334 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.464294603 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.604829242 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.474740715 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.466334468 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.484733895 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.478926014 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.545075518 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.498292484 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.464350528 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.485925033 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.464223746 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.463361559 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.544088133 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.475165281 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.994700183 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 3.269814921 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.781221854 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 4.241217762 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 3.229746661 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.488057485 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.495787149 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.493758986 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.444411394 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 3.053949422 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.60220722 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.530721076 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.48602978 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.490022804 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.467240978 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.521420196 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 3.021810145 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 3.075707277 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.413204389 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.206130264 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.460821148 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.70589553 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.482450382 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.493311303 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.547915422 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 3.001526396 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 3.269606967 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.465679284 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.492104394 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.467766998 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.487858278 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.538014558 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 3.00098497 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.251603855 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.775262522 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.194927685 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.535282388 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 6.452498438 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 3.163783776 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.999704378 seconds)
  done (took 213.942377086 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.86201418 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.524353882 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.091765431 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.876065648 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.09725523 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.58261574 seconds)
  done (took 21.24802751 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.490566932 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.481880969 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.474259437 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.773164209 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.562596783 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.500520382 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.478138991 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.48230657 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.525790164 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.515084899 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.497636769 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.483715397 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.477891502 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.431091496 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.74193838 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.499542169 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.47897891 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.498741271 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.771222503 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.490949959 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.478603155 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.49900094 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.724573413 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.491664463 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.489775245 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.535861333 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.563859831 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.53032607 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.500724013 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.758202671 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.486241982 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.616102028 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.508386806 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.486972519 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.489104549 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.772398275 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.655292612 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.725273276 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.42858258 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.436790358 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.664572281 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.318286919 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.344305062 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.875214485 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.7250577 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.547315233 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.495614728 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.660977551 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.43258378 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.30822223 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.471637221 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.494283106 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.616887446 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.431007121 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.631585346 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.602703463 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.490175271 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.433052974 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.485795633 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.475386272 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.479154624 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.499530386 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.662371118 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.49749078 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.472813352 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.700185959 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.729381937 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.431240879 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.207983961 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.497463068 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.477997371 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.640169171 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.61459295 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.49888667 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.624642602 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.496034806 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.534788154 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.432593178 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.601878146 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.370557661 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.727712369 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.439213246 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.478982726 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.499861605 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.433769269 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.496607692 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.759989316 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.491298178 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.348807361 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.50671977 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.434113511 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.549455889 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 3.169130931 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.489688689 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.774840388 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.728729047 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.793323844 seconds)
  done (took 313.426916682 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.68548873 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.77538565 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 3.032512131 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.784816054 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.578610193 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.785230175 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 3.093343998 seconds)
  done (took 22.165645886 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.640479097 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.826479351 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.435955547 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.436834829 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.436880657 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.640423806 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.438828011 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.763835199 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.666989274 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.81583254 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.705830753 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.802138776 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.436454679 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.436511843 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.43215052 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.65298317 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.542579408 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.658778479 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.433119043 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.433850709 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.645090809 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.626019017 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.66482375 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.438269465 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.502928398 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.433555574 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.433107944 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.71442019 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.626140214 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.6756912 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.439545526 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.758954875 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.761465756 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.661040313 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.441458179 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.598300386 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.753948751 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.749042408 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.664507327 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.481394228 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.61484773 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.526285007 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.675050852 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.594562381 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.717165732 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.606729657 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.598246982 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.745317556 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.436573346 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.480774518 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.624017158 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.433196319 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.628634795 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.499139644 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.662421921 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.788986067 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.639418596 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.432952633 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.612046761 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.431482364 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.711583762 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.433956502 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.43542807 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.434340904 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.681063758 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.437177752 seconds)
  done (took 283.055177786 seconds)
done (took 856.693393863 seconds)
(16/23) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.334331233 seconds)
  (2/8) benchmarking "mandel"...
  done (took 3.867568502 seconds)
  (3/8) benchmarking "pisum"...
  done (took 7.466340676 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 7.506128661 seconds)
  (5/8) benchmarking "printfd"...
  done (took 7.432108347 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 7.777213915 seconds)
  (7/8) benchmarking "fib"...
  done (took 2.840772505 seconds)
  (8/8) benchmarking "parseint"...
  done (took 3.429411932 seconds)
done (took 48.090766071 seconds)
(17/23) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup")...
    done (took 2.48672247 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 2.477952713 seconds)
    (3/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.481840025 seconds)
    (4/9) benchmarking (10, "tup_tup")...
    done (took 2.485619193 seconds)
    (5/9) benchmarking (5, "tup_tup")...
    done (took 2.478117727 seconds)
    (6/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.475267869 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.438498091 seconds)
    (8/9) benchmarking (3, "scal_tup")...
    done (took 2.903302435 seconds)
    (9/9) benchmarking (3, "tup_tup")...
    done (took 2.471886205 seconds)
  done (took 30.137062352 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.438255378 seconds)
    (2/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.222529547 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.435967294 seconds)
  done (took 23.527937633 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 5)...
    done (took 2.567800012 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.739610873 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.578107954 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.701818286 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.918199022 seconds)
    (6/6) benchmarking ("tuple", 10)...
    done (took 2.699828891 seconds)
  done (took 18.636399478 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.439464478 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.437807651 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.436526289 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.436819455 seconds)
  done (took 32.184083125 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 2)...
    done (took 2.829571932 seconds)
    (2/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.509803199 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.551829245 seconds)
    (4/4) benchmarking ("(10000000,)", 1)...
    done (took 2.827105064 seconds)
  done (took 13.148303232 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.563440231 seconds)
done (took 123.642935038 seconds)
(18/23) benchmarking "parallel"...
done (took 2.817369372 seconds)
(19/23) benchmarking "linalg"...
  (1/4) benchmarking "blas"...
    (1/36) benchmarking "gemv"...
    done (took 5.422569557 seconds)
    (2/36) benchmarking "nrm2"...
    done (took 3.316558376 seconds)
    (3/36) benchmarking "trsv"...
    done (took 3.994918811 seconds)
    (4/36) benchmarking "gbmv"...
    done (took 4.96003348 seconds)
    (5/36) benchmarking "asum"...
    done (took 3.194773804 seconds)
    (6/36) benchmarking "trsm"...
    done (took 7.479886023 seconds)
    (7/36) benchmarking "symv!"...
    done (took 3.851247086 seconds)
    (8/36) benchmarking "symm!"...
    done (took 7.516379071 seconds)
    (9/36) benchmarking "trmv"...
    done (took 3.996226396 seconds)
    (10/36) benchmarking "dot"...
    done (took 3.405158966 seconds)
    (11/36) benchmarking "herk"...
    done (took 7.583077044 seconds)
    (12/36) benchmarking "dotu"...
    done (took 3.448686712 seconds)
    (13/36) benchmarking "scal"...
    done (took 2.561969426 seconds)
    (14/36) benchmarking "sbmv"...
    done (took 4.956641736 seconds)
    (15/36) benchmarking "dotc"...
    done (took 3.453420483 seconds)
    (16/36) benchmarking "gemm!"...
    done (took 7.482667311 seconds)
    (17/36) benchmarking "gemv!"...
    done (took 5.386471695 seconds)
    (18/36) benchmarking "symm"...
    done (took 7.511779533 seconds)
    (19/36) benchmarking "ger!"...
    done (took 7.432393246 seconds)
    (20/36) benchmarking "trsm!"...
    done (took 7.488775285 seconds)
    (21/36) benchmarking "gemm"...
    done (took 7.495375074 seconds)
    (22/36) benchmarking "trmm!"...
    done (took 7.46196732 seconds)
    (23/36) benchmarking "herk!"...
    done (took 7.625891494 seconds)
    (24/36) benchmarking "scal!"...
    done (took 3.366784556 seconds)
    (25/36) benchmarking "syrk"...
    done (took 7.475254396 seconds)
    (26/36) benchmarking "blascopy!"...
    done (took 3.659821183 seconds)
    (27/36) benchmarking "gbmv!"...
    done (took 4.903394032 seconds)
    (28/36) benchmarking "trmm"...
    done (took 7.47071292 seconds)
    (29/36) benchmarking "syrk!"...
    done (took 7.47185228 seconds)
    (30/36) benchmarking "her!"...
    done (took 7.435930017 seconds)
    (31/36) benchmarking "syr!"...
    done (took 7.438201344 seconds)
    (32/36) benchmarking "sbmv!"...
    done (took 4.864307883 seconds)
    (33/36) benchmarking "trsv!"...
    done (took 3.967550542 seconds)
    (34/36) benchmarking "trmv!"...
    done (took 3.961570682 seconds)
    (35/36) benchmarking "symv"...
    done (took 3.909339228 seconds)
    (36/36) benchmarking "axpy!"...
    done (took 3.635441388 seconds)
  done (took 199.01899415 seconds)
  (2/4) benchmarking "factorization"...
    (1/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.508449246 seconds)
    (2/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.537566603 seconds)
    (3/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.442277609 seconds)
    (4/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.541275408 seconds)
    (5/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.463188359 seconds)
    (6/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.434034812 seconds)
    (7/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.592792157 seconds)
    (8/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.442960718 seconds)
    (9/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.43990452 seconds)
    (10/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.440314127 seconds)
    (11/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 3.459808198 seconds)
    (12/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.553001842 seconds)
    (13/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.434096464 seconds)
    (14/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.456427173 seconds)
    (15/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.452997987 seconds)
    (16/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 8.438416624 seconds)
    (17/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.552746129 seconds)
    (18/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.460533193 seconds)
    (19/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.476233864 seconds)
    (20/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 2.470257981 seconds)
    (21/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 9.726176467 seconds)
    (22/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.288091195 seconds)
    (23/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 8.943778559 seconds)
    (24/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.453777526 seconds)
    (25/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.435273935 seconds)
    (26/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.489302732 seconds)
    (27/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.459550552 seconds)
    (28/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.438682849 seconds)
    (29/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.559498942 seconds)
    (30/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.149652948 seconds)
    (31/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 8.442789082 seconds)
    (32/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 8.643196476 seconds)
  done (took 221.057036656 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.544155062 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.43646548 seconds)
    (2/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.441510247 seconds)
    (3/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 2.435681756 seconds)
    (4/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.439610199 seconds)
    (5/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.443259352 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.438190949 seconds)
    (7/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.592162735 seconds)
    (8/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.438632757 seconds)
    (9/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 2.441328962 seconds)
    (10/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.947582221 seconds)
    (11/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 2.433590359 seconds)
    (12/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.437093316 seconds)
    (13/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.43668923 seconds)
    (14/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.437438795 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.439221553 seconds)
    (16/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.447670037 seconds)
    (17/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.438813918 seconds)
    (18/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 18.840430975 seconds)
    (19/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.676961049 seconds)
    (20/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.712095593 seconds)
    (21/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.574567639 seconds)
    (22/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.51718361 seconds)
    (23/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.937814687 seconds)
    (24/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.907554852 seconds)
    (25/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.586549507 seconds)
    (26/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.511023648 seconds)
    (27/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.440711215 seconds)
    (28/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.44068443 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 5.055564911 seconds)
    (30/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.494084405 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.439101451 seconds)
    (32/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.444188151 seconds)
    (33/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.4502187 seconds)
    (34/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.443159504 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.438150143 seconds)
    (36/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.438562256 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.439412609 seconds)
    (38/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.520208653 seconds)
    (39/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.490633698 seconds)
    (40/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.451435734 seconds)
    (41/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.437486183 seconds)
    (42/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.443041692 seconds)
    (43/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 2.435084696 seconds)
    (44/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.437349159 seconds)
    (45/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.498109859 seconds)
    (46/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.659232766 seconds)
    (47/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 5.05308416 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.437102844 seconds)
    (49/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.509214027 seconds)
    (50/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.642791988 seconds)
    (51/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.441831753 seconds)
    (52/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 3.037753092 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.55659847 seconds)
    (54/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.439893957 seconds)
    (55/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.436879211 seconds)
    (56/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 23.096314137 seconds)
    (57/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.443211898 seconds)
    (58/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.446525482 seconds)
    (59/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.436921506 seconds)
    (60/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.473792004 seconds)
    (61/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 25.500376198 seconds)
    (62/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.440459068 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.558847479 seconds)
    (64/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 23.293158885 seconds)
    (65/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 2.439127687 seconds)
    (66/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 23.283648068 seconds)
    (67/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.437990482 seconds)
    (68/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 5.05138667 seconds)
    (69/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.441886381 seconds)
    (70/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.174837138 seconds)
    (71/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.440239862 seconds)
    (72/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.439446686 seconds)
    (73/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.497573251 seconds)
    (74/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.134207503 seconds)
    (75/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 2.438477736 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.516401332 seconds)
    (77/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 7.127532875 seconds)
    (78/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.438302784 seconds)
    (79/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.528384074 seconds)
    (80/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.43901914 seconds)
    (81/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 2.435842927 seconds)
    (82/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.437314781 seconds)
    (83/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.478186477 seconds)
    (84/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.878593419 seconds)
    (85/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.505972904 seconds)
    (86/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.436448053 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.443764884 seconds)
    (88/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.489877379 seconds)
    (89/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.126949945 seconds)
    (90/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.437576072 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.434707957 seconds)
    (92/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.43305434 seconds)
    (93/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.439577559 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.438634982 seconds)
    (95/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.45021441 seconds)
    (96/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 2.4362951 seconds)
    (97/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.440052285 seconds)
    (98/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.440177613 seconds)
    (99/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.436028314 seconds)
    (100/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.498091518 seconds)
    (101/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.474082521 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.450249919 seconds)
    (103/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 11.069670373 seconds)
    (104/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.43556928 seconds)
    (105/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.436016741 seconds)
    (106/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 25.175371452 seconds)
    (107/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.435439187 seconds)
    (108/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.495596855 seconds)
    (109/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.449518795 seconds)
    (110/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.44059911 seconds)
    (111/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.442259715 seconds)
    (112/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.672969172 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.46743316 seconds)
    (114/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 25.182286797 seconds)
    (115/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.498623321 seconds)
    (116/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.47344049 seconds)
    (117/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.957789568 seconds)
    (118/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.450376687 seconds)
  done (took 492.924450587 seconds)
done (took 917.975363428 seconds)
(20/23) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.641526306 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.72495372 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.618917171 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.546495542 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.626141543 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 3.00083461 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.045398622 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.370856849 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.672807167 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.619481229 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.719952242 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.845349599 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.601072165 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.567098004 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.480890898 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.581653347 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.655415488 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.592840938 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.570380701 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.563716203 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.077472055 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.755020534 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.232929121 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.870829319 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.526545066 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.557918892 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.605523542 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 2.595508735 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.110127926 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.35643817 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 3.076977812 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.558437556 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.508530016 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.623146595 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.476952134 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.580962908 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.631621827 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.501057345 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.546958869 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.554449195 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.478449322 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.96257124 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.679203113 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.39221041 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.43911029 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.930707342 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.471281504 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.436327929 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.501253372 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.546049627 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.498346028 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.976770888 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 3.091066122 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.699608517 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.715854204 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.651396428 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.750071152 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.632325679 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.63103078 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.636752663 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.566902623 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.34863699 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.769091869 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.720381691 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.601779061 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.59352257 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.541030437 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.938932188 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.48661039 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.607259586 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.618940997 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.485707387 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.144953153 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.852596048 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.461322833 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.688846512 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.753260033 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.714703181 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.225238654 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.064641994 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.90876939 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.874216585 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.712495394 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.790649335 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.897775711 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.57516379 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.634481942 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.587675513 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.504987507 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.590732287 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.499729045 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 3.012623348 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.777506659 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 4.167214184 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.744888444 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.70865145 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.732837513 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.902516297 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.684800928 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.631583789 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.357456688 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.775109997 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.721021022 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.889488634 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.575481235 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.53354253 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.623857075 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.516399429 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.511393761 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.959826723 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.520623525 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.405388978 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.841854304 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.735145813 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.941895019 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.719581502 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.367947995 seconds)
  done (took 350.479730806 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.850868135 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.452034878 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.599032145 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.435492048 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.442950472 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.438825654 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.452601933 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.464307027 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.529988535 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.437264694 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.443606507 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.438087628 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.443589737 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.436904386 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.681523851 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.446367116 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.437799742 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.437241099 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.438855588 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.443204661 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.440234225 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.440481136 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.113824671 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.529731062 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.440519143 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.439836378 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 4.149207958 seconds)
  done (took 184.878018345 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.524017195 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.961743974 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.704139447 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.794366361 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.867701015 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.773543529 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.512190978 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.512100689 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.580290794 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.720406394 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.442534123 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.898260912 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.478744909 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.834299417 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.502020178 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.509664223 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.510540001 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.476627719 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.582327644 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.690563109 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.580681843 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.504674257 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.765302973 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 2.515618016 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.510890772 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.669740019 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.682065104 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.669655296 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.598500717 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.702741307 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.943095609 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.491697857 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.473972248 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.519410866 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.573333418 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.646096278 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.557277637 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.882614488 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 2.491688667 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.680549615 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.480637702 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.886820369 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.47687655 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.528125213 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.659379508 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.572092364 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.931389846 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 3.04120398 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.730651021 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.506168047 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.501365883 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.575045084 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.85878787 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.710028869 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.879729464 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.470599058 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.930923552 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.750490369 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.732410598 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.468589591 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.717760572 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.512360571 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.502349299 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.572610957 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.948068287 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.656111829 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.939515358 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.770467505 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.506353225 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.954817844 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.513576726 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.712340898 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 3.171881448 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.609665972 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.216477085 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.628355146 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.472459536 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.51648284 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.512693771 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.811484357 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.502641972 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.581008291 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.534617736 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.578966232 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.652341724 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.608257974 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.806609988 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.957973794 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.543192888 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.855444665 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 4.114210664 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.772924115 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.48766708 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.569989155 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.47491022 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.578069316 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.648817353 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.850761719 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.913875265 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.76344215 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.302458194 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.973540807 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.47861651 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.557430526 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.521996666 seconds)
  done (took 292.341749682 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.601270165 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.683070381 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 3.042041699 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.806570001 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.876109797 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.61208562 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.559622751 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.516737151 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.626337118 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.54584192 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.587810267 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.54518341 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.743235425 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.963270879 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 2.783670417 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 3.107784454 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.513406161 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.958317899 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.655132972 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.586030771 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 3.131538549 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.505300038 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.742289267 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.667091499 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.457582451 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.704147541 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.775636235 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.642447897 seconds)
  done (took 85.373864078 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.513663081 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.5607372 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.47803024 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.585718692 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.565614949 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.562636317 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.51710875 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.953799051 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.541170038 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.523301762 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.552193898 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.481905471 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.994648704 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.480142949 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.504640752 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.563398272 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.550857855 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.970167405 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.562875567 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.969401472 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.528998912 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.569898366 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.520298642 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.494694171 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.521022288 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.482042568 seconds)
  done (took 69.996516215 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.562974298 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.443536724 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.656354122 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.726992658 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.988345051 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.637302654 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.861000254 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.467627644 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.674742857 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.545278205 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 5.439725534 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 3.00646574 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.648120242 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.99013518 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.590393831 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.487542624 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.932423132 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.566056406 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 2.826808292 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.639678526 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.079992753 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.585410462 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.687162197 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.689147932 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.585997902 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.664421612 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.559571956 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.99913433 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.576969202 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.607816973 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.720128299 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.564593209 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.079868707 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.556515775 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.571079123 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.871626329 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.659058078 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.974484032 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.594689838 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.427077831 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.577013027 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.655956781 seconds)
  done (took 124.411143632 seconds)
done (took 1109.913990561 seconds)
(21/23) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.608637226 seconds)
  (2/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.475902311 seconds)
  (3/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.448203418 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.460469163 seconds)
  (5/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.487719433 seconds)
  (6/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.46492749 seconds)
  (7/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.450074729 seconds)
  (8/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.659468594 seconds)
  (9/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.46289991 seconds)
  (10/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.463870367 seconds)
  (11/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.467748695 seconds)
  (12/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.472234726 seconds)
  (13/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.460458804 seconds)
  (14/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.461648945 seconds)
  (15/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.481535473 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.457767798 seconds)
  (17/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.607268089 seconds)
  (18/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.493913359 seconds)
  (19/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.443663917 seconds)
  (20/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.456649706 seconds)
  (21/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.456590717 seconds)
  (22/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.456685019 seconds)
  (23/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.46144947 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.458840323 seconds)
  (25/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.490267609 seconds)
  (26/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.458204691 seconds)
  (27/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.447345223 seconds)
  (28/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.474940138 seconds)
  (29/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.46228199 seconds)
  (30/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.4794572 seconds)
  (31/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.456918576 seconds)
  (32/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.465216937 seconds)
  (33/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.472591144 seconds)
  (34/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.460236728 seconds)
  (35/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.471364692 seconds)
  (36/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.459173733 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.453207185 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.459946595 seconds)
  (39/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.463208737 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.454200806 seconds)
  (41/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.45455274 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.468823019 seconds)
  (43/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.474089935 seconds)
  (44/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.508575359 seconds)
  (45/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.480188818 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.462604565 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.462446182 seconds)
  (48/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.470837152 seconds)
  (49/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.580902779 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.466842594 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.474620125 seconds)
  (52/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.46177203 seconds)
  (53/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.458983729 seconds)
  (54/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.456711707 seconds)
  (55/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.456394042 seconds)
  (56/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.477461295 seconds)
  (57/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.453633452 seconds)
  (58/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.45611192 seconds)
  (59/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.481181651 seconds)
  (60/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.456374186 seconds)
  (61/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.481812838 seconds)
  (62/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.446356459 seconds)
  (63/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.488458368 seconds)
  (64/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.453982549 seconds)
  (65/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.449637938 seconds)
  (66/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.456819091 seconds)
  (67/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.464341799 seconds)
  (68/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.4628145 seconds)
  (69/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.454036888 seconds)
  (70/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.447482701 seconds)
  (71/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.456999692 seconds)
  (72/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.490529008 seconds)
  (73/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.457728123 seconds)
  (74/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.452500862 seconds)
  (75/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.457505036 seconds)
  (76/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.460942895 seconds)
  (77/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.481645753 seconds)
  (78/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.479433746 seconds)
  (79/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.453128901 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.456068511 seconds)
  (81/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.457097725 seconds)
  (82/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.47065009 seconds)
  (83/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.478600883 seconds)
  (84/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.56879878 seconds)
  (85/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.479216759 seconds)
  (86/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.456069658 seconds)
  (87/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.487044833 seconds)
  (88/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.455370325 seconds)
  (89/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.482050319 seconds)
  (90/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.482917999 seconds)
  (91/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.465435073 seconds)
  (92/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.461814039 seconds)
  (93/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.458486489 seconds)
  (94/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.460869205 seconds)
  (95/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.448757516 seconds)
  (96/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.46417525 seconds)
  (97/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.488478464 seconds)
  (98/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.478529163 seconds)
  (99/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.475891267 seconds)
  (100/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.461072284 seconds)
  (101/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.481896448 seconds)
  (102/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.466850887 seconds)
  (103/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.494484705 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.461749313 seconds)
  (105/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.443077012 seconds)
  (106/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.501483218 seconds)
  (107/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.602402509 seconds)
  (108/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.694071153 seconds)
  (109/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.740615984 seconds)
  (110/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.568727865 seconds)
  (111/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.570654 seconds)
  (112/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.588870208 seconds)
  (113/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.532443424 seconds)
  (114/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.532722077 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.515442871 seconds)
  (116/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.457046162 seconds)
  (117/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.461474456 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.448436791 seconds)
  (119/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.66293708 seconds)
  (120/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.454224932 seconds)
  (121/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.447994185 seconds)
  (122/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.459981874 seconds)
  (123/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.442132979 seconds)
  (124/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.45607441 seconds)
  (125/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.451871866 seconds)
  (126/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.452065264 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.449196089 seconds)
  (128/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.462399585 seconds)
  (129/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.518046108 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.509931298 seconds)
  (131/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.462103054 seconds)
  (132/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.464319412 seconds)
  (133/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.476797998 seconds)
  (134/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.460372152 seconds)
  (135/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.454002206 seconds)
  (136/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.460894715 seconds)
  (137/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.476573791 seconds)
  (138/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.461021328 seconds)
  (139/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.458755086 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.465367403 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.465057853 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.458638241 seconds)
  (143/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.476922958 seconds)
  (144/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.487279061 seconds)
  (145/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.447831347 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.46218096 seconds)
  (147/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.444276205 seconds)
  (148/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.460975415 seconds)
  (149/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.475078067 seconds)
  (150/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.457719247 seconds)
  (151/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.450841508 seconds)
  (152/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.460021052 seconds)
  (153/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.452945992 seconds)
  (154/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.465872931 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.481385391 seconds)
  (156/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.445445835 seconds)
  (157/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.45677114 seconds)
  (158/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.450973438 seconds)
  (159/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.459838425 seconds)
  (160/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.458161174 seconds)
  (161/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.48200971 seconds)
  (162/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.488666472 seconds)
  (163/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.459517237 seconds)
  (164/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.448105982 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.448924113 seconds)
  (166/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.457697194 seconds)
  (167/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.455948342 seconds)
  (168/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.459095741 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.456894246 seconds)
  (170/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.451564362 seconds)
  (171/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.482599139 seconds)
  (172/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.476064254 seconds)
  (173/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.459010436 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.483743104 seconds)
  (175/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.453154417 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.455917697 seconds)
  (177/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.481395296 seconds)
  (178/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.48083536 seconds)
  (179/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.487317586 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.462500888 seconds)
  (181/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.490451244 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.49005413 seconds)
  (183/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.453993688 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.485190402 seconds)
  (185/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.460816178 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.475578309 seconds)
  (187/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.44515931 seconds)
  (188/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.452999445 seconds)
  (189/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.449924697 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.455735072 seconds)
  (191/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.451514988 seconds)
  (192/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.484151476 seconds)
  (193/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.455362969 seconds)
  (194/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.458258747 seconds)
  (195/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.4682604 seconds)
  (196/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.466060279 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.464022894 seconds)
  (198/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.465926117 seconds)
  (199/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.45607688 seconds)
  (200/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.454864634 seconds)
  (201/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.456988872 seconds)
  (202/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.484898824 seconds)
  (203/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.447602756 seconds)
  (204/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.456881638 seconds)
  (205/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.45252877 seconds)
  (206/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.44718541 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.469916496 seconds)
  (208/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.456769082 seconds)
  (209/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.467395086 seconds)
  (210/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.467929783 seconds)
  (211/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.442176439 seconds)
  (212/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.464439202 seconds)
  (213/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.472894864 seconds)
  (214/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.45078998 seconds)
  (215/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.470128485 seconds)
  (216/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.45751265 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.461098721 seconds)
  (218/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.440325265 seconds)
  (219/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.492648926 seconds)
  (220/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.46081841 seconds)
  (221/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.458576671 seconds)
  (222/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.454678063 seconds)
  (223/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.448138383 seconds)
  (224/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.455404433 seconds)
  (225/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.45763241 seconds)
  (226/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.452760559 seconds)
  (227/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.476986355 seconds)
  (228/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.468960534 seconds)
  (229/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.468703823 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.459115221 seconds)
  (231/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.607630879 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.456835865 seconds)
  (233/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.462768752 seconds)
  (234/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.454719639 seconds)
  (235/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.453535787 seconds)
  (236/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.458984454 seconds)
  (237/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.456063285 seconds)
  (238/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.456100108 seconds)
  (239/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.465865909 seconds)
  (240/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.459022176 seconds)
  (241/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.445378251 seconds)
  (242/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.44801714 seconds)
  (243/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.461414406 seconds)
  (244/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.446883329 seconds)
  (245/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.471464545 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.476812275 seconds)
  (247/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.446792691 seconds)
  (248/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.456146882 seconds)
  (249/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.453052715 seconds)
  (250/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.464683947 seconds)
  (251/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.458867505 seconds)
  (252/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.468904676 seconds)
  (253/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.45538069 seconds)
  (254/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.456453694 seconds)
  (255/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.45487543 seconds)
  (256/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.474787114 seconds)
  (257/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.454281329 seconds)
  (258/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.444955187 seconds)
  (259/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.453320984 seconds)
  (260/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.457004185 seconds)
  (261/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.459517299 seconds)
  (262/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.604646946 seconds)
  (263/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.497922585 seconds)
  (264/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.442609871 seconds)
  (265/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.474601237 seconds)
  (266/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.451955769 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.45840289 seconds)
  (268/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.456262281 seconds)
  (269/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.447387275 seconds)
  (270/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.4691382 seconds)
  (271/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.44904289 seconds)
  (272/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.446988023 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.462624345 seconds)
  (274/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.478193409 seconds)
  (275/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.447574284 seconds)
  (276/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.516895036 seconds)
  (277/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.564985806 seconds)
  (278/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.447824227 seconds)
  (279/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.453577545 seconds)
  (280/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.44125389 seconds)
  (281/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.505911218 seconds)
  (282/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.454062013 seconds)
  (283/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.47232877 seconds)
  (284/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.45478846 seconds)
  (285/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.450258627 seconds)
  (286/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.464784237 seconds)
  (287/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.447311033 seconds)
  (288/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.459063129 seconds)
  (289/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.456947624 seconds)
  (290/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.478413428 seconds)
  (291/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.455211907 seconds)
  (292/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.45193 seconds)
  (293/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.455941943 seconds)
  (294/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.454845447 seconds)
  (295/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.4604652 seconds)
  (296/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.45666302 seconds)
  (297/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.442792787 seconds)
  (298/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.462823937 seconds)
  (299/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.453288776 seconds)
  (300/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.455690617 seconds)
  (301/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.456570311 seconds)
  (302/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.457439773 seconds)
  (303/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.507209816 seconds)
  (304/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.460232986 seconds)
  (305/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.453688519 seconds)
  (306/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.486453105 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.503663351 seconds)
  (308/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.456213967 seconds)
  (309/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.45511758 seconds)
  (310/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.453828758 seconds)
  (311/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.501772998 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.450214594 seconds)
  (313/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.45078858 seconds)
  (314/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.467405137 seconds)
  (315/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.484459935 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.457617215 seconds)
  (317/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.466205066 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.459224147 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.47550489 seconds)
  (320/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.458058999 seconds)
  (321/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.462329835 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.461217997 seconds)
  (323/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.445867567 seconds)
  (324/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.466606249 seconds)
  (325/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.471878242 seconds)
  (326/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.477815218 seconds)
  (327/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.457534513 seconds)
  (328/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.449375095 seconds)
  (329/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.57543177 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.459633224 seconds)
  (331/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.469669408 seconds)
  (332/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.461056645 seconds)
  (333/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.479911876 seconds)
  (334/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.454987649 seconds)
  (335/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.455803404 seconds)
  (336/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.447967571 seconds)
  (337/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.457040449 seconds)
  (338/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.486366793 seconds)
  (339/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.453695838 seconds)
  (340/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.453048946 seconds)
  (341/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.457091055 seconds)
  (342/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.487280772 seconds)
  (343/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.470313647 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.440914843 seconds)
  (345/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.452532579 seconds)
  (346/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.458741148 seconds)
  (347/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.449932428 seconds)
  (348/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.474263172 seconds)
  (349/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.464388632 seconds)
  (350/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.442004507 seconds)
  (351/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.45534328 seconds)
  (352/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.456951931 seconds)
  (353/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.441516887 seconds)
  (354/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.471207324 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.487379265 seconds)
  (356/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.447165413 seconds)
  (357/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.457495575 seconds)
  (358/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.465518756 seconds)
  (359/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.453116997 seconds)
  (360/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.457706843 seconds)
  (361/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.452759056 seconds)
  (362/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.569570368 seconds)
  (363/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.456066555 seconds)
  (364/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.458011733 seconds)
  (365/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.469032851 seconds)
  (366/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.504816301 seconds)
  (367/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.463680155 seconds)
  (368/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.461535861 seconds)
  (369/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.464348671 seconds)
  (370/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.44678643 seconds)
  (371/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.450572042 seconds)
  (372/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.45900253 seconds)
  (373/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.457947519 seconds)
  (374/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.562338359 seconds)
  (375/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.472079847 seconds)
  (376/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.465710004 seconds)
  (377/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.452333114 seconds)
  (378/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.454712075 seconds)
  (379/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.474069782 seconds)
  (380/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.457331969 seconds)
  (381/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.460308536 seconds)
  (382/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.459386915 seconds)
  (383/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.453573013 seconds)
  (384/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.452447976 seconds)
  (385/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.659390318 seconds)
  (386/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.459832604 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.469733408 seconds)
  (388/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.572765228 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.449110585 seconds)
  (390/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.460826123 seconds)
  (391/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.451656002 seconds)
  (392/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.460307592 seconds)
  (393/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.461771949 seconds)
  (394/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.450564464 seconds)
  (395/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.464225257 seconds)
  (396/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.460658414 seconds)
  (397/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.480807077 seconds)
  (398/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.479065889 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.469805871 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.491537635 seconds)
  (401/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.458794291 seconds)
  (402/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.449142227 seconds)
  (403/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.490961867 seconds)
  (404/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.459389827 seconds)
  (405/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.457730306 seconds)
  (406/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.485019776 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.445924038 seconds)
  (408/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.480694262 seconds)
  (409/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.462042293 seconds)
  (410/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.453176009 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.47147693 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.447747767 seconds)
  (413/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.457901448 seconds)
  (414/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.445279033 seconds)
  (415/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.45021618 seconds)
  (416/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.461279116 seconds)
  (417/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.474777087 seconds)
  (418/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.456110752 seconds)
  (419/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.46446588 seconds)
  (420/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.454130888 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.478664039 seconds)
  (422/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.451386131 seconds)
  (423/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.46186169 seconds)
  (424/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.440147602 seconds)
  (425/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.452051167 seconds)
  (426/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.461148392 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.464454532 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.458739545 seconds)
  (429/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.466689936 seconds)
  (430/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.449243352 seconds)
  (431/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.459508594 seconds)
  (432/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.452379374 seconds)
  (433/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.451114193 seconds)
  (434/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.452030781 seconds)
  (435/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.463133046 seconds)
  (436/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.446225462 seconds)
  (437/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.457305456 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.454175917 seconds)
  (439/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.457647115 seconds)
  (440/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.448485981 seconds)
  (441/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.453741716 seconds)
  (442/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.443632617 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.476137736 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.452790696 seconds)
  (445/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.461430988 seconds)
  (446/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.449347321 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.470798936 seconds)
  (448/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.454929193 seconds)
  (449/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.449738497 seconds)
  (450/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.496949809 seconds)
  (451/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.453376579 seconds)
  (452/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.475904032 seconds)
  (453/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.504035973 seconds)
  (454/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.463349149 seconds)
  (455/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.450016457 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.442939667 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.455234123 seconds)
  (458/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.459473933 seconds)
  (459/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.524007416 seconds)
  (460/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.480637545 seconds)
  (461/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.471608239 seconds)
  (462/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.472252182 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.465676311 seconds)
  (464/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.493630944 seconds)
  (465/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.477797564 seconds)
  (466/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.490001807 seconds)
  (467/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.487978911 seconds)
  (468/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.468239039 seconds)
  (469/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.477924768 seconds)
  (470/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.459555855 seconds)
  (471/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.449896193 seconds)
  (472/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.46488474 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.464088096 seconds)
  (474/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.473987544 seconds)
  (475/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.447762292 seconds)
  (476/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.454354446 seconds)
  (477/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.465556454 seconds)
  (478/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.452518025 seconds)
  (479/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.488376386 seconds)
  (480/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.486092502 seconds)
  (481/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.470238261 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.479511937 seconds)
  (483/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.481570865 seconds)
  (484/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.497026206 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.461502888 seconds)
  (486/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.464404739 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.482184354 seconds)
  (488/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.440592811 seconds)
  (489/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.451261093 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.462304452 seconds)
  (491/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.460723982 seconds)
  (492/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.474763614 seconds)
  (493/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.448845848 seconds)
  (494/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.46638793 seconds)
  (495/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.578918424 seconds)
  (496/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.455859445 seconds)
  (497/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.610239386 seconds)
  (498/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.44743397 seconds)
  (499/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.47253755 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.465239432 seconds)
  (501/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.460537303 seconds)
  (502/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.451570655 seconds)
  (503/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.472651379 seconds)
  (504/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.443255467 seconds)
  (505/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.452383958 seconds)
  (506/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.50140332 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.464171786 seconds)
  (508/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.448813356 seconds)
  (509/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.465645109 seconds)
  (510/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.45128169 seconds)
  (511/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.577801931 seconds)
  (512/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.52102362 seconds)
  (513/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.463863422 seconds)
  (514/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.454278543 seconds)
  (515/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.456288757 seconds)
  (516/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.445417673 seconds)
  (517/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.462639026 seconds)
  (518/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.472007274 seconds)
  (519/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.47525235 seconds)
  (520/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.47159138 seconds)
  (521/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.478028319 seconds)
  (522/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.461015737 seconds)
  (523/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.468282956 seconds)
  (524/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.44567936 seconds)
  (525/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.448323032 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.460713014 seconds)
  (527/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.455525742 seconds)
  (528/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.524282366 seconds)
  (529/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.603731235 seconds)
  (530/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.44625116 seconds)
  (531/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.445661038 seconds)
  (532/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.451000615 seconds)
  (533/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.453900551 seconds)
  (534/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.453679249 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.458843345 seconds)
  (536/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.46092332 seconds)
  (537/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.53781026 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.446057584 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.460112762 seconds)
  (540/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.470264508 seconds)
  (541/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.536685034 seconds)
  (542/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.448218472 seconds)
  (543/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.461756572 seconds)
  (544/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.51256404 seconds)
  (545/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.452011142 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.451544888 seconds)
  (547/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.461046486 seconds)
  (548/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.44506564 seconds)
  (549/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.460650521 seconds)
  (550/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.444117414 seconds)
  (551/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.44689994 seconds)
  (552/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.45004091 seconds)
  (553/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.449615771 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.478703843 seconds)
  (555/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.461446463 seconds)
  (556/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.493845437 seconds)
  (557/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.461141526 seconds)
  (558/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.490728098 seconds)
  (559/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.454892841 seconds)
  (560/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.446705286 seconds)
  (561/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.454912347 seconds)
  (562/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.466138164 seconds)
  (563/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.495389864 seconds)
  (564/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.454551128 seconds)
  (565/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.472049357 seconds)
  (566/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.473736142 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.460573708 seconds)
  (568/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.448400078 seconds)
  (569/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.493222434 seconds)
  (570/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.451772134 seconds)
  (571/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.453998231 seconds)
  (572/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.468940751 seconds)
  (573/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.446195075 seconds)
  (574/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.461034941 seconds)
  (575/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.516802856 seconds)
  (576/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.477504458 seconds)
  (577/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.448938045 seconds)
  (578/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.45939196 seconds)
  (579/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.457389607 seconds)
  (580/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.565359903 seconds)
  (581/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.485265617 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.449774062 seconds)
  (583/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.463109254 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.468852377 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.464310438 seconds)
  (586/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.473988572 seconds)
  (587/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.483824333 seconds)
  (588/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.450191601 seconds)
  (589/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.449917733 seconds)
  (590/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.462364266 seconds)
  (591/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.470948359 seconds)
  (592/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.447061991 seconds)
  (593/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.458745473 seconds)
  (594/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.461600802 seconds)
  (595/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.464957262 seconds)
  (596/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.450623568 seconds)
  (597/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.456924932 seconds)
  (598/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.465431649 seconds)
  (599/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.459541928 seconds)
  (600/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.460387144 seconds)
  (601/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.458578914 seconds)
  (602/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.444835632 seconds)
  (603/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.463394625 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.452817813 seconds)
  (605/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.448825229 seconds)
  (606/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.466264 seconds)
  (607/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.459077432 seconds)
  (608/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.454495731 seconds)
  (609/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.478970474 seconds)
  (610/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.457789356 seconds)
  (611/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.458157281 seconds)
  (612/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.463232384 seconds)
  (613/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.458224476 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.459023406 seconds)
  (615/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.46120899 seconds)
  (616/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.495953784 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.480946101 seconds)
  (618/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.448397151 seconds)
  (619/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.445671476 seconds)
  (620/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.45254755 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.45280625 seconds)
  (622/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.474259822 seconds)
  (623/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.456508782 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.44720149 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.463265402 seconds)
  (626/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.456257136 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.455396877 seconds)
  (628/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.465123003 seconds)
  (629/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.500155391 seconds)
  (630/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.465639927 seconds)
  (631/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.444068755 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.470170578 seconds)
  (633/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.456771403 seconds)
  (634/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.450072937 seconds)
  (635/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.470362757 seconds)
  (636/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.459921233 seconds)
  (637/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.496163862 seconds)
  (638/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.469466093 seconds)
  (639/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.459361956 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.4945154 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.489863966 seconds)
  (642/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.455066261 seconds)
  (643/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.444048474 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.458842865 seconds)
  (645/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.455989802 seconds)
  (646/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.448689596 seconds)
  (647/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.662979607 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.461503013 seconds)
  (649/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.480508329 seconds)
  (650/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.471470836 seconds)
  (651/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.463150761 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.461066683 seconds)
  (653/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.44905437 seconds)
  (654/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.459099933 seconds)
  (655/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.47715127 seconds)
  (656/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.481357396 seconds)
  (657/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.498748647 seconds)
  (658/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.456736741 seconds)
  (659/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.516586937 seconds)
  (660/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.455968794 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.523191358 seconds)
  (662/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.45503949 seconds)
  (663/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.463158433 seconds)
  (664/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.506357837 seconds)
  (665/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.449891404 seconds)
  (666/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.466483177 seconds)
  (667/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.613601072 seconds)
  (668/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.485348274 seconds)
  (669/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.462117097 seconds)
  (670/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.450611703 seconds)
  (671/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.61249104 seconds)
  (672/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.460430177 seconds)
  (673/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.459689573 seconds)
  (674/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.450567484 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.461034603 seconds)
  (676/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.450413598 seconds)
  (677/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.461032117 seconds)
  (678/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.455204249 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.471636459 seconds)
  (680/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.503041188 seconds)
done (took 1681.990444146 seconds)
(22/23) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 41.052048445 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 34.026647534 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 35.219055279 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 33.741912698 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.198483542 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 34.674436707 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 40.954349223 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 34.050338793 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 34.472708478 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 36.869611896 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 36.984736982 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 36.929546292 seconds)
  done (took 436.601051571 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 45.042053745 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 37.724050089 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 34.325740722 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 37.399249068 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 38.312808366 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 36.018182583 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 45.749772083 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 38.382154816 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 37.591797103 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 38.06574005 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 35.162790146 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.815073112 seconds)
  done (took 465.236752097 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 41.006192465 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 39.865982456 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 35.15862079 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 37.839821129 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.417714617 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 35.472435599 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 40.541646541 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 37.167626598 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 38.89802275 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 37.547608058 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 39.087025428 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 37.389526801 seconds)
  done (took 460.092113785 seconds)
done (took 1364.356074271 seconds)
(23/23) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 5.40197722 seconds)
    (2/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 5.514719603 seconds)
    (3/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 5.404304847 seconds)
    (4/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 5.388354497 seconds)
    (5/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 5.734539362 seconds)
    (6/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 5.548652551 seconds)
    (7/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 5.686031937 seconds)
    (8/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 10.336385556 seconds)
    (9/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 5.58622824 seconds)
    (10/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 9.893947027 seconds)
    (11/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 9.485432198 seconds)
    (12/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 5.667887567 seconds)
    (13/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 10.365942808 seconds)
    (14/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 12.372370004 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 5.961657377 seconds)
    (16/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 10.396171856 seconds)
    (17/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 13.357460281 seconds)
    (18/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.418260028 seconds)
    (19/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 5.865732116 seconds)
    (20/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 10.368068284 seconds)
    (21/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 5.717844455 seconds)
    (22/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 8.846417513 seconds)
    (23/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 10.365336876 seconds)
    (24/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 10.324925453 seconds)
    (25/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 5.448463624 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 5.720109137 seconds)
    (27/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 10.368314672 seconds)
    (28/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.483433407 seconds)
    (29/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 5.800925417 seconds)
    (30/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.518358366 seconds)
    (31/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 5.344145216 seconds)
    (32/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.468485563 seconds)
    (33/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 5.571553562 seconds)
    (34/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 6.345729909 seconds)
    (35/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 5.745391365 seconds)
    (36/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 5.351442229 seconds)
    (37/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 5.761145807 seconds)
    (38/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 5.567147913 seconds)
    (39/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 5.84043745 seconds)
    (40/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 5.583202343 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 5.692175086 seconds)
    (42/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 5.596824269 seconds)
    (43/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 5.570162787 seconds)
    (44/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 10.330115067 seconds)
    (45/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 5.34019215 seconds)
    (46/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 5.572322441 seconds)
    (47/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 6.344721221 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 5.839732369 seconds)
    (49/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 5.361795784 seconds)
    (50/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 6.002034886 seconds)
    (51/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 5.392486257 seconds)
    (52/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 5.571275037 seconds)
    (53/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 5.55227352 seconds)
    (54/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 5.517216242 seconds)
    (55/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 5.408309819 seconds)
    (56/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 5.352878832 seconds)
    (57/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 5.547542011 seconds)
    (58/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 6.313204422 seconds)
    (59/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 5.566830061 seconds)
    (60/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 5.45919877 seconds)
    (61/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 5.412098385 seconds)
    (62/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 5.573500213 seconds)
    (63/434) benchmarking ("sort", "Int64", 0)...
    done (took 7.855992191 seconds)
    (64/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 5.41947917 seconds)
    (65/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 10.332981941 seconds)
    (66/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 12.753490072 seconds)
    (67/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 5.352305146 seconds)
    (68/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 5.583392312 seconds)
    (69/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 10.341951369 seconds)
    (70/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 5.791665144 seconds)
    (71/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 5.526212237 seconds)
    (72/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 5.687422742 seconds)
    (73/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.410502471 seconds)
    (74/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 5.968520775 seconds)
    (75/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 5.543612517 seconds)
    (76/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 5.411871143 seconds)
    (77/434) benchmarking ("perf_countequals", "Float32")...
    done (took 5.398472165 seconds)
    (78/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 5.66565404 seconds)
    (79/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 10.330224491 seconds)
    (80/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 16.75785618 seconds)
    (81/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 11.981835532 seconds)
    (82/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 5.545340755 seconds)
    (83/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 5.417209274 seconds)
    (84/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 5.549154519 seconds)
    (85/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 5.575574821 seconds)
    (86/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 5.559992102 seconds)
    (87/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.412944761 seconds)
    (88/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 10.330324563 seconds)
    (89/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 10.039666191 seconds)
    (90/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 5.348594321 seconds)
    (91/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.387365124 seconds)
    (92/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.521884562 seconds)
    (93/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 10.208747674 seconds)
    (94/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 5.614293671 seconds)
    (95/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 5.346499175 seconds)
    (96/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 5.578121993 seconds)
    (97/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 10.554869035 seconds)
    (98/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 6.385134512 seconds)
    (99/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 5.432325585 seconds)
    (100/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 5.75726347 seconds)
    (101/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 5.712463857 seconds)
    (102/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 5.448140221 seconds)
    (103/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 5.614862038 seconds)
    (104/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 5.449829647 seconds)
    (105/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 6.189288202 seconds)
    (106/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 5.856389123 seconds)
    (107/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 5.385657928 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 10.492126319 seconds)
    (109/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.475985629 seconds)
    (110/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 5.385110043 seconds)
    (111/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 5.463919473 seconds)
    (112/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 10.321984094 seconds)
    (113/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 5.787255109 seconds)
    (114/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 5.517905386 seconds)
    (115/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 5.348264627 seconds)
    (116/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 5.571727921 seconds)
    (117/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 5.514311698 seconds)
    (118/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 5.574583565 seconds)
    (119/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 10.330718084 seconds)
    (120/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 5.633459186 seconds)
    (121/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 6.223581104 seconds)
    (122/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 5.587880436 seconds)
    (123/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 10.634654063 seconds)
    (124/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 10.445246558 seconds)
    (125/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 5.981389198 seconds)
    (126/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 5.718169459 seconds)
    (127/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.443119628 seconds)
    (128/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 5.635660901 seconds)
    (129/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.84984861 seconds)
    (130/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 11.986212821 seconds)
    (131/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 5.635283246 seconds)
    (132/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 10.347722307 seconds)
    (133/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 12.860166295 seconds)
    (134/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 5.855935258 seconds)
    (135/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 10.380320798 seconds)
    (136/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 9.706335217 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 5.608583632 seconds)
    (138/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 5.457751705 seconds)
    (139/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 5.423227641 seconds)
    (140/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.483482145 seconds)
    (141/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 10.357564593 seconds)
    (142/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 13.032238799 seconds)
    (143/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 5.408763757 seconds)
    (144/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 5.602010946 seconds)
    (145/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.471373505 seconds)
    (146/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 5.53531633 seconds)
    (147/434) benchmarking ("sort", "Bool", 0)...
    done (took 5.387373025 seconds)
    (148/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 5.634529771 seconds)
    (149/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 5.440932287 seconds)
    (150/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.418180451 seconds)
    (151/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 10.354870716 seconds)
    (152/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 5.451181859 seconds)
    (153/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 5.599457479 seconds)
    (154/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.481013295 seconds)
    (155/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 5.961142085 seconds)
    (156/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.390913948 seconds)
    (157/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 10.157715698 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 5.587094288 seconds)
    (159/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 5.571946399 seconds)
    (160/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 10.382184922 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 18.147129475 seconds)
    (162/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 5.849718385 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 5.889295284 seconds)
    (164/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 5.676981294 seconds)
    (165/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 5.615064617 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 5.593966059 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 5.730135434 seconds)
    (168/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 5.43207903 seconds)
    (169/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 10.366380778 seconds)
    (170/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 9.9753923 seconds)
    (171/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 6.004591308 seconds)
    (172/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 10.063628525 seconds)
    (173/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 6.162223896 seconds)
    (174/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 5.9699613 seconds)
    (175/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 10.367699799 seconds)
    (176/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 10.547058026 seconds)
    (177/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 12.996609073 seconds)
    (178/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 5.72238953 seconds)
    (179/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 5.646877146 seconds)
    (180/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.61446334 seconds)
    (181/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 5.58533262 seconds)
    (182/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 5.787135306 seconds)
    (183/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 5.500857718 seconds)
    (184/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 5.38513922 seconds)
    (185/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 5.779263432 seconds)
    (186/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 5.622905957 seconds)
    (187/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 5.750641804 seconds)
    (188/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 5.570946555 seconds)
    (189/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 5.932556734 seconds)
    (190/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 5.615998732 seconds)
    (191/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 5.677925953 seconds)
    (192/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 5.718064064 seconds)
    (193/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.510682862 seconds)
    (194/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 5.588088081 seconds)
    (195/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 5.37397136 seconds)
    (196/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 5.750231291 seconds)
    (197/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 5.417031227 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 5.611773246 seconds)
    (199/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.553667387 seconds)
    (200/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 5.577717564 seconds)
    (201/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 5.399523915 seconds)
    (202/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 6.355350234 seconds)
    (203/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 9.902464714 seconds)
    (204/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 11.453807295 seconds)
    (205/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 7.564226211 seconds)
    (206/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.46391311 seconds)
    (207/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 5.768883664 seconds)
    (208/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 5.451663439 seconds)
    (209/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 5.542336627 seconds)
    (210/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 8.303262163 seconds)
    (211/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 5.726047525 seconds)
    (212/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 5.603189633 seconds)
    (213/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 5.423164155 seconds)
    (214/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 5.436076772 seconds)
    (215/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 5.558378669 seconds)
    (216/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 10.364383276 seconds)
    (217/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 5.603295655 seconds)
    (218/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 5.374988563 seconds)
    (219/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 5.375139636 seconds)
    (220/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 5.553268607 seconds)
    (221/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 10.36014491 seconds)
    (222/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 5.68160488 seconds)
    (223/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 5.385978758 seconds)
    (224/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 5.733278864 seconds)
    (225/434) benchmarking ("perf_countequals", "Int64")...
    done (took 5.451295259 seconds)
    (226/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 5.666725369 seconds)
    (227/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 5.59710447 seconds)
    (228/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 5.496259051 seconds)
    (229/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 10.389689874 seconds)
    (230/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 5.953126985 seconds)
    (231/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 5.598079364 seconds)
    (232/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 5.615799139 seconds)
    (233/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.586770338 seconds)
    (234/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 5.538052407 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 5.572865375 seconds)
    (236/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 5.455245274 seconds)
    (237/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 5.703448414 seconds)
    (238/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 6.036399415 seconds)
    (239/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 5.856535484 seconds)
    (240/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 5.435437052 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.47405525 seconds)
    (242/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 5.427466571 seconds)
    (243/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 5.418470228 seconds)
    (244/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 9.430040734 seconds)
    (245/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 9.466782611 seconds)
    (246/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 5.678501398 seconds)
    (247/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 5.469819143 seconds)
    (248/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.443186732 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 6.297907419 seconds)
    (250/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 10.37236368 seconds)
    (251/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 5.618430018 seconds)
    (252/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 5.697133057 seconds)
    (253/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 5.647525522 seconds)
    (254/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 5.618904066 seconds)
    (255/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 5.731091113 seconds)
    (256/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.470062637 seconds)
    (257/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 5.450101801 seconds)
    (258/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 5.38924718 seconds)
    (259/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 5.449723994 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 5.421855249 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 5.387264196 seconds)
    (262/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.475490673 seconds)
    (263/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 5.570929661 seconds)
    (264/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 5.463205552 seconds)
    (265/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 5.743523691 seconds)
    (266/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 5.624570349 seconds)
    (267/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 5.389064843 seconds)
    (268/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 5.450956833 seconds)
    (269/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.53965973 seconds)
    (270/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 5.590269425 seconds)
    (271/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 5.624294913 seconds)
    (272/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 10.36609353 seconds)
    (273/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 9.902232953 seconds)
    (274/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 5.629465501 seconds)
    (275/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 5.625469258 seconds)
    (276/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 6.062392845 seconds)
    (277/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 10.371728369 seconds)
    (278/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 12.731939231 seconds)
    (279/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 5.452011825 seconds)
    (280/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 5.498505064 seconds)
    (281/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 10.36253764 seconds)
    (282/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 12.841156261 seconds)
    (283/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 5.3935149 seconds)
    (284/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 5.51341664 seconds)
    (285/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.605124546 seconds)
    (286/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 5.459200958 seconds)
    (287/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 5.717323906 seconds)
    (288/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 10.055059439 seconds)
    (289/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 5.618581743 seconds)
    (290/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 5.381630126 seconds)
    (291/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.473159732 seconds)
    (292/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 5.616763071 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 5.41318409 seconds)
    (294/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 5.366054553 seconds)
    (295/434) benchmarking ("perf_countequals", "Int8")...
    done (took 5.401748054 seconds)
    (296/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.541909478 seconds)
    (297/434) benchmarking ("sort", "Float32", 0)...
    done (took 6.063117882 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 5.718325331 seconds)
    (299/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 5.593845034 seconds)
    (300/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 10.358733463 seconds)
    (301/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 14.494229764 seconds)
    (302/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 11.079269242 seconds)
    (303/434) benchmarking ("sort", "BigInt", 0)...
    done (took 14.895050569 seconds)
    (304/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 5.554805068 seconds)
    (305/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 5.721824452 seconds)
    (306/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 5.399222405 seconds)
    (307/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 10.368661637 seconds)
    (308/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 12.483612223 seconds)
    (309/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 5.377621389 seconds)
    (310/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 5.716380539 seconds)
    (311/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 5.832859944 seconds)
    (312/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.560952794 seconds)
    (313/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 5.378278013 seconds)
    (314/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.49434066 seconds)
    (315/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.432497382 seconds)
    (316/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 5.647864632 seconds)
    (317/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 5.370819551 seconds)
    (318/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 5.711231786 seconds)
    (319/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 10.35865025 seconds)
    (320/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 9.482195461 seconds)
    (321/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 5.843740417 seconds)
    (322/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.572789235 seconds)
    (323/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 5.72505201 seconds)
    (324/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 8.078269288 seconds)
    (325/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 6.248765561 seconds)
    (326/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 5.426071744 seconds)
    (327/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 5.714833259 seconds)
    (328/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 5.567324529 seconds)
    (329/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 10.217394243 seconds)
    (330/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.215649518 seconds)
    (331/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 5.563072045 seconds)
    (332/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.45865569 seconds)
    (333/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.531989464 seconds)
    (334/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 5.5747964 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 5.683788745 seconds)
    (336/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 5.385415217 seconds)
    (337/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.458721513 seconds)
    (338/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 10.352841044 seconds)
    (339/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 6.309449123 seconds)
    (340/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 5.405181183 seconds)
    (341/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 5.410804285 seconds)
    (342/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 5.547150386 seconds)
    (343/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 5.41349107 seconds)
    (344/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 9.123854945 seconds)
    (345/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 7.280420835 seconds)
    (346/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 5.57590165 seconds)
    (347/434) benchmarking ("perf_countequals", "Float64")...
    done (took 5.426359219 seconds)
    (348/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 5.729416889 seconds)
    (349/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.431317404 seconds)
    (350/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 8.098435942 seconds)
    (351/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.501601816 seconds)
    (352/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 5.41519315 seconds)
    (353/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 5.356790128 seconds)
    (354/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 5.925139466 seconds)
    (355/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 5.656717647 seconds)
    (356/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 10.350509397 seconds)
    (357/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 11.086375459 seconds)
    (358/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 6.166366223 seconds)
    (359/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.512026265 seconds)
    (360/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.472516243 seconds)
    (361/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 5.36590645 seconds)
    (362/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 5.623292174 seconds)
    (363/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.542489116 seconds)
    (364/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 5.420931774 seconds)
    (365/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 5.587992408 seconds)
    (366/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 5.353167959 seconds)
    (367/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 5.852800877 seconds)
    (368/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 5.357913881 seconds)
    (369/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 5.804075172 seconds)
    (370/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.57510083 seconds)
    (371/434) benchmarking ("sort", "Float64", 0)...
    done (took 7.4642916 seconds)
    (372/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 5.703690839 seconds)
    (373/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 10.345954459 seconds)
    (374/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 6.001085982 seconds)
    (375/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 5.587180925 seconds)
    (376/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 5.357705386 seconds)
    (377/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 9.267990052 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 6.228857727 seconds)
    (379/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 5.672207848 seconds)
    (380/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 5.361008528 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 10.329416972 seconds)
    (382/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.964934952 seconds)
    (383/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.335369375 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 10.286607871 seconds)
    (385/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 5.686930529 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 5.764157497 seconds)
    (387/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 5.693567817 seconds)
    (388/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 6.09117614 seconds)
    (389/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 5.829097998 seconds)
    (390/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.801803675 seconds)
    (391/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 5.703456368 seconds)
    (392/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 5.671210375 seconds)
    (393/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 5.362723318 seconds)
    (394/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 10.335124964 seconds)
    (395/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 5.813936014 seconds)
    (396/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.5812094 seconds)
    (397/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 5.417312829 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.534260921 seconds)
    (399/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 5.871613832 seconds)
    (400/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 5.409579467 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 10.337169011 seconds)
    (402/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 6.295203585 seconds)
    (403/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 5.570938864 seconds)
    (404/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 5.588558161 seconds)
    (405/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 5.51946141 seconds)
    (406/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 5.707499478 seconds)
    (407/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 5.463177647 seconds)
    (408/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.47516457 seconds)
    (409/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.544272987 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 5.430649174 seconds)
    (411/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 9.329601675 seconds)
    (412/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 9.484397037 seconds)
    (413/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 5.352440539 seconds)
    (414/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 5.841123238 seconds)
    (415/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 5.557169092 seconds)
    (416/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 10.343307963 seconds)
    (417/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 16.956081227 seconds)
    (418/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 11.71727829 seconds)
    (419/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 5.586996797 seconds)
    (420/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 5.575684395 seconds)
    (421/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.691707427 seconds)
    (422/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 5.382659776 seconds)
    (423/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 5.455005888 seconds)
    (424/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 5.417185106 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 10.332635245 seconds)
    (426/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 5.803270884 seconds)
    (427/434) benchmarking ("perf_countequals", "Bool")...
    done (took 5.382961058 seconds)
    (428/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 5.558005884 seconds)
    (429/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 5.638972019 seconds)
    (430/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 5.360376816 seconds)
    (431/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 5.793389764 seconds)
    (432/434) benchmarking ("sort", "Int8", 0)...
    done (took 5.420868106 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 6.043151318 seconds)
    (434/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 5.702577607 seconds)
  done (took 2920.591308347 seconds)
done (took 2925.918839444 seconds)
SAVING RESULT...
DONE!
