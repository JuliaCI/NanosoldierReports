cset: moving following pidspec: 1806280
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "problem"... done (took 2.923121914 seconds)
loading group "array"... done (took 3.2465413 seconds)
loading group "misc"... done (took 0.408639866 seconds)
loading group "sort"... done (took 0.233205093 seconds)
loading group "frontend"... done (took 0.004488497 seconds)
loading group "shootout"... done (took 0.69442626 seconds)
loading group "sparse"... done (took 0.500608604 seconds)
loading group "scalar"... done (took 0.975668491 seconds)
loading group "dates"... done (took 0.139557682 seconds)
loading group "alloc"... done (took 0.016735441 seconds)
loading group "find"... done (took 1.154234414 seconds)
loading group "io"... done (took 1.154252749 seconds)
loading group "tuple"... done (took 0.72238376 seconds)
loading group "string"... done (took 0.212039072 seconds)
loading group "random"... done (took 2.170191011 seconds)
loading group "micro"... done (took 0.048562374 seconds)
loading group "broadcast"... done (took 0.562734345 seconds)
loading group "parallel"... done (took 0.020156635 seconds)
loading group "linalg"... done (took 2.518908927 seconds)
loading group "collection"... done (took 5.478692547 seconds)
loading group "simd"... done (took 1.100379019 seconds)
loading group "inference"... done (took 2.342243453 seconds)
loading group "union"... done (took 2.633742981 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/22) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 1.144820327 seconds)
  done (took 1.853512961 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 0.139339724 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 1.079807414 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 0.621547253 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 1.150181387 seconds)
  done (took 3.678453781 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.767114075 seconds)
  done (took 1.465903935 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.992653187 seconds)
  done (took 1.704786958 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.962899513 seconds)
  done (took 1.663187678 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 0.218824887 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 0.186411827 seconds)
  done (took 1.105841817 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.838360938 seconds)
  done (took 5.545549176 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.468401125 seconds)
  done (took 2.180290655 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.050238258 seconds)
  done (took 0.786619296 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 0.220880344 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 0.212233762 seconds)
  done (took 1.191663513 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.230810135 seconds)
  done (took 0.953526523 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.705242771 seconds)
  done (took 1.429138018 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.322691278 seconds)
  done (took 1.048389439 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.374054846 seconds)
  done (took 2.097911881 seconds)
done (took 27.473509091 seconds)
(2/22) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.286710342 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123545731 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.120672909 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.15412048 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000301978 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.154873321 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.092160384 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.300321825 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109262357 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.177692232 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.03200126 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.474388163 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027059082 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.242523318 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044680198 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03327167 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.149799632 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025089328 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.426736348 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.02049172 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.6487e-5 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.015556898 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.223922984 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.306406083 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.037592822 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.070572293 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07893865 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039469029 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.029783618 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.063592067 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021162294 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.35274599 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056854412 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.3181728 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.037293943 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058651214 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089757311 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.147993246 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029433595 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.028780858 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030422597 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.070766189 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.028283918 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 6.6011e-5 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065529504 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072749372 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043363905 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02939876 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.016963766 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058979289 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031878101 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047360918 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.019883598 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 0.096027939 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062611797 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.038426451 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.048771056 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083331935 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024189273 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027943853 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03018943 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.046182874 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020526719 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059819942 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.043791379 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.073757813 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.120916243 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039513199 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030811548 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022826379 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114984675 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046699968 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.027083024 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.048616207 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037221212 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.045311895 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077346931 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.054458401 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066252426 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064179384 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059782721 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091186682 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043559304 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064709352 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.05180453 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.032460262 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033749135 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.202393854 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.022060148 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.028248685 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.039447221 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.025574397 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.058021446 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.015074784 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000316059 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026348411 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.01928316 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03339321 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046064409 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 6.1118e-5 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037620209 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.052574303 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046724383 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.01093723 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044438884 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000497911 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.020247849 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012969856 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.1441e-5 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060412235 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.011156418 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 6.4358e-5 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.022609408 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.02512207 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.010929015 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.076116655 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.024414749 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052157578 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.048171028 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018869435 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.01733808 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094469444 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055246721 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.022227079 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.021255064 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046510216 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.01398342 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.2195e-5 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076893217 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.026345061 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.026305396 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.040483924 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.042496716 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.029530726 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052127545 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.02088728 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.020803357 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.3854e-5 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.026571874 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040681696 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.01460397 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.079059202 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062517473 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.011632932 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.071492589 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017943967 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038010526 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097008976 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045584687 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015121174 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.036317561 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.01342188 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.036769053 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.030237748 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042131775 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042142599 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.9353e-5 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.043875024 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020594063 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.063831525 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.064546351 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.043425846 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064676587 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.026598531 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045253951 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.043328951 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068171044 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.013993048 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059649962 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.020075847 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.01978793 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.027266048 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019536748 seconds)
    (174/608) benchmarking "5d"...
    done (took 0.219942046 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.015797829 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 3.6292e-5 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.056562592 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.014050433 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.049546502 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019188601 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.00677688 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000216639 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.029800774 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.010748375 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04047498 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.9249e-5 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017233828 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041649457 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.030326283 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063387869 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000302648 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.071931372 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023388865 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075067488 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.01823561 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045110366 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023117298 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.847e-5 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04524423 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051211003 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.048718211 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.218983375 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12766133 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064677932 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.925e-5 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032541546 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.02062658 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038199851 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.024603065 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.0014089 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.053310008 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.061062872 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006795786 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.032389344 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039969552 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.014620303 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027354454 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.1714e-5 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.2127e-5 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.030773308 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033398265 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006770433 seconds)
    (223/608) benchmarking "6d"...
    done (took 0.213836692 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.071516022 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024354658 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.9036e-5 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023564064 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.067190272 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030000949 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.017318532 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.083906561 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.017993097 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.049412806 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.025354781 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055743026 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.06791239 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020713816 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066707627 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.018501333 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057544687 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071102247 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045011082 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 6.7541e-5 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038877407 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041228488 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.064642072 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022628904 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04505628 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.048656955 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000113793 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 1.6095e-5 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.025779704 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040042339 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 9.4949e-5 seconds)
    (255/608) benchmarking "3d"...
    done (took 0.068419409 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059537135 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027384879 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.025571153 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.038413569 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.021292526 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0446874 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.019957041 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.062571888 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063728384 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019983494 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000199025 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.019426653 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.073170444 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046495027 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000170327 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033662821 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.017005485 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047915162 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.079919295 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.037399951 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0764065 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.016807343 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.028921716 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.03658733 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.037537695 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000124222 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040290047 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04506855 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.047123667 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.02858628 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.0347589 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019858862 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.05053581 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.014405435 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000155302 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.02771997 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.011539265 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.01483218 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.019177759 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043269308 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.014801747 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 9.7957e-5 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.032909075 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.033643404 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.036944651 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000435001 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.042360301 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.8619e-5 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.4549e-5 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.054405597 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.051615745 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0200461 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048997741 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041553463 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031145362 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06172013 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018681031 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020889122 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.069892474 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.059655216 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.026250544 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063840758 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.062697991 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.014229608 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03236979 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020291988 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.018951715 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063643904 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033709873 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.034989567 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069528052 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04918448 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000110853 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018084608 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016005134 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.019860708 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069893356 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042057038 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 0.30051303 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 4.4983e-5 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000160772 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.018986288 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082275407 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.011747779 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028583312 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 9.3791e-5 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051740872 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000325835 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091500694 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 7.6906e-5 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089119255 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000483774 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042102984 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.082486839 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027978814 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.020117416 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02292167 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02039211 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.8407e-5 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.059057228 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.064838422 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0337811 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.200438755 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.050446944 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 7.6345e-5 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.037576895 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.043686994 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.011198459 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.1602e-5 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.03360868 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000481558 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 0.048760294 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.035218846 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026153719 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046306114 seconds)
    (371/608) benchmarking "7d"...
    done (took 0.264894282 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050720769 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049905825 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.000221211 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.02471342 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.017499556 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039704804 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018256036 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.059984482 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.022780872 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.016861999 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.040327484 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023772335 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055903237 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055326489 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030996119 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042320841 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072184918 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.076481992 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.034070005 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012278956 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.016778737 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.043963974 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.202262407 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.020075476 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048912564 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042763698 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.011967466 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021464338 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059131142 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04047845 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000481836 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.04424764 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043313063 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063960908 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086164514 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061497011 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.020416138 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.02200782 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.048766 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.1043e-5 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.021566092 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.000307621 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000127265 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.025426974 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 4.3604e-5 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000112056 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027696969 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017111618 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.011851999 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.000149802 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032796623 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030114918 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.020890509 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051755585 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033491311 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.2309e-5 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.026789688 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.014566812 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022392906 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029646141 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.096575122 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04094438 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.013318815 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022581825 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056541369 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068139152 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026701806 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.014296269 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.025386716 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 1.922e-5 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.04886701 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.014219279 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.7857e-5 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023046381 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.034226683 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.021534685 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.0184e-5 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.032477112 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060020966 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.019796164 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070976411 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065159112 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.047783237 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.075005831 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.4239e-5 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029514774 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.060602376 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.014170811 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044056259 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023643483 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.036898184 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.021434631 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.2421e-5 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046556509 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.016210785 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034053082 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.037766841 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.0375716 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057904075 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.020281167 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055344713 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.021865535 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.02003907 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039020874 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046274989 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.033373537 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.025024007 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.038232792 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.042119711 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032700346 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.076369074 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.060989735 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.033790614 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.033487293 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.022251683 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057621042 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.06287979 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026618694 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.015996822 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041705201 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048054937 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.021625478 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.039371607 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.5307e-5 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031139119 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000561011 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014581066 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046015921 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.056660893 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020750511 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.036935733 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068755852 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050439954 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016305815 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.077761402 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.000167229 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.019393851 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.011829893 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.037710846 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047034806 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.442962522 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.9373e-5 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.022265145 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.025927055 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000318456 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05680322 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043929979 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.03890984 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.047097182 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.016641825 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081812374 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.022776349 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018351261 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032102697 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024943684 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030143297 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041823804 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066511568 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.2261e-5 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05613332 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.035919191 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.029731466 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.013371143 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021919396 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015428649 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000114948 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046768819 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045748551 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.043863564 seconds)
    (541/608) benchmarking "2d"...
    done (took 0.046613178 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044880895 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.6041e-5 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.021688454 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.01581595 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.6431e-5 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06060112 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.030428236 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.065792903 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034915198 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.7798e-5 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032875613 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.06862135 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022457664 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.045886669 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033731009 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.046950389 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.3997e-5 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022469678 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061901442 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.1315e-5 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039187045 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061450801 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.028067412 seconds)
    (565/608) benchmarking "4d"...
    done (took 0.103445955 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 3.6282e-5 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 1.5468e-5 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067927932 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044179075 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057496299 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013184192 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044982948 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.045874813 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065994021 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029049312 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.029037072 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03959234 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.031051179 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.050704936 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.015613342 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062071598 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027951317 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018970583 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.024583955 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 6.9504e-5 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000111743 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039221631 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0743556 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.021221851 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.056714194 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048875261 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064589619 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04819232 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025340827 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.037316083 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.076358474 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033005401 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.013518705 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026294633 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.060065668 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.035006912 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.000342503 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047071004 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.196364244 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.060558993 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000123553 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027020469 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.064361152 seconds)
  done (took 27.639030374 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 0.059732513 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 0.239383997 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 0.039043787 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.05468631 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 0.063602488 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 0.053762948 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 0.03280822 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 0.194682514 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.062999116 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.051546276 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 0.040274296 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.068396609 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 0.040833673 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.050384589 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.048974742 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 0.035279454 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 0.039838213 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.049781882 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 0.097567846 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 0.064347047 seconds)
  done (took 2.20855781 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.064069642 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.028532505 seconds)
    (3/17) benchmarking ("catnd", 500)...
    done (took 0.618848706 seconds)
    (4/17) benchmarking ("hcat", 5)...
    done (took 0.096581823 seconds)
    (5/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.00246874 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.08038852 seconds)
    (7/17) benchmarking ("hcat_setind", 5)...
    done (took 0.071533261 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.050666931 seconds)
    (9/17) benchmarking ("catnd_setind", 500)...
    done (took 0.106547144 seconds)
    (10/17) benchmarking ("vcat", 500)...
    done (took 0.006161575 seconds)
    (11/17) benchmarking ("vcat_setind", 5)...
    done (took 1.7875e-5 seconds)
    (12/17) benchmarking ("catnd_setind", 5)...
    done (took 1.4945e-5 seconds)
    (13/17) benchmarking ("hvcat", 5)...
    done (took 0.275087535 seconds)
    (14/17) benchmarking ("catnd", 5)...
    done (took 4.7958e-5 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.005889633 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 0.00835723 seconds)
    (17/17) benchmarking ("hcat", 500)...
    done (took 0.006451518 seconds)
  done (took 2.295570966 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.163033391 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.345340733 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.108806198 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.184622582 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.131780425 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.305915268 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.483357758 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.280372701 seconds)
  done (took 2.841133333 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 0.12544568 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 0.03421612 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.109337847 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.096896237 seconds)
  done (took 1.203623851 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 0.055624718 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024546149 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 0.034454002 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.024718999 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.044164096 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 0.024152155 seconds)
  done (took 1.04209968 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.045045028 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 0.051502092 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.193677263 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.035422157 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.03473731 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 0.038379096 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 0.054492806 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 0.045576949 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 0.037094437 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.040054187 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 0.031407177 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.026449319 seconds)
  done (took 1.513276631 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.05399425 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.042300863 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.049115159 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.042617435 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.037887294 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.037797858 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.047654451 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.041583271 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.036992133 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.024878713 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 0.030345837 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.044701599 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.031518819 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 0.031327147 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029998363 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.032635869 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.034374999 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.020053466 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.043227447 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.040786284 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.042765147 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.042374908 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.033683337 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.043581595 seconds)
  done (took 1.758896585 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 0.172166643 seconds)
    (2/5) benchmarking ("setindex!", 4)...
    done (took 0.016532646 seconds)
    (3/5) benchmarking ("setindex!", 2)...
    done (took 0.012759253 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 0.011387133 seconds)
    (5/5) benchmarking ("setindex!", 3)...
    done (took 0.011041522 seconds)
  done (took 1.062786418 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.977219965 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.096281629 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 1.597779852 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.750900846 seconds)
    (5/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.486384026 seconds)
    (6/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009327755 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.005548359 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.289016077 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.08388071 seconds)
    (10/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.17044866 seconds)
    (11/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.006072365 seconds)
    (12/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.592237144 seconds)
  done (took 26.902538043 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.050235322 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 0.046778487 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.050264552 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 0.044734736 seconds)
  done (took 1.033599344 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 2048)...
    done (took 0.032429394 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.3313e-5 seconds)
    (3/12) benchmarking ("prerend!", 2048)...
    done (took 0.043590295 seconds)
    (4/12) benchmarking ("push_single!", 8)...
    done (took 1.3384e-5 seconds)
    (5/12) benchmarking ("push_multiple!", 8)...
    done (took 0.039152603 seconds)
    (6/12) benchmarking ("append!", 256)...
    done (took 0.042775681 seconds)
    (7/12) benchmarking ("prerend!", 8)...
    done (took 1.2433e-5 seconds)
    (8/12) benchmarking ("push_multiple!", 256)...
    done (took 1.2552e-5 seconds)
    (9/12) benchmarking ("append!", 2048)...
    done (took 2.0047e-5 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 1.0265e-5 seconds)
    (11/12) benchmarking ("append!", 8)...
    done (took 1.0592e-5 seconds)
    (12/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.2704e-5 seconds)
  done (took 1.003484425 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.033208206 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.041422392 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.031743433 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.037332344 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.04266813 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.027315312 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.026062512 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.038190474 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.0372633 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.036528945 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.022454491 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.042042413 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.037134839 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 0.028772621 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.036566142 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.022236117 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.031639542 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.037227949 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 0.026695423 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.031885536 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.023056142 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.04138278 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.037058058 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.022261332 seconds)
  done (took 1.638618855 seconds)
done (took 72.874901978 seconds)
(3/22) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.093489913 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.037382968 seconds)
  done (took 0.973626511 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 0.210964205 seconds)
  (3/15) benchmarking "20517"...
  done (took 0.061324432 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 0.086555243 seconds)
    (2/2) benchmarking "conditional"...
    done (took 0.053631068 seconds)
  done (took 0.99217428 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 0.033890236 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.035330268 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 0.039330292 seconds)
  done (took 0.959892867 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.047390665 seconds)
  done (took 0.919743645 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.147076032 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.230389013 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.09176532 seconds)
  done (took 1.319865828 seconds)
  (8/15) benchmarking "18129"...
  done (took 0.167872842 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 0.056594774 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 0.053277174 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 0.022421476 seconds)
    (4/4) benchmarking "Float32"...
    done (took 0.031864405 seconds)
  done (took 1.022286537 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.044387092 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 0.02965839 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 0.020044499 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 0.019432575 seconds)
  done (took 0.967476119 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 0.062987379 seconds)
    (2/3) benchmarking "Float16"...
    done (took 0.061228217 seconds)
    (3/3) benchmarking "Float32"...
    done (took 0.058279776 seconds)
  done (took 1.03910609 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 0.061409414 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.022081443 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 0.021800183 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.021687639 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 0.021925909 seconds)
  done (took 0.945813567 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.171605594 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 0.087942988 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.037657735 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.093747432 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.094521127 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.9153e-5 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.2187e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.9592e-5 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 1.3718e-5 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.071907698 seconds)
  done (took 1.410987905 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.133568067 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.9088e-5 seconds)
  done (took 0.995507833 seconds)
done (took 12.895904013 seconds)
(4/22) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.103940189 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.086460901 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.480172322 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.634874679 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.036284731 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.024887675 seconds)
    (7/17) benchmarking "all same"...
    done (took 0.02878389 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 3.0467e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.025541065 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.3506e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.887072514 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.028491375 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.578514728 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.027003013 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.08109658 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.030236274 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.2197e-5 seconds)
  done (took 11.916291786 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 3.3623e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000906122 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000384194 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 0.000941123 seconds)
    (5/17) benchmarking "descending"...
    done (took 0.000571909 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.108e-5 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.2119e-5 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.000354125 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000976898 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000378902 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000363604 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 0.000580037 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.022813423 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000544279 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000414078 seconds)
    (16/17) benchmarking "ascending"...
    done (took 0.000566852 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.00038997 seconds)
  done (took 0.960820336 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.7263e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 8.238e-6 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 7.066e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.082e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.965e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.26e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.295e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 3.395e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.023e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 3.393e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 8.553e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.327e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.196e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.633e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.2019e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.296e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.463e-6 seconds)
  done (took 0.910445167 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.6898e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 3.2889e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.0066e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.0024e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 1.6083e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.15e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 5.033e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.679e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 1.757e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.712e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.1013e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 1.3024e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.00021902 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.2642e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.5529e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 1.2755e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 9.03e-6 seconds)
  done (took 0.909816578 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 0.038080019 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.034981585 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.696923131 seconds)
    (4/13) benchmarking "Float16"...
    done (took 0.992589528 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 8.979672254 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.038161892 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.181368647 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 1.444e-5 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.397822222 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 0.033777281 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 7.70969462 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.311804336 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.250371313 seconds)
  done (took 21.576209785 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.238644941 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.221692017 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.129536532 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.063535091 seconds)
  done (took 1.588702447 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.148350822 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.109263678 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.071222775 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.062253935 seconds)
  done (took 1.32788059 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 0.105377232 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 0.050806156 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 0.064562773 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 0.056066865 seconds)
  done (took 1.211660765 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 0.037876022 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 0.054873349 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 0.037012047 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 0.02847304 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 0.035093397 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 0.056114768 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 0.025814401 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 0.02500989 seconds)
  done (took 1.236637217 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.9114e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 0.000118055 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.1498e-5 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 8.8846e-5 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.6132e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.751e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 9.763e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.5581e-5 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 8.54e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.5016e-5 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 6.0662e-5 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 6.4207e-5 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 0.001839889 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.3276e-5 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.2474e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.8933e-5 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.6158e-5 seconds)
  done (took 0.938531412 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.6754e-5 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 1.9667e-5 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 9.261e-6 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 9.613e-6 seconds)
    (5/17) benchmarking "descending"...
    done (took 7.56e-6 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 4.968e-6 seconds)
    (7/17) benchmarking "all same"...
    done (took 4.633e-6 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 4.742e-6 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 7.677e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.592e-6 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 9.239e-6 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 5.841e-6 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.2634e-5 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.969e-6 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.4433e-5 seconds)
    (16/17) benchmarking "ascending"...
    done (took 5.557e-6 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.001e-6 seconds)
  done (took 0.931938193 seconds)
done (took 44.370347708 seconds)
(5/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.022430671 seconds)
done (took 0.953977479 seconds)
(6/22) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 0.092964534 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.104865419 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 0.053379077 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 0.122380357 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 0.065776285 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 0.11262609 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 0.088982692 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 0.53700284 seconds)
  (9/12) benchmarking "nbody"...
  done (took 0.073272368 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 0.074851206 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 0.372746803 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 2.82863283 seconds)
done (took 5.465538192 seconds)
(7/22) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.119013221 seconds)
    (2/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.080735284 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.094875141 seconds)
    (4/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.041597238 seconds)
    (5/54) benchmarking ("spvec", "integer", 100000)...
    done (took 3.5363e-5 seconds)
    (6/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.056044675 seconds)
    (7/54) benchmarking ("spmat", "array", 10)...
    done (took 0.032235077 seconds)
    (8/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.054267805 seconds)
    (9/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.069619399 seconds)
    (10/54) benchmarking ("spmat", "logical", 100)...
    done (took 7.1022e-5 seconds)
    (11/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.081799 seconds)
    (12/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.084666062 seconds)
    (13/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.052383467 seconds)
    (14/54) benchmarking ("spmat", "array", 100)...
    done (took 0.000156467 seconds)
    (15/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.038214941 seconds)
    (16/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.000808044 seconds)
    (17/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.037581357 seconds)
    (18/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000818193 seconds)
    (19/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.815e-5 seconds)
    (20/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.209448485 seconds)
    (21/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000150776 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.046709488 seconds)
    (23/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.070954984 seconds)
    (24/54) benchmarking ("spmat", "range", 100)...
    done (took 0.107986191 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000949578 seconds)
    (26/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.6997e-5 seconds)
    (27/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.088110567 seconds)
    (28/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.0005e-5 seconds)
    (29/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.6145e-5 seconds)
    (30/54) benchmarking ("spvec", "range", 100000)...
    done (took 4.2772e-5 seconds)
    (31/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.002676966 seconds)
    (32/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001122268 seconds)
    (33/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 5.1134e-5 seconds)
    (34/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.000810526 seconds)
    (35/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.5338e-5 seconds)
    (36/54) benchmarking ("spmat", "logical", 10)...
    done (took 1.7588e-5 seconds)
    (37/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.000725455 seconds)
    (38/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.4754e-5 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 4.0791e-5 seconds)
    (40/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.334e-5 seconds)
    (41/54) benchmarking ("spvec", "array", 1000)...
    done (took 9.3325e-5 seconds)
    (42/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.6818e-5 seconds)
    (43/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.2308e-5 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000726924 seconds)
    (45/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.4057e-5 seconds)
    (46/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000919383 seconds)
    (47/54) benchmarking ("spmat", "splogical", 100)...
    done (took 3.7485e-5 seconds)
    (48/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.1708e-5 seconds)
    (49/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000763882 seconds)
    (50/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.012801695 seconds)
    (51/54) benchmarking ("spmat", "range", 10)...
    done (took 1.5392e-5 seconds)
    (52/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 4.191e-5 seconds)
    (53/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.000751118 seconds)
    (54/54) benchmarking ("spmat", "integer", 100)...
    done (took 3.7109e-5 seconds)
  done (took 2.441766187 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 0.540734711 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 0.445685011 seconds)
  done (took 1.93736133 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.124656699 seconds)
    (2/18) benchmarking ("IV", 1000)...
    done (took 0.199558049 seconds)
    (3/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.104268615 seconds)
    (4/18) benchmarking ("IJV", 100)...
    done (took 0.058738836 seconds)
    (5/18) benchmarking ("IJV", 1000)...
    done (took 3.4728e-5 seconds)
    (6/18) benchmarking ("Bidiagonal", 100)...
    done (took 1.1756e-5 seconds)
    (7/18) benchmarking ("IJV", 10)...
    done (took 8.279e-6 seconds)
    (8/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.1813e-5 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.106229164 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.9666e-5 seconds)
    (11/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.4346e-5 seconds)
    (12/18) benchmarking ("Diagonal", 1000)...
    done (took 0.147309321 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 1.3009e-5 seconds)
    (14/18) benchmarking ("Diagonal", 10)...
    done (took 7.606e-6 seconds)
    (15/18) benchmarking ("IV", 100)...
    done (took 1.4644e-5 seconds)
    (16/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 3.715e-5 seconds)
    (17/18) benchmarking ("IV", 10)...
    done (took 6.831e-6 seconds)
    (18/18) benchmarking ("Tridiagonal", 10)...
    done (took 9.501e-6 seconds)
  done (took 1.705492299 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.473624053 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.160127012 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.078694773 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.298281092 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076430671 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075521588 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.12188752 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.00014634 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.073821132 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.3464e-5 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07909123 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.03073019 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.074067247 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.0104e-5 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.034005956 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.5938e-5 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.027782594 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002345507 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.094026324 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.003608495 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.123688939 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.00367419 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.091925181 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.00308167 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 6.6562e-5 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.035905026 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.033527825 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.032962507 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.069328397 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 6.8499e-5 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.003063875 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002707414 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000577745 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002240719 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.03519034 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000106955 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001495922 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.034784227 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.002296569 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.001374297 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.031561021 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.002114138 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035118105 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.002909623 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000108774 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005991541 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000221523 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000140606 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.004636449 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000172242 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 8.076e-5 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.018289511 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 4.4825e-5 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.035076731 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.1336e-5 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 5.3816e-5 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.3334e-5 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.00258947 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000129771 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 3.5137e-5 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003777617 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.00390638 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000110827 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.002265023 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.03290715 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.5315e-5 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000215136 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.004595751 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.3373e-5 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.04655307 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.000124219 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.006286188 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001615834 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 9.7861e-5 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002992619 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000586769 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.00241504 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000207826 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000156152 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002421957 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.012265756 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000181172 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000104966 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002936189 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.0315597 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000100648 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.4932e-5 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.013290883 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000225849 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.012065579 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.002215316 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000201878 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006200585 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009162874 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000205677 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000105416 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000218293 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.007850637 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000106322 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.041301306 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001468611 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 7.8221e-5 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000224676 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.00121264 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 7.7182e-5 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.000797743 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000700285 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.6269e-5 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001431717 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000143404 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.0001142 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.001368608 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.8475e-5 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000125777 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 6.9843e-5 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000210005 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008177618 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008189286 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001357607 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000150214 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008295691 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002008958 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.01112269 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000116398 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001422077 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 4.5194e-5 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000119376 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000173411 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001540874 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007385304 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005156039 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000162232 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.00022809 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013281013 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.00232378 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000513455 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008061811 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000117005 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012571314 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.009069555 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000242873 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000780937 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000141891 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001681529 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002522926 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.006494377 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 8.0175e-5 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 6.0835e-5 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.000182288 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011816967 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 8.3256e-5 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 8.8689e-5 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.3595e-5 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.020348102 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.3297e-5 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000153044 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001471685 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000116114 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 4.9339e-5 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.8924e-5 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.00239943 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 5.4761e-5 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002206419 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 9.4136e-5 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.053e-5 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.00115734 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004726032 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000703083 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000142164 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.4019e-5 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000257634 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.4937e-5 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.000545235 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 5.1012e-5 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.00171997 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.00506516 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000172348 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008794575 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.004034038 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.00212064 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000820825 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.7841e-5 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.001718088 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 6.0627e-5 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000220614 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000150571 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.002562778 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000135433 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.5843e-5 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.001628854 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.006939359 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.014433192 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000142081 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.9813e-5 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.003585298 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.002464267 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000125291 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000180873 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000128179 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.002108116 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.000725328 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.005290738 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.001712795 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 8.726e-5 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.00297835 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.014451441 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 6.2051e-5 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.00011203 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002786063 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003170569 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.00012099 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000169119 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.6098e-5 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000107913 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000238978 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000924881 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.5327e-5 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.00727584 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001223577 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000140804 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000134919 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005704341 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 5.0407e-5 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001456723 seconds)
  done (took 3.806314592 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.059246299 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.139582229 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.245954091 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.032741626 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000199837 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.144355103 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.000170943 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.263000504 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.000139556 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 1.004556119 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.000110894 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.057229296 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000243226 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.485218522 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.260891812 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.211896236 seconds)
  done (took 3.858727902 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 1.751523431 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.906971321 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.264418287 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.408091488 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.132326882 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 0.448648684 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.130510489 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.108016543 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.11303731 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.100401656 seconds)
  done (took 5.340732338 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.058253299 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.185573743 seconds)
  done (took 1.219383893 seconds)
done (took 21.248362801 seconds)
(8/22) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020670343 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020510564 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 0.020068175 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.022172977 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 0.019844532 seconds)
    (6/49) benchmarking "13786"...
    done (took 0.037178301 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.020718825 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 0.020287843 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.050873768 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 0.021255994 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.027695694 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.033573403 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 0.021073764 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 0.019772979 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 0.020080392 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 0.019950823 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 0.020991711 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 0.020356604 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.022100389 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 0.020309638 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 0.020940337 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.021631993 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 0.020980413 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 0.021898145 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 0.020694796 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.02662712 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 0.021099449 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 0.020309806 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.02680693 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.021700815 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.021353327 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.021291973 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 0.020070408 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 0.020296363 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 0.020492577 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 0.019634289 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.028038482 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.021497757 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.021336161 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.022416755 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 0.021020835 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 0.021675102 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.021447852 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.021741148 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 0.020062462 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 0.019917706 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.022218868 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 0.021996282 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 0.02008529 seconds)
  done (took 2.077724178 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.035714141 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 3.6808e-5 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.035981736 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.000180354 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.5252e-5 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.4834e-5 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.3236e-5 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 8.554e-6 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 7.387e-6 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 6.723e-6 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.6404e-5 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.976e-6 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 6.818e-6 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 7.116e-6 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.843e-6 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 6.604e-6 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.009419006 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 4.3286e-5 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.5782e-5 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 8.025e-6 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 8.568e-6 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 7.764e-6 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.765e-6 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 6.877e-6 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 6.696e-6 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.45e-6 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 6.642e-6 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 6.17e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 5.785e-6 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.986e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 6.585e-6 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.231e-6 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.1906e-5 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 6.978e-6 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 6.195e-6 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 5.837e-6 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.223e-6 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.1175e-5 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 8.632e-6 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 7.062e-6 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 6.06e-6 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 7.836e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.7182e-5 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 8.392e-6 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.433e-6 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 6.305e-6 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 6.342e-6 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 5.944e-6 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.379e-6 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.29e-6 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.112e-6 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 5.996e-6 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 6.297e-6 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 6.299e-6 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 9.407e-6 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.525e-6 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 6.421e-6 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 6.126e-6 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 5.828e-6 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 1.1458e-5 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 7.469e-6 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 6.736e-6 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 6.509e-6 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 6.011e-6 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 6.43e-6 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 6.344e-6 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 6.155e-6 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 5.644e-6 seconds)
  done (took 1.201435757 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.01979263 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.0235e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.465e-6 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.631e-6 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.77e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.482e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.283e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.442e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.64e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.1e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 7.5e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.592e-6 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.769e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.347e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.042e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.302e-6 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.203e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.043e-6 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.54e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.536e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.665e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.019024118 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.341e-5 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 7.665e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 7.185e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 7.24e-6 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 6.924e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.286e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.301e-6 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 6.031e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.003e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.8e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.707e-6 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.97e-6 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.04e-6 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.997e-6 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.689e-6 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.2761e-5 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.672e-6 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 6.294e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.678e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.126e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0492e-5 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 6.556e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.034e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.853e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.011e-6 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 7.084e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.658e-6 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.455e-6 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.482e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.372e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.44e-6 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.244e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.174e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.617e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.383e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.422e-6 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.685e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.177e-6 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.764e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.525e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.34e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.416e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.334e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.341e-6 seconds)
  done (took 1.017673255 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.044261669 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.026638045 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.04650198 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.042047487 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.037304761 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.045727348 seconds)
  done (took 1.218098266 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 0.021624023 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.672e-5 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020864759 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.2016e-5 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 8.905e-6 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.892e-6 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 6.614e-6 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.099e-6 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.148e-6 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.973e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.241e-5 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 6.188e-6 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 9.468e-6 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 6.216e-6 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 5.664e-6 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.378e-6 seconds)
  done (took 1.021327094 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019476368 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 1.483e-5 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.895e-6 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.017612253 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018763842 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 9.733e-6 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.7608e-5 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.000175218 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 7.22e-6 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 6.377e-6 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 9.796e-6 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.156e-6 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.535e-6 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 6.086e-6 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 1.0981e-5 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 7.101e-6 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.604e-6 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.798e-6 seconds)
  done (took 1.032007776 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.019615683 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.3493e-5 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.018891513 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.3182e-5 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 7.345e-6 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 6.434e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.036e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 6.347e-6 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 6.219e-6 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 5.802e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.0176e-5 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.856e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.138e-6 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 6.142e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.048e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.09e-6 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.844e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.899e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 9.173e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.785e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.934e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 5.478e-6 seconds)
  done (took 1.015860339 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.019182661 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.0207e-5 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.019255053 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.3212e-5 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 6.7e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.752e-6 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 6.17e-6 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 6.252e-6 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.362e-6 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.578e-6 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 7.753e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.588e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.565e-6 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.814e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.643e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.092e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.24e-6 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.314e-6 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.43e-6 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.394e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.312e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.748e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 6.054e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.275e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.643e-6 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.887e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.318e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 6.009e-6 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.121e-5 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.711e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.126e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.716e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.606e-6 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.528e-6 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.001e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.589e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.453e-6 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.636e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.918e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.197e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.307e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.774e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.4958e-5 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 6.18e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.258e-6 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.067e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.128e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.352e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 4.908e-6 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.428e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.392e-6 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.256e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.532e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.562e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.11e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.74e-6 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.159e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.373e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.723e-6 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.243e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.615e-6 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.62e-6 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 5.6e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.205e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.597e-6 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.473e-6 seconds)
  done (took 1.015301233 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 0.019385065 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018793688 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.3819e-5 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 6.064e-6 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 5.968e-6 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 4.899e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 5.707e-6 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 5.163e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.675e-6 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 5.505e-6 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 9.866e-6 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.35e-6 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.633e-6 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 4.827e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.528e-6 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.393e-6 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 8.544e-6 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.564e-6 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 5.373e-6 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.583e-6 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 5.446e-6 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 5.215e-6 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 8.771e-6 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.49e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.989e-6 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.986e-6 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 4.81e-6 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.332e-6 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 5.077e-6 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.192e-6 seconds)
  done (took 1.017873882 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.019602909 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.6725e-5 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020753683 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.3461e-5 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 7.398e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 7.048e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 6.217e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 7.124e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 6.229e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 5.769e-6 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.023e-5 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.723e-6 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.562e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.465e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.72e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.706e-6 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.439e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.437e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 5.448e-6 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 9.942e-6 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 7.639e-6 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.534e-6 seconds)
  done (took 1.019304029 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 0.019405897 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.5126e-5 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.517e-6 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01884075 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.2458e-5 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.181e-6 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 6.247e-6 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.361e-6 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.378e-6 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.003e-6 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 1.3026e-5 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.537e-6 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 5.075e-6 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.222e-6 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.862e-6 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 5.537e-6 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.461e-6 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 5.462e-6 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.407e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.772e-6 seconds)
  done (took 1.014538605 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 0.021474651 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018750972 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 9.479e-6 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 8.896e-6 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.226e-6 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.264e-6 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 5.071e-6 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 4.921e-6 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 5.287e-6 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 4.892e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 8.982e-6 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.269e-6 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.242e-6 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 4.955e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 4.781e-6 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.064e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.05e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.255e-6 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 9.149e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.751e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.325e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.124e-6 seconds)
  done (took 1.017709564 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.019591197 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.0403e-5 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.299e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.078e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.425e-6 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 4.813e-6 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.179e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.553e-6 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.459e-6 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.219e-6 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 7.973e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.067e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.253e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.333e-6 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 4.667e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 6.009e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 4.86e-6 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 5.762e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.332e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 4.824e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.173e-6 seconds)
  done (took 0.993910349 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 0.019306266 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 0.019261961 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.021004256 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 0.020210944 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015731286 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019571375 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.016248672 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024722944 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.016027008 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.020206448 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 0.019711098 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 0.019546528 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 0.020424686 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 0.024295163 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.016496668 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.020680998 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.020524049 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.022602142 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.020600938 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.020789484 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.020913457 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 0.016139069 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.02012607 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.020195368 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.021208464 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 0.02130126 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 0.021581401 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 0.016252155 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 0.016183734 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.020084994 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 0.019907748 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 0.020004875 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 0.021621762 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 0.019930716 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 0.020443169 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.02986152 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 0.0211045 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 0.016165748 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 0.016088707 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.021180881 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.020642226 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020800557 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 0.020081941 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.016214726 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.020674119 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 0.020118392 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 0.019892805 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.016422745 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.016393194 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.02052467 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.016286283 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020228347 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.01611876 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019924449 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 0.019975681 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.016262955 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 0.01612236 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 0.020202811 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 0.01609222 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.020170021 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.016192073 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.016352234 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.020569903 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 0.016024847 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 0.019977848 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.016032353 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.020055217 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019979015 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 0.020059607 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 0.020021965 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.023314266 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.021371631 seconds)
  done (took 2.379579212 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.020090739 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.019696315 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.3222e-5 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.358e-6 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.177e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.62e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.346e-6 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.499e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.341e-6 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.286e-6 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 8.072e-6 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.321e-6 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.142e-6 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 4.826e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.076e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 4.979e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.041e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.03e-6 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.143e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.437e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.769e-6 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 5.339e-6 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.031e-6 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.118e-6 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.113e-6 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.136e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 4.839e-6 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.27e-6 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 4.842e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 6.668e-6 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.284e-6 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 4.724e-6 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 4.861e-6 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.244e-6 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.368e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.242e-6 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.086e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.344e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.092e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.423e-6 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.495e-6 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.317e-6 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.4599e-5 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.637e-6 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 5.251e-6 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.214e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.212e-6 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.497e-6 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.657e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.291e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 4.919e-6 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.27e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 5.335e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 5.344e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.553e-6 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.422e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.067e-6 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.287e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.29e-6 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.139e-6 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.185e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.166e-6 seconds)
  done (took 1.019591608 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 0.0194441 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.017469203 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.017366496 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018780413 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.017512913 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.2438e-5 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 5.6117e-5 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 7.028e-6 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 7.615e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.8e-6 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017383808 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 1.4279e-5 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 5.3545e-5 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 4.3771e-5 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 9.558e-6 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 6.122e-6 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 5.2343e-5 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.532e-6 seconds)
  done (took 1.08448286 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 0.019531197 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018936054 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.2002e-5 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.722e-6 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 5.56e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 4.986e-6 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.534e-6 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 4.887e-6 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.534e-6 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.676e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.3284e-5 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 5.359e-6 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 5.118e-6 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.511e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 4.967e-6 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 4.813e-6 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 4.938e-6 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.278e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.105e-6 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 4.824e-6 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 4.726e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.431e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 4.874e-6 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 5.218e-6 seconds)
  done (took 1.016544606 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.054328839 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.1022e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 6.217e-6 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 4.956e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 4.778e-6 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.234e-6 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.354e-6 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.214e-6 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.671e-6 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.381e-6 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 7.436e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.016e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.25e-6 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 4.746e-6 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.305e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.03e-6 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.559e-6 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 8.442e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.704e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.271e-6 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.311e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.586e-6 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.7e-6 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.088e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 4.913e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.183e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.347e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 4.895e-6 seconds)
  done (took 1.031969959 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.019086995 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 0.019200651 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.9508e-5 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 7.171e-6 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 6.302e-6 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 6.44e-6 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 6.024e-6 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 5.618e-6 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.881e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.705e-6 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 9.238e-6 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 5.51e-6 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.763e-6 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.73e-6 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 5.543e-6 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.303e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.749e-6 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.528e-6 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.482e-6 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.836e-6 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 5.177e-6 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.945e-6 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 6.186e-6 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.912e-6 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.295e-6 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.381e-6 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.242e-6 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.303e-6 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.515e-6 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 5.502e-6 seconds)
  done (took 1.01950656 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.021012753 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.018768193 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.023915961 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.2495e-5 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 7.94e-6 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018676367 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.1702e-5 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019180285 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.022326699 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.022729117 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.024536034 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.0429e-5 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.019807022 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.9599e-5 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.3006e-5 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.021881478 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.7667e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.2814e-5 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.3804e-5 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.0379e-5 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 8.624e-6 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 7.164e-6 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 6.842e-6 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.0246e-5 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 7.621e-6 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 6.54e-6 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 7.209e-6 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 7.293e-6 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 6.258e-6 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 7.727e-6 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 7.815e-6 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 6.584e-6 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 7.969e-6 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 5.687e-6 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 5.896e-6 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 5.765e-6 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 5.977e-6 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 6.64e-6 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 6.735e-6 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 5.787e-6 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.021447011 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.748e-5 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 3.167e-5 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.1922e-5 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 8.235e-6 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 8.462e-6 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.021480403 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.5864e-5 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.2781e-5 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 8.173e-6 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.1354e-5 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 9.789e-6 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 7.936e-6 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 8.587e-6 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 8.221e-6 seconds)
  done (took 1.233734665 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019587256 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 1.6236e-5 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 8.097e-6 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.018859375 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.0214e-5 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.831e-5 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 6.229e-6 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 5.907e-6 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 5.751e-6 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 5.957e-6 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 9.847e-6 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 6.104e-6 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.278e-6 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017406605 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.1868e-5 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 9.956e-6 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.564e-6 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 5.2727e-5 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 7.338e-6 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.984e-6 seconds)
  done (took 1.035817377 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.019416119 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.3497e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020823508 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.2657e-5 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 7.376e-6 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 6.706e-6 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.011e-6 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.764e-6 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 6.01e-6 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.913e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 9.493e-6 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.633e-6 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.682e-6 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.642e-6 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 6.085e-6 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.778e-6 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 9.052e-6 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.238e-6 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.959e-6 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.703e-6 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.661e-6 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 5.462e-6 seconds)
  done (took 1.017621648 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 0.019191704 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.019246268 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.4582e-5 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 5.765e-6 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 1.0244e-5 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.678e-6 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.785e-6 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 5.39e-6 seconds)
  done (took 1.016458716 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020530906 seconds)
    (2/2) benchmarking "in"...
    done (took 0.02005205 seconds)
  done (took 1.018801385 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.031945584 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020867494 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.019055726 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.023024991 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.024660381 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024789717 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.020904046 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.028484844 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021916638 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.022819294 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.021608564 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021348481 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025296497 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.021485041 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.023587185 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022912034 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.021624518 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.0217566 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.023504556 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022073422 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021975967 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.023111858 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.021865799 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021066112 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028145289 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021899843 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.022231363 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.020882431 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023323666 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.021060523 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021807455 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027128471 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.021318359 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.0210354 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020709958 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.022563193 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.022092138 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.022160794 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.022704111 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020698 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.020337265 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.021712991 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024349796 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020862833 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.004725369 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.024856794 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.020959336 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.020261375 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.020773012 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.023381382 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.027839661 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023102994 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.023118626 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.022029322 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.022069082 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.020724331 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.021917886 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.022535298 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.02141263 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.022629713 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.027403741 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.02793027 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.022193548 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.021021644 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.022135671 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.027442438 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.022471074 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.021167013 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.020182633 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.022134356 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.025322272 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.022953374 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.023403035 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023136031 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.021618533 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.022444913 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.028530932 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.021014911 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.023401963 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.021402424 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.02177974 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.021887667 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.021260743 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.024868794 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.022376838 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.028154858 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021651325 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.023615837 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.021749293 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022227706 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021646348 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.02836859 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022663965 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.023823387 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.022764681 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.023406561 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.020445765 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019626871 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.020719955 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020629504 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.019971051 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021905618 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.028140745 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.021714166 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.020985856 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022059672 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029238405 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.023277259 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003458142 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.022177237 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.023170346 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.021985564 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021983284 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.027617999 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.021866452 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.02713047 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.024280878 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.021322423 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.020333925 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.021214596 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003738261 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.020346188 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.021000943 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.021210343 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.022142184 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.023368122 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021935978 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.020313322 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.021862951 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.02233427 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.020432603 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021340975 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.021865065 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.021168441 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.0210295 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.021133576 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.023070517 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.022043039 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.021472701 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.021441898 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023833535 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.023621559 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.021069888 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.021431421 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022609822 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.02416175 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021738318 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.022311822 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022723358 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.020065005 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022219978 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.022707653 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.020526251 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.021160226 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.021645078 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.022557655 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.022766445 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.022400135 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.020252078 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021914916 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020808593 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.020225668 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.028627914 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.020388648 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02283893 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.022624264 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.021546098 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.003402935 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.00294515 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.021271861 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.023451659 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.021558404 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.021536698 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020902914 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.021219743 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021790836 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022826363 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.02100644 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.021827131 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.02347232 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.021683749 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.020324444 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.020778432 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.023012627 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.019714069 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021664739 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.022577775 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.023001919 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004327796 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.02313793 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.019501307 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.022288201 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.021057401 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.022859476 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.021543427 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021360847 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019830576 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022813888 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.027334907 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.021022879 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022546346 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.022227741 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020319751 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021389283 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.021426339 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.022004276 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.022198775 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.021768232 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.020329839 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.023544385 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.019755363 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.022565026 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020657273 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021473119 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.021146292 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.021033685 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.021189581 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.022056187 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021223707 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028928783 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.022303386 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.020848362 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026826049 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.027096099 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.020206058 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020757792 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027265737 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.02149023 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.021873685 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.022254151 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027309988 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.022742668 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.021503052 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.021536631 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.024087421 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.023710304 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.022452871 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.019405906 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021561368 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021996276 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.022814176 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.020802498 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019690883 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.022169244 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.023314831 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.02386536 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021946164 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.02242739 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020815318 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.022842268 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.021304559 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.023612913 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022533159 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.020110608 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.022496542 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.024415841 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022665291 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.02117195 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.022736094 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026932274 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.020327571 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.021490652 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020769937 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.02175394 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021860296 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.022230473 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021870852 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.022983326 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021836955 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.023426513 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021020788 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028107987 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020819622 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.021047176 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.019816471 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.028349638 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.021319684 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.019379925 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.021101508 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.022162497 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.021895627 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.023106742 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019963387 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.021940367 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019684142 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.022122978 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026943304 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.024146048 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.022450118 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.022293664 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02148186 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021319937 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.020926615 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.021205559 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021718606 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021683167 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.021910701 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.020609155 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.021581135 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020864441 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.026158294 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.020031425 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.021850118 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.019444103 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022415211 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.020003613 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.022603929 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.022486738 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021876693 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020907371 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.02282814 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.022328837 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.021334989 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021174498 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.021267398 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021851604 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.020791576 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020973763 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.020051375 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.019749848 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.022358156 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021978813 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.021186561 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.023585898 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022871161 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.021007432 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.022624844 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020906714 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.022355545 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.02317736 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023480937 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.024060894 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.022532505 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021659554 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021696114 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021148822 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.02637204 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021971621 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.02035968 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021365563 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.021665579 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021140637 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.02199732 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019909827 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.022304443 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.009256674 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020754195 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.021730457 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021650109 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023757163 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022437624 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021437596 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021964533 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020885637 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020459587 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020596183 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.020602782 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.021151061 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020525041 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.026055477 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.020924025 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.02100501 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.025930734 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022935405 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022427826 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.022044843 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.020559052 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020956442 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.025730605 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.027397607 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.021503029 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.022478914 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021977942 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022441466 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021212708 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.023090132 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020465153 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022440845 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021847055 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021397808 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020592928 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.019430797 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.022495469 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021350084 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021281 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.021396793 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022359581 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019738443 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020750915 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.02164154 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.022388395 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.0207427 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.02108649 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021828149 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.02129533 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020613238 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020778448 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020919902 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.021686741 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026625098 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.020341007 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.022341156 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.020830109 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.02030705 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.020540513 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020786914 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.023025804 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.0195954 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019733512 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026552434 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.022003996 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020774741 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019859471 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.022292347 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.021713936 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.020550137 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.022017692 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.022936179 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.020650721 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.021619615 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.019477075 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.023338421 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019981726 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022706489 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020991808 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.020531421 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021763614 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.021591095 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.019658969 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019773728 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020741424 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022967487 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.022240716 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.021435204 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.021635496 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.020829052 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.022321194 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.019425675 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.022015673 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.022128665 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.026730331 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.022710546 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.020616045 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020525613 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.026449533 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020982918 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.021955806 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.022404607 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.020918463 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.020363609 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020698598 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.00402103 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.023126349 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020782902 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021760535 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020844467 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022804517 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.022675318 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020779222 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.019308896 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020964132 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.02065022 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020653116 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022340068 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.02242584 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020927522 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021607919 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.003268618 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019454288 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.02048556 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020822563 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020759985 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020992424 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021524316 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021521845 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020678539 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.0192879 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.020567742 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003234586 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.020944063 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.021762825 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.02128596 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020929383 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.021369733 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.020816946 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021620196 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.021261684 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.021312886 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.026743392 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003516251 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.019825491 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.022125449 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.022568903 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.02087877 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021029541 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020370428 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.021177568 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020696869 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.020387437 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020098791 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.020944631 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.021320547 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020657424 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026532884 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021947206 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.01983356 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020466754 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.020553653 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020781585 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.021600853 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.023610408 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020929194 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.021423256 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.020303631 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.020178239 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022142336 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026462971 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.023104637 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.023088815 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021477653 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019611506 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.02262205 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.020554846 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.020843816 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.02164226 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027801021 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.019237284 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020575478 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020918417 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020918489 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.020256744 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.021764309 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.02056532 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.020816551 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.020422067 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.0222186 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.021059252 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021303767 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.020037544 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.025660789 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.021653743 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020538175 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020253963 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021922687 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020709793 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020635396 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021980138 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026729309 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.022222104 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.0199398 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023249639 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.019465948 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021896598 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.008655258 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022902853 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.020407467 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.021937841 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.026473612 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.021116903 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.020253615 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.021619472 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.021147637 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020591267 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020390673 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021296133 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020325178 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.022449438 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.020535097 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019837567 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020748226 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.026438406 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.020327817 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.019488411 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022215841 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.023408283 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020585629 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.023347796 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.023052221 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019614648 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021448145 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02295766 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025986921 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023554944 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.021231807 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019881665 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.019229038 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020925595 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.022800415 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003869763 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.022153224 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.009301156 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020116682 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.020134826 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.023132085 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.021276997 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.00419981 seconds)
  done (took 13.861822839 seconds)
done (took 42.38374539 seconds)
(9/22) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019558731 seconds)
    (2/7) benchmarking "month"...
    done (took 0.018914839 seconds)
    (3/7) benchmarking "year"...
    done (took 0.018834304 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 0.020098616 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020897968 seconds)
    (6/7) benchmarking "minute"...
    done (took 0.02122683 seconds)
    (7/7) benchmarking "second"...
    done (took 0.021388826 seconds)
  done (took 1.149709413 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 0.021380535 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.482361984 seconds)
    (3/9) benchmarking "Date"...
    done (took 0.021667183 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.025934679 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.282066655 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.192348048 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 0.201877721 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.026746688 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.026421469 seconds)
  done (took 2.293666167 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020694417 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021556077 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021432066 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.023185867 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.040288771 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.020701117 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.023369827 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.02062957 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.021945252 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.027704878 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 0.022709389 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 0.021006406 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.029941927 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.026096315 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.024510988 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.022051241 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021852613 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.023164614 seconds)
  done (took 1.453428509 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 0.042849022 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.023343025 seconds)
  done (took 1.084732675 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.019679138 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020581322 seconds)
  done (took 1.059512895 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 0.01945302 seconds)
    (2/2) benchmarking "Date"...
    done (took 0.155397247 seconds)
  done (took 1.192115701 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 0.036906865 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020949791 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 0.021419404 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 0.021707652 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 0.032098864 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 0.03471155 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 0.034344924 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 0.02122346 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.021643284 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.021205852 seconds)
  done (took 1.284910875 seconds)
done (took 10.546947717 seconds)
(10/22) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 0.088433215 seconds)
  (2/4) benchmarking "strings"...
  done (took 0.12493008 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 0.058821 seconds)
  (4/4) benchmarking "arrays"...
  done (took 0.08269201 seconds)
done (took 1.375738454 seconds)
(11/22) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.04157759 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.036643611 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.041845414 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.029366426 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.056828516 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039376526 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.041996902 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 1.7917e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.042192203 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.057231666 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.6011e-5 seconds)
  done (took 1.404828227 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040606608 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.040882378 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.041821492 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.031784174 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052519677 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 0.02856698 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.041762448 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.2216e-5 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.041801011 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.052997648 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 3.1323e-5 seconds)
  done (took 1.394552185 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.083536953 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081430167 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080768533 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.087642246 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.083193762 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.027104752 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.9996e-5 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.079731353 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079122907 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.6211e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.084754189 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.080759247 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019344838 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.083415635 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.3482e-5 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 1.0779e-5 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.09e-5 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 7.528e-6 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.083358807 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.079356304 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.2938e-5 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.2232e-5 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 9.968e-6 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.4682e-5 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 6.746e-6 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 6.491e-6 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 6.969e-6 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.2462e-5 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 8.426e-6 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.079707786 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.079113899 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.5094e-5 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.4972e-5 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 9.42e-6 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 8.486e-6 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 6.775e-6 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.1201e-5 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 1.0989e-5 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.1067e-5 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 9.239e-6 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.025e-5 seconds)
  done (took 2.216570572 seconds)
done (took 6.040061353 seconds)
(12/22) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023360963 seconds)
    (2/2) benchmarking "read"...
    done (took 0.029966709 seconds)
  done (took 1.076626599 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 0.238643083 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.874235715 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.744418449 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.900449498 seconds)
  done (took 4.549278622 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.8846495 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.105978736 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.056273168 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.040630169 seconds)
  done (took 2.149586501 seconds)
done (took 9.046937454 seconds)
(13/22) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.071075297 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021643258 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023023408 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020637004 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.020508111 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.021025082 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.020662027 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.022615476 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020554297 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.022460743 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.022903297 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020655865 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.020498508 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.021675107 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.02223022 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022552319 seconds)
  done (took 1.481955535 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.136170519 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.22256567 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.813022464 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.037986586 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.079178005 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.027800462 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.138342827 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022661263 seconds)
  done (took 4.516040876 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.022813708 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021380599 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.024238688 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 0.020022853 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 0.02212702 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.023355318 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.021750304 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 0.023279163 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.020261113 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021191602 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.021824352 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 0.022210141 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.024059613 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.023306176 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.022640229 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026587433 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 0.023180865 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.023147676 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027356251 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 0.023296721 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023995681 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 0.023483306 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.022105438 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.028551118 seconds)
  done (took 1.599537316 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 0.021174725 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 0.043775279 seconds)
  done (took 1.103873679 seconds)
done (took 9.741986192 seconds)
(14/22) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.023311621 seconds)
    (2/2) benchmarking "String"...
    done (took 0.02318401 seconds)
  done (took 1.080206627 seconds)
  (2/7) benchmarking "join"...
  done (took 0.330820409 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 0.040220295 seconds)
    (2/4) benchmarking "different"...
    done (took 8.648e-6 seconds)
    (3/4) benchmarking "identical"...
    done (took 0.021320944 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.0612e-5 seconds)
  done (took 1.117653201 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020719641 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 0.145438343 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 0.000228583 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 4.332e-6 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.000907142 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 8.505e-6 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.52e-6 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 0.000576923 seconds)
  done (took 1.183138606 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.02289088 seconds)
    (2/3) benchmarking "different"...
    done (took 8.685e-6 seconds)
    (3/3) benchmarking "different length"...
    done (took 4.356e-6 seconds)
  done (took 1.065546846 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.036820153 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024456627 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.02082905 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021399502 seconds)
  done (took 1.144802009 seconds)
done (took 6.982454492 seconds)
(15/22) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.023076387 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.021492583 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.029492704 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.02500408 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.022797891 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.030566344 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.031464377 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.02172361 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.03904099 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.057964115 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.2346e-5 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.034739418 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.022137815 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.035039106 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.026400132 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.030601886 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.022189707 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.3561e-5 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.021820586 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.2038e-5 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.030281519 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.022396397 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.023378059 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.4595e-5 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.2474e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.033648181 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.0931e-5 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.2717e-5 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.2745e-5 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.0831e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.3793e-5 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02405809 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.4893e-5 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.3049e-5 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.6912e-5 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 8.241e-6 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 7.217e-6 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 5.739e-6 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.020715191 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.628e-5 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 1.6887e-5 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.020685206 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 4.4438e-5 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.1116e-5 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.7786e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 1.0391e-5 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.2311e-5 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 7.971e-6 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 1.2888e-5 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.2619e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 1.3151e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 7.756e-6 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 1.2798e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.022405572 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.030578661 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.82e-5 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.3068e-5 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.7465e-5 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.3307e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 9.996e-6 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.023111 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.022351321 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.6582e-5 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.8831e-5 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.4659e-5 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 9.815e-6 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.5022e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.0618e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.274e-5 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.027930165 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.027167993 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.5315e-5 seconds)
  done (took 1.861822978 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.032008189 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.019689939 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.02021464 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.019591529 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.034763745 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.02132796 seconds)
  done (took 1.191803985 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.022203663 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021344093 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.024797473 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.034177907 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.021450232 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.040046399 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021214674 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.02114881 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.024732509 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026022255 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021463213 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.022249831 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021269931 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.033239878 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025600473 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.022935804 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022415079 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.024805181 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.052324594 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.024938683 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.022149972 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.024733965 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.034467338 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024588161 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.022869565 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.040058667 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.021793456 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.024913145 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021332838 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.030057764 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.03630044 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.025087933 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.02626851 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.028996875 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.023590267 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.032331774 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.038628017 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.033808759 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.053146628 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.033539695 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022054131 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.049953924 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.062947472 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.040108718 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.034281666 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.021163346 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021025352 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.022245767 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.026375912 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.02224909 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020966082 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.024329233 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.034005817 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.031183208 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020064868 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.030925032 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.02373048 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.032204359 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023391149 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.022041499 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021760743 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.02270818 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.022715398 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.02281569 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.02571892 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.030267593 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.034184228 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.024901795 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.02256077 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.024355372 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021688929 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.032698466 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.021500166 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.024908259 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.022045696 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023897324 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.035353619 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.023080619 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.025127674 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.022658628 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.034107089 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.045137079 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.022115254 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024673187 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.030385197 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019515772 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.028988639 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.035868898 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.022304875 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.025518466 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.022928861 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.020517108 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.022478763 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.049430883 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.035334074 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.034562665 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.030652479 seconds)
  done (took 3.767672353 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.052823557 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034579561 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.033864165 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.03166611 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.01982524 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021049151 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020936101 seconds)
  done (took 1.271285441 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.028734632 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.046601218 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.030879721 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.042821147 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.040070544 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.035975342 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.048633714 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.045160911 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.027478402 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.6717e-5 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.033545891 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.032021788 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.030093733 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.02355386 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.002534965 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.045702961 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.029287399 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.032064571 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 1.8983e-5 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.046757845 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.033821477 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.047136476 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.020380215 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.038275188 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.022723408 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.034772367 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 1.4473e-5 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.034897928 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.022908647 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 3.7274e-5 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.001056202 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.035138299 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.494e-5 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.8604e-5 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.031921387 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.03937693 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.032171926 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.4237e-5 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.035013182 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.023703991 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.024001127 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.029800827 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 3.9215e-5 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.1212e-5 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 7.7107e-5 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.040400626 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.3045e-5 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 9.6382e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005478592 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 8.24e-6 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.0662e-5 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001053463 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 5.1064e-5 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 9.664e-6 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.9809e-5 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 7.224e-6 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.7174e-5 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.024078471 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.43e-5 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001057606 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.3082e-5 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 8.63e-6 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 1.3047e-5 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.032105534 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 7.697e-5 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 9.998e-6 seconds)
  done (took 2.286724916 seconds)
done (took 11.421128703 seconds)
(16/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.037167567 seconds)
  (2/8) benchmarking "mandel"...
  done (took 0.09817509 seconds)
  (3/8) benchmarking "pisum"...
  done (took 0.058870007 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 0.124610351 seconds)
  (5/8) benchmarking "printfd"...
  done (took 0.138238204 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 0.420063876 seconds)
  (7/8) benchmarking "fib"...
  done (took 0.023770359 seconds)
  (8/8) benchmarking "parseint"...
  done (took 0.039210887 seconds)
done (took 1.999652702 seconds)
(17/22) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.116167413 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 0.026959168 seconds)
    (3/9) benchmarking (10, "scal_tup")...
    done (took 0.028543398 seconds)
    (4/9) benchmarking (3, "tup_tup")...
    done (took 0.021649249 seconds)
    (5/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.029492167 seconds)
    (6/9) benchmarking (10, "tup_tup")...
    done (took 0.025056847 seconds)
    (7/9) benchmarking (5, "tup_tup")...
    done (took 0.021335334 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.032207024 seconds)
    (9/9) benchmarking (3, "scal_tup")...
    done (took 0.024148937 seconds)
  done (took 1.433074602 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.31418088 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.169784924 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.256672383 seconds)
  done (took 1.810663161 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.048211097 seconds)
    (2/6) benchmarking ("array", 10)...
    done (took 0.061150757 seconds)
    (3/6) benchmarking ("array", 3)...
    done (took 1.069e-5 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 6.269e-6 seconds)
    (5/6) benchmarking ("tuple", 3)...
    done (took 0.032386574 seconds)
    (6/6) benchmarking ("tuple", 5)...
    done (took 0.037512443 seconds)
  done (took 1.252942209 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.110294911 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.07083517 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.231166052 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.091899176 seconds)
  done (took 1.576444806 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.289608693 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 0.110252156 seconds)
    (3/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.150518102 seconds)
    (4/4) benchmarking ("(10000000,)", 2)...
    done (took 0.158510878 seconds)
  done (took 1.786647389 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.058158931 seconds)
done (took 8.985940101 seconds)
(18/22) benchmarking "parallel"...
done (took 1.085539731 seconds)
(19/22) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.092417926 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.058831026 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.026923433 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.047940682 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.036465118 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.117903182 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.103988398 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.037118796 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.01999131 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.033343257 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.047494907 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036991847 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020890146 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.052247192 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.043420372 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.029256108 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.03295094 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031051813 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.021404986 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.026245695 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026806941 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.023397572 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020230433 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020610462 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.033548323 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022975448 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027682141 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020667296 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.026816837 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027688954 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.030359706 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031053045 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019745993 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.041551002 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.055112 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020776668 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.027367994 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.2082e-5 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.03347442 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.068345507 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.7456e-5 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036580412 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.019774744 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.103004694 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070980695 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.021243181 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.071293624 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.058707201 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040113047 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.028488369 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.039031545 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.039528128 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.025822437 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.025951061 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025762414 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.030167075 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.024446423 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.030107959 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.021038109 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.051667131 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.021232201 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.055505594 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.0372211 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.025901853 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.1424e-5 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.021005182 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.039470911 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.028448705 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026224431 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.027510951 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027685816 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.02006428 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026606773 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.032255274 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.043668127 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030777721 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.047903624 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.026147344 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.033306193 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.02730828 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.027147685 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.039724627 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.042329253 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.032854032 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.059080044 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.021190492 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.033475148 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029618985 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.2127e-5 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.037158433 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.5999e-5 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.057246773 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.035040745 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.029129728 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.032250748 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029900693 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.0293687 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037660054 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.01957324 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.03649392 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020894867 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.031602517 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.027255643 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.035700455 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.1505e-5 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.029589886 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024835766 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.9744e-5 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.0171e-5 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.052034407 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.027198052 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.034446955 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.03155088 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.021296908 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.027822754 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020513192 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.036439077 seconds)
  done (took 4.983745584 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.032024358 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.053923295 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.1306515 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.023042622 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.092950846 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.062207976 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.039283649 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.102360665 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.039446265 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.15822232 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.040381604 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.137683871 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.142447629 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.042099878 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.026653064 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.041813271 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.022284161 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.092898337 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.027288475 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.02371545 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.028819406 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.041042113 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022318237 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.023519659 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.021781465 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.022248667 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 0.046573733 seconds)
  done (took 2.629873112 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.034900946 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.033648828 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026860681 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.040598553 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.023115029 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.033393387 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.02720508 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.031986811 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.036351313 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023398987 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.037001457 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.021375214 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018876762 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.062572264 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.026669626 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027110517 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.027301981 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.019033834 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.022494372 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.02122858 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.027952674 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.028429609 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.055327347 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 0.024922647 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.1355e-5 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.020890663 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.036203616 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.032881669 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.021130433 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 3.1195e-5 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.020800315 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.01898391 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.02156955 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.028353708 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.02088501 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023581594 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.020493457 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.1967e-5 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 0.018852843 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.020591134 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.021856417 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.037564505 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.020022871 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025851196 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035061947 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.5638e-5 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.034489991 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.032105389 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.023331928 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.042540183 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.030877973 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.02029976 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 4.6597e-5 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.0018e-5 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.022808125 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.020371804 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 4.6104e-5 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.032837549 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.024177382 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019635728 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 4.5113e-5 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.039090946 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021169257 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.037882691 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.032569086 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.021543709 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 3.8821e-5 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000132429 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027324784 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.4202e-5 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 9.524e-6 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 3.0064e-5 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.037363857 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.026279579 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.03841333 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.023206919 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.024537779 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.027674936 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.5088e-5 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.034896848 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.029161972 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.6429e-5 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.020202947 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.4704e-5 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.8056e-5 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.028087399 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023467136 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.032661634 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.8754e-5 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.1499e-5 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.040006945 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 3.4589e-5 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.025073889 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.3512e-5 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.021113994 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 3.3583e-5 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.4524e-5 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.037016254 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 3.2665e-5 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.4588e-5 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 1.042e-5 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.037586094 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.6257e-5 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.9912e-5 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.1309e-5 seconds)
  done (took 3.267225568 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.033697407 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.032317608 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.056600794 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.036669564 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.061392158 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.037503697 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020820207 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.032027016 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.02119024 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.025165262 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.021188468 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.021247493 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.043455532 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.037658079 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 0.044779376 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.034103056 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.031680107 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.049662927 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.021318844 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.042862399 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.045142322 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.032515257 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.03926853 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.036212134 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.030594295 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.047667929 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.037076922 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.04029399 seconds)
  done (took 2.112630687 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027525761 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.027371125 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.023869504 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.027912002 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029646317 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.030273167 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.030377256 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.02139137 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026216125 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.021648469 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.029397929 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.027646437 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.025823846 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.02329524 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031180272 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.026176195 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.029073351 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.022470078 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.025716844 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027273648 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.022664932 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.027239154 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029780333 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.028624678 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.029314011 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.02584291 seconds)
  done (took 1.795918923 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.024213046 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.02886933 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.031021998 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.03131437 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.036816938 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.069448297 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.037622067 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.031579613 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.020221112 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.031165663 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.005588397 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.021221522 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.034645334 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.024353761 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.022812537 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.004891138 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.02135838 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012125189 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 0.027629194 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.021725857 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.023066129 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.011810568 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.005561452 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.014083847 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.013404769 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.9964e-5 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.030580293 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.026629625 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.028128514 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.009174329 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.003422258 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.011670858 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.022080934 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.012826177 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005479745 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.009981445 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.9067e-5 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003533663 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.01255406 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.008401487 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008434822 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.6384e-5 seconds)
  done (took 1.898060571 seconds)
done (took 17.76195992 seconds)
(20/22) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 0.025468706 seconds)
  (2/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 0.100660027 seconds)
  (3/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.08250194 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 0.066679711 seconds)
  (5/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.095053784 seconds)
  (6/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.117303525 seconds)
  (7/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 0.074775687 seconds)
  (8/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.046068863 seconds)
  (9/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 0.030145026 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.032577694 seconds)
  (11/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 0.032594593 seconds)
  (12/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 0.041884374 seconds)
  (13/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 0.065098496 seconds)
  (14/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 0.101974273 seconds)
  (15/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 0.063439606 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 0.083281073 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.069613213 seconds)
  (18/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 0.077024517 seconds)
  (19/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 0.057302575 seconds)
  (20/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 0.076319571 seconds)
  (21/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 0.041231429 seconds)
  (22/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 0.074350452 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.062550818 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 0.072698852 seconds)
  (25/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.039361308 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.3649e-5 seconds)
  (27/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 0.062123289 seconds)
  (28/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 0.074954013 seconds)
  (29/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 3.1347e-5 seconds)
  (30/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 0.048619447 seconds)
  (31/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.026735258 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 0.045556768 seconds)
  (33/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 0.059573948 seconds)
  (34/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 0.064934029 seconds)
  (35/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 0.041088294 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.068809139 seconds)
  (37/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.028880558 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 0.037358487 seconds)
  (39/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 0.026420578 seconds)
  (40/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.00957905 seconds)
  (41/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.085196722 seconds)
  (42/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 0.073636914 seconds)
  (43/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 4.9729e-5 seconds)
  (44/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 0.034280319 seconds)
  (45/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 0.078664399 seconds)
  (46/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 0.050970433 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 0.05929229 seconds)
  (48/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 0.049699568 seconds)
  (49/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.072655582 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 0.085090083 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.8692e-5 seconds)
  (52/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 0.036777706 seconds)
  (53/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.5291e-5 seconds)
  (54/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 0.057426807 seconds)
  (55/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 5.648e-5 seconds)
  (56/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 0.054657684 seconds)
  (57/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 0.063003063 seconds)
  (58/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.056258462 seconds)
  (59/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 0.07022739 seconds)
  (60/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.047709863 seconds)
  (61/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 0.066537535 seconds)
  (62/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 0.042417825 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 0.063748688 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 0.052071374 seconds)
  (65/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.3905e-5 seconds)
  (66/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 0.065850141 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 4.3549e-5 seconds)
  (68/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 0.036741978 seconds)
  (69/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 0.031606435 seconds)
  (70/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.2834e-5 seconds)
  (71/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.026803431 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.076569081 seconds)
  (73/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.8539e-5 seconds)
  (74/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.063227326 seconds)
  (75/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 0.051290231 seconds)
  (76/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 0.032598853 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 0.047433637 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 0.084413622 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 0.069471712 seconds)
  (80/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.044618349 seconds)
  (81/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 3.2311e-5 seconds)
  (82/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 0.036873579 seconds)
  (83/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.066213315 seconds)
  (84/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 0.068264203 seconds)
  (85/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 0.06533158 seconds)
  (86/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.027909362 seconds)
  (87/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 0.081739572 seconds)
  (88/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.6534e-5 seconds)
  (89/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 1.4761e-5 seconds)
  (90/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 0.054736023 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.057217277 seconds)
  (92/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 0.044271128 seconds)
  (93/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 3.75e-5 seconds)
  (94/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.0287e-5 seconds)
  (95/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.5447e-5 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.5036e-5 seconds)
  (97/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 0.050554224 seconds)
  (98/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 0.058302411 seconds)
  (99/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.02793511 seconds)
  (100/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 0.06560157 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.067928129 seconds)
  (102/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 4.8436e-5 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.055352863 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.6365e-5 seconds)
  (105/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 0.035555199 seconds)
  (106/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.8883e-5 seconds)
  (107/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.084974956 seconds)
  (108/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 0.056550352 seconds)
  (109/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 0.026546289 seconds)
  (110/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 3.5802e-5 seconds)
  (111/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 0.045627398 seconds)
  (112/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.8656e-5 seconds)
  (113/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 0.06303604 seconds)
  (114/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.8483e-5 seconds)
  (115/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.2587e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 3.3518e-5 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 0.069725907 seconds)
  (118/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 3.4498e-5 seconds)
  (119/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 0.073958836 seconds)
  (120/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.6396e-5 seconds)
  (121/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 0.033201997 seconds)
  (122/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.5856e-5 seconds)
  (123/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 3.177e-5 seconds)
  (124/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 0.030381527 seconds)
  (125/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.075264898 seconds)
  (126/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.027854246 seconds)
  (127/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.068204235 seconds)
  (128/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 0.046362642 seconds)
  (129/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.056332572 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 0.057137478 seconds)
  (131/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 4.7236e-5 seconds)
  (132/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.2003e-5 seconds)
  (133/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.9008e-5 seconds)
  (134/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 0.027184945 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.062614861 seconds)
  (136/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031145498 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 3.5652e-5 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.9978e-5 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.084009006 seconds)
  (140/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 0.047584172 seconds)
  (141/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 0.055764543 seconds)
  (142/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 0.057073789 seconds)
  (143/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.053078728 seconds)
  (144/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 0.06183111 seconds)
  (145/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 0.033598971 seconds)
  (146/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.5452e-5 seconds)
  (147/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 1.5656e-5 seconds)
  (148/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 0.029745196 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.7729e-5 seconds)
  (150/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.497e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 0.064118686 seconds)
  (152/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 3.8064e-5 seconds)
  (153/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 3.0032e-5 seconds)
  (154/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 0.056501489 seconds)
  (155/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.9823e-5 seconds)
  (156/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.2996e-5 seconds)
  (157/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 3.686e-5 seconds)
  (158/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.4228e-5 seconds)
  (159/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 0.03127903 seconds)
  (160/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 0.027785085 seconds)
  (161/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 0.066594863 seconds)
  (162/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.6131e-5 seconds)
  (163/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 3.673e-5 seconds)
  (164/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.04213056 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 3.2863e-5 seconds)
  (166/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.5296e-5 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 0.050522999 seconds)
  (168/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 0.045379643 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 0.066893404 seconds)
  (170/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 0.045276705 seconds)
  (171/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 0.067910307 seconds)
  (172/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 3.0951e-5 seconds)
  (173/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.9381e-5 seconds)
  (174/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 0.053684947 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 0.06277808 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 3.4384e-5 seconds)
  (177/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.2224e-5 seconds)
  (178/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.1194e-5 seconds)
  (179/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.5931e-5 seconds)
  (180/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.7843e-5 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 0.073980224 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.0489225 seconds)
  (183/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 3.2735e-5 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.9497e-5 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 0.062728173 seconds)
  (186/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 3.607e-5 seconds)
  (187/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 0.07358951 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.0753e-5 seconds)
  (189/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 0.033965036 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 3.1335e-5 seconds)
  (191/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.044992278 seconds)
  (192/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 3.0049e-5 seconds)
  (193/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 3.0187e-5 seconds)
  (194/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.0308e-5 seconds)
  (195/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 0.030250435 seconds)
  (196/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.05198062 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.836e-5 seconds)
  (198/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.1867e-5 seconds)
  (199/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.0981e-5 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.9114e-5 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.074152098 seconds)
  (202/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 0.065361246 seconds)
  (203/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 0.051628477 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 3.5077e-5 seconds)
  (205/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 0.048235134 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.6538e-5 seconds)
  (207/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.061700197 seconds)
  (208/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 0.055352153 seconds)
  (209/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.6066e-5 seconds)
  (210/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.9723e-5 seconds)
  (211/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.9235e-5 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.070654001 seconds)
  (213/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 4.1182e-5 seconds)
  (214/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.8393e-5 seconds)
  (215/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.8163e-5 seconds)
  (216/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 0.06284661 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 3.7232e-5 seconds)
  (218/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 3.6819e-5 seconds)
  (219/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.6452e-5 seconds)
  (220/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 1.7929e-5 seconds)
  (221/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 0.051849743 seconds)
  (222/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.7419e-5 seconds)
  (223/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.031246502 seconds)
  (224/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.052382751 seconds)
  (225/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 7.2192e-5 seconds)
  (226/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.3558e-5 seconds)
  (227/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.886e-5 seconds)
  (228/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.8191e-5 seconds)
  (229/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.6264e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 1.4667e-5 seconds)
  (231/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.3389e-5 seconds)
  (232/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.083485675 seconds)
  (233/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 3.1913e-5 seconds)
  (234/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 3.4171e-5 seconds)
  (235/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.9713e-5 seconds)
  (236/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.7667e-5 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.028717983 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.1182e-5 seconds)
  (239/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.5023e-5 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 1.9461e-5 seconds)
  (241/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 1.533e-5 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.6823e-5 seconds)
  (243/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.7813e-5 seconds)
  (244/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.4386e-5 seconds)
  (245/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.0222e-5 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.6113e-5 seconds)
  (247/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.4229e-5 seconds)
  (248/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.009592714 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 3.0027e-5 seconds)
  (250/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 0.070117165 seconds)
  (251/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.9785e-5 seconds)
  (252/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 1.8239e-5 seconds)
  (253/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 1.4383e-5 seconds)
  (254/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.050636897 seconds)
  (255/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.4593e-5 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.5703e-5 seconds)
  (257/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.8992e-5 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.7797e-5 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.061e-5 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 1.6601e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 1.502e-5 seconds)
  (262/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 0.029457155 seconds)
  (263/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 0.0626222 seconds)
  (264/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 3.5716e-5 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.3011e-5 seconds)
  (266/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.0503e-5 seconds)
  (267/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 0.029954054 seconds)
  (268/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.7493e-5 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.9157e-5 seconds)
  (270/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 0.059251847 seconds)
  (271/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 3.7709e-5 seconds)
  (272/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 1.7378e-5 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 0.055858557 seconds)
  (274/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 3.2957e-5 seconds)
  (275/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.8596e-5 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.58e-5 seconds)
  (277/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.0358e-5 seconds)
  (278/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.7899e-5 seconds)
  (279/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 1.8492e-5 seconds)
  (280/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.030841692 seconds)
  (281/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 3.7183e-5 seconds)
  (282/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.5466e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.0628e-5 seconds)
  (284/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.6164e-5 seconds)
  (285/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.2556e-5 seconds)
  (286/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.8032e-5 seconds)
  (287/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.3948e-5 seconds)
  (288/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 0.05530761 seconds)
  (289/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 0.034155397 seconds)
  (290/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 3.3161e-5 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.6925e-5 seconds)
  (292/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.6186e-5 seconds)
  (293/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.3284e-5 seconds)
  (294/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.8383e-5 seconds)
  (295/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 1.4904e-5 seconds)
  (296/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.755e-5 seconds)
  (297/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.3322e-5 seconds)
  (298/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.6793e-5 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.8256e-5 seconds)
  (300/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.2238e-5 seconds)
  (301/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 1.3336e-5 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 0.050602046 seconds)
  (303/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.5637e-5 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.4687e-5 seconds)
  (305/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.0631e-5 seconds)
  (306/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 0.085956418 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 3.9001e-5 seconds)
  (308/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 0.073989544 seconds)
  (309/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 0.057960857 seconds)
  (310/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 0.067256501 seconds)
  (311/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 0.054891253 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 3.4399e-5 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 0.055667731 seconds)
  (314/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.03070812 seconds)
  (315/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.9209e-5 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.3589e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 0.055672494 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.1813e-5 seconds)
  (319/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.8107e-5 seconds)
  (320/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 0.057342801 seconds)
  (321/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 3.2753e-5 seconds)
  (322/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.5623e-5 seconds)
  (323/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 1.8282e-5 seconds)
  (324/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.8805e-5 seconds)
  (325/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.1896e-5 seconds)
  (326/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 3.3563e-5 seconds)
  (327/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 1.6537e-5 seconds)
  (328/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 1.9007e-5 seconds)
  (329/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.026209624 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 3.3571e-5 seconds)
  (331/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 4.366e-5 seconds)
  (332/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.045826038 seconds)
  (333/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.3514e-5 seconds)
  (334/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.5008e-5 seconds)
  (335/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.7807e-5 seconds)
  (336/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.5515e-5 seconds)
  (337/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.9575e-5 seconds)
  (338/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.8529e-5 seconds)
  (339/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.5514e-5 seconds)
  (340/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 1.9948e-5 seconds)
  (341/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.5659e-5 seconds)
  (342/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 1.3125e-5 seconds)
  (343/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.5338e-5 seconds)
  (344/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 1.4511e-5 seconds)
  (345/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 1.6449e-5 seconds)
  (346/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 1.6588e-5 seconds)
  (347/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.5103e-5 seconds)
  (348/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.4269e-5 seconds)
  (349/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.9185e-5 seconds)
  (350/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 1.9815e-5 seconds)
  (351/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.9433e-5 seconds)
  (352/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 1.3009e-5 seconds)
  (353/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.2082e-5 seconds)
  (354/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 1.9502e-5 seconds)
  (355/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 1.8597e-5 seconds)
  (356/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.3744e-5 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.5048e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.051727973 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.6215e-5 seconds)
  (360/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.2879e-5 seconds)
  (361/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.8148e-5 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 1.1972e-5 seconds)
  (363/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.8533e-5 seconds)
  (364/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 0.050297716 seconds)
  (365/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 4.1725e-5 seconds)
  (366/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.103e-5 seconds)
  (367/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 0.058924497 seconds)
  (368/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 3.4703e-5 seconds)
  (369/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.5402e-5 seconds)
  (370/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.1897e-5 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.2043e-5 seconds)
  (372/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 1.4031e-5 seconds)
  (373/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 1.9291e-5 seconds)
  (374/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.7414e-5 seconds)
  (375/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 0.055525401 seconds)
  (376/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 5.4468e-5 seconds)
  (377/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.1464e-5 seconds)
  (378/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.6459e-5 seconds)
  (379/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 3.7431e-5 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.7743e-5 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.4803e-5 seconds)
  (382/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 3.2147e-5 seconds)
  (383/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 1.353e-5 seconds)
  (384/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.6561e-5 seconds)
  (385/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.3513e-5 seconds)
  (386/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.0816e-5 seconds)
  (387/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 1.9981e-5 seconds)
  (388/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.5887e-5 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 1.6431e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.0598e-5 seconds)
  (391/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.0452e-5 seconds)
  (392/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.3754e-5 seconds)
  (393/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.4871e-5 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 1.9239e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 1.859e-5 seconds)
  (396/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 0.058743205 seconds)
  (397/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 4.042e-5 seconds)
  (398/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 3.4594e-5 seconds)
  (399/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.1991e-5 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.0522e-5 seconds)
  (401/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 1.6752e-5 seconds)
  (402/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 3.1495e-5 seconds)
  (403/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.7445e-5 seconds)
  (404/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 1.8885e-5 seconds)
  (405/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.8063e-5 seconds)
  (406/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 1.9487e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.6117e-5 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.5405e-5 seconds)
  (409/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.8218e-5 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 1.4757e-5 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.8614e-5 seconds)
  (412/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 1.9141e-5 seconds)
  (413/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.6319e-5 seconds)
  (414/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.8635e-5 seconds)
  (415/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 1.5453e-5 seconds)
  (416/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 1.8744e-5 seconds)
  (417/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 0.056051399 seconds)
  (418/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.8115e-5 seconds)
  (419/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.6115e-5 seconds)
  (420/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.3093e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.446e-5 seconds)
  (422/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.2659e-5 seconds)
  (423/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.4827e-5 seconds)
  (424/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.4684e-5 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 1.9138e-5 seconds)
  (426/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 1.0109e-5 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 1.5471e-5 seconds)
  (428/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.4933e-5 seconds)
  (429/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.6681e-5 seconds)
  (430/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 1.9417e-5 seconds)
  (431/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 1.8775e-5 seconds)
  (432/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 0.030490657 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 3.1002e-5 seconds)
  (434/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.8073e-5 seconds)
  (435/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.028027248 seconds)
  (436/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 3.3444e-5 seconds)
  (437/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 1.9306e-5 seconds)
  (438/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 4.2242e-5 seconds)
  (439/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 1.3799e-5 seconds)
  (440/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 6.3252e-5 seconds)
  (441/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 1.734e-5 seconds)
  (442/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 3.6635e-5 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 1.6794e-5 seconds)
  (444/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 8.898e-6 seconds)
  (445/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 0.035285753 seconds)
  (446/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 3.143e-5 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.3551e-5 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.4452e-5 seconds)
  (449/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 1.8886e-5 seconds)
  (450/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 1.5504e-5 seconds)
  (451/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 4.6555e-5 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 1.5015e-5 seconds)
  (453/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 1.2305e-5 seconds)
  (454/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.6083e-5 seconds)
  (455/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.5511e-5 seconds)
  (456/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 3.4368e-5 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 1.8534e-5 seconds)
  (458/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.0574e-5 seconds)
  (459/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.010111434 seconds)
  (460/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.7246e-5 seconds)
  (461/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 3.2827e-5 seconds)
  (462/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 1.6437e-5 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.7632e-5 seconds)
  (464/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.7382e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.8652e-5 seconds)
  (466/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.1447e-5 seconds)
  (467/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.0081e-5 seconds)
  (468/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.6088e-5 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.2474e-5 seconds)
  (470/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.483e-5 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 0.060313367 seconds)
  (472/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 3.6938e-5 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.5498e-5 seconds)
  (474/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 0.063071099 seconds)
  (475/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 3.0066e-5 seconds)
  (476/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 5.1166e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 4.1205e-5 seconds)
  (478/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 1.8282e-5 seconds)
  (479/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.6433e-5 seconds)
  (480/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.0844e-5 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 1.5309e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.2724e-5 seconds)
  (483/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.4824e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.5617e-5 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.9032e-5 seconds)
  (486/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.7499e-5 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.5835e-5 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 1.5369e-5 seconds)
  (489/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.5447e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 1.9472e-5 seconds)
  (491/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.0363e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 1.5096e-5 seconds)
  (493/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 0.026232819 seconds)
  (494/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.9689e-5 seconds)
  (495/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.024271723 seconds)
  (496/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 1.762e-5 seconds)
  (497/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 3.8113e-5 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 3.739e-5 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.026389952 seconds)
  (500/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.7975e-5 seconds)
  (501/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.7502e-5 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.7444e-5 seconds)
  (503/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.3316e-5 seconds)
  (504/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.7211e-5 seconds)
  (505/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.2803e-5 seconds)
  (506/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.0066e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 1.8709e-5 seconds)
  (508/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.5024e-5 seconds)
  (509/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.0632e-5 seconds)
  (510/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.3927e-5 seconds)
  (511/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 4.2045e-5 seconds)
  (512/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 1.0419e-5 seconds)
  (513/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 1.7168e-5 seconds)
  (514/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.3979e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.884e-5 seconds)
  (516/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.0084e-5 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.5217e-5 seconds)
  (518/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.2372e-5 seconds)
  (519/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.9189e-5 seconds)
  (520/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 6.0323e-5 seconds)
  (521/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.4415e-5 seconds)
  (522/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.7022e-5 seconds)
  (523/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 1.1704e-5 seconds)
  (524/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.2395e-5 seconds)
  (525/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.057245064 seconds)
  (526/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 3.7441e-5 seconds)
  (527/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.9903e-5 seconds)
  (528/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.6307e-5 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.1685e-5 seconds)
  (530/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.6896e-5 seconds)
  (531/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 0.045211645 seconds)
  (532/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.9236e-5 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 1.4134e-5 seconds)
  (534/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 5.4338e-5 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.8449e-5 seconds)
  (536/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.142e-5 seconds)
  (537/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.8868e-5 seconds)
  (538/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.8241e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.8449e-5 seconds)
  (540/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 1.7058e-5 seconds)
  (541/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.7224e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 1.9486e-5 seconds)
  (543/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.7867e-5 seconds)
  (544/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.009720886 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 3.7238e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.1866e-5 seconds)
  (547/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.991e-5 seconds)
  (548/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 1.6702e-5 seconds)
  (549/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.3211e-5 seconds)
  (550/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.5668e-5 seconds)
  (551/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.204e-5 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 1.5309e-5 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.5257e-5 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.3858e-5 seconds)
  (555/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.1979e-5 seconds)
  (556/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.3038e-5 seconds)
  (557/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 1.7268e-5 seconds)
  (558/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.8903e-5 seconds)
  (559/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 1.8932e-5 seconds)
  (560/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.212e-5 seconds)
  (561/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 0.000161996 seconds)
  (562/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.578e-5 seconds)
  (563/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.9112e-5 seconds)
  (564/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.799e-5 seconds)
  (565/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.9731e-5 seconds)
  (566/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.0236e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 1.5409e-5 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.5024e-5 seconds)
  (569/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 3.8747e-5 seconds)
  (570/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.9998e-5 seconds)
  (571/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.6296e-5 seconds)
  (572/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 1.5302e-5 seconds)
  (573/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 1.4546e-5 seconds)
  (574/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.8401e-5 seconds)
  (575/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 1.3282e-5 seconds)
  (576/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.486e-5 seconds)
  (577/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 3.0995e-5 seconds)
  (578/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.0774e-5 seconds)
  (579/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 3.1341e-5 seconds)
  (580/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 1.7036e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.0083e-5 seconds)
  (582/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.3462e-5 seconds)
  (583/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 1.0264e-5 seconds)
  (584/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 3.9004e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.6601e-5 seconds)
  (586/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 4.7993e-5 seconds)
  (587/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 0.070031729 seconds)
  (588/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 3.8138e-5 seconds)
  (589/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.272e-5 seconds)
  (590/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.4554e-5 seconds)
  (591/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 1.2429e-5 seconds)
  (592/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.1622e-5 seconds)
  (593/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.5404e-5 seconds)
  (594/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 1.822e-5 seconds)
  (595/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.6718e-5 seconds)
  (596/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 3.7908e-5 seconds)
  (597/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 1.4228e-5 seconds)
  (598/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 1.9771e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.4984e-5 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.9727e-5 seconds)
  (601/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.9142e-5 seconds)
  (602/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 4.7279e-5 seconds)
  (603/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.1923e-5 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 1.5538e-5 seconds)
  (605/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.3905e-5 seconds)
  (606/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.3084e-5 seconds)
  (607/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.4168e-5 seconds)
  (608/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.4596e-5 seconds)
  (609/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.0656e-5 seconds)
  (610/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.5095e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.6867e-5 seconds)
  (612/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.6898e-5 seconds)
  (613/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 1.8452e-5 seconds)
  (614/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.759e-5 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 3.4887e-5 seconds)
  (616/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 1.0646e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.1121e-5 seconds)
  (618/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 9.675e-6 seconds)
  (619/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 1.0367e-5 seconds)
  (620/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.0418e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 1.3636e-5 seconds)
  (622/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.7726e-5 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.0225e-5 seconds)
  (624/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 1.5433e-5 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 3.1986e-5 seconds)
  (626/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 1.8081e-5 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.6742e-5 seconds)
  (628/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 1.7381e-5 seconds)
  (629/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 1.3411e-5 seconds)
  (630/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 1.646e-5 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.062e-5 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.8831e-5 seconds)
  (633/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 1.4736e-5 seconds)
  (634/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.3703e-5 seconds)
  (635/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 1.2699e-5 seconds)
  (636/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.5591e-5 seconds)
  (637/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.1404e-5 seconds)
  (638/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 1.1854e-5 seconds)
  (639/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.892e-5 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.9154e-5 seconds)
  (641/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.294e-5 seconds)
  (642/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.1261e-5 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 3.6599e-5 seconds)
  (644/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.1086e-5 seconds)
  (645/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.2746e-5 seconds)
  (646/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 1.7589e-5 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.7195e-5 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.3904e-5 seconds)
  (649/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.2138e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.8289e-5 seconds)
  (651/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 1.984e-5 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.336e-5 seconds)
  (653/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.1163e-5 seconds)
  (654/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 8.926e-6 seconds)
  (655/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.4344e-5 seconds)
  (656/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.6722e-5 seconds)
  (657/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 1.1759e-5 seconds)
  (658/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.3856e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 1.6799e-5 seconds)
  (660/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.1318e-5 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.5649e-5 seconds)
  (662/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 1.8306e-5 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 1.9063e-5 seconds)
  (664/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.2097e-5 seconds)
  (665/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 1.4832e-5 seconds)
  (666/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 1.6412e-5 seconds)
  (667/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.1779e-5 seconds)
  (668/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.6525e-5 seconds)
  (669/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.2403e-5 seconds)
  (670/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.1115e-5 seconds)
  (671/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 1.6718e-5 seconds)
  (672/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 1.5019e-5 seconds)
  (673/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 1.5915e-5 seconds)
  (674/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.2013e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.028e-5 seconds)
  (676/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 3.0558e-5 seconds)
  (677/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.1481e-5 seconds)
  (678/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 1.3355e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.6969e-5 seconds)
  (680/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.5514e-5 seconds)
done (took 11.32089426 seconds)
(21/22) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 20.861166617 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.369687642 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.38165125 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.15711278 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.281312842 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.967746467 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.865034797 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.413977194 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.413630027 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.114412387 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.625895218 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.080826195 seconds)
  done (took 36.658034712 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 4.125241228 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.244284774 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.369336536 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 0.107829446 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.279811259 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.840338908 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.13620547 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.401752552 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 1.470892587 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.111678077 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.618925597 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.083831114 seconds)
  done (took 19.376048162 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.184302542 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 0.092050106 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 0.143657693 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 2.106181184 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 0.126149908 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 0.135143327 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 3.528530975 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 0.05675489 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 0.422157244 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 0.041027626 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 0.382518453 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 0.04546348 seconds)
  done (took 10.226233528 seconds)
done (took 67.41294567 seconds)
(22/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.093736842 seconds)
    (2/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.026470688 seconds)
    (3/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.121246428 seconds)
    (4/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.041855042 seconds)
    (5/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.258053604 seconds)
    (6/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.102989038 seconds)
    (7/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.219021005 seconds)
    (8/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.029190327 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.039781978 seconds)
    (10/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.040192437 seconds)
    (11/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.146228394 seconds)
    (12/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.029487903 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.031122136 seconds)
    (14/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.059872247 seconds)
    (15/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.032975934 seconds)
    (16/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.040028891 seconds)
    (17/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.111000474 seconds)
    (18/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.113488232 seconds)
    (19/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.039686625 seconds)
    (20/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.032979564 seconds)
    (21/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033339666 seconds)
    (22/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.027570557 seconds)
    (23/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.02810456 seconds)
    (24/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.12164108 seconds)
    (25/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.120586195 seconds)
    (26/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.020975046 seconds)
    (27/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.165478182 seconds)
    (28/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.041926323 seconds)
    (29/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.031344862 seconds)
    (30/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.027687552 seconds)
    (31/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.213854847 seconds)
    (32/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.060919378 seconds)
    (33/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.040995701 seconds)
    (34/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.039775065 seconds)
    (35/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.144973068 seconds)
    (36/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.049213183 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.122126185 seconds)
    (38/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.038699376 seconds)
    (39/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.028162927 seconds)
    (40/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.028154061 seconds)
    (41/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.040893407 seconds)
    (42/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.195425564 seconds)
    (43/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.030559302 seconds)
    (44/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.03543285 seconds)
    (45/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.097560376 seconds)
    (46/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032642536 seconds)
    (47/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 8.4764e-5 seconds)
    (48/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.038253187 seconds)
    (49/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.028744708 seconds)
    (50/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.03100821 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.047425611 seconds)
    (52/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.032215124 seconds)
    (53/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.22220183 seconds)
    (54/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.034368822 seconds)
    (55/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.044431164 seconds)
    (56/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03054677 seconds)
    (57/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.030289559 seconds)
    (58/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.028198634 seconds)
    (59/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.036052803 seconds)
    (60/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.182008299 seconds)
    (61/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.302342273 seconds)
    (62/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030831497 seconds)
    (63/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.040599215 seconds)
    (64/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.2272912 seconds)
    (65/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.035420858 seconds)
    (66/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.00010975 seconds)
    (67/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.030768459 seconds)
    (68/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.034307159 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.087850881 seconds)
    (70/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.114035895 seconds)
    (71/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.108118244 seconds)
    (72/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 7.9035e-5 seconds)
    (73/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.119059096 seconds)
    (74/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.11156574 seconds)
    (75/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.043562189 seconds)
    (76/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.034850709 seconds)
    (77/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.136373253 seconds)
    (78/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.238584309 seconds)
    (79/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 9.1326e-5 seconds)
    (80/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.167165081 seconds)
    (81/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.026702767 seconds)
    (82/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.038017636 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.074577491 seconds)
    (84/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.091688068 seconds)
    (85/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027352015 seconds)
    (86/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.03820594 seconds)
    (87/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.132691658 seconds)
    (88/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.034381241 seconds)
    (89/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.071548307 seconds)
    (90/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.029403217 seconds)
    (91/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.036772006 seconds)
    (92/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.027866488 seconds)
    (93/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.09183691 seconds)
    (94/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 6.2153e-5 seconds)
    (95/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.0292703 seconds)
    (96/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.001055405 seconds)
    (97/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.030696519 seconds)
    (98/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.001801665 seconds)
    (99/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.027453999 seconds)
    (100/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.030740249 seconds)
    (101/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044392518 seconds)
    (102/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.185798212 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 7.5724e-5 seconds)
    (104/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.000115832 seconds)
    (105/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.026687929 seconds)
    (106/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.03164359 seconds)
    (107/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.031491429 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.045454026 seconds)
    (109/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.107818073 seconds)
    (110/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.034252873 seconds)
    (111/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.029688795 seconds)
    (112/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.176377092 seconds)
    (113/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.029531871 seconds)
    (114/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.094036772 seconds)
    (115/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.134445469 seconds)
    (116/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.044571288 seconds)
    (117/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.040217942 seconds)
    (118/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.165946931 seconds)
    (119/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.026666566 seconds)
    (120/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.032385674 seconds)
    (121/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.035906508 seconds)
    (122/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.025683605 seconds)
    (123/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.037829073 seconds)
    (124/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.02611972 seconds)
    (125/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.037019728 seconds)
    (126/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.863533071 seconds)
    (127/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.027908914 seconds)
    (128/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.08411321 seconds)
    (129/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.034384317 seconds)
    (130/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.326820905 seconds)
    (131/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.065405079 seconds)
    (132/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 7.9028e-5 seconds)
    (133/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.030164088 seconds)
    (134/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 3.0579e-5 seconds)
    (135/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.030487285 seconds)
    (136/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 9.0248e-5 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.030032936 seconds)
    (138/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.160999277 seconds)
    (139/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.029162721 seconds)
    (140/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.044475524 seconds)
    (141/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.262275882 seconds)
    (142/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.029970331 seconds)
    (143/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.089133933 seconds)
    (144/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.11383757 seconds)
    (145/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.033477078 seconds)
    (146/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 6.365e-5 seconds)
    (147/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027340051 seconds)
    (148/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.028646889 seconds)
    (149/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.027936179 seconds)
    (150/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.090400538 seconds)
    (151/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.5865e-5 seconds)
    (152/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.087541601 seconds)
    (153/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.174374796 seconds)
    (154/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.044814061 seconds)
    (155/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.039012024 seconds)
    (156/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.027872839 seconds)
    (157/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.038239436 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 7.7986e-5 seconds)
    (159/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.027023468 seconds)
    (160/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.112006135 seconds)
    (161/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.057049829 seconds)
    (162/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.108579414 seconds)
    (163/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.026648226 seconds)
    (164/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.113096941 seconds)
    (165/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.0007296 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.149900867 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.138456496 seconds)
    (168/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.049938662 seconds)
    (169/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.037789193 seconds)
    (170/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.002406752 seconds)
    (171/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.025344967 seconds)
    (172/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.025731647 seconds)
    (173/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.064280676 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.072368654 seconds)
    (175/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.00021928 seconds)
    (176/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.02785315 seconds)
    (177/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.031225897 seconds)
    (178/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 6.0997e-5 seconds)
    (179/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.034207924 seconds)
    (180/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.398e-5 seconds)
    (181/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.132067923 seconds)
    (182/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.085594357 seconds)
    (183/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.000101611 seconds)
    (184/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.139154627 seconds)
    (185/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 3.6995e-5 seconds)
    (186/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.174624156 seconds)
    (187/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 7.7967e-5 seconds)
    (188/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.153850898 seconds)
    (189/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.030275063 seconds)
    (190/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.000103995 seconds)
    (191/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002629292 seconds)
    (192/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 5.335e-5 seconds)
    (193/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.000122187 seconds)
    (194/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.034593673 seconds)
    (195/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.028489022 seconds)
    (196/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.377e-5 seconds)
    (197/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.027230961 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.107615092 seconds)
    (199/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.033314251 seconds)
    (200/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.030802093 seconds)
    (201/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.000121078 seconds)
    (202/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 3.9936e-5 seconds)
    (203/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.000124185 seconds)
    (204/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.027464032 seconds)
    (205/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.030768164 seconds)
    (206/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.000101617 seconds)
    (207/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.032668049 seconds)
    (208/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.8103e-5 seconds)
    (209/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.151027877 seconds)
    (210/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 3.3146e-5 seconds)
    (211/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.030546713 seconds)
    (212/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.029326694 seconds)
    (213/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 4.0601e-5 seconds)
    (214/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.027475675 seconds)
    (215/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.030091416 seconds)
    (216/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 9.1161e-5 seconds)
    (217/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.034170976 seconds)
    (218/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.036207064 seconds)
    (219/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.039283051 seconds)
    (220/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.032749992 seconds)
    (221/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.034708153 seconds)
    (222/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 5.2227e-5 seconds)
    (223/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 7.9565e-5 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001807848 seconds)
    (225/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 6.5599e-5 seconds)
    (226/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.261191799 seconds)
    (227/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 9.2259e-5 seconds)
    (228/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.065177361 seconds)
    (229/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.034396098 seconds)
    (230/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.045311995 seconds)
    (231/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.110671064 seconds)
    (232/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.02380702 seconds)
    (233/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.029885489 seconds)
    (234/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.028531131 seconds)
    (235/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.038276177 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 8.1536e-5 seconds)
    (237/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.000984389 seconds)
    (238/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.067699056 seconds)
    (239/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.092837074 seconds)
    (240/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.03189476 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.092244571 seconds)
    (242/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.028882072 seconds)
    (243/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 6.8742e-5 seconds)
    (244/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.03245756 seconds)
    (245/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.039714894 seconds)
    (246/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.025543407 seconds)
    (247/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.02874417 seconds)
    (248/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.030114637 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.035418337 seconds)
    (250/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.030350082 seconds)
    (251/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.027468957 seconds)
    (252/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.0576e-5 seconds)
    (253/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.029472076 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 9.1786e-5 seconds)
    (255/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.110934741 seconds)
    (256/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 8.891e-5 seconds)
    (257/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 4.3686e-5 seconds)
    (258/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.026442974 seconds)
    (259/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038555805 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.089407781 seconds)
    (261/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.3986e-5 seconds)
    (262/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 3.6617e-5 seconds)
    (263/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.031502325 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.030691422 seconds)
    (265/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 6.3134e-5 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.035060142 seconds)
    (267/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.032480646 seconds)
    (268/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.040090432 seconds)
    (269/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.8836e-5 seconds)
    (270/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 4.7585e-5 seconds)
    (271/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 6.6421e-5 seconds)
    (272/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 7.8304e-5 seconds)
    (273/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.000142651 seconds)
    (274/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.071e-5 seconds)
    (275/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.002811058 seconds)
    (276/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.032066431 seconds)
    (277/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.04223774 seconds)
    (278/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 6.7398e-5 seconds)
    (279/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.0039e-5 seconds)
    (280/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.028048889 seconds)
    (281/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.033109564 seconds)
    (282/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.030423366 seconds)
    (283/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.038090836 seconds)
    (284/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.090769371 seconds)
    (285/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.027027073 seconds)
    (286/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.000103648 seconds)
    (287/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.026934258 seconds)
    (288/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.030072161 seconds)
    (289/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.188031495 seconds)
    (290/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.9954e-5 seconds)
    (291/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 4.0945e-5 seconds)
    (292/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.032643085 seconds)
    (293/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 4.0034e-5 seconds)
    (294/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.03571928 seconds)
    (295/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.2703e-5 seconds)
    (296/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.03094832 seconds)
    (297/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.000961198 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.02817952 seconds)
    (299/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.6947e-5 seconds)
    (300/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.173220898 seconds)
    (301/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.031373034 seconds)
    (302/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.001729972 seconds)
    (303/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.001612613 seconds)
    (304/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 5.8103e-5 seconds)
    (305/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 7.5799e-5 seconds)
    (306/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.02645107 seconds)
    (307/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.019107249 seconds)
    (308/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.034280455 seconds)
    (309/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.039312684 seconds)
    (310/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 6.1786e-5 seconds)
    (311/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.029025737 seconds)
    (312/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.1171e-5 seconds)
    (313/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.031867762 seconds)
    (314/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.177703875 seconds)
    (315/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002266815 seconds)
    (316/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.039381212 seconds)
    (317/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 4.8705e-5 seconds)
    (318/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.072406744 seconds)
    (319/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 4.2243e-5 seconds)
    (320/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.029735801 seconds)
    (321/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.0784e-5 seconds)
    (322/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 5.3326e-5 seconds)
    (323/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.000222272 seconds)
    (324/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 4.8334e-5 seconds)
    (325/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.218189677 seconds)
    (326/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.024836845 seconds)
    (327/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001153917 seconds)
    (328/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 3.3122e-5 seconds)
    (329/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 3.4428e-5 seconds)
    (330/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 7.0175e-5 seconds)
    (331/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 8.2212e-5 seconds)
    (332/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.028887605 seconds)
    (333/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.033325465 seconds)
    (334/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.947673276 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 7.4102e-5 seconds)
    (336/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.027522031 seconds)
    (337/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.040017992 seconds)
    (338/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.034285473 seconds)
    (339/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 8.5705e-5 seconds)
    (340/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.9274e-5 seconds)
    (341/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.0001161 seconds)
    (342/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.6463e-5 seconds)
    (343/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.035138769 seconds)
    (344/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001941258 seconds)
    (345/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.0697e-5 seconds)
    (346/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.187036119 seconds)
    (347/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024543129 seconds)
    (348/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000116757 seconds)
    (349/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.029227999 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.028685247 seconds)
    (351/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.001128378 seconds)
    (352/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 3.3747e-5 seconds)
    (353/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.7863e-5 seconds)
    (354/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.036463897 seconds)
    (355/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.049058892 seconds)
    (356/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 5.8131e-5 seconds)
    (357/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 4.4668e-5 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.118700914 seconds)
    (359/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.02959087 seconds)
    (360/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.048647799 seconds)
    (361/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.000109334 seconds)
    (362/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 8.3804e-5 seconds)
    (363/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.47642224 seconds)
    (364/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 3.9362e-5 seconds)
    (365/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.039075866 seconds)
    (366/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.13956581 seconds)
    (367/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.001393848 seconds)
    (368/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 3.2739e-5 seconds)
    (369/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 8.0772e-5 seconds)
    (370/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.000100293 seconds)
    (371/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.034222258 seconds)
    (372/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.000123148 seconds)
    (373/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.030087363 seconds)
    (374/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.001849266 seconds)
    (375/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.03464485 seconds)
    (376/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.000116672 seconds)
    (377/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.025702658 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 6.3635e-5 seconds)
    (379/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.0655e-5 seconds)
    (380/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 7.4726e-5 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.00180047 seconds)
    (382/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.030574098 seconds)
    (383/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.1986e-5 seconds)
    (384/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 6.1118e-5 seconds)
    (385/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.270439975 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000157691 seconds)
    (387/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.003009854 seconds)
    (388/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.000100673 seconds)
    (389/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.029584763 seconds)
    (390/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.03163249 seconds)
    (391/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 8.6621e-5 seconds)
    (392/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 3.5509e-5 seconds)
    (393/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 3.6374e-5 seconds)
    (394/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 5.6199e-5 seconds)
    (395/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.044549261 seconds)
    (396/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.002001441 seconds)
    (397/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.028258734 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.5459e-5 seconds)
    (399/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 3.4991e-5 seconds)
    (400/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.04710235 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.066478693 seconds)
    (402/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001861597 seconds)
    (403/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 6.0044e-5 seconds)
    (404/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.0865e-5 seconds)
    (405/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.3712e-5 seconds)
    (406/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.09105092 seconds)
    (407/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.06874478 seconds)
    (408/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.001105638 seconds)
    (409/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 8.0606e-5 seconds)
    (410/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.035857912 seconds)
    (411/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 7.6489e-5 seconds)
    (412/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.035107732 seconds)
    (413/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.028500591 seconds)
    (414/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 5.2382e-5 seconds)
    (415/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 4.1475e-5 seconds)
    (416/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 5.9779e-5 seconds)
    (417/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.5039e-5 seconds)
    (418/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 6.3519e-5 seconds)
    (419/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.088353818 seconds)
    (420/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.030153922 seconds)
    (421/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 7.4397e-5 seconds)
    (422/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 6.4957e-5 seconds)
    (423/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.0246275 seconds)
    (424/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.000915976 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001877661 seconds)
    (426/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 6.8633e-5 seconds)
    (427/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.020034052 seconds)
    (428/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.030792575 seconds)
    (429/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 7.4066e-5 seconds)
    (430/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.032345598 seconds)
    (431/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.037887938 seconds)
    (432/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 7.5637e-5 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.032179834 seconds)
    (434/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 4.883e-5 seconds)
  done (took 22.881268268 seconds)
done (took 25.09372798 seconds)
RUNNING BENCHMARKS...
(1/22) benchmarking "problem"...
  (1/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.581252563 seconds)
  done (took 9.781317701 seconds)
  (2/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_devec"...
    done (took 7.210301924 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.261780317 seconds)
    (3/4) benchmarking "laplace_iter_vec"...
    done (took 7.25698776 seconds)
    (4/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.20090026 seconds)
  done (took 31.126014403 seconds)
  (3/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.55798618 seconds)
  done (took 9.75103006 seconds)
  (4/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.609316157 seconds)
  done (took 9.81243943 seconds)
  (5/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 7.605883073 seconds)
  done (took 9.7964983 seconds)
  (6/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_devec"...
    done (took 7.253515325 seconds)
    (2/2) benchmarking "euro_option_vec"...
    done (took 7.217212338 seconds)
  done (took 16.667234467 seconds)
  (7/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 9.327822792 seconds)
  done (took 11.523542973 seconds)
  (8/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.517659964 seconds)
  done (took 9.715377283 seconds)
  (9/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 7.194900991 seconds)
  done (took 9.388578628 seconds)
  (10/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float64")...
    done (took 7.194820359 seconds)
    (2/2) benchmarking ("seismic", "Float32")...
    done (took 7.193181734 seconds)
  done (took 16.582266084 seconds)
  (11/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.215031473 seconds)
  done (took 9.409233466 seconds)
  (12/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.194596858 seconds)
  done (took 9.39002829 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.354094851 seconds)
  done (took 9.556262239 seconds)
  (14/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.879214553 seconds)
  done (took 10.079598746 seconds)
done (took 174.860956149 seconds)
(2/22) benchmarking "array"...
  (1/13) benchmarking "index"...
    (1/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 7.196919771 seconds)
    (2/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.203030316 seconds)
    (3/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.196613377 seconds)
    (4/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 3.731926775 seconds)
    (5/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.599778441 seconds)
    (6/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.201789263 seconds)
    (7/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 7.204223683 seconds)
    (8/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.197540801 seconds)
    (9/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.205539425 seconds)
    (10/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.202222769 seconds)
    (11/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 7.20426656 seconds)
    (12/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.197257537 seconds)
    (13/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.203436848 seconds)
    (14/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.201894945 seconds)
    (15/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.203527691 seconds)
    (16/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.214130025 seconds)
    (17/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.198835532 seconds)
    (18/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.216302727 seconds)
    (19/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.196920943 seconds)
    (20/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.205643764 seconds)
    (21/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.470309459 seconds)
    (22/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.209286356 seconds)
    (23/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.215013979 seconds)
    (24/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.209492397 seconds)
    (25/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.21227403 seconds)
    (26/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.20944758 seconds)
    (27/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.202712426 seconds)
    (28/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.212012122 seconds)
    (29/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.207833359 seconds)
    (30/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.210228856 seconds)
    (31/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.218381129 seconds)
    (32/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.209680905 seconds)
    (33/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.204735302 seconds)
    (34/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.208688265 seconds)
    (35/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.209935481 seconds)
    (36/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.210721162 seconds)
    (37/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.215283835 seconds)
    (38/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.217765188 seconds)
    (39/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.203690995 seconds)
    (40/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.205578125 seconds)
    (41/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.210982518 seconds)
    (42/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.213319278 seconds)
    (43/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 6.673177284 seconds)
    (44/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.473837032 seconds)
    (45/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.212610253 seconds)
    (46/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.213102925 seconds)
    (47/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.213059935 seconds)
    (48/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.213004477 seconds)
    (49/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.201456858 seconds)
    (50/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.222704773 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.22380644 seconds)
    (52/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.221430974 seconds)
    (53/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.225398472 seconds)
    (54/608) benchmarking "ind2sub"...
    done (took 7.215284147 seconds)
    (55/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.217175772 seconds)
    (56/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 7.217990092 seconds)
    (57/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.219717258 seconds)
    (58/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.217062194 seconds)
    (59/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.220241197 seconds)
    (60/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.222957606 seconds)
    (61/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.22625773 seconds)
    (62/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.217219188 seconds)
    (63/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.217188729 seconds)
    (64/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.50187066 seconds)
    (65/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.217440031 seconds)
    (66/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 7.225674928 seconds)
    (67/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.224016178 seconds)
    (68/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.222291673 seconds)
    (69/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.226446966 seconds)
    (70/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.22128887 seconds)
    (71/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.219265949 seconds)
    (72/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.220002522 seconds)
    (73/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 7.226367241 seconds)
    (74/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.224571543 seconds)
    (75/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.164057039 seconds)
    (76/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.272902462 seconds)
    (77/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.225680097 seconds)
    (78/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.2178546 seconds)
    (79/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.231247147 seconds)
    (80/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.216704913 seconds)
    (81/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.217789495 seconds)
    (82/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.223490343 seconds)
    (83/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.225422615 seconds)
    (84/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.232585888 seconds)
    (85/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.232230231 seconds)
    (86/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.235274784 seconds)
    (87/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.215543104 seconds)
    (88/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.228119713 seconds)
    (89/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.258479518 seconds)
    (90/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.22257413 seconds)
    (91/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 7.222714842 seconds)
    (92/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.220035464 seconds)
    (93/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.223380315 seconds)
    (94/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 7.217753713 seconds)
    (95/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.620472794 seconds)
    (96/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.224932053 seconds)
    (97/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.222206547 seconds)
    (98/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.223050378 seconds)
    (99/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.221476712 seconds)
    (100/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.422244508 seconds)
    (101/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.227282529 seconds)
    (102/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.226084644 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.217430561 seconds)
    (104/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 7.224864266 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.218355003 seconds)
    (106/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.564711391 seconds)
    (107/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.221553704 seconds)
    (108/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.232095731 seconds)
    (109/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.252087349 seconds)
    (110/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.240480513 seconds)
    (111/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 5.886860031 seconds)
    (112/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.582623118 seconds)
    (113/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.423063774 seconds)
    (114/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.22606972 seconds)
    (115/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 5.99690201 seconds)
    (116/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.270679785 seconds)
    (117/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.219529319 seconds)
    (118/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.224629481 seconds)
    (119/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.228831499 seconds)
    (120/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.226089603 seconds)
    (121/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.222170205 seconds)
    (122/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.222612999 seconds)
    (123/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.220116995 seconds)
    (124/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 5.915025191 seconds)
    (125/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.226587326 seconds)
    (126/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.221944417 seconds)
    (127/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 7.222113346 seconds)
    (128/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.297860413 seconds)
    (129/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.223947367 seconds)
    (130/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 7.228172631 seconds)
    (131/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.229604323 seconds)
    (132/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.226502749 seconds)
    (133/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 6.792330194 seconds)
    (134/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.224428863 seconds)
    (135/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.223200219 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 7.223066238 seconds)
    (137/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.22662895 seconds)
    (138/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.740431951 seconds)
    (139/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.270015815 seconds)
    (140/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.224663318 seconds)
    (141/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.35832923 seconds)
    (142/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.22574363 seconds)
    (143/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.249022101 seconds)
    (144/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 7.225674437 seconds)
    (145/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.220977447 seconds)
    (146/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.226395154 seconds)
    (147/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.227878066 seconds)
    (148/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.226899712 seconds)
    (149/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.223407716 seconds)
    (150/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.32108922 seconds)
    (151/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 7.225988938 seconds)
    (152/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.360968403 seconds)
    (153/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 6.114119854 seconds)
    (154/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228973924 seconds)
    (155/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.227974883 seconds)
    (156/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228952636 seconds)
    (157/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.255221953 seconds)
    (158/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.234396025 seconds)
    (159/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.231298992 seconds)
    (160/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.398578328 seconds)
    (161/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.227856567 seconds)
    (162/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.231941843 seconds)
    (163/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.224625011 seconds)
    (164/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.232091788 seconds)
    (165/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.223289573 seconds)
    (166/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.223421468 seconds)
    (167/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.224792927 seconds)
    (168/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.223366098 seconds)
    (169/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.225271068 seconds)
    (170/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.362936358 seconds)
    (171/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.226986004 seconds)
    (172/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.226564488 seconds)
    (173/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.225270093 seconds)
    (174/608) benchmarking "5d"...
    done (took 5.744264584 seconds)
    (175/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.225171921 seconds)
    (176/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.618341816 seconds)
    (177/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.232993642 seconds)
    (178/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.226821711 seconds)
    (179/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.224330915 seconds)
    (180/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.23283755 seconds)
    (181/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.228485022 seconds)
    (182/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.345285551 seconds)
    (183/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.225254286 seconds)
    (184/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 7.22620922 seconds)
    (185/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.224606772 seconds)
    (186/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.395985178 seconds)
    (187/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.224207687 seconds)
    (188/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.224441841 seconds)
    (189/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.229842233 seconds)
    (190/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.223211286 seconds)
    (191/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.623971548 seconds)
    (192/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 7.228380648 seconds)
    (193/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.226654847 seconds)
    (194/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.226485877 seconds)
    (195/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.230565917 seconds)
    (196/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.225985428 seconds)
    (197/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.23656021 seconds)
    (198/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.4885724 seconds)
    (199/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.226420455 seconds)
    (200/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.224694801 seconds)
    (201/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 4.244071397 seconds)
    (202/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.236896196 seconds)
    (203/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.224777192 seconds)
    (204/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.237957684 seconds)
    (205/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.395273744 seconds)
    (206/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228792057 seconds)
    (207/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.225444106 seconds)
    (208/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.223103009 seconds)
    (209/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.223285504 seconds)
    (210/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 7.225590125 seconds)
    (211/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.229474007 seconds)
    (212/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.225319191 seconds)
    (213/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.230760665 seconds)
    (214/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 5.691663932 seconds)
    (215/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.227769247 seconds)
    (216/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.225435137 seconds)
    (217/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.226164666 seconds)
    (218/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.333389742 seconds)
    (219/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.336261435 seconds)
    (220/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 7.226517062 seconds)
    (221/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.223070728 seconds)
    (222/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.228833634 seconds)
    (223/608) benchmarking "6d"...
    done (took 7.224693578 seconds)
    (224/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.228263952 seconds)
    (225/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.227931537 seconds)
    (226/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.377483744 seconds)
    (227/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.228064686 seconds)
    (228/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.228897022 seconds)
    (229/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.225018072 seconds)
    (230/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.225803661 seconds)
    (231/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.245629321 seconds)
    (232/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 7.225488624 seconds)
    (233/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.227563621 seconds)
    (234/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.22544637 seconds)
    (235/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.226510689 seconds)
    (236/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.235434469 seconds)
    (237/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.227156243 seconds)
    (238/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.22728598 seconds)
    (239/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.227266083 seconds)
    (240/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.225056482 seconds)
    (241/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.22638259 seconds)
    (242/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.234945507 seconds)
    (243/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.490386406 seconds)
    (244/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.231311691 seconds)
    (245/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.232536915 seconds)
    (246/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.330777018 seconds)
    (247/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.226966144 seconds)
    (248/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.228067575 seconds)
    (249/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.223816391 seconds)
    (250/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 2.717281229 seconds)
    (251/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.502668084 seconds)
    (252/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 7.235296384 seconds)
    (253/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.22636666 seconds)
    (254/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 2.637430251 seconds)
    (255/608) benchmarking "3d"...
    done (took 3.908543997 seconds)
    (256/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.226938308 seconds)
    (257/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.22697535 seconds)
    (258/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.229574549 seconds)
    (259/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.231764188 seconds)
    (260/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 6.169962198 seconds)
    (261/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.226002317 seconds)
    (262/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.226268411 seconds)
    (263/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 6.695346795 seconds)
    (264/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.228802273 seconds)
    (265/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.229454991 seconds)
    (266/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 3.970128487 seconds)
    (267/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.267960644 seconds)
    (268/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.238823613 seconds)
    (269/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.286335609 seconds)
    (270/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.482744679 seconds)
    (271/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.227196883 seconds)
    (272/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 5.800103981 seconds)
    (273/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.228491076 seconds)
    (274/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.22732478 seconds)
    (275/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 7.225482412 seconds)
    (276/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.227183396 seconds)
    (277/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 7.232080241 seconds)
    (278/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 7.228186559 seconds)
    (279/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 7.229838892 seconds)
    (280/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 7.232239151 seconds)
    (281/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.775990951 seconds)
    (282/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.233025215 seconds)
    (283/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.236481772 seconds)
    (284/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.229467328 seconds)
    (285/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.22755091 seconds)
    (286/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 7.227643264 seconds)
    (287/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.227606458 seconds)
    (288/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.229290892 seconds)
    (289/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.111973575 seconds)
    (290/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.505101671 seconds)
    (291/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.229393088 seconds)
    (292/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.232266532 seconds)
    (293/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.335551171 seconds)
    (294/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.340965387 seconds)
    (295/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.229822039 seconds)
    (296/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 7.23648919 seconds)
    (297/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 2.6409364 seconds)
    (298/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.235652748 seconds)
    (299/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.229280039 seconds)
    (300/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.23119399 seconds)
    (301/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 4.338192758 seconds)
    (302/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 7.231191908 seconds)
    (303/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.382191764 seconds)
    (304/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.700672637 seconds)
    (305/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.235324424 seconds)
    (306/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 7.229326204 seconds)
    (307/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.248017631 seconds)
    (308/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.227586617 seconds)
    (309/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.237352454 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.229786106 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.227711311 seconds)
    (312/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.229242195 seconds)
    (313/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.231758303 seconds)
    (314/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.240867744 seconds)
    (315/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.22645993 seconds)
    (316/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.322304925 seconds)
    (317/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.229030039 seconds)
    (318/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 7.049938857 seconds)
    (319/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 7.23526016 seconds)
    (320/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228343975 seconds)
    (321/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.23065725 seconds)
    (322/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.229540529 seconds)
    (323/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.235635792 seconds)
    (324/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.230730598 seconds)
    (325/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 7.231595112 seconds)
    (326/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.255978308 seconds)
    (327/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.238517931 seconds)
    (328/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.806485091 seconds)
    (329/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.237558565 seconds)
    (330/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.231521547 seconds)
    (331/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.227704729 seconds)
    (332/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.235218111 seconds)
    (333/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.233450335 seconds)
    (334/608) benchmarking "sub2ind"...
    done (took 7.362020846 seconds)
    (335/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.48743439 seconds)
    (336/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.479418231 seconds)
    (337/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.233682084 seconds)
    (338/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.231758958 seconds)
    (339/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 7.233874659 seconds)
    (340/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.172739019 seconds)
    (341/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 2.654573381 seconds)
    (342/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.245314839 seconds)
    (343/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.131477744 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.234955589 seconds)
    (345/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.523412191 seconds)
    (346/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.262351056 seconds)
    (347/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.571502921 seconds)
    (348/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.233360051 seconds)
    (349/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.234157099 seconds)
    (350/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.235682624 seconds)
    (351/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.229923687 seconds)
    (352/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.233787331 seconds)
    (353/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.235099351 seconds)
    (354/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.380941009 seconds)
    (355/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.242665221 seconds)
    (356/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.231040005 seconds)
    (357/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.245480572 seconds)
    (358/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.226578582 seconds)
    (359/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.229091846 seconds)
    (360/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.56031021 seconds)
    (361/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.253076444 seconds)
    (362/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.230570141 seconds)
    (363/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.231238264 seconds)
    (364/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.150901613 seconds)
    (365/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.261453979 seconds)
    (366/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.575025276 seconds)
    (367/608) benchmarking ("sum", "3darray")...
    done (took 3.362451853 seconds)
    (368/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.231566777 seconds)
    (369/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.231567168 seconds)
    (370/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.231600307 seconds)
    (371/608) benchmarking "7d"...
    done (took 5.82759988 seconds)
    (372/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.22989745 seconds)
    (373/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.225912602 seconds)
    (374/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.421656067 seconds)
    (375/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.230740428 seconds)
    (376/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.23236823 seconds)
    (377/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.229767623 seconds)
    (378/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.226330054 seconds)
    (379/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 7.232731815 seconds)
    (380/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.23551872 seconds)
    (381/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.227570354 seconds)
    (382/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.235642774 seconds)
    (383/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.231574728 seconds)
    (384/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.242674541 seconds)
    (385/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.23204899 seconds)
    (386/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.230052072 seconds)
    (387/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.236069595 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.236326611 seconds)
    (389/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.22975145 seconds)
    (390/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 7.239251783 seconds)
    (391/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.232065197 seconds)
    (392/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.230303868 seconds)
    (393/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.394563561 seconds)
    (394/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.233940046 seconds)
    (395/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.31405585 seconds)
    (396/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.287580957 seconds)
    (397/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.238088413 seconds)
    (398/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 5.816982657 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.581376165 seconds)
    (400/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.240861613 seconds)
    (401/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.232289926 seconds)
    (402/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.575219724 seconds)
    (403/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.232962781 seconds)
    (404/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.237313357 seconds)
    (405/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.252699838 seconds)
    (406/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.240420528 seconds)
    (407/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.228618539 seconds)
    (408/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.232307247 seconds)
    (409/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.23284605 seconds)
    (410/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.230883432 seconds)
    (411/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.489704384 seconds)
    (412/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.236532166 seconds)
    (413/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.143134286 seconds)
    (414/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.826335979 seconds)
    (415/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.239774688 seconds)
    (416/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.362654188 seconds)
    (417/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.769432233 seconds)
    (418/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.232060249 seconds)
    (419/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.23041927 seconds)
    (420/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 5.813562873 seconds)
    (421/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.512764163 seconds)
    (422/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.231381797 seconds)
    (423/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.242023091 seconds)
    (424/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.239643081 seconds)
    (425/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.232412236 seconds)
    (426/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.233316351 seconds)
    (427/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.262074688 seconds)
    (428/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.23348774 seconds)
    (429/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 5.807738132 seconds)
    (430/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.245277697 seconds)
    (431/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.235512146 seconds)
    (432/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.234354403 seconds)
    (433/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.234492218 seconds)
    (434/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.231293551 seconds)
    (435/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.560999261 seconds)
    (436/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.233383134 seconds)
    (437/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.233632395 seconds)
    (438/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.229104494 seconds)
    (439/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.229647695 seconds)
    (440/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.366150377 seconds)
    (441/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.572948672 seconds)
    (442/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 7.245320055 seconds)
    (443/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.365497257 seconds)
    (444/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.342113305 seconds)
    (445/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.230263371 seconds)
    (446/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.241764907 seconds)
    (447/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.229840167 seconds)
    (448/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.26006971 seconds)
    (449/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.235965069 seconds)
    (450/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.232495284 seconds)
    (451/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.228867792 seconds)
    (452/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.230938882 seconds)
    (453/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.231456116 seconds)
    (454/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.230639668 seconds)
    (455/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.232567074 seconds)
    (456/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.264408304 seconds)
    (457/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.241700375 seconds)
    (458/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.229157653 seconds)
    (459/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.227414776 seconds)
    (460/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.226542768 seconds)
    (461/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.22749621 seconds)
    (462/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.228481115 seconds)
    (463/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 6.656130159 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.500080636 seconds)
    (465/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.22818404 seconds)
    (466/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.364875631 seconds)
    (467/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.230011009 seconds)
    (468/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.229618225 seconds)
    (469/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.230827935 seconds)
    (470/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.230266367 seconds)
    (471/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.230621624 seconds)
    (472/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.229494917 seconds)
    (473/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.237141596 seconds)
    (474/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 7.235397781 seconds)
    (475/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.227344111 seconds)
    (476/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.233611675 seconds)
    (477/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.232053629 seconds)
    (478/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.225762146 seconds)
    (479/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.236463215 seconds)
    (480/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.23458525 seconds)
    (481/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.233578016 seconds)
    (482/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.237134886 seconds)
    (483/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 7.232531966 seconds)
    (484/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.242960644 seconds)
    (485/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.231232841 seconds)
    (486/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 7.231171201 seconds)
    (487/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.23002242 seconds)
    (488/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.230475876 seconds)
    (489/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.236478586 seconds)
    (490/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.227120821 seconds)
    (491/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.246052349 seconds)
    (492/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.231183456 seconds)
    (493/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.227385293 seconds)
    (494/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.231863965 seconds)
    (495/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.938366837 seconds)
    (496/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.233094765 seconds)
    (497/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.957166554 seconds)
    (498/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.230749204 seconds)
    (499/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.23050476 seconds)
    (500/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 7.11693988 seconds)
    (501/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.23034615 seconds)
    (502/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.230141183 seconds)
    (503/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.231410148 seconds)
    (504/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.229857698 seconds)
    (505/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.232360504 seconds)
    (506/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.237731716 seconds)
    (507/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.40118375 seconds)
    (508/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.234800829 seconds)
    (509/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.230522063 seconds)
    (510/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.229260795 seconds)
    (511/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.234372087 seconds)
    (512/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.230974535 seconds)
    (513/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.341097125 seconds)
    (514/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.27317127 seconds)
    (515/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.239262182 seconds)
    (516/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.720346215 seconds)
    (517/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.240473682 seconds)
    (518/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.23622141 seconds)
    (519/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.230779904 seconds)
    (520/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.230409117 seconds)
    (521/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.227524909 seconds)
    (522/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.228370406 seconds)
    (523/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.231293751 seconds)
    (524/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.23301632 seconds)
    (525/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.235294243 seconds)
    (526/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.232954714 seconds)
    (527/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.230766204 seconds)
    (528/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.243257096 seconds)
    (529/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.234976532 seconds)
    (530/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.764798112 seconds)
    (531/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.255586746 seconds)
    (532/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 5.796618517 seconds)
    (533/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 5.855392578 seconds)
    (534/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.230110592 seconds)
    (535/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.355438219 seconds)
    (536/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 7.236983936 seconds)
    (537/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.797690302 seconds)
    (538/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.244205479 seconds)
    (539/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.228634244 seconds)
    (540/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.228440898 seconds)
    (541/608) benchmarking "2d"...
    done (took 3.560003128 seconds)
    (542/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.235049779 seconds)
    (543/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.943632463 seconds)
    (544/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.414844061 seconds)
    (545/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.339198861 seconds)
    (546/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.472233557 seconds)
    (547/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.236701402 seconds)
    (548/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 7.239223948 seconds)
    (549/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.232788649 seconds)
    (550/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.234420091 seconds)
    (551/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.302339261 seconds)
    (552/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.232731749 seconds)
    (553/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 6.682660239 seconds)
    (554/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.2323189 seconds)
    (555/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.247321113 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.238122287 seconds)
    (557/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 7.23384484 seconds)
    (558/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.53326208 seconds)
    (559/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.235005646 seconds)
    (560/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.229280984 seconds)
    (561/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.153023055 seconds)
    (562/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.255120472 seconds)
    (563/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.233160155 seconds)
    (564/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.233508218 seconds)
    (565/608) benchmarking "4d"...
    done (took 4.046608055 seconds)
    (566/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.690199833 seconds)
    (567/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.294071732 seconds)
    (568/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.260399354 seconds)
    (569/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.228780994 seconds)
    (570/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.243199977 seconds)
    (571/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.228490738 seconds)
    (572/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.236498154 seconds)
    (573/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.227185454 seconds)
    (574/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.231438296 seconds)
    (575/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.232711897 seconds)
    (576/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 7.22950141 seconds)
    (577/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.232221108 seconds)
    (578/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.340156701 seconds)
    (579/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.233575769 seconds)
    (580/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 7.235381206 seconds)
    (581/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.22968318 seconds)
    (582/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 7.226711401 seconds)
    (583/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.228282599 seconds)
    (584/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.235812131 seconds)
    (585/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.515705765 seconds)
    (586/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.807333809 seconds)
    (587/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.241689669 seconds)
    (588/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.228975136 seconds)
    (589/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.237384291 seconds)
    (590/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.246298026 seconds)
    (591/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.157087934 seconds)
    (592/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.235148707 seconds)
    (593/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.244183971 seconds)
    (594/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.230444355 seconds)
    (595/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.233891022 seconds)
    (596/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.236822927 seconds)
    (597/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.231816949 seconds)
    (598/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 7.232798612 seconds)
    (599/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.238710402 seconds)
    (600/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.232450166 seconds)
    (601/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.233079658 seconds)
    (602/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 3.918395338 seconds)
    (603/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.243200321 seconds)
    (604/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.235242472 seconds)
    (605/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 6.834251332 seconds)
    (606/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 2.721476956 seconds)
    (607/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.235689783 seconds)
    (608/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 7.233355144 seconds)
  done (took 3911.053186982 seconds)
  (2/13) benchmarking "reductions"...
    (1/20) benchmarking ("sumabs", "Int64")...
    done (took 3.46883613 seconds)
    (2/20) benchmarking ("norminf", "Float64")...
    done (took 2.305728761 seconds)
    (3/20) benchmarking ("norm", "Float64")...
    done (took 3.131248425 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 3.214815741 seconds)
    (5/20) benchmarking ("maxabs", "Float64")...
    done (took 2.579630816 seconds)
    (6/20) benchmarking ("maxabs", "Int64")...
    done (took 3.107972779 seconds)
    (7/20) benchmarking ("mean", "Float64")...
    done (took 3.160153726 seconds)
    (8/20) benchmarking ("norm1", "Int64")...
    done (took 2.667346827 seconds)
    (9/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 3.051462067 seconds)
    (10/20) benchmarking ("sumabs2", "Int64")...
    done (took 3.098364714 seconds)
    (11/20) benchmarking ("sum", "Float64")...
    done (took 3.1131423 seconds)
    (12/20) benchmarking ("perf_reduce", "Float64")...
    done (took 3.144728017 seconds)
    (13/20) benchmarking ("sum", "Int64")...
    done (took 2.971232507 seconds)
    (14/20) benchmarking ("perf_reduce", "Int64")...
    done (took 3.051743282 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 3.108037792 seconds)
    (16/20) benchmarking ("norm", "Int64")...
    done (took 2.388955069 seconds)
    (17/20) benchmarking ("norm1", "Float64")...
    done (took 3.104732521 seconds)
    (18/20) benchmarking ("sumabs2", "Float64")...
    done (took 3.356269292 seconds)
    (19/20) benchmarking ("norminf", "Int64")...
    done (took 2.320204015 seconds)
    (20/20) benchmarking ("mean", "Int64")...
    done (took 2.763618482 seconds)
  done (took 61.342412465 seconds)
  (3/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat_setind", 5)...
    done (took 4.198854525 seconds)
    (2/17) benchmarking "4467"...
    done (took 2.414151779 seconds)
    (3/17) benchmarking ("catnd", 500)...
    done (took 7.268433411 seconds)
    (4/17) benchmarking ("hcat", 5)...
    done (took 4.674854009 seconds)
    (5/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.241345297 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 4.028111262 seconds)
    (7/17) benchmarking ("hcat_setind", 5)...
    done (took 4.217482039 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.232417563 seconds)
    (9/17) benchmarking ("catnd_setind", 500)...
    done (took 7.232987243 seconds)
    (10/17) benchmarking ("vcat", 500)...
    done (took 7.242674813 seconds)
    (11/17) benchmarking ("vcat_setind", 5)...
    done (took 4.09811403 seconds)
    (12/17) benchmarking ("catnd_setind", 5)...
    done (took 2.249664557 seconds)
    (13/17) benchmarking ("hvcat", 5)...
    done (took 4.726351473 seconds)
    (14/17) benchmarking ("catnd", 5)...
    done (took 2.278942438 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.232013217 seconds)
    (16/17) benchmarking ("hvcat", 500)...
    done (took 7.233820535 seconds)
    (17/17) benchmarking ("hcat", 500)...
    done (took 7.23770302 seconds)
  done (took 93.045128059 seconds)
  (4/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.263842325 seconds)
    (2/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.455552605 seconds)
    (3/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.250889578 seconds)
    (4/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.280732555 seconds)
    (5/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.277299264 seconds)
    (6/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.386417988 seconds)
    (7/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 7.606424849 seconds)
    (8/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.369600901 seconds)
  done (took 61.122574439 seconds)
  (5/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Float64")...
    done (took 2.715743453 seconds)
    (2/4) benchmarking ("Float64", "Int")...
    done (took 2.75324193 seconds)
    (3/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 3.211160832 seconds)
    (4/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.956289295 seconds)
  done (took 13.870181182 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "boolarray_bool_load!"...
    done (took 7.236048667 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 3.30124064 seconds)
    (3/6) benchmarking "bitarray_true_load!"...
    done (took 7.233776587 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.608543105 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.24126748 seconds)
    (6/6) benchmarking "boolarray_true_fill!"...
    done (took 3.278518157 seconds)
  done (took 33.133470644 seconds)
  (7/13) benchmarking "accumulate"...
    (1/12) benchmarking ("accumulate!", "Float64")...
    done (took 3.127025129 seconds)
    (2/12) benchmarking ("accumulate", "Float64")...
    done (took 2.400742842 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.238353758 seconds)
    (4/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.234343591 seconds)
    (5/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.235512982 seconds)
    (6/12) benchmarking ("cumsum", "Int")...
    done (took 3.059312532 seconds)
    (7/12) benchmarking ("cumsum", "Float64")...
    done (took 2.421355428 seconds)
    (8/12) benchmarking ("accumulate!", "Int")...
    done (took 2.843526659 seconds)
    (9/12) benchmarking ("cumsum!", "Int")...
    done (took 2.859345835 seconds)
    (10/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.242088444 seconds)
    (11/12) benchmarking ("accumulate", "Int")...
    done (took 3.390727494 seconds)
    (12/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.361479894 seconds)
  done (took 53.646400061 seconds)
  (8/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.587600084 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.649646095 seconds)
    (3/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.460134063 seconds)
    (4/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 2.432631935 seconds)
    (5/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.652578395 seconds)
    (6/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.695401246 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 2.332539743 seconds)
    (8/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 2.444004491 seconds)
    (9/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 7.232441821 seconds)
    (10/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.272065187 seconds)
    (11/24) benchmarking ("==", "BitArray")...
    done (took 2.450383157 seconds)
    (12/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 2.287964549 seconds)
    (13/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.486502381 seconds)
    (14/24) benchmarking ("isequal", "BitArray")...
    done (took 2.297731725 seconds)
    (15/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.487552556 seconds)
    (16/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.554383154 seconds)
    (17/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.654662425 seconds)
    (18/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.272600798 seconds)
    (19/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 2.465757773 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.640578827 seconds)
    (21/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 2.458507662 seconds)
    (22/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.463331665 seconds)
    (23/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.550935515 seconds)
    (24/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.86596867 seconds)
  done (took 66.93074973 seconds)
  (9/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 1)...
    done (took 2.460225632 seconds)
    (2/5) benchmarking ("setindex!", 4)...
    done (took 2.479004736 seconds)
    (3/5) benchmarking ("setindex!", 2)...
    done (took 2.490495199 seconds)
    (4/5) benchmarking ("setindex!", 5)...
    done (took 2.524096689 seconds)
    (5/5) benchmarking ("setindex!", 3)...
    done (took 2.512181907 seconds)
  done (took 14.70073693 seconds)
  (10/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 12.111710985 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.27805016 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.74396519 seconds)
    (4/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.669769738 seconds)
    (5/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.387629563 seconds)
    (6/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.416689106 seconds)
    (7/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.235364875 seconds)
    (8/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 10.550664612 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.283588358 seconds)
    (10/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.347155245 seconds)
    (11/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.244616826 seconds)
    (12/12) benchmarking ("gramschmidt!", 1000)...
    done (took 12.825296985 seconds)
  done (took 104.326451773 seconds)
  (11/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.235768857 seconds)
    (2/4) benchmarking "rev_load_slow!"...
    done (took 7.247506467 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.242996283 seconds)
    (4/4) benchmarking "rev_load_fast!"...
    done (took 7.24304531 seconds)
  done (took 31.201759836 seconds)
  (12/13) benchmarking "growth"...
    (1/12) benchmarking ("push_single!", 2048)...
    done (took 2.326968317 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 2.313262054 seconds)
    (3/12) benchmarking ("prerend!", 2048)...
    done (took 2.897980639 seconds)
    (4/12) benchmarking ("push_single!", 8)...
    done (took 2.304135461 seconds)
    (5/12) benchmarking ("push_multiple!", 8)...
    done (took 2.47214252 seconds)
    (6/12) benchmarking ("append!", 256)...
    done (took 3.509367499 seconds)
    (7/12) benchmarking ("prerend!", 8)...
    done (took 2.470557794 seconds)
    (8/12) benchmarking ("push_multiple!", 256)...
    done (took 2.32481465 seconds)
    (9/12) benchmarking ("append!", 2048)...
    done (took 2.597077294 seconds)
    (10/12) benchmarking ("prerend!", 256)...
    done (took 4.308786189 seconds)
    (11/12) benchmarking ("append!", 8)...
    done (took 2.42341 seconds)
    (12/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.336948237 seconds)
  done (took 34.517665427 seconds)
  (13/13) benchmarking "any/all"...
    (1/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.592587903 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.551663979 seconds)
    (3/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.590972296 seconds)
    (4/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.599806646 seconds)
    (5/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.553339693 seconds)
    (6/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.534357234 seconds)
    (7/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.535637554 seconds)
    (8/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.599570153 seconds)
    (9/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.596513374 seconds)
    (10/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.596720784 seconds)
    (11/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.475123317 seconds)
    (12/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.551366678 seconds)
    (13/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.598232421 seconds)
    (14/24) benchmarking ("all", "BitArray")...
    done (took 2.917931604 seconds)
    (15/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.597483315 seconds)
    (16/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.473123721 seconds)
    (17/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.592187479 seconds)
    (18/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.596660017 seconds)
    (19/24) benchmarking ("any", "BitArray")...
    done (took 2.918306569 seconds)
    (20/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.592705602 seconds)
    (21/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.471734723 seconds)
    (22/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.552868573 seconds)
    (23/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.597434102 seconds)
    (24/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.474722406 seconds)
  done (took 64.393516525 seconds)
done (took 4545.477367262 seconds)
(3/22) benchmarking "misc"...
  (1/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.852329049 seconds)
    (2/2) benchmarking "Float64"...
    done (took 3.032671209 seconds)
  done (took 8.11711868 seconds)
  (2/15) benchmarking "perf highdim generator"...
  done (took 2.519893991 seconds)
  (3/15) benchmarking "20517"...
  done (took 2.792427776 seconds)
  (4/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "no conditional"...
    done (took 3.073608476 seconds)
    (2/2) benchmarking "conditional"...
    done (took 3.086193883 seconds)
  done (took 8.387457368 seconds)
  (5/15) benchmarking "afoldl"...
    (1/3) benchmarking "Int"...
    done (took 2.300039428 seconds)
    (2/3) benchmarking "Float64"...
    done (took 2.849530363 seconds)
    (3/3) benchmarking "Complex{Float64}"...
    done (took 2.874322659 seconds)
  done (took 10.254516068 seconds)
  (6/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.40646112 seconds)
  done (took 4.639229472 seconds)
  (7/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.776921999 seconds)
    (2/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.69616201 seconds)
    (3/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.423627119 seconds)
  done (took 10.128406802 seconds)
  (8/15) benchmarking "18129"...
  done (took 7.253481503 seconds)
  (9/15) benchmarking "23042"...
    (1/4) benchmarking "Float64"...
    done (took 3.006388308 seconds)
    (2/4) benchmarking "ComplexF32"...
    done (took 3.395243082 seconds)
    (3/4) benchmarking "ComplexF64"...
    done (took 3.520829001 seconds)
    (4/4) benchmarking "Float32"...
    done (took 2.717071625 seconds)
  done (took 14.874102295 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 7.248827915 seconds)
    (2/4) benchmarking ("parse", "nested")...
    done (took 7.234723462 seconds)
    (3/4) benchmarking ("parse", "array")...
    done (took 4.361652231 seconds)
    (4/4) benchmarking ("parse", "function")...
    done (took 2.663008033 seconds)
  done (took 23.741675902 seconds)
  (11/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float64"...
    done (took 7.240588632 seconds)
    (2/3) benchmarking "Float16"...
    done (took 7.251462002 seconds)
    (3/3) benchmarking "Float32"...
    done (took 7.249236771 seconds)
  done (took 23.979959807 seconds)
  (12/15) benchmarking "fastmath many args"...
  done (took 2.474880022 seconds)
  (13/15) benchmarking "bitshift"...
    (1/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.266369032 seconds)
    (2/4) benchmarking ("Int", "UInt")...
    done (took 2.273781111 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.274307337 seconds)
    (4/4) benchmarking ("UInt", "UInt")...
    done (took 2.274186259 seconds)
  done (took 11.320687521 seconds)
  (14/15) benchmarking "iterators"...
    (1/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.758942486 seconds)
    (2/10) benchmarking "zip(1:1)"...
    done (took 2.66463682 seconds)
    (3/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.669709662 seconds)
    (4/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.714076482 seconds)
    (5/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.092405986 seconds)
    (6/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.475739543 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.691074924 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.605327986 seconds)
    (9/10) benchmarking "zip(1:1000)"...
    done (took 2.400500119 seconds)
    (10/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.550978717 seconds)
  done (took 28.857511599 seconds)
  (15/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.761553669 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.61644553 seconds)
  done (took 7.609123324 seconds)
done (took 169.180321475 seconds)
(4/22) benchmarking "sort"...
  (1/11) benchmarking "length = 30"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.240465162 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.251942551 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.245348444 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.248760634 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.247522418 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.241202559 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.243122881 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.245465221 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.250890453 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.246202104 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.248515744 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.246679063 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.39039275 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.244535484 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.252374499 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.247858898 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.252725402 seconds)
  done (took 40.578364515 seconds)
  (2/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.265967987 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 6.64270809 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.112687274 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 6.566536548 seconds)
    (5/17) benchmarking "descending"...
    done (took 5.087921307 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.265090542 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.451788058 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 3.98493682 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 6.990095201 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 4.090777843 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 3.995368611 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 4.871350555 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.249624493 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.851471456 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 4.19998918 seconds)
    (16/17) benchmarking "ascending"...
    done (took 4.964082465 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 4.185817303 seconds)
  done (took 81.007559664 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.240076283 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.240575343 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.240093917 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.240783415 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.240398664 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.239669326 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.24020253 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.24324408 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.240658738 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.241977803 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.240072041 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.240204678 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.265993312 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.24351033 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.246093845 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.239623089 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.246459805 seconds)
  done (took 40.360751204 seconds)
  (4/11) benchmarking "length = 100"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.239558632 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.284655059 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.252447818 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.276463983 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.270952662 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.240639265 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.242711314 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.253647182 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.271216722 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.253918342 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.252018583 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.262202433 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 3.1421403 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.260205349 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.262240641 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.270107816 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.263061171 seconds)
  done (took 41.529213022 seconds)
  (5/11) benchmarking "issues"...
    (1/13) benchmarking "small Float64 view"...
    done (took 2.244069244 seconds)
    (2/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 7.234855805 seconds)
    (3/13) benchmarking "sortslices sorting very short slices"...
    done (took 7.87132103 seconds)
    (4/13) benchmarking "Float16"...
    done (took 7.281062344 seconds)
    (5/13) benchmarking "sort(rand(10^8))"...
    done (took 15.089974728 seconds)
    (6/13) benchmarking "sortperm(rand(10^5))"...
    done (took 7.352619357 seconds)
    (7/13) benchmarking "sortperm on a view (Int)"...
    done (took 6.828725521 seconds)
    (8/13) benchmarking "small Int view"...
    done (took 2.239437711 seconds)
    (9/13) benchmarking "sortperm on a view (Float64)"...
    done (took 2.635157418 seconds)
    (10/13) benchmarking "inplace sorting of a view"...
    done (took 2.407281334 seconds)
    (11/13) benchmarking "sortperm(rand(10^7))"...
    done (took 13.28063727 seconds)
    (12/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 2.756355818 seconds)
    (13/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 2.68497929 seconds)
  done (took 82.146980771 seconds)
  (6/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.23633338 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.233099204 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.236581348 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.234972611 seconds)
  done (took 31.173485325 seconds)
  (7/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 7.234175827 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 7.23156424 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 7.235975889 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 7.233708165 seconds)
  done (took 31.166357148 seconds)
  (8/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm forwards"...
    done (took 2.265276801 seconds)
    (2/4) benchmarking "sort! reverse"...
    done (took 2.258162851 seconds)
    (3/4) benchmarking "sortperm! reverse"...
    done (took 2.273781579 seconds)
    (4/4) benchmarking "sort forwards"...
    done (took 2.25565979 seconds)
  done (took 11.284811267 seconds)
  (9/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ones")...
    done (took 3.474953998 seconds)
    (2/8) benchmarking ("reverse", "ascending")...
    done (took 2.958212464 seconds)
    (3/8) benchmarking ("forwards", "random")...
    done (took 2.937524095 seconds)
    (4/8) benchmarking ("forwards", "ascending")...
    done (took 2.942086307 seconds)
    (5/8) benchmarking ("forwards", "descending")...
    done (took 2.787573397 seconds)
    (6/8) benchmarking ("reverse", "random")...
    done (took 3.168784006 seconds)
    (7/8) benchmarking ("reverse", "descending")...
    done (took 2.947253091 seconds)
    (8/8) benchmarking ("reverse", "ones")...
    done (took 3.386756841 seconds)
  done (took 26.83410761 seconds)
  (10/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.242872711 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.582907461 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.418410734 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.580283138 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.445401146 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.253144632 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.26328342 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.474260786 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.620812499 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.487891351 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.460591074 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.46641633 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 7.238817356 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.396189737 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.440464926 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.430237235 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.495077354 seconds)
  done (took 48.528719276 seconds)
  (11/11) benchmarking "length = 10"...
    (1/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 2.240917747 seconds)
    (2/17) benchmarking "Float64 unions with missing"...
    done (took 2.246006622 seconds)
    (3/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 2.250432402 seconds)
    (4/17) benchmarking "Int unions with missing"...
    done (took 2.244024023 seconds)
    (5/17) benchmarking "descending"...
    done (took 2.245120115 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 2.23989303 seconds)
    (7/17) benchmarking "all same"...
    done (took 2.240527657 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 2.245120758 seconds)
    (9/17) benchmarking "sortperm(rand(length))"...
    done (took 2.244906292 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.245257818 seconds)
    (11/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 2.245617726 seconds)
    (12/17) benchmarking "sort(randn(length))"...
    done (took 2.242286713 seconds)
    (13/17) benchmarking "mixed eltype with by order"...
    done (took 2.328397464 seconds)
    (14/17) benchmarking "sort!(rand(Int, length))"...
    done (took 2.243405045 seconds)
    (15/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 2.253560026 seconds)
    (16/17) benchmarking "ascending"...
    done (took 2.244504307 seconds)
    (17/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.253024478 seconds)
  done (took 40.488766199 seconds)
done (took 477.335320867 seconds)
(5/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.230612768 seconds)
done (took 9.461639832 seconds)
(6/22) benchmarking "shootout"...
  (1/12) benchmarking "binary_trees"...
  done (took 7.252220152 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.348563498 seconds)
  (3/12) benchmarking "regex_dna"...
  done (took 7.235786074 seconds)
  (4/12) benchmarking "fannkuch"...
  done (took 3.669463631 seconds)
  (5/12) benchmarking "mandelbrot"...
  done (took 7.23698678 seconds)
  (6/12) benchmarking "pidigits"...
  done (took 7.266344711 seconds)
  (7/12) benchmarking "spectralnorm"...
  done (took 7.250113566 seconds)
  (8/12) benchmarking "k_nucleotide"...
  done (took 7.261686664 seconds)
  (9/12) benchmarking "nbody"...
  done (took 3.257339025 seconds)
  (10/12) benchmarking "revcomp"...
  done (took 3.376058437 seconds)
  (11/12) benchmarking "nbody_vec"...
  done (took 6.088667755 seconds)
  (12/12) benchmarking "meteor_contest"...
  done (took 8.957022155 seconds)
done (took 73.429692801 seconds)
(7/22) benchmarking "sparse"...
  (1/7) benchmarking "index"...
    (1/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.658535503 seconds)
    (2/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.572389979 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.461789644 seconds)
    (4/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.382704642 seconds)
    (5/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.397427649 seconds)
    (6/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.234247089 seconds)
    (7/54) benchmarking ("spmat", "array", 10)...
    done (took 2.338720432 seconds)
    (8/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.485840307 seconds)
    (9/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.235506923 seconds)
    (10/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.56501632 seconds)
    (11/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 6.247330244 seconds)
    (12/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.047826812 seconds)
    (13/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.279307057 seconds)
    (14/54) benchmarking ("spmat", "array", 100)...
    done (took 2.797714331 seconds)
    (15/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.598810402 seconds)
    (16/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 6.20549865 seconds)
    (17/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.228924248 seconds)
    (18/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.492745387 seconds)
    (19/54) benchmarking ("spvec", "range", 1000)...
    done (took 4.455850933 seconds)
    (20/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.235424687 seconds)
    (21/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.791491495 seconds)
    (22/54) benchmarking ("spmat", "integer", 1000)...
    done (took 6.169173649 seconds)
    (23/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.148688016 seconds)
    (24/54) benchmarking ("spmat", "range", 100)...
    done (took 2.67525324 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 7.125153164 seconds)
    (26/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.33440925 seconds)
    (27/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.202854168 seconds)
    (28/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.885255565 seconds)
    (29/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.484086087 seconds)
    (30/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.391292821 seconds)
    (31/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.25321833 seconds)
    (32/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.229802971 seconds)
    (33/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.341059912 seconds)
    (34/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.500707945 seconds)
    (35/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.902762183 seconds)
    (36/54) benchmarking ("spmat", "logical", 10)...
    done (took 3.034381696 seconds)
    (37/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.309277226 seconds)
    (38/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 3.908191788 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.40435443 seconds)
    (40/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.082989615 seconds)
    (41/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.656211233 seconds)
    (42/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.92224533 seconds)
    (43/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.497885489 seconds)
    (44/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.238107765 seconds)
    (45/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.466953649 seconds)
    (46/54) benchmarking ("spmat", "range", 1000)...
    done (took 7.096022559 seconds)
    (47/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.363707863 seconds)
    (48/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.325318609 seconds)
    (49/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 6.165026787 seconds)
    (50/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.249118641 seconds)
    (51/54) benchmarking ("spmat", "range", 10)...
    done (took 3.910286473 seconds)
    (52/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.366708043 seconds)
    (53/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 6.362371699 seconds)
    (54/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.457204163 seconds)
  done (took 228.406351843 seconds)
  (2/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "adjoint"...
    done (took 7.416927459 seconds)
    (2/2) benchmarking "non-adjoint"...
    done (took 7.381659791 seconds)
  done (took 17.031889187 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.760219243 seconds)
    (2/18) benchmarking ("IV", 1000)...
    done (took 2.483182315 seconds)
    (3/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.790392587 seconds)
    (4/18) benchmarking ("IJV", 100)...
    done (took 2.750022694 seconds)
    (5/18) benchmarking ("IJV", 1000)...
    done (took 2.60065642 seconds)
    (6/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.383186426 seconds)
    (7/18) benchmarking ("IJV", 10)...
    done (took 2.96857531 seconds)
    (8/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.432717502 seconds)
    (9/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.194154793 seconds)
    (10/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.380562992 seconds)
    (11/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.88653153 seconds)
    (12/18) benchmarking ("Diagonal", 1000)...
    done (took 2.662824029 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 4.55383498 seconds)
    (14/18) benchmarking ("Diagonal", 10)...
    done (took 3.573247679 seconds)
    (15/18) benchmarking ("IV", 100)...
    done (took 2.668299073 seconds)
    (16/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.85918514 seconds)
    (17/18) benchmarking ("IV", 10)...
    done (took 2.865096952 seconds)
    (18/18) benchmarking ("Tridiagonal", 10)...
    done (took 4.131507393 seconds)
  done (took 59.177018653 seconds)
  (4/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.67324586 seconds)
    (2/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.817121592 seconds)
    (3/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.2360002 seconds)
    (4/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.655864911 seconds)
    (5/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.242995301 seconds)
    (6/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 4.229188791 seconds)
    (7/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.23115739 seconds)
    (8/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.89452542 seconds)
    (9/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.488838039 seconds)
    (10/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.642517775 seconds)
    (11/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.71268709 seconds)
    (12/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.23478326 seconds)
    (13/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.231248921 seconds)
    (14/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.770079792 seconds)
    (15/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.733585759 seconds)
    (16/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 3.02478843 seconds)
    (17/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.264587575 seconds)
    (18/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.232567303 seconds)
    (19/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.245269756 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.234888815 seconds)
    (21/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.648501222 seconds)
    (22/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.238883175 seconds)
    (23/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.535200427 seconds)
    (24/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.256746657 seconds)
    (25/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.431561212 seconds)
    (26/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.242689272 seconds)
    (27/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.797800425 seconds)
    (28/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.675122621 seconds)
    (29/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.252260952 seconds)
    (30/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.487355921 seconds)
    (31/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.242376938 seconds)
    (32/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.232119735 seconds)
    (33/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.224891399 seconds)
    (34/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.236293481 seconds)
    (35/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.226502024 seconds)
    (36/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.741288684 seconds)
    (37/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.233440369 seconds)
    (38/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.499992935 seconds)
    (39/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.242757422 seconds)
    (40/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 6.914764305 seconds)
    (41/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.232413247 seconds)
    (42/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.233809716 seconds)
    (43/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.597216203 seconds)
    (44/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.240582521 seconds)
    (45/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.670908685 seconds)
    (46/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.242466137 seconds)
    (47/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.070018493 seconds)
    (48/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.754907751 seconds)
    (49/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.246437276 seconds)
    (50/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.00660314 seconds)
    (51/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.588855522 seconds)
    (52/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.248222909 seconds)
    (53/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.743327741 seconds)
    (54/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.817193275 seconds)
    (55/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.410742297 seconds)
    (56/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.466599201 seconds)
    (57/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.798126864 seconds)
    (58/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.24666717 seconds)
    (59/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.790474394 seconds)
    (60/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.71505314 seconds)
    (61/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.236179555 seconds)
    (62/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.234016672 seconds)
    (63/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.727343687 seconds)
    (64/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.234130311 seconds)
    (65/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.700655302 seconds)
    (66/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.674258335 seconds)
    (67/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.181279922 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.235273605 seconds)
    (69/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.726648715 seconds)
    (70/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.257078917 seconds)
    (71/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.624318482 seconds)
    (72/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.242437224 seconds)
    (73/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.230518425 seconds)
    (74/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.823435884 seconds)
    (75/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.251648844 seconds)
    (76/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 4.31149069 seconds)
    (77/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.231952485 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.192184453 seconds)
    (79/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.898841475 seconds)
    (80/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.232189187 seconds)
    (81/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.237255652 seconds)
    (82/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.976324388 seconds)
    (83/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.748571647 seconds)
    (84/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.234557762 seconds)
    (85/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.23281827 seconds)
    (86/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.601186196 seconds)
    (87/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.659179726 seconds)
    (88/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.259876685 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.196993244 seconds)
    (90/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.243229898 seconds)
    (91/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.231997292 seconds)
    (92/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 3.095790896 seconds)
    (93/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.237949866 seconds)
    (94/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.235052227 seconds)
    (95/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 3.069812362 seconds)
    (96/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.730239876 seconds)
    (97/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.174362512 seconds)
    (98/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.237244046 seconds)
    (99/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.721880945 seconds)
    (100/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.244288409 seconds)
    (101/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.233206612 seconds)
    (102/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.612645539 seconds)
    (103/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 3.037398006 seconds)
    (104/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.238535736 seconds)
    (105/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.462934994 seconds)
    (106/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 7.045337329 seconds)
    (107/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.507864908 seconds)
    (108/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.710885182 seconds)
    (109/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.236027945 seconds)
    (110/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.720995508 seconds)
    (111/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.766617755 seconds)
    (112/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.23825192 seconds)
    (113/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.507327301 seconds)
    (114/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.840920268 seconds)
    (115/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.797491824 seconds)
    (116/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.228631709 seconds)
    (117/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.248219819 seconds)
    (118/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.336498669 seconds)
    (119/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.237916204 seconds)
    (120/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.80498424 seconds)
    (121/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.30235983 seconds)
    (122/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.25544718 seconds)
    (123/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.240946612 seconds)
    (124/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.691263054 seconds)
    (125/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.234510504 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.741691377 seconds)
    (127/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.764436255 seconds)
    (128/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 3.022144548 seconds)
    (129/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.234859027 seconds)
    (130/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.236533418 seconds)
    (131/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.231211336 seconds)
    (132/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.87563864 seconds)
    (133/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.195575873 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.237009613 seconds)
    (135/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.239291036 seconds)
    (136/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.723780642 seconds)
    (137/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.234522501 seconds)
    (138/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.72107735 seconds)
    (139/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.242698055 seconds)
    (140/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.242022635 seconds)
    (141/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.252063474 seconds)
    (142/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.879763986 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.598328117 seconds)
    (144/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.241714742 seconds)
    (145/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.231127642 seconds)
    (146/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.234911424 seconds)
    (147/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.713220384 seconds)
    (148/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.470041755 seconds)
    (149/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.407879425 seconds)
    (150/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.237316519 seconds)
    (151/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.460015343 seconds)
    (152/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.502910147 seconds)
    (153/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.695686499 seconds)
    (154/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.233619577 seconds)
    (155/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.458726556 seconds)
    (156/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.89344994 seconds)
    (157/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.233201051 seconds)
    (158/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.612746533 seconds)
    (159/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.674725801 seconds)
    (160/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.514589406 seconds)
    (161/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.250548514 seconds)
    (162/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.615057437 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.235425078 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.521707927 seconds)
    (165/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.719860145 seconds)
    (166/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.238589036 seconds)
    (167/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.23359716 seconds)
    (168/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.623900837 seconds)
    (169/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.624888976 seconds)
    (170/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.422357299 seconds)
    (171/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 3.000568133 seconds)
    (172/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.792279277 seconds)
    (173/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 5.000356278 seconds)
    (174/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.80025795 seconds)
    (175/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.23528837 seconds)
    (176/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.232115802 seconds)
    (177/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.92998533 seconds)
    (178/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.245088374 seconds)
    (179/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.233263701 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.231581713 seconds)
    (181/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 6.92888773 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.710942599 seconds)
    (183/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.235967563 seconds)
    (184/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.672170944 seconds)
    (185/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.209293824 seconds)
    (186/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.746496037 seconds)
    (187/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.245960032 seconds)
    (188/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.755797578 seconds)
    (189/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.550757044 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.256295815 seconds)
    (191/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.23580989 seconds)
    (192/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.244035485 seconds)
    (193/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.581815943 seconds)
    (194/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.703965149 seconds)
    (195/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.233551954 seconds)
    (196/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.23067348 seconds)
    (197/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.722301794 seconds)
    (198/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.95976297 seconds)
    (199/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.764513634 seconds)
    (200/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.233128091 seconds)
    (201/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 4.982292373 seconds)
    (202/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.232133369 seconds)
    (203/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 7.231237915 seconds)
    (204/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.714624266 seconds)
    (205/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.237389903 seconds)
    (206/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.237625409 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.409700299 seconds)
    (208/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.762164945 seconds)
    (209/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.234499352 seconds)
    (210/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.231924557 seconds)
    (211/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.774245849 seconds)
    (212/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.892533349 seconds)
    (213/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.472716127 seconds)
    (214/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.727362867 seconds)
    (215/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.180382013 seconds)
    (216/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 7.224587114 seconds)
    (217/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.736619433 seconds)
    (218/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.237377945 seconds)
    (219/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.230322033 seconds)
    (220/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.777481484 seconds)
    (221/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.618897795 seconds)
    (222/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.24555963 seconds)
    (223/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.749578868 seconds)
    (224/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.242275139 seconds)
  done (took 1097.9517956 seconds)
  (5/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.784892084 seconds)
    (2/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.290387376 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.632107234 seconds)
    (4/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 3.075800246 seconds)
    (5/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 3.084014872 seconds)
    (6/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.316206094 seconds)
    (7/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 2.796097983 seconds)
    (8/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.382973885 seconds)
    (9/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.690405352 seconds)
    (10/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.57451714 seconds)
    (11/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.561456426 seconds)
    (12/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.259188716 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.149653439 seconds)
    (14/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.543417189 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.486135737 seconds)
    (16/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.429528493 seconds)
  done (took 85.289260092 seconds)
  (6/7) benchmarking "sparse solves"...
    (1/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.300857411 seconds)
    (2/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.309905934 seconds)
    (3/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.328643 seconds)
    (4/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.294805295 seconds)
    (5/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.306242508 seconds)
    (6/10) benchmarking "square system (default), vector rhs"...
    done (took 7.278272699 seconds)
    (7/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.301357211 seconds)
    (8/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.275758222 seconds)
    (9/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.270044532 seconds)
    (10/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.291928036 seconds)
  done (took 75.189424454 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 2.72155894 seconds)
    (2/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.311461127 seconds)
  done (took 12.263312476 seconds)
done (took 1577.539400587 seconds)
(8/22) benchmarking "scalar"...
  (1/25) benchmarking "fastmath"...
    (1/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.267226381 seconds)
    (2/49) benchmarking ("sub", "BigFloat")...
    done (took 2.623867091 seconds)
    (3/49) benchmarking ("div", "Int64")...
    done (took 2.342280887 seconds)
    (4/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.283341026 seconds)
    (5/49) benchmarking ("add", "Int64")...
    done (took 3.852642138 seconds)
    (6/49) benchmarking "13786"...
    done (took 2.265044344 seconds)
    (7/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.267081792 seconds)
    (8/49) benchmarking ("sub", "UInt64")...
    done (took 2.265675275 seconds)
    (9/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.731300188 seconds)
    (10/49) benchmarking ("mul", "BigFloat")...
    done (took 3.052589538 seconds)
    (11/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.387834276 seconds)
    (12/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.88544257 seconds)
    (13/49) benchmarking ("add", "BigFloat")...
    done (took 2.786172659 seconds)
    (14/49) benchmarking ("sub", "Float32")...
    done (took 2.33386057 seconds)
    (15/49) benchmarking ("div", "Float64")...
    done (took 2.266636686 seconds)
    (16/49) benchmarking ("div", "Float32")...
    done (took 2.266620332 seconds)
    (17/49) benchmarking ("sub", "BigInt")...
    done (took 2.721856644 seconds)
    (18/49) benchmarking ("sub", "Float64")...
    done (took 3.089108557 seconds)
    (19/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.289204952 seconds)
    (20/49) benchmarking ("mul", "Float64")...
    done (took 2.283356283 seconds)
    (21/49) benchmarking ("add", "ComplexF64")...
    done (took 2.267106884 seconds)
    (22/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.264651532 seconds)
    (23/49) benchmarking ("add", "ComplexF32")...
    done (took 2.270577776 seconds)
    (24/49) benchmarking ("div", "ComplexF64")...
    done (took 2.274431242 seconds)
    (25/49) benchmarking ("add", "BigInt")...
    done (took 2.736599037 seconds)
    (26/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.947812183 seconds)
    (27/49) benchmarking ("div", "BigFloat")...
    done (took 4.648798401 seconds)
    (28/49) benchmarking ("add", "Float64")...
    done (took 2.284002731 seconds)
    (29/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.750592591 seconds)
    (30/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.270370297 seconds)
    (31/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.266426514 seconds)
    (32/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.266866182 seconds)
    (33/49) benchmarking ("mul", "Int64")...
    done (took 2.265073663 seconds)
    (34/49) benchmarking ("sub", "Int64")...
    done (took 2.265445567 seconds)
    (35/49) benchmarking ("mul", "BigInt")...
    done (took 3.004030097 seconds)
    (36/49) benchmarking ("mul", "Float32")...
    done (took 3.078391613 seconds)
    (37/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.324535747 seconds)
    (38/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.263498365 seconds)
    (39/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.272540151 seconds)
    (40/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 3.163840022 seconds)
    (41/49) benchmarking ("div", "UInt64")...
    done (took 2.285760621 seconds)
    (42/49) benchmarking ("div", "ComplexF32")...
    done (took 2.270668189 seconds)
    (43/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.266555051 seconds)
    (44/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.268553699 seconds)
    (45/49) benchmarking ("mul", "UInt64")...
    done (took 2.26682224 seconds)
    (46/49) benchmarking ("add", "Float32")...
    done (took 2.26543443 seconds)
    (47/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.207578107 seconds)
    (48/49) benchmarking ("div", "BigInt")...
    done (took 4.714301571 seconds)
    (49/49) benchmarking ("add", "UInt64")...
    done (took 2.30874435 seconds)
  done (took 135.232616585 seconds)
  (2/25) benchmarking "atan2"...
    (1/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.290104352 seconds)
    (2/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.290770101 seconds)
    (3/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.369874151 seconds)
    (4/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.424873171 seconds)
    (5/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.29248717 seconds)
    (6/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.281426334 seconds)
    (7/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.29043992 seconds)
    (8/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.418460072 seconds)
    (9/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.292164858 seconds)
    (10/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.288884013 seconds)
    (11/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.35247352 seconds)
    (12/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.291718817 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.385990715 seconds)
    (14/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.284813131 seconds)
    (15/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.290166168 seconds)
    (16/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.429525111 seconds)
    (17/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.289009782 seconds)
    (18/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.284513819 seconds)
    (19/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.288685563 seconds)
    (20/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.29104019 seconds)
    (21/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.367614501 seconds)
    (22/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.289939322 seconds)
    (23/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.289245198 seconds)
    (24/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.29365 seconds)
    (25/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.289223708 seconds)
    (26/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.288232801 seconds)
    (27/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.363689362 seconds)
    (28/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.295018943 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.36841493 seconds)
    (30/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.281365191 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.289932275 seconds)
    (32/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.287207245 seconds)
    (33/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.281248595 seconds)
    (34/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.300275623 seconds)
    (35/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.297490801 seconds)
    (36/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.295712823 seconds)
    (37/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.276698616 seconds)
    (38/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.421195649 seconds)
    (39/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.289374309 seconds)
    (40/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.355500992 seconds)
    (41/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.416739803 seconds)
    (42/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.281529444 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.288862293 seconds)
    (44/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.291148289 seconds)
    (45/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.2881835 seconds)
    (46/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.281365808 seconds)
    (47/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.300628037 seconds)
    (48/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.279250463 seconds)
    (49/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.289303603 seconds)
    (50/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.353589064 seconds)
    (51/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.292059573 seconds)
    (52/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.352951975 seconds)
    (53/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.278265607 seconds)
    (54/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.418985465 seconds)
    (55/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.288487266 seconds)
    (56/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.289807248 seconds)
    (57/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.359064691 seconds)
    (58/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.296603651 seconds)
    (59/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.42232439 seconds)
    (60/68) benchmarking ("x one", "Float64")...
    done (took 2.376570449 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.281492693 seconds)
    (62/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.364024449 seconds)
    (63/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.288434939 seconds)
    (64/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.416198294 seconds)
    (65/68) benchmarking ("x one", "Float32")...
    done (took 2.29678541 seconds)
    (66/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.290563356 seconds)
    (67/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.285457934 seconds)
    (68/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.29601487 seconds)
  done (took 159.84550804 seconds)
  (3/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.315838271 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.319366622 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.313437797 seconds)
    (4/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.311669734 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.52416045 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.316590153 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.518619757 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.374692368 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.316184143 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.313548819 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.520090495 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.313192686 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.371610872 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.312594029 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.313212758 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.368001541 seconds)
    (17/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.526230385 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.313418998 seconds)
    (19/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.369970171 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.313686287 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.3194289 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.304083119 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.320026007 seconds)
    (24/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.517643232 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.312812 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.314233983 seconds)
    (27/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.29626065 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.312091646 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.313169107 seconds)
    (30/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.30057323 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.370597849 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.322370506 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.314184845 seconds)
    (34/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.305653055 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.307062645 seconds)
    (36/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.515305592 seconds)
    (37/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.521209846 seconds)
    (38/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.289626339 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.304160123 seconds)
    (40/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.287801176 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.371640804 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.314344526 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.313723508 seconds)
    (44/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.296020801 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.373256574 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.371376264 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.313877282 seconds)
    (48/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.371515834 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.313671592 seconds)
    (50/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.315765056 seconds)
    (51/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.371503506 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.318133513 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.33393786 seconds)
    (54/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.317117834 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.305932641 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.509745056 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.371131396 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.317102876 seconds)
    (59/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.295910862 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.369647089 seconds)
    (61/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.317460834 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.369083796 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.377248918 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.317377656 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.314526387 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.335169978 seconds)
  done (took 157.324418228 seconds)
  (4/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.241730687 seconds)
    (2/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.242639966 seconds)
    (3/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.259451034 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.258506017 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.245161586 seconds)
    (6/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.256978145 seconds)
  done (took 15.736965928 seconds)
  (5/25) benchmarking "atanh"...
    (1/16) benchmarking ("zero", "Float64")...
    done (took 2.306910692 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.374602272 seconds)
    (3/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.382864724 seconds)
    (4/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.36952092 seconds)
    (5/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.378994258 seconds)
    (6/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.092279995 seconds)
    (7/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.368981037 seconds)
    (8/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.095101807 seconds)
    (9/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.09178259 seconds)
    (10/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.417254571 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.380438725 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.416917903 seconds)
    (13/16) benchmarking ("one", "Float32")...
    done (took 2.302872994 seconds)
    (14/16) benchmarking ("zero", "Float32")...
    done (took 2.304916295 seconds)
    (15/16) benchmarking ("one", "Float64")...
    done (took 2.300500244 seconds)
    (16/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.092775781 seconds)
  done (took 42.923124469 seconds)
  (6/25) benchmarking "acos"...
    (1/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.321802611 seconds)
    (2/18) benchmarking ("zero", "Float64")...
    done (took 2.300533087 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.289437892 seconds)
    (4/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.13070822 seconds)
    (5/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.290064576 seconds)
    (6/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.292124046 seconds)
    (7/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.321656689 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.144118417 seconds)
    (9/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.354727199 seconds)
    (10/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.307589845 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.295362868 seconds)
    (12/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.296879307 seconds)
    (13/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.293607579 seconds)
    (14/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.296630896 seconds)
    (15/18) benchmarking ("zero", "Float32")...
    done (took 2.288729196 seconds)
    (16/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.289551171 seconds)
    (17/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.290999252 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.287726355 seconds)
  done (took 45.326696379 seconds)
  (7/25) benchmarking "asinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.37312214 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.294494615 seconds)
    (3/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.423155899 seconds)
    (4/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.471778849 seconds)
    (5/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.308691116 seconds)
    (6/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.373835837 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.283292215 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.462740224 seconds)
    (9/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.471940787 seconds)
    (10/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.463217142 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.414372739 seconds)
    (12/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.423485178 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.295881273 seconds)
    (14/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.414927216 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.35694293 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.282549988 seconds)
    (17/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.358236423 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.352010087 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.283162539 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.351505984 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.294459378 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.309215852 seconds)
  done (took 54.295782002 seconds)
  (8/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.290413323 seconds)
    (2/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.304298036 seconds)
    (3/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.527541144 seconds)
    (4/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.306404227 seconds)
    (5/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.521267786 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.304014027 seconds)
    (7/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.511818161 seconds)
    (8/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.372047269 seconds)
    (9/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.304526917 seconds)
    (10/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.307058446 seconds)
    (11/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.528242577 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.317424165 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.317900522 seconds)
    (14/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.308509041 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.308873395 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.307536053 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.323978937 seconds)
    (18/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.529825733 seconds)
    (19/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.304115173 seconds)
    (20/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.379064899 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.305361279 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.374597084 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.30549315 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.315857052 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.528464836 seconds)
    (26/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.317570284 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.339337702 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.513659391 seconds)
    (29/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.287145766 seconds)
    (30/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.29153258 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.307612949 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.305819776 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.30593831 seconds)
    (34/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.316454035 seconds)
    (35/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.317785386 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.305013723 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.31632832 seconds)
    (38/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.369925765 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.304671362 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.304140221 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.304887083 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.304751226 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.336550865 seconds)
    (44/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.307270576 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.37401585 seconds)
    (46/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.375964717 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.317113094 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.290875467 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.317319918 seconds)
    (50/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.299499081 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.316641897 seconds)
    (52/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.306883279 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.532998906 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.3053531 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.317263433 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.306906504 seconds)
    (57/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.374131273 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.314028746 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.31366446 seconds)
    (60/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.305751479 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.30640274 seconds)
    (62/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.370444539 seconds)
    (63/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.298992023 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.317197919 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.306294806 seconds)
    (66/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.333221154 seconds)
  done (took 156.896585548 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("zero", "Float64")...
    done (took 2.328222116 seconds)
    (2/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.308808979 seconds)
    (3/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.314150875 seconds)
    (4/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.313556794 seconds)
    (5/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.309031666 seconds)
    (6/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.294980579 seconds)
    (7/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.308834764 seconds)
    (8/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.29571272 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.770937145 seconds)
    (10/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.311368503 seconds)
    (11/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.294952894 seconds)
    (12/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.232249721 seconds)
    (13/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.284155183 seconds)
    (14/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.311478348 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.76983097 seconds)
    (16/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.328902484 seconds)
    (17/30) benchmarking ("one", "Float32")...
    done (took 2.309766877 seconds)
    (18/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.280579544 seconds)
    (19/30) benchmarking ("zero", "Float32")...
    done (took 2.308165983 seconds)
    (20/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.2797262 seconds)
    (21/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.312723756 seconds)
    (22/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.281151805 seconds)
    (23/30) benchmarking ("one", "Float64")...
    done (took 2.311900199 seconds)
    (24/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.310984694 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.23225251 seconds)
    (26/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.309132073 seconds)
    (27/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.294847016 seconds)
    (28/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.309794175 seconds)
    (29/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.281251869 seconds)
    (30/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.309309304 seconds)
  done (took 88.142170919 seconds)
  (10/25) benchmarking "cosh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.285733524 seconds)
    (2/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.336274124 seconds)
    (3/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.340264486 seconds)
    (4/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.338815717 seconds)
    (5/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.338981566 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.284211476 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.283558797 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.340657356 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.287781406 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.338930666 seconds)
    (11/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.340437179 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.289711165 seconds)
    (13/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.340028487 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.287292153 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.323717661 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.324214211 seconds)
    (17/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.284996723 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.298059207 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.28298724 seconds)
    (20/22) benchmarking ("zero", "Float32")...
    done (took 2.284384763 seconds)
    (21/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.296632949 seconds)
    (22/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.286536283 seconds)
  done (took 53.04789337 seconds)
  (11/25) benchmarking "cbrt"...
    (1/20) benchmarking ("zero", "Float64")...
    done (took 2.286414429 seconds)
    (2/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.385411428 seconds)
    (3/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.384617202 seconds)
    (4/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.20003022 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.385484343 seconds)
    (6/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.449210051 seconds)
    (7/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.286124823 seconds)
    (8/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.372319642 seconds)
    (9/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.19930682 seconds)
    (10/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.372003484 seconds)
    (11/20) benchmarking ("one", "Float32")...
    done (took 2.355883441 seconds)
    (12/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.285341435 seconds)
    (13/20) benchmarking ("zero", "Float32")...
    done (took 2.281211316 seconds)
    (14/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.3561842 seconds)
    (15/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.354935021 seconds)
    (16/20) benchmarking ("one", "Float64")...
    done (took 2.3706636 seconds)
    (17/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.447726037 seconds)
    (18/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.358399278 seconds)
    (19/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.38531401 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.355224948 seconds)
  done (took 53.106208799 seconds)
  (12/25) benchmarking "sinh"...
    (1/22) benchmarking ("zero", "Float64")...
    done (took 2.319641046 seconds)
    (2/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.35059154 seconds)
    (3/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.350934992 seconds)
    (4/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.337446433 seconds)
    (5/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.337507332 seconds)
    (6/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.681383715 seconds)
    (7/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.292865334 seconds)
    (8/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.350646903 seconds)
    (9/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.292218198 seconds)
    (10/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.337435999 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.8415358 seconds)
    (12/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.350130316 seconds)
    (13/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.327234773 seconds)
    (14/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.328298011 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.682554446 seconds)
    (16/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.337036738 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.319805743 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.298201643 seconds)
    (19/22) benchmarking ("zero", "Float32")...
    done (took 2.295794969 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.297990551 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.842717931 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.320480261 seconds)
  done (took 55.124929404 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.292780096 seconds)
    (2/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.292740616 seconds)
    (3/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.293071938 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.495710139 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.299060893 seconds)
    (6/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.293715502 seconds)
    (7/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.299024419 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.298890507 seconds)
    (9/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.294206485 seconds)
    (10/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.293694862 seconds)
    (11/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.344771223 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.336739984 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.327519284 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.31067205 seconds)
    (15/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.298962098 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.48975776 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.319828776 seconds)
    (18/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.293495605 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.319282934 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.299021531 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.307374529 seconds)
  done (took 51.033998877 seconds)
  (14/25) benchmarking "predicate"...
    (1/72) benchmarking ("isinf", "Float32")...
    done (took 2.268073748 seconds)
    (2/72) benchmarking ("isinteger", "Float64")...
    done (took 2.267215262 seconds)
    (3/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.317422404 seconds)
    (4/72) benchmarking ("iseven", "BigInt")...
    done (took 2.285526856 seconds)
    (5/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.254882965 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.265276363 seconds)
    (7/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.254606213 seconds)
    (8/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.335011448 seconds)
    (9/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.254851137 seconds)
    (10/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.270876687 seconds)
    (11/72) benchmarking ("isnan", "Float64")...
    done (took 2.268711023 seconds)
    (12/72) benchmarking ("isnan", "Float32")...
    done (took 2.332406186 seconds)
    (13/72) benchmarking ("isequal", "Float32")...
    done (took 2.438793695 seconds)
    (14/72) benchmarking ("isless", "BigFloat")...
    done (took 2.533283409 seconds)
    (15/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.37321461 seconds)
    (16/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.271791139 seconds)
    (17/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.271724708 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.446355345 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.331613072 seconds)
    (20/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.340584418 seconds)
    (21/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.338341595 seconds)
    (22/72) benchmarking ("isinf", "Int64")...
    done (took 2.321088227 seconds)
    (23/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.267493588 seconds)
    (24/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.271492348 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.273095825 seconds)
    (26/72) benchmarking ("isequal", "BigInt")...
    done (took 2.300262272 seconds)
    (27/72) benchmarking ("isless", "Float64")...
    done (took 2.272350862 seconds)
    (28/72) benchmarking ("isfinite", "Int64")...
    done (took 2.253580429 seconds)
    (29/72) benchmarking ("isnan", "BigInt")...
    done (took 2.254330211 seconds)
    (30/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.267373353 seconds)
    (31/72) benchmarking ("isodd", "Int64")...
    done (took 2.269308699 seconds)
    (32/72) benchmarking ("isinteger", "Float32")...
    done (took 2.267166502 seconds)
    (33/72) benchmarking ("isless", "Float32")...
    done (took 2.27189453 seconds)
    (34/72) benchmarking ("isequal", "Int64")...
    done (took 2.26772954 seconds)
    (35/72) benchmarking ("isequal", "Float64")...
    done (took 2.270278251 seconds)
    (36/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.430035088 seconds)
    (37/72) benchmarking ("isless", "BigInt")...
    done (took 2.299579682 seconds)
    (38/72) benchmarking ("isnan", "UInt64")...
    done (took 2.254753269 seconds)
    (39/72) benchmarking ("isinf", "BigInt")...
    done (took 2.253781637 seconds)
    (40/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.27184438 seconds)
    (41/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.269131737 seconds)
    (42/72) benchmarking ("isodd", "BigInt")...
    done (took 2.282563545 seconds)
    (43/72) benchmarking ("isfinite", "Float64")...
    done (took 2.265483088 seconds)
    (44/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.254732975 seconds)
    (45/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.267166364 seconds)
    (46/72) benchmarking ("iseven", "UInt64")...
    done (took 2.267255006 seconds)
    (47/72) benchmarking ("isinf", "Float64")...
    done (took 2.272378667 seconds)
    (48/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.254749614 seconds)
    (49/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.254486575 seconds)
    (50/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.26719683 seconds)
    (51/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.255734666 seconds)
    (52/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.267532695 seconds)
    (53/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.25469406 seconds)
    (54/72) benchmarking ("isfinite", "Float32")...
    done (took 2.264364143 seconds)
    (55/72) benchmarking ("isless", "UInt64")...
    done (took 2.270690491 seconds)
    (56/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.255511002 seconds)
    (57/72) benchmarking ("isinf", "UInt64")...
    done (took 2.255968642 seconds)
    (58/72) benchmarking ("iseven", "Int64")...
    done (took 2.268131799 seconds)
    (59/72) benchmarking ("isinteger", "Int64")...
    done (took 2.254516668 seconds)
    (60/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.271571735 seconds)
    (61/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.25433674 seconds)
    (62/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.254687853 seconds)
    (63/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.271101463 seconds)
    (64/72) benchmarking ("isnan", "Int64")...
    done (took 2.25581658 seconds)
    (65/72) benchmarking ("isless", "Int64")...
    done (took 2.270348321 seconds)
    (66/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.253999156 seconds)
    (67/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.266873032 seconds)
    (68/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.267667364 seconds)
    (69/72) benchmarking ("isequal", "UInt64")...
    done (took 2.26794953 seconds)
    (70/72) benchmarking ("isodd", "UInt64")...
    done (took 2.269524726 seconds)
    (71/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.349770792 seconds)
    (72/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.271515561 seconds)
  done (took 166.825558145 seconds)
  (15/25) benchmarking "sincos"...
    (1/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.368619791 seconds)
    (2/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.337043275 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.425761828 seconds)
    (4/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.580633024 seconds)
    (5/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.426202386 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.368636207 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.36938231 seconds)
    (8/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.339021966 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.366679764 seconds)
    (10/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.425796824 seconds)
    (11/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.427056698 seconds)
    (12/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.366708442 seconds)
    (13/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.425428933 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.365177876 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.366795805 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.366313934 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.366661941 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.366236849 seconds)
    (19/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.426023962 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.365094846 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.332699245 seconds)
    (22/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.366595608 seconds)
    (23/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.581726194 seconds)
    (24/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.366928869 seconds)
    (25/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.33815083 seconds)
    (26/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.4271771 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.384009681 seconds)
    (28/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.323427084 seconds)
    (29/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.366385904 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.367054041 seconds)
    (31/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.425520275 seconds)
    (32/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.32418222 seconds)
    (33/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.340816034 seconds)
    (34/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.367324433 seconds)
    (35/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.367790879 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.334095401 seconds)
    (37/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.369518473 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.366944791 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.370807433 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.370953693 seconds)
    (41/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.341053561 seconds)
    (42/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.366496736 seconds)
    (43/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.345349299 seconds)
    (44/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.424103463 seconds)
    (45/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.582413167 seconds)
    (46/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.42960379 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.422595863 seconds)
    (48/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.368457794 seconds)
    (49/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.366812477 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.384840485 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.367121795 seconds)
    (52/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.340890062 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.36764573 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.367053036 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.435380325 seconds)
    (56/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.424212358 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.427478936 seconds)
    (58/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.58047867 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.369326041 seconds)
    (60/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.367343512 seconds)
    (61/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.36963102 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.368020249 seconds)
  done (took 150.392216075 seconds)
  (16/25) benchmarking "tan"...
    (1/18) benchmarking ("zero", "Float64")...
    done (took 2.284277498 seconds)
    (2/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.138512691 seconds)
    (3/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.26739809 seconds)
    (4/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.289231118 seconds)
    (5/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.15094857 seconds)
    (6/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.288529971 seconds)
    (7/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.12562968 seconds)
    (8/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.284627148 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.2864444 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.284262485 seconds)
    (11/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.151058804 seconds)
    (12/18) benchmarking ("zero", "Float32")...
    done (took 2.286359526 seconds)
    (13/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.117882142 seconds)
    (14/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.142561361 seconds)
    (15/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.283763057 seconds)
    (16/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.286022103 seconds)
    (17/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.129991237 seconds)
    (18/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.285290478 seconds)
  done (took 50.316133432 seconds)
  (17/25) benchmarking "exp2"...
    (1/24) benchmarking ("zero", "Float64")...
    done (took 2.29805132 seconds)
    (2/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.301967184 seconds)
    (3/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.299358255 seconds)
    (4/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.101572505 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.302313581 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.282646335 seconds)
    (7/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.622131047 seconds)
    (8/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.299463482 seconds)
    (9/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.103974483 seconds)
    (10/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.299188048 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.302757743 seconds)
    (12/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.301298967 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 2.306093695 seconds)
    (14/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.242217479 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.242198862 seconds)
    (16/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.241458211 seconds)
    (17/24) benchmarking ("one", "Float64")...
    done (took 2.298831935 seconds)
    (18/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.24244676 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.621064291 seconds)
    (20/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.301457995 seconds)
    (21/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.295868286 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.297992164 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.283409816 seconds)
    (24/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.29393023 seconds)
  done (took 67.415698935 seconds)
  (18/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.291628126 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.289409636 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.293718696 seconds)
    (4/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.294248584 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.288912422 seconds)
    (6/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.315556901 seconds)
    (7/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.29340845 seconds)
    (8/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.312349907 seconds)
    (9/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.473821394 seconds)
    (10/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.284440256 seconds)
    (11/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.317168785 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.297829813 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.317863731 seconds)
    (14/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.320540162 seconds)
    (15/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.31696012 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.319723225 seconds)
    (17/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.47852977 seconds)
    (18/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.299905485 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.291154192 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.291105619 seconds)
    (21/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.296526532 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.29103785 seconds)
    (23/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.289043566 seconds)
    (24/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.316766003 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.290963356 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.291448782 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.291045299 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.2913559 seconds)
  done (took 66.976851541 seconds)
  (19/25) benchmarking "atan"...
    (1/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.311256997 seconds)
    (2/30) benchmarking ("zero", "Float64")...
    done (took 2.290853991 seconds)
    (3/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.316818807 seconds)
    (4/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.364981242 seconds)
    (5/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.36303275 seconds)
    (6/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.317682985 seconds)
    (7/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.288169749 seconds)
    (8/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.308049991 seconds)
    (9/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.28556727 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.307075279 seconds)
    (11/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.365820035 seconds)
    (12/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.3670495 seconds)
    (13/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.355612327 seconds)
    (14/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.310791886 seconds)
    (15/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.286730613 seconds)
    (16/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.291149239 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.32194592 seconds)
    (18/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.289675543 seconds)
    (19/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.28891243 seconds)
    (20/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.287323347 seconds)
    (21/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.322116992 seconds)
    (22/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.290315084 seconds)
    (23/30) benchmarking ("zero", "Float32")...
    done (took 2.286205731 seconds)
    (24/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.368148425 seconds)
    (25/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.285322261 seconds)
    (26/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.291123849 seconds)
    (27/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.355193611 seconds)
    (28/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.31621994 seconds)
    (29/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.364245298 seconds)
    (30/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.317882005 seconds)
  done (took 71.748665071 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.271104616 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.308830309 seconds)
    (3/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.276036719 seconds)
    (4/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.288264899 seconds)
    (5/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.309895273 seconds)
    (6/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.286378157 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.289016308 seconds)
    (8/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.301800955 seconds)
    (9/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.277699504 seconds)
    (10/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.284636485 seconds)
    (11/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.662344505 seconds)
    (12/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.282621534 seconds)
    (13/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.298157889 seconds)
    (14/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.307996614 seconds)
    (15/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.282233059 seconds)
    (16/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.278756455 seconds)
    (17/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.296609495 seconds)
    (18/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.27521786 seconds)
    (19/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.271584143 seconds)
    (20/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.755646066 seconds)
    (21/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.289149416 seconds)
    (22/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.303533775 seconds)
    (23/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.297081447 seconds)
    (24/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.282585492 seconds)
    (25/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.288412704 seconds)
    (26/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.275815004 seconds)
    (27/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.298392439 seconds)
    (28/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.302373548 seconds)
    (29/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.301898472 seconds)
    (30/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.648111624 seconds)
    (31/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.308913631 seconds)
    (32/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.285420349 seconds)
    (33/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.27825176 seconds)
    (34/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.273803031 seconds)
    (35/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.289673389 seconds)
    (36/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.30949776 seconds)
    (37/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.639502867 seconds)
    (38/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.754473347 seconds)
    (39/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.302367654 seconds)
    (40/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.283360345 seconds)
    (41/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.27495897 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.308200327 seconds)
    (43/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.27177528 seconds)
    (44/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.296849816 seconds)
    (45/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.274947155 seconds)
    (46/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.275954637 seconds)
    (47/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.270902639 seconds)
    (48/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.270113984 seconds)
    (49/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.30126945 seconds)
    (50/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.301404916 seconds)
    (51/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.272249267 seconds)
    (52/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.308205083 seconds)
    (53/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.312571806 seconds)
    (54/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.27694694 seconds)
    (55/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.640954539 seconds)
  done (took 130.508928463 seconds)
  (21/25) benchmarking "asin"...
    (1/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.309471466 seconds)
    (2/20) benchmarking ("zero", "Float64")...
    done (took 2.295756337 seconds)
    (3/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.293913404 seconds)
    (4/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.289537852 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.287844575 seconds)
    (6/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.309864247 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.302725914 seconds)
    (8/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.35154142 seconds)
    (9/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.339322895 seconds)
    (10/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.286878748 seconds)
    (11/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.296449595 seconds)
    (12/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.339676575 seconds)
    (13/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.285874843 seconds)
    (14/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.158299289 seconds)
    (15/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.29647434 seconds)
    (16/20) benchmarking ("zero", "Float32")...
    done (took 2.287880921 seconds)
    (17/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.292744425 seconds)
    (18/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.159409744 seconds)
    (19/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.28798354 seconds)
    (20/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.288674601 seconds)
  done (took 49.992479742 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.304389069 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.3050977 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.290645978 seconds)
    (4/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.305189395 seconds)
    (5/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.340623617 seconds)
    (6/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.291227374 seconds)
    (7/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.697022341 seconds)
    (8/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.345400689 seconds)
    (9/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.346056123 seconds)
    (10/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.346598166 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.76225007 seconds)
    (12/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.280603537 seconds)
    (13/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.281252196 seconds)
    (14/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.697085825 seconds)
    (15/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.305591222 seconds)
    (16/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.277223429 seconds)
    (17/22) benchmarking ("zero", "Float32")...
    done (took 2.290296168 seconds)
    (18/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.289890022 seconds)
    (19/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.290421293 seconds)
    (20/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.277943052 seconds)
    (21/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.7611543 seconds)
    (22/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.305138436 seconds)
  done (took 54.624566639 seconds)
  (23/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float32")...
    done (took 2.28498907 seconds)
    (2/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.465925378 seconds)
    (3/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.395671739 seconds)
    (4/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.411716195 seconds)
    (5/8) benchmarking ("one", "Float64")...
    done (took 2.285397878 seconds)
    (6/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.3472333 seconds)
    (7/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.349076305 seconds)
    (8/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.419983344 seconds)
  done (took 21.193768341 seconds)
  (24/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.267715861 seconds)
    (2/2) benchmarking "in"...
    done (took 2.265491375 seconds)
  done (took 6.766485877 seconds)
  (25/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 3.593286095 seconds)
    (2/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.397835179 seconds)
    (3/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.271932441 seconds)
    (4/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.378943796 seconds)
    (5/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 5.317719079 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.960978836 seconds)
    (7/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.304355141 seconds)
    (8/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.068483432 seconds)
    (9/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.284178479 seconds)
    (10/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.284718268 seconds)
    (11/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.277760743 seconds)
    (12/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.937043209 seconds)
    (13/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.372344944 seconds)
    (14/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 3.823575505 seconds)
    (15/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.32448035 seconds)
    (16/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.282029769 seconds)
    (17/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.453322667 seconds)
    (18/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.338544845 seconds)
    (19/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.530239767 seconds)
    (20/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.698060076 seconds)
    (21/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.677794133 seconds)
    (22/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.456802812 seconds)
    (23/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.279715892 seconds)
    (24/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.704823778 seconds)
    (25/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.935697612 seconds)
    (26/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.423386422 seconds)
    (27/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.497656862 seconds)
    (28/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.269535561 seconds)
    (29/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.359522855 seconds)
    (30/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 3.819827856 seconds)
    (31/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.134572688 seconds)
    (32/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.170730211 seconds)
    (33/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 3.657584888 seconds)
    (34/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.64058115 seconds)
    (35/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.339064969 seconds)
    (36/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.71872741 seconds)
    (37/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.339290445 seconds)
    (38/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.288567932 seconds)
    (39/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.620900103 seconds)
    (40/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.961375339 seconds)
    (41/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 3.552885335 seconds)
    (42/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 3.098458446 seconds)
    (43/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.579270512 seconds)
    (44/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.382797724 seconds)
    (45/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.314649574 seconds)
    (46/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.160873155 seconds)
    (47/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 3.878505024 seconds)
    (48/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.270679765 seconds)
    (49/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.271456781 seconds)
    (50/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.336677527 seconds)
    (51/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.249211747 seconds)
    (52/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.836622546 seconds)
    (53/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.535509658 seconds)
    (54/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.333518681 seconds)
    (55/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.742095731 seconds)
    (56/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 3.101398285 seconds)
    (57/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.279382958 seconds)
    (58/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 3.826817369 seconds)
    (59/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 3.531925312 seconds)
    (60/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 3.12602363 seconds)
    (61/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 3.025332398 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 3.162678021 seconds)
    (63/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.163963937 seconds)
    (64/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 3.095542467 seconds)
    (65/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 3.87332783 seconds)
    (66/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 4.496489206 seconds)
    (67/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.270563573 seconds)
    (68/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.272433944 seconds)
    (69/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.265176654 seconds)
    (70/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.272261603 seconds)
    (71/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.138615828 seconds)
    (72/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 5.185589111 seconds)
    (73/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.236745409 seconds)
    (74/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 5.210974689 seconds)
    (75/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 3.097134485 seconds)
    (76/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.492695114 seconds)
    (77/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 5.367916954 seconds)
    (78/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.331855705 seconds)
    (79/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.957900632 seconds)
    (80/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.427064289 seconds)
    (81/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.21543233 seconds)
    (82/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.855667864 seconds)
    (83/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.349372525 seconds)
    (84/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 3.956882842 seconds)
    (85/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.249787112 seconds)
    (86/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.595042958 seconds)
    (87/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.522075757 seconds)
    (88/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.384287258 seconds)
    (89/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.271105086 seconds)
    (90/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.274659065 seconds)
    (91/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.008313874 seconds)
    (92/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.425249174 seconds)
    (93/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 3.055279299 seconds)
    (94/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.029718052 seconds)
    (95/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.910582593 seconds)
    (96/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.75816855 seconds)
    (97/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.458567553 seconds)
    (98/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.279608063 seconds)
    (99/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.278838216 seconds)
    (100/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.694995672 seconds)
    (101/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 3.103345281 seconds)
    (102/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.982324554 seconds)
    (103/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.554361658 seconds)
    (104/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.3848006 seconds)
    (105/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.271172342 seconds)
    (106/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.393182291 seconds)
    (107/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.968139082 seconds)
    (108/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 4.486760706 seconds)
    (109/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.559171108 seconds)
    (110/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.861710984 seconds)
    (111/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.832024317 seconds)
    (112/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.412826429 seconds)
    (113/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.420692558 seconds)
    (114/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.232962988 seconds)
    (115/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 4.822621176 seconds)
    (116/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 4.968039475 seconds)
    (117/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.887186445 seconds)
    (118/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.441685331 seconds)
    (119/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.274760411 seconds)
    (120/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.69892967 seconds)
    (121/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.370308557 seconds)
    (122/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.271527646 seconds)
    (123/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.277373589 seconds)
    (124/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.271705286 seconds)
    (125/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.180154268 seconds)
    (126/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.410556641 seconds)
    (127/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.154120476 seconds)
    (128/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.306688633 seconds)
    (129/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.246997407 seconds)
    (130/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.551234949 seconds)
    (131/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.483727608 seconds)
    (132/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.414407063 seconds)
    (133/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.401167102 seconds)
    (134/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.278341877 seconds)
    (135/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.278627838 seconds)
    (136/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.278751051 seconds)
    (137/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.99130329 seconds)
    (138/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 3.201030712 seconds)
    (139/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.320249456 seconds)
    (140/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.278809557 seconds)
    (141/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.742515571 seconds)
    (142/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.957774047 seconds)
    (143/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.424528754 seconds)
    (144/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.75990207 seconds)
    (145/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.006550934 seconds)
    (146/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.87683394 seconds)
    (147/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.317277656 seconds)
    (148/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.131495742 seconds)
    (149/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.086586271 seconds)
    (150/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.411163789 seconds)
    (151/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.308342784 seconds)
    (152/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.665486834 seconds)
    (153/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.404362025 seconds)
    (154/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.281221268 seconds)
    (155/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.288398822 seconds)
    (156/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.831919872 seconds)
    (157/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.452696254 seconds)
    (158/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.347792955 seconds)
    (159/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.278660231 seconds)
    (160/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.178830877 seconds)
    (161/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.341004152 seconds)
    (162/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.278945644 seconds)
    (163/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.573035546 seconds)
    (164/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.933291224 seconds)
    (165/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.723023002 seconds)
    (166/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 3.111737601 seconds)
    (167/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 3.751678154 seconds)
    (168/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.416540358 seconds)
    (169/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.387024904 seconds)
    (170/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.280462091 seconds)
    (171/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.579074901 seconds)
    (172/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.418818904 seconds)
    (173/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.279436627 seconds)
    (174/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.276932145 seconds)
    (175/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.279854228 seconds)
    (176/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.318434751 seconds)
    (177/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.579002123 seconds)
    (178/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.426366556 seconds)
    (179/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.280398729 seconds)
    (180/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.196950435 seconds)
    (181/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.410748466 seconds)
    (182/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 3.003292426 seconds)
    (183/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.090784675 seconds)
    (184/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.975807371 seconds)
    (185/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 3.095150716 seconds)
    (186/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.974425849 seconds)
    (187/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.229624015 seconds)
    (188/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 5.214941201 seconds)
    (189/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.441300806 seconds)
    (190/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.406915866 seconds)
    (191/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 3.8169923 seconds)
    (192/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.286276099 seconds)
    (193/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.279973194 seconds)
    (194/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.975242132 seconds)
    (195/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.421187372 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.620222607 seconds)
    (197/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.344384795 seconds)
    (198/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.182119905 seconds)
    (199/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.202430855 seconds)
    (200/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.294116332 seconds)
    (201/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.556216906 seconds)
    (202/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 3.122097062 seconds)
    (203/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.747391654 seconds)
    (204/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.856707425 seconds)
    (205/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.337088987 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.151906208 seconds)
    (207/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.301908109 seconds)
    (208/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 3.040595602 seconds)
    (209/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.406705899 seconds)
    (210/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.965377223 seconds)
    (211/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.447278624 seconds)
    (212/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.664663851 seconds)
    (213/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 3.047403173 seconds)
    (214/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 3.102199265 seconds)
    (215/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.271162077 seconds)
    (216/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.274667623 seconds)
    (217/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.456016117 seconds)
    (218/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.336730196 seconds)
    (219/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.158146639 seconds)
    (220/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.632654999 seconds)
    (221/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.432930095 seconds)
    (222/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.675686623 seconds)
    (223/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.751885337 seconds)
    (224/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.728696821 seconds)
    (225/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.424845701 seconds)
    (226/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.271059381 seconds)
    (227/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.059659071 seconds)
    (228/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.647872466 seconds)
    (229/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.246055902 seconds)
    (230/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 4.031060012 seconds)
    (231/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 3.770620351 seconds)
    (232/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.400017195 seconds)
    (233/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.328411531 seconds)
    (234/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.291533226 seconds)
    (235/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.608479694 seconds)
    (236/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 3.924979419 seconds)
    (237/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 3.235927252 seconds)
    (238/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.42142119 seconds)
    (239/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.314833637 seconds)
    (240/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.292963219 seconds)
    (241/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.118755399 seconds)
    (242/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.334564955 seconds)
    (243/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.277297665 seconds)
    (244/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.154154585 seconds)
    (245/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 3.880575977 seconds)
    (246/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.842809356 seconds)
    (247/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.523674371 seconds)
    (248/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 4.6795331 seconds)
    (249/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.742948253 seconds)
    (250/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.549702375 seconds)
    (251/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.403029922 seconds)
    (252/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.386730653 seconds)
    (253/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.941319819 seconds)
    (254/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.418699706 seconds)
    (255/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.890538778 seconds)
    (256/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.635083737 seconds)
    (257/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 3.893655552 seconds)
    (258/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.283516703 seconds)
    (259/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.149074369 seconds)
    (260/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.643524595 seconds)
    (261/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.524247249 seconds)
    (262/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.29235562 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.280117643 seconds)
    (264/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.024574589 seconds)
    (265/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 3.123240866 seconds)
    (266/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.1654591 seconds)
    (267/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 3.838882801 seconds)
    (268/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.863902377 seconds)
    (269/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 3.497353449 seconds)
    (270/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 5.324760497 seconds)
    (271/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.728184931 seconds)
    (272/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.274341882 seconds)
    (273/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 3.863142663 seconds)
    (274/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.330176897 seconds)
    (275/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.278335163 seconds)
    (276/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 3.945738075 seconds)
    (277/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 3.108623282 seconds)
    (278/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.277562251 seconds)
    (279/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.277014411 seconds)
    (280/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.634060271 seconds)
    (281/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.097479174 seconds)
    (282/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 3.695773499 seconds)
    (283/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.479176051 seconds)
    (284/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.20666311 seconds)
    (285/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.335928245 seconds)
    (286/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.513429162 seconds)
    (287/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.774738245 seconds)
    (288/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.784965162 seconds)
    (289/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.185824716 seconds)
    (290/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.909877662 seconds)
    (291/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.535918398 seconds)
    (292/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.506477227 seconds)
    (293/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.416654219 seconds)
    (294/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.281064003 seconds)
    (295/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 3.061339906 seconds)
    (296/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.539504385 seconds)
    (297/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 3.816350839 seconds)
    (298/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 3.064532012 seconds)
    (299/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 3.888236931 seconds)
    (300/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.450628049 seconds)
    (301/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.749357676 seconds)
    (302/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.563293557 seconds)
    (303/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.280337674 seconds)
    (304/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.277728104 seconds)
    (305/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.161695389 seconds)
    (306/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 3.881211467 seconds)
    (307/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.616457791 seconds)
    (308/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.628147872 seconds)
    (309/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 4.734862213 seconds)
    (310/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 3.871156665 seconds)
    (311/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.7204753 seconds)
    (312/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.910381713 seconds)
    (313/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 3.16455372 seconds)
    (314/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 4.2812212 seconds)
    (315/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.424045865 seconds)
    (316/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.747811579 seconds)
    (317/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 3.213547227 seconds)
    (318/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.343554009 seconds)
    (319/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.353698488 seconds)
    (320/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.331006382 seconds)
    (321/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.379444314 seconds)
    (322/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.665142561 seconds)
    (323/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.351799488 seconds)
    (324/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.447416758 seconds)
    (325/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.785130874 seconds)
    (326/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.551519333 seconds)
    (327/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.161804075 seconds)
    (328/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 3.885549851 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 3.326059357 seconds)
    (330/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.064643971 seconds)
    (331/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.887522764 seconds)
    (332/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.450575065 seconds)
    (333/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.61853257 seconds)
    (334/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.781944921 seconds)
    (335/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.081817402 seconds)
    (336/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.772339878 seconds)
    (337/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.430660838 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.270665482 seconds)
    (339/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.398139321 seconds)
    (340/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.117446882 seconds)
    (341/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.096041026 seconds)
    (342/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 3.113053499 seconds)
    (343/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 3.750609085 seconds)
    (344/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.342674706 seconds)
    (345/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.990508811 seconds)
    (346/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.604346862 seconds)
    (347/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.632125714 seconds)
    (348/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.350957708 seconds)
    (349/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.420526366 seconds)
    (350/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.423023611 seconds)
    (351/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.1982233 seconds)
    (352/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.417627762 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.589007957 seconds)
    (354/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.773790724 seconds)
    (355/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.397453401 seconds)
    (356/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.277567273 seconds)
    (357/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.280480359 seconds)
    (358/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.28279349 seconds)
    (359/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.660821371 seconds)
    (360/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.348986479 seconds)
    (361/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.362890509 seconds)
    (362/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.398895084 seconds)
    (363/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.486922399 seconds)
    (364/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.865058042 seconds)
    (365/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.825001912 seconds)
    (366/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.904093262 seconds)
    (367/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.414398564 seconds)
    (368/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.282777092 seconds)
    (369/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.624762841 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.012447994 seconds)
    (371/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.61353498 seconds)
    (372/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.782194138 seconds)
    (373/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.627205567 seconds)
    (374/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.11435676 seconds)
    (375/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.719085857 seconds)
    (376/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 3.987557552 seconds)
    (377/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.534769726 seconds)
    (378/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.722096805 seconds)
    (379/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.35759077 seconds)
    (380/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.353584732 seconds)
    (381/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.278187969 seconds)
    (382/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.274651479 seconds)
    (383/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.989341941 seconds)
    (384/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.423231169 seconds)
    (385/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.285169073 seconds)
    (386/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.478712576 seconds)
    (387/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.393680234 seconds)
    (388/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.414988233 seconds)
    (389/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.27720888 seconds)
    (390/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.211263015 seconds)
    (391/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 4.960442744 seconds)
    (392/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 3.833163023 seconds)
    (393/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.469159145 seconds)
    (394/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 3.060898231 seconds)
    (395/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.422266618 seconds)
    (396/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.280527724 seconds)
    (397/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.283075629 seconds)
    (398/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.183379709 seconds)
    (399/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.280805757 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.265758486 seconds)
    (401/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.533222451 seconds)
    (402/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.299551655 seconds)
    (403/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.340309784 seconds)
    (404/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.979568541 seconds)
    (405/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.098859345 seconds)
    (406/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.9757532 seconds)
    (407/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.038813347 seconds)
    (408/596) benchmarking ("div", "Int64", "Float32")...
    done (took 3.09560006 seconds)
    (409/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.276332714 seconds)
    (410/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.695279563 seconds)
    (411/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.613701293 seconds)
    (412/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.65938106 seconds)
    (413/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.343856028 seconds)
    (414/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.465848105 seconds)
    (415/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.393036877 seconds)
    (416/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.276643582 seconds)
    (417/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 3.008047705 seconds)
    (418/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 3.940499515 seconds)
    (419/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.549637571 seconds)
    (420/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.280560704 seconds)
    (421/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.277624508 seconds)
    (422/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.685153336 seconds)
    (423/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.406667429 seconds)
    (424/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 3.785606918 seconds)
    (425/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.404330353 seconds)
    (426/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.281749747 seconds)
    (427/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.493553841 seconds)
    (428/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.766865362 seconds)
    (429/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.473777733 seconds)
    (430/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.278735956 seconds)
    (431/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.282520787 seconds)
    (432/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.767602052 seconds)
    (433/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.529788579 seconds)
    (434/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.198815386 seconds)
    (435/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 3.420449833 seconds)
    (436/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.418210766 seconds)
    (437/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.621226721 seconds)
    (438/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.473568954 seconds)
    (439/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.996414509 seconds)
    (440/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.915131037 seconds)
    (441/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.495747158 seconds)
    (442/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 3.88315867 seconds)
    (443/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.549352297 seconds)
    (444/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.280440578 seconds)
    (445/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.272082382 seconds)
    (446/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.743197705 seconds)
    (447/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.251413955 seconds)
    (448/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.887630968 seconds)
    (449/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 3.08756684 seconds)
    (450/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.343464986 seconds)
    (451/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.926927846 seconds)
    (452/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.426780018 seconds)
    (453/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.620789555 seconds)
    (454/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.440038494 seconds)
    (455/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.146212842 seconds)
    (456/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.404487673 seconds)
    (457/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 3.789132948 seconds)
    (458/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 4.075595979 seconds)
    (459/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.380452584 seconds)
    (460/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.274807137 seconds)
    (461/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 3.639549181 seconds)
    (462/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.341398781 seconds)
    (463/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.75447097 seconds)
    (464/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.377524998 seconds)
    (465/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.503577648 seconds)
    (466/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.419422669 seconds)
    (467/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.286997139 seconds)
    (468/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.314073388 seconds)
    (469/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.27528091 seconds)
    (470/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.284728982 seconds)
    (471/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.645285037 seconds)
    (472/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.346545121 seconds)
    (473/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.125923356 seconds)
    (474/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 3.674865909 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.281962961 seconds)
    (476/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.274810595 seconds)
    (477/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.272494921 seconds)
    (478/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.27473753 seconds)
    (479/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.372823893 seconds)
    (480/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.276841163 seconds)
    (481/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.397387609 seconds)
    (482/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 5.224454292 seconds)
    (483/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.773845804 seconds)
    (484/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.152539538 seconds)
    (485/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.420889851 seconds)
    (486/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.421033782 seconds)
    (487/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.579248182 seconds)
    (488/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.215035118 seconds)
    (489/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.154823912 seconds)
    (490/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 4.745625953 seconds)
    (491/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.276229541 seconds)
    (492/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 3.588058329 seconds)
    (493/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.719571847 seconds)
    (494/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.320641115 seconds)
    (495/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.846490969 seconds)
    (496/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.840341362 seconds)
    (497/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.359146467 seconds)
    (498/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.2754273 seconds)
    (499/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.277911059 seconds)
    (500/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.973435687 seconds)
    (501/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 3.228457102 seconds)
    (502/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.284761899 seconds)
    (503/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.277999057 seconds)
    (504/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.623799741 seconds)
    (505/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 4.098047796 seconds)
    (506/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.407051541 seconds)
    (507/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.274690727 seconds)
    (508/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.275438807 seconds)
    (509/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.275278421 seconds)
    (510/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.391047637 seconds)
    (511/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 3.826482011 seconds)
    (512/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.283534063 seconds)
    (513/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.06499251 seconds)
    (514/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.410533301 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.274778155 seconds)
    (516/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.122051141 seconds)
    (517/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 4.681954513 seconds)
    (518/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 4.552442966 seconds)
    (519/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 3.892877484 seconds)
    (520/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.274066129 seconds)
    (521/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.270694979 seconds)
    (522/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.768197842 seconds)
    (523/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.536502173 seconds)
    (524/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.937991475 seconds)
    (525/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.446544432 seconds)
    (526/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 5.119371751 seconds)
    (527/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.470053355 seconds)
    (528/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.2637966 seconds)
    (529/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.296034019 seconds)
    (530/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.27955179 seconds)
    (531/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.272885885 seconds)
    (532/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.976010886 seconds)
    (533/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.402089634 seconds)
    (534/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.274342896 seconds)
    (535/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.27064437 seconds)
    (536/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.79928052 seconds)
    (537/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.556407256 seconds)
    (538/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.35603427 seconds)
    (539/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.304221186 seconds)
    (540/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.335852636 seconds)
    (541/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.45861218 seconds)
    (542/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 4.165533093 seconds)
    (543/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.34136083 seconds)
    (544/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.568795318 seconds)
    (545/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.335378812 seconds)
    (546/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.717599019 seconds)
    (547/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 3.645733776 seconds)
    (548/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.684942958 seconds)
    (549/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.406444839 seconds)
    (550/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.415886736 seconds)
    (551/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.639918835 seconds)
    (552/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.431373627 seconds)
    (553/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.31449306 seconds)
    (554/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.818866981 seconds)
    (555/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.385179148 seconds)
    (556/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 4.315063299 seconds)
    (557/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.315683176 seconds)
    (558/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.281663761 seconds)
    (559/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.440115048 seconds)
    (560/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.273258316 seconds)
    (561/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.360122791 seconds)
    (562/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 3.823606937 seconds)
    (563/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.274317552 seconds)
    (564/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.273983741 seconds)
    (565/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.819901715 seconds)
    (566/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.456909183 seconds)
    (567/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.012213701 seconds)
    (568/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.416856924 seconds)
    (569/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.27849602 seconds)
    (570/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.283131387 seconds)
    (571/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.245277921 seconds)
    (572/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.354088288 seconds)
    (573/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.271451612 seconds)
    (574/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.590371022 seconds)
    (575/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.759896715 seconds)
    (576/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.430726738 seconds)
    (577/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.66077434 seconds)
    (578/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.732240384 seconds)
    (579/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.425973372 seconds)
    (580/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.280051618 seconds)
    (581/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.83164308 seconds)
    (582/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.876790348 seconds)
    (583/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.581128196 seconds)
    (584/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.330844927 seconds)
    (585/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.275539186 seconds)
    (586/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.271620708 seconds)
    (587/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.258958626 seconds)
    (588/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.600576931 seconds)
    (589/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.613301166 seconds)
    (590/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.403362166 seconds)
    (591/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 4.962270958 seconds)
    (592/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.956826163 seconds)
    (593/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.789723772 seconds)
    (594/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.445890944 seconds)
    (595/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 3.972987686 seconds)
    (596/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 4.154450614 seconds)
  done (took 1864.531217353 seconds)
done (took 3771.562338655 seconds)
(9/22) benchmarking "dates"...
  (1/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.469098802 seconds)
    (2/7) benchmarking "month"...
    done (took 2.385390402 seconds)
    (3/7) benchmarking "year"...
    done (took 2.362904961 seconds)
    (4/7) benchmarking "millisecond"...
    done (took 2.28195776 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.290167151 seconds)
    (6/7) benchmarking "minute"...
    done (took 2.290665643 seconds)
    (7/7) benchmarking "second"...
    done (took 2.289914971 seconds)
  done (took 18.608870662 seconds)
  (2/7) benchmarking "parse"...
    (1/9) benchmarking "DateTime"...
    done (took 2.864056993 seconds)
    (2/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.768274752 seconds)
    (3/9) benchmarking "Date"...
    done (took 2.738417013 seconds)
    (4/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.883869579 seconds)
    (5/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.295242596 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.125548158 seconds)
    (7/9) benchmarking ("Date", "DateFormat")...
    done (took 2.272769265 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 3.035194738 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.123097761 seconds)
  done (took 27.344282046 seconds)
  (3/7) benchmarking "query"...
    (1/18) benchmarking ("isleapyear", "Date")...
    done (took 2.366162725 seconds)
    (2/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.285641101 seconds)
    (3/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.292182409 seconds)
    (4/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.299832265 seconds)
    (5/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.489640433 seconds)
    (6/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.420388692 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.303649074 seconds)
    (8/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.414407686 seconds)
    (9/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.453067263 seconds)
    (10/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.483614297 seconds)
    (11/18) benchmarking ("dayofyear", "Date")...
    done (took 2.435983011 seconds)
    (12/18) benchmarking ("dayofweek", "Date")...
    done (took 2.283219071 seconds)
    (13/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.458248131 seconds)
    (14/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.476645462 seconds)
    (15/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.411231443 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.445646808 seconds)
    (17/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.288063386 seconds)
    (18/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.439083871 seconds)
  done (took 45.28559232 seconds)
  (4/7) benchmarking "construction"...
    (1/2) benchmarking "DateTime"...
    done (took 2.261608802 seconds)
    (2/2) benchmarking "Date"...
    done (took 2.263487083 seconds)
  done (took 6.765639461 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.276029795 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.280371175 seconds)
  done (took 6.797179329 seconds)
  (6/7) benchmarking "string"...
    (1/2) benchmarking "DateTime"...
    done (took 3.382513579 seconds)
    (2/2) benchmarking "Date"...
    done (took 3.329711226 seconds)
  done (took 8.951889989 seconds)
  (7/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("DateTime", "Month")...
    done (took 2.78052632 seconds)
    (2/10) benchmarking ("DateTime", "Hour")...
    done (took 2.276229878 seconds)
    (3/10) benchmarking ("DateTime", "Minute")...
    done (took 2.274051909 seconds)
    (4/10) benchmarking ("DateTime", "Second")...
    done (took 2.274351165 seconds)
    (5/10) benchmarking ("Date", "Year")...
    done (took 2.536165943 seconds)
    (6/10) benchmarking ("DateTime", "Year")...
    done (took 2.709646922 seconds)
    (7/10) benchmarking ("Date", "Month")...
    done (took 2.594683025 seconds)
    (8/10) benchmarking ("Date", "Day")...
    done (took 2.273391026 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.273970578 seconds)
    (10/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.274422341 seconds)
  done (took 26.570621297 seconds)
done (took 143.321688632 seconds)
(10/22) benchmarking "alloc"...
  (1/4) benchmarking "structs"...
  done (took 7.235881774 seconds)
  (2/4) benchmarking "strings"...
  done (took 7.360299285 seconds)
  (3/4) benchmarking "grow_array"...
  done (took 7.814906241 seconds)
  (4/4) benchmarking "arrays"...
  done (took 7.458952961 seconds)
done (took 32.105458501 seconds)
(11/22) benchmarking "find"...
  (1/3) benchmarking "findnext"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.411657307 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.414994814 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.509669822 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.542235496 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.507969638 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 2.815342919 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.507461788 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.388476454 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.51373415 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.41268583 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.401149325 seconds)
  done (took 29.663590217 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.410865886 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.413987709 seconds)
    (3/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.529192175 seconds)
    (4/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.871531553 seconds)
    (5/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.508920226 seconds)
    (6/11) benchmarking ("BitVector", "10-90")...
    done (took 3.154230656 seconds)
    (7/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.521420397 seconds)
    (8/11) benchmarking ("BitVector", "50-50")...
    done (took 2.461577525 seconds)
    (9/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.510947044 seconds)
    (10/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.420848497 seconds)
    (11/11) benchmarking ("BitVector", "90-10")...
    done (took 2.530641162 seconds)
  done (took 30.580197409 seconds)
  (3/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.320135578 seconds)
    (2/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.348735836 seconds)
    (3/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.352389651 seconds)
    (4/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.426434188 seconds)
    (5/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.356845257 seconds)
    (6/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.373856443 seconds)
    (7/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.353182173 seconds)
    (8/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.381637242 seconds)
    (9/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.386117051 seconds)
    (10/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.312772374 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.363917555 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.294680636 seconds)
    (13/41) benchmarking ("BitVector", "10-90")...
    done (took 4.512887065 seconds)
    (14/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.379864462 seconds)
    (15/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.309248962 seconds)
    (16/41) benchmarking ("BitVector", "50-50")...
    done (took 4.643685614 seconds)
    (17/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.971941552 seconds)
    (18/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.37436288 seconds)
    (19/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.376511276 seconds)
    (20/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.512406117 seconds)
    (21/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.313320776 seconds)
    (22/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.360383903 seconds)
    (23/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.306585559 seconds)
    (24/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.40171883 seconds)
    (25/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.291346003 seconds)
    (26/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.291634553 seconds)
    (27/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.284806583 seconds)
    (28/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.412490002 seconds)
    (29/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.3592845 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.339145655 seconds)
    (31/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.371395254 seconds)
    (32/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.305571403 seconds)
    (33/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.415108708 seconds)
    (34/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.290140484 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.356583313 seconds)
    (36/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.291218299 seconds)
    (37/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.348691453 seconds)
    (38/41) benchmarking ("BitVector", "90-10")...
    done (took 2.831569543 seconds)
    (39/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.333813732 seconds)
    (40/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.30641416 seconds)
    (41/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.393871058 seconds)
  done (took 104.203498553 seconds)
done (took 166.704535535 seconds)
(12/22) benchmarking "io"...
  (1/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.703423263 seconds)
    (2/2) benchmarking "read"...
    done (took 2.834105657 seconds)
  done (took 7.779343252 seconds)
  (2/4) benchmarking "skipchars"...
  done (took 7.325650503 seconds)
  (3/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.656112599 seconds)
    (2/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.445911307 seconds)
    (3/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.427389215 seconds)
  done (took 24.773829063 seconds)
  (4/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.252824269 seconds)
    (2/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.577593261 seconds)
    (3/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.499412472 seconds)
    (4/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.367182596 seconds)
  done (took 26.943691361 seconds)
done (took 69.062295628 seconds)
(13/22) benchmarking "tuple"...
  (1/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.24850122 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.248544711 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.248885499 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.249439789 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.24848862 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.247502561 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.248804162 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.251321277 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.248573895 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.249383489 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.248262796 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.249855452 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.248336304 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.248744232 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.249964792 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.250303578 seconds)
  done (took 38.225308488 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.247805474 seconds)
    (2/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.250289896 seconds)
    (3/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.265494786 seconds)
    (4/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.252058359 seconds)
    (5/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.249071897 seconds)
    (6/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.24892706 seconds)
    (7/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.250901668 seconds)
    (8/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.248620376 seconds)
  done (took 20.253192388 seconds)
  (3/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.248747382 seconds)
    (2/24) benchmarking ("minimum", "(4,)")...
    done (took 2.248223522 seconds)
    (3/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.249912541 seconds)
    (4/24) benchmarking ("minimum", "(2,)")...
    done (took 2.248102194 seconds)
    (5/24) benchmarking ("minimum", "(16,)")...
    done (took 2.249200639 seconds)
    (6/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.248380504 seconds)
    (7/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.250640185 seconds)
    (8/24) benchmarking ("sum", "(16,)")...
    done (took 2.249521594 seconds)
    (9/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.247909633 seconds)
    (10/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.248328806 seconds)
    (11/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.250979716 seconds)
    (12/24) benchmarking ("minimum", "(8,)")...
    done (took 2.249448958 seconds)
    (13/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.250393953 seconds)
    (14/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.251972191 seconds)
    (15/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.248074299 seconds)
    (16/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.249371171 seconds)
    (17/24) benchmarking ("sum", "(2,)")...
    done (took 2.247158307 seconds)
    (18/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.24753835 seconds)
    (19/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.249736512 seconds)
    (20/24) benchmarking ("sum", "(4,)")...
    done (took 2.248191688 seconds)
    (21/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.249364646 seconds)
    (22/24) benchmarking ("sum", "(8,)")...
    done (took 2.247103802 seconds)
    (23/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.248875887 seconds)
    (24/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.250331685 seconds)
  done (took 56.218088254 seconds)
  (4/4) benchmarking "misc"...
    (1/2) benchmarking "11899"...
    done (took 2.277444559 seconds)
    (2/2) benchmarking "longtuple"...
    done (took 2.652607626 seconds)
  done (took 7.170635262 seconds)
done (took 124.104549704 seconds)
(14/22) benchmarking "string"...
  (1/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.358319105 seconds)
    (2/2) benchmarking "String"...
    done (took 2.440860739 seconds)
  done (took 7.039367623 seconds)
  (2/7) benchmarking "join"...
  done (took 7.335749893 seconds)
  (3/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "equal"...
    done (took 2.417150418 seconds)
    (2/4) benchmarking "different"...
    done (took 2.349871601 seconds)
    (3/4) benchmarking "identical"...
    done (took 2.55278053 seconds)
    (4/4) benchmarking "different length"...
    done (took 2.418242876 seconds)
  done (took 11.985775106 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.210100559 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "backtracking"...
    done (took 7.247348537 seconds)
    (2/7) benchmarking "target length 50000"...
    done (took 3.351459385 seconds)
    (3/7) benchmarking "target length 2"...
    done (took 2.811924856 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.810829458 seconds)
    (5/7) benchmarking "target length 1000"...
    done (took 2.468369029 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.873268029 seconds)
    (7/7) benchmarking "no backtracking"...
    done (took 5.174060728 seconds)
  done (took 32.988148236 seconds)
  (6/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.561501811 seconds)
    (2/3) benchmarking "different"...
    done (took 2.316476917 seconds)
    (3/3) benchmarking "different length"...
    done (took 2.292623017 seconds)
  done (took 9.429065019 seconds)
  (7/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.438542893 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.413150628 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.052314929 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.471462305 seconds)
  done (took 15.622596282 seconds)
done (took 89.867334856 seconds)
(15/22) benchmarking "random"...
  (1/5) benchmarking "ranges"...
    (1/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.31331401 seconds)
    (2/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.291219853 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.314385241 seconds)
    (4/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.796528695 seconds)
    (5/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 3.071930297 seconds)
    (6/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.314102867 seconds)
    (7/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.33963748 seconds)
    (8/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.290952193 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.37650339 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.522150052 seconds)
    (11/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 3.47697943 seconds)
    (12/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.149441036 seconds)
    (13/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.288882972 seconds)
    (14/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.246563772 seconds)
    (15/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 5.333787675 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.308190991 seconds)
    (17/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.289043243 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.348865682 seconds)
    (19/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.287538448 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.414511805 seconds)
    (21/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.311010251 seconds)
    (22/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.289080851 seconds)
    (23/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.31306812 seconds)
    (24/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.315391264 seconds)
    (25/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.362718337 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.325684064 seconds)
    (27/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.285996725 seconds)
    (28/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.309420924 seconds)
    (29/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.286321303 seconds)
    (30/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.286014073 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.363739549 seconds)
    (32/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.315545684 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.790169786 seconds)
    (34/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 3.102596695 seconds)
    (35/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.577719557 seconds)
    (36/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 4.072143522 seconds)
    (37/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 3.049411185 seconds)
    (38/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.31005537 seconds)
    (39/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.318954911 seconds)
    (40/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.319398141 seconds)
    (41/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.254763892 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.879770096 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.412313377 seconds)
    (44/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.345771495 seconds)
    (45/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.309260101 seconds)
    (46/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.308865589 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.285300868 seconds)
    (48/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.308303351 seconds)
    (49/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.640016895 seconds)
    (50/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.887561447 seconds)
    (51/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.225596546 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.010696195 seconds)
    (53/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.31280508 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.514028833 seconds)
    (55/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.311652913 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.323898283 seconds)
    (57/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.36072169 seconds)
    (58/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.792986266 seconds)
    (59/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 3.087062162 seconds)
    (60/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.285207623 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.332121975 seconds)
    (62/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.28587475 seconds)
    (63/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.307727577 seconds)
    (64/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.350212852 seconds)
    (65/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.798566525 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 3.064070474 seconds)
    (67/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.582938318 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 3.021841325 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.34579908 seconds)
    (70/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 6.325068031 seconds)
    (71/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 3.559226202 seconds)
    (72/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.796607242 seconds)
  done (took 201.954748731 seconds)
  (2/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.831458274 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.434893153 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.845960683 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.433278688 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.509960193 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.431144419 seconds)
  done (took 21.508535788 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.300270971 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.287501889 seconds)
    (3/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.287142578 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.587712344 seconds)
    (5/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.376231825 seconds)
    (6/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.313778817 seconds)
    (7/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.290909447 seconds)
    (8/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.291223048 seconds)
    (9/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.344078174 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.322988184 seconds)
    (11/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.312440248 seconds)
    (12/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.291574393 seconds)
    (13/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.290170301 seconds)
    (14/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.244278562 seconds)
    (15/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.550106399 seconds)
    (16/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.306905469 seconds)
    (17/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.296732236 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.311135346 seconds)
    (19/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.587567472 seconds)
    (20/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.303822025 seconds)
    (21/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.294661105 seconds)
    (22/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.306759648 seconds)
    (23/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.538260603 seconds)
    (24/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.301027368 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.29920622 seconds)
    (26/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.347420676 seconds)
    (27/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.373489432 seconds)
    (28/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.336540678 seconds)
    (29/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.330246592 seconds)
    (30/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.634110572 seconds)
    (31/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.454161904 seconds)
    (32/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.639190181 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.350583655 seconds)
    (34/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.312739015 seconds)
    (35/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.413988187 seconds)
    (36/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.639781273 seconds)
    (37/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.553562891 seconds)
    (38/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.595882113 seconds)
    (39/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.292057551 seconds)
    (40/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.242337299 seconds)
    (41/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.483835189 seconds)
    (42/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.123894903 seconds)
    (43/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.155265172 seconds)
    (44/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.671997679 seconds)
    (45/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.53801215 seconds)
    (46/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.360745143 seconds)
    (47/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.309240282 seconds)
    (48/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.469165941 seconds)
    (49/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.241671462 seconds)
    (50/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.141263931 seconds)
    (51/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.284927723 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.298769745 seconds)
    (53/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.427935301 seconds)
    (54/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.242129568 seconds)
    (55/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.442637563 seconds)
    (56/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.409487704 seconds)
    (57/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.296858807 seconds)
    (58/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.242332463 seconds)
    (59/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.297633492 seconds)
    (60/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.288596343 seconds)
    (61/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.286893948 seconds)
    (62/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.310122509 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.469715133 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.305968964 seconds)
    (65/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.28059775 seconds)
    (66/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.500916251 seconds)
    (67/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.537995534 seconds)
    (68/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.241581324 seconds)
    (69/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 3.015867801 seconds)
    (70/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.302213562 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.28821794 seconds)
    (72/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.449662633 seconds)
    (73/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.43844862 seconds)
    (74/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.302335535 seconds)
    (75/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.431135002 seconds)
    (76/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.302046583 seconds)
    (77/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.347147526 seconds)
    (78/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.24238874 seconds)
    (79/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.413908848 seconds)
    (80/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.186996963 seconds)
    (81/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.544549238 seconds)
    (82/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.246138022 seconds)
    (83/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.291855917 seconds)
    (84/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.307531006 seconds)
    (85/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.244079992 seconds)
    (86/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.308113748 seconds)
    (87/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.578845454 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.300742173 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.141809648 seconds)
    (90/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.319734089 seconds)
    (91/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.244657957 seconds)
    (92/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.364854022 seconds)
    (93/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.986965238 seconds)
    (94/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.3026627 seconds)
    (95/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.584994333 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.536919316 seconds)
    (97/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.597976471 seconds)
  done (took 295.681147883 seconds)
  (4/5) benchmarking "sequences"...
    (1/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.512646342 seconds)
    (2/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.589229256 seconds)
    (3/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.841165944 seconds)
    (4/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.600895535 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.395855112 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.593511734 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.901130737 seconds)
  done (took 20.679531503 seconds)
  (5/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.507642181 seconds)
    (2/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.632442407 seconds)
    (3/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.239881379 seconds)
    (4/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.248331155 seconds)
    (5/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.244419552 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.451211379 seconds)
    (7/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.248802111 seconds)
    (8/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.522788841 seconds)
    (9/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.639166913 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.639712542 seconds)
    (11/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.539980074 seconds)
    (12/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.725579543 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.24716994 seconds)
    (14/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.244824202 seconds)
    (15/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.24800633 seconds)
    (16/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.549784996 seconds)
    (17/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.376679164 seconds)
    (18/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.501721991 seconds)
    (19/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.246312456 seconds)
    (20/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.245721243 seconds)
    (21/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.510828587 seconds)
    (22/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.484410679 seconds)
    (23/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.641737874 seconds)
    (24/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.246225511 seconds)
    (25/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.335664434 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.245615872 seconds)
    (27/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.245170528 seconds)
    (28/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.552483255 seconds)
    (29/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.46314358 seconds)
    (30/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.609692773 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.25207547 seconds)
    (32/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.682437768 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.525633813 seconds)
    (34/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.515629164 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.250668023 seconds)
    (36/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.411230896 seconds)
    (37/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.617354944 seconds)
    (38/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.62618701 seconds)
    (39/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.495072691 seconds)
    (40/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.317139893 seconds)
    (41/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.441630879 seconds)
    (42/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.351784278 seconds)
    (43/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.505495989 seconds)
    (44/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.430137743 seconds)
    (45/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.575350818 seconds)
    (46/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.425794629 seconds)
    (47/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.410194854 seconds)
    (48/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.668055357 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.244165649 seconds)
    (50/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.316362339 seconds)
    (51/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.473626691 seconds)
    (52/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.243593106 seconds)
    (53/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.435348349 seconds)
    (54/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.334590084 seconds)
    (55/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.634813458 seconds)
    (56/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.708129998 seconds)
    (57/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.506916371 seconds)
    (58/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.247334805 seconds)
    (59/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.426751821 seconds)
    (60/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.244997883 seconds)
    (61/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.557021701 seconds)
    (62/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.243859711 seconds)
    (63/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.245521548 seconds)
    (64/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.244913042 seconds)
    (65/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.505168225 seconds)
    (66/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.245741966 seconds)
  done (took 272.282726716 seconds)
done (took 814.788374508 seconds)
(16/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.187798091 seconds)
  (2/8) benchmarking "mandel"...
  done (took 3.674628508 seconds)
  (3/8) benchmarking "pisum"...
  done (took 7.276176257 seconds)
  (4/8) benchmarking "randmatmul"...
  done (took 7.31587135 seconds)
  (5/8) benchmarking "printfd"...
  done (took 7.245254242 seconds)
  (6/8) benchmarking "randmatstat"...
  done (took 7.599672874 seconds)
  (7/8) benchmarking "fib"...
  done (took 2.655272194 seconds)
  (8/8) benchmarking "parseint"...
  done (took 3.211020145 seconds)
done (took 46.410319907 seconds)
(17/22) benchmarking "broadcast"...
  (1/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.245224429 seconds)
    (2/9) benchmarking (5, "scal_tup")...
    done (took 2.731254776 seconds)
    (3/9) benchmarking (10, "scal_tup")...
    done (took 2.285675221 seconds)
    (4/9) benchmarking (3, "tup_tup")...
    done (took 2.281425504 seconds)
    (5/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.289329599 seconds)
    (6/9) benchmarking (10, "tup_tup")...
    done (took 2.29273854 seconds)
    (7/9) benchmarking (5, "tup_tup")...
    done (took 2.285463405 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.29136011 seconds)
    (9/9) benchmarking (3, "scal_tup")...
    done (took 2.280790831 seconds)
  done (took 28.228119872 seconds)
  (2/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.488211235 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.245762443 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.24423371 seconds)
  done (took 23.222724159 seconds)
  (3/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.474547308 seconds)
    (2/6) benchmarking ("array", 10)...
    done (took 2.726498192 seconds)
    (3/6) benchmarking ("array", 3)...
    done (took 2.609537942 seconds)
    (4/6) benchmarking ("array", 5)...
    done (took 2.597380851 seconds)
    (5/6) benchmarking ("tuple", 3)...
    done (took 2.397964743 seconds)
    (6/6) benchmarking ("tuple", 5)...
    done (took 2.387565489 seconds)
  done (took 17.437772406 seconds)
  (4/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.246334975 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.24506043 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.248640493 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.244594075 seconds)
  done (took 31.228063668 seconds)
  (5/6) benchmarking "sparse"...
    (1/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.356259764 seconds)
    (2/4) benchmarking ("(10000000,)", 1)...
    done (took 2.63810829 seconds)
    (3/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.324730339 seconds)
    (4/4) benchmarking ("(10000000,)", 2)...
    done (took 2.644483168 seconds)
  done (took 12.206064557 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.361479309 seconds)
done (took 117.94284697 seconds)
(18/22) benchmarking "parallel"...
done (took 2.629813107 seconds)
(19/22) benchmarking "collection"...
  (1/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.44115401 seconds)
    (2/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.530559643 seconds)
    (3/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.417898403 seconds)
    (4/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.350033206 seconds)
    (5/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.43247033 seconds)
    (6/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.833021334 seconds)
    (7/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 3.05735092 seconds)
    (8/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.198927638 seconds)
    (9/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.478534345 seconds)
    (10/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.428156498 seconds)
    (11/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.529693826 seconds)
    (12/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.658221912 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.40698228 seconds)
    (14/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.373053249 seconds)
    (15/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.286025159 seconds)
    (16/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.386945423 seconds)
    (17/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.441105012 seconds)
    (18/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.397834677 seconds)
    (19/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 3.34914218 seconds)
    (20/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.354187894 seconds)
    (21/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.957404642 seconds)
    (22/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.529595809 seconds)
    (23/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.049721833 seconds)
    (24/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.65671562 seconds)
    (25/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.334126597 seconds)
    (26/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.343396458 seconds)
    (27/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.412503337 seconds)
    (28/117) benchmarking ("Set", "Int", "union")...
    done (took 2.407417065 seconds)
    (29/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.971463808 seconds)
    (30/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.222937181 seconds)
    (31/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.914122317 seconds)
    (32/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.360002172 seconds)
    (33/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.315411467 seconds)
    (34/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.555560887 seconds)
    (35/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 3.404080873 seconds)
    (36/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.392025876 seconds)
    (37/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.432584719 seconds)
    (38/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.312098963 seconds)
    (39/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.35640135 seconds)
    (40/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.361254892 seconds)
    (41/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.290911011 seconds)
    (42/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.821856027 seconds)
    (43/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.463562106 seconds)
    (44/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.206878426 seconds)
    (45/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.238670829 seconds)
    (46/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 3.702000737 seconds)
    (47/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.271308618 seconds)
    (48/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 3.611205298 seconds)
    (49/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 3.244802369 seconds)
    (50/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.357669931 seconds)
    (51/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.307362676 seconds)
    (52/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.783378786 seconds)
    (53/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.842411482 seconds)
    (54/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.52388528 seconds)
    (55/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.539493238 seconds)
    (56/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.453709506 seconds)
    (57/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 3.477928633 seconds)
    (58/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.445670613 seconds)
    (59/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.446866639 seconds)
    (60/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.449660913 seconds)
    (61/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 3.355654572 seconds)
    (62/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 3.130524497 seconds)
    (63/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.598285084 seconds)
    (64/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.538914478 seconds)
    (65/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.40997723 seconds)
    (66/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.407764895 seconds)
    (67/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 3.40229991 seconds)
    (68/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.800355216 seconds)
    (69/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.409343205 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.414135541 seconds)
    (71/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.418038584 seconds)
    (72/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.378168965 seconds)
    (73/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.029588422 seconds)
    (74/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.68448216 seconds)
    (75/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 3.514530841 seconds)
    (76/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.490471374 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.527392382 seconds)
    (78/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.530636033 seconds)
    (79/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 3.096890935 seconds)
    (80/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 3.941873629 seconds)
    (81/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.733620201 seconds)
    (82/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 3.788884237 seconds)
    (83/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.532775937 seconds)
    (84/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.506465035 seconds)
    (85/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.704216909 seconds)
    (86/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 3.281587367 seconds)
    (87/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.443058505 seconds)
    (88/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.391744364 seconds)
    (89/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.312513277 seconds)
    (90/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.397147007 seconds)
    (91/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.30326675 seconds)
    (92/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.956491723 seconds)
    (93/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.614160553 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 3.680765408 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.553301887 seconds)
    (96/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.523833536 seconds)
    (97/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.543236662 seconds)
    (98/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.698347062 seconds)
    (99/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.486741355 seconds)
    (100/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.440360833 seconds)
    (101/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.171808851 seconds)
    (102/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.585485722 seconds)
    (103/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.53824094 seconds)
    (104/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.440641935 seconds)
    (105/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.392805581 seconds)
    (106/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.344754804 seconds)
    (107/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.437421732 seconds)
    (108/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.330847669 seconds)
    (109/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.313025134 seconds)
    (110/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.79898651 seconds)
    (111/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.382085371 seconds)
    (112/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.283783231 seconds)
    (113/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.677106007 seconds)
    (114/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 3.505851931 seconds)
    (115/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.779443946 seconds)
    (116/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.53863825 seconds)
    (117/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 3.409269728 seconds)
  done (took 329.270635783 seconds)
  (2/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 3.693532585 seconds)
    (2/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.276153052 seconds)
    (3/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.404386713 seconds)
    (4/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.248968805 seconds)
    (5/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.249345993 seconds)
    (6/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.253504506 seconds)
    (7/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.260949014 seconds)
    (8/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 4.349791458 seconds)
    (9/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.347526273 seconds)
    (10/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.248145553 seconds)
    (11/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.252459175 seconds)
    (12/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.251569662 seconds)
    (13/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.250176155 seconds)
    (14/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.246802244 seconds)
    (15/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.477789748 seconds)
    (16/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.26523177 seconds)
    (17/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.248791135 seconds)
    (18/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.247840929 seconds)
    (19/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.24973279 seconds)
    (20/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.249428314 seconds)
    (21/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.252987161 seconds)
    (22/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.249200775 seconds)
    (23/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.928464128 seconds)
    (24/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.34281705 seconds)
    (25/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.247578139 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.254069295 seconds)
    (27/27) benchmarking ("BitSet", "Int8")...
    done (took 3.957901773 seconds)
  done (took 179.695648214 seconds)
  (3/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.334035426 seconds)
    (2/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.741432265 seconds)
    (3/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.518370343 seconds)
    (4/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.613361009 seconds)
    (5/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.670446956 seconds)
    (6/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.587218122 seconds)
    (7/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.328069127 seconds)
    (8/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.320934464 seconds)
    (9/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.377301611 seconds)
    (10/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.519739761 seconds)
    (11/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 7.248673531 seconds)
    (12/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.692933506 seconds)
    (13/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.288558961 seconds)
    (14/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.623386409 seconds)
    (15/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.310256985 seconds)
    (16/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.314495918 seconds)
    (17/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.331657529 seconds)
    (18/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.281636496 seconds)
    (19/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.355121075 seconds)
    (20/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.494796395 seconds)
    (21/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.375722963 seconds)
    (22/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.312415343 seconds)
    (23/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.560897115 seconds)
    (24/105) benchmarking ("Set", "Int", "first")...
    done (took 2.320283861 seconds)
    (25/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.310888754 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.470726666 seconds)
    (27/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.491246225 seconds)
    (28/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.459989581 seconds)
    (29/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.433658753 seconds)
    (30/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.498067849 seconds)
    (31/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.669875716 seconds)
    (32/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.303563029 seconds)
    (33/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.285455352 seconds)
    (34/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.326912261 seconds)
    (35/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.380055616 seconds)
    (36/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.452560361 seconds)
    (37/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.363101689 seconds)
    (38/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.657233005 seconds)
    (39/105) benchmarking ("Set", "Int", "length")...
    done (took 2.299585195 seconds)
    (40/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.482482025 seconds)
    (41/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.292241994 seconds)
    (42/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.65625387 seconds)
    (43/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.28812157 seconds)
    (44/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.324210192 seconds)
    (45/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.446335414 seconds)
    (46/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.377770414 seconds)
    (47/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.70782966 seconds)
    (48/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.8321394 seconds)
    (49/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.539095804 seconds)
    (50/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.318020617 seconds)
    (51/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.315968322 seconds)
    (52/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.391679738 seconds)
    (53/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.656053568 seconds)
    (54/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.518480407 seconds)
    (55/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 3.682026884 seconds)
    (56/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.281172602 seconds)
    (57/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.705262313 seconds)
    (58/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.563553709 seconds)
    (59/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.536451356 seconds)
    (60/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.27927535 seconds)
    (61/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.52669154 seconds)
    (62/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.31336417 seconds)
    (63/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.30514443 seconds)
    (64/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 3.377151108 seconds)
    (65/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.75160948 seconds)
    (66/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.477245874 seconds)
    (67/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.664742821 seconds)
    (68/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.594697904 seconds)
    (69/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.312607676 seconds)
    (70/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.759244539 seconds)
    (71/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.322888292 seconds)
    (72/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.516434207 seconds)
    (73/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.959936998 seconds)
    (74/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.418635589 seconds)
    (75/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 4.004769282 seconds)
    (76/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.44232645 seconds)
    (77/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.286908201 seconds)
    (78/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.336529547 seconds)
    (79/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.321614588 seconds)
    (80/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.583977131 seconds)
    (81/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.313431434 seconds)
    (82/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.382006248 seconds)
    (83/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.337300988 seconds)
    (84/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.415483305 seconds)
    (85/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.456138483 seconds)
    (86/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.416091705 seconds)
    (87/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.605237533 seconds)
    (88/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.758028038 seconds)
    (89/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.356339957 seconds)
    (90/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.656469808 seconds)
    (91/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 3.892854077 seconds)
    (92/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.582282585 seconds)
    (93/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.29375267 seconds)
    (94/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.371627005 seconds)
    (95/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.281365156 seconds)
    (96/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.375482379 seconds)
    (97/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.452741983 seconds)
    (98/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.617240804 seconds)
    (99/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.708659864 seconds)
    (100/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.560342505 seconds)
    (101/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 3.099037738 seconds)
    (102/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.777381048 seconds)
    (103/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.285017439 seconds)
    (104/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.357768831 seconds)
    (105/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.307257648 seconds)
  done (took 271.304825918 seconds)
  (4/6) benchmarking "deletion"...
    (1/28) benchmarking ("Vector", "Int", "filter")...
    done (took 4.406868891 seconds)
    (2/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.500328058 seconds)
    (3/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.85354786 seconds)
    (4/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.62783971 seconds)
    (5/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.709118871 seconds)
    (6/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.427458458 seconds)
    (7/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.371387795 seconds)
    (8/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.322108775 seconds)
    (9/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.425681618 seconds)
    (10/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.332476723 seconds)
    (11/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.400642524 seconds)
    (12/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.35375446 seconds)
    (13/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.540991306 seconds)
    (14/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.741415734 seconds)
    (15/28) benchmarking ("Set", "String", "filter")...
    done (took 2.496770773 seconds)
    (16/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.915100676 seconds)
    (17/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.320983935 seconds)
    (18/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.771001384 seconds)
    (19/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.497776422 seconds)
    (20/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.390207581 seconds)
    (21/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.88120861 seconds)
    (22/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.310854415 seconds)
    (23/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.566099259 seconds)
    (24/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.468801542 seconds)
    (25/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.301171825 seconds)
    (26/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.549706836 seconds)
    (27/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.605155399 seconds)
    (28/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.451271962 seconds)
  done (took 79.781634228 seconds)
  (5/6) benchmarking "iteration"...
    (1/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.318217516 seconds)
    (2/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.359325311 seconds)
    (3/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.283942312 seconds)
    (4/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.389933373 seconds)
    (5/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.398811991 seconds)
    (6/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.377527009 seconds)
    (7/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.343928511 seconds)
    (8/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.801738518 seconds)
    (9/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.350482194 seconds)
    (10/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.331610224 seconds)
    (11/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.372483314 seconds)
    (12/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.283931136 seconds)
    (13/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.814480756 seconds)
    (14/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.288039481 seconds)
    (15/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.363637688 seconds)
    (16/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.37221125 seconds)
    (17/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.426265297 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.820855929 seconds)
    (19/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.377984036 seconds)
    (20/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.810565942 seconds)
    (21/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.334128746 seconds)
    (22/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.380382703 seconds)
    (23/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.338268018 seconds)
    (24/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.332108771 seconds)
    (25/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.343263279 seconds)
    (26/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.288850214 seconds)
  done (took 65.157654295 seconds)
  (6/6) benchmarking "initialization"...
    (1/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.380439762 seconds)
    (2/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 3.285531371 seconds)
    (3/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.466015314 seconds)
    (4/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.540818173 seconds)
    (5/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.808194284 seconds)
    (6/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.437900465 seconds)
    (7/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.656694573 seconds)
    (8/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.31335566 seconds)
    (9/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.460037558 seconds)
    (10/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.361330419 seconds)
    (11/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 4.975473761 seconds)
    (12/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.797597263 seconds)
    (13/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.43989957 seconds)
    (14/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.829477677 seconds)
    (15/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.392016117 seconds)
    (16/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.320081918 seconds)
    (17/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.749716626 seconds)
    (18/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.373594529 seconds)
    (19/42) benchmarking ("Set", "String", "loop")...
    done (took 2.636573605 seconds)
    (20/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.428487634 seconds)
    (21/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.893551394 seconds)
    (22/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.390160188 seconds)
    (23/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.506960677 seconds)
    (24/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.504857695 seconds)
    (25/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.398123145 seconds)
    (26/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.449197775 seconds)
    (27/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.369940349 seconds)
    (28/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.829858322 seconds)
    (29/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.390663271 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.412382845 seconds)
    (31/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.546653585 seconds)
    (32/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.369432587 seconds)
    (33/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.898561485 seconds)
    (34/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.382541521 seconds)
    (35/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.375979108 seconds)
    (36/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.680938178 seconds)
    (37/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.451207165 seconds)
    (38/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.777385614 seconds)
    (39/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.409560115 seconds)
    (40/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.242697604 seconds)
    (41/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.382550677 seconds)
    (42/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.45200276 seconds)
  done (took 116.009793871 seconds)
done (took 1043.461729569 seconds)
(20/22) benchmarking "simd"...
  (1/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.2502588 seconds)
  (2/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.258896287 seconds)
  (3/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.279680995 seconds)
  (4/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.266339955 seconds)
  (5/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.320732562 seconds)
  (6/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.311603817 seconds)
  (7/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.270138948 seconds)
  (8/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.256606113 seconds)
  (9/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.262581672 seconds)
  (10/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.286293817 seconds)
  (11/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.268525108 seconds)
  (12/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.263232057 seconds)
  (13/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.278897703 seconds)
  (14/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.289837174 seconds)
  (15/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.271936632 seconds)
  (16/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.275501914 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.286838425 seconds)
  (18/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.271197875 seconds)
  (19/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.295968401 seconds)
  (20/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.331818999 seconds)
  (21/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.271959783 seconds)
  (22/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.264088503 seconds)
  (23/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.272223232 seconds)
  (24/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.267797852 seconds)
  (25/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.380838212 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.265162741 seconds)
  (27/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.268622847 seconds)
  (28/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.270381811 seconds)
  (29/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.266470952 seconds)
  (30/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.254644739 seconds)
  (31/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.265682649 seconds)
  (32/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.268575742 seconds)
  (33/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.334639306 seconds)
  (34/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.461124595 seconds)
  (35/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.397600799 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.485453763 seconds)
  (37/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.260805823 seconds)
  (38/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.331431533 seconds)
  (39/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.344444846 seconds)
  (40/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.315323371 seconds)
  (41/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.376302692 seconds)
  (42/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.336109009 seconds)
  (43/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.32675573 seconds)
  (44/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.259939529 seconds)
  (45/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.283200807 seconds)
  (46/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.263213264 seconds)
  (47/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.271133568 seconds)
  (48/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.295123067 seconds)
  (49/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.321863649 seconds)
  (50/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.278218144 seconds)
  (51/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.259763492 seconds)
  (52/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.319017925 seconds)
  (53/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.274735374 seconds)
  (54/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.266439291 seconds)
  (55/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.377498515 seconds)
  (56/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.265693014 seconds)
  (57/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.332856345 seconds)
  (58/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.469873399 seconds)
  (59/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.268140463 seconds)
  (60/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.260074482 seconds)
  (61/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.271593125 seconds)
  (62/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.270072594 seconds)
  (63/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.287664294 seconds)
  (64/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.302076339 seconds)
  (65/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.268475025 seconds)
  (66/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.268325246 seconds)
  (67/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.318516218 seconds)
  (68/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.262790701 seconds)
  (69/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.258735636 seconds)
  (70/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.269777421 seconds)
  (71/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.252521521 seconds)
  (72/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.295810704 seconds)
  (73/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.255167821 seconds)
  (74/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.261405642 seconds)
  (75/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.312004909 seconds)
  (76/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.255505152 seconds)
  (77/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.270762203 seconds)
  (78/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.301748704 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.299135253 seconds)
  (80/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.316112288 seconds)
  (81/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.288925 seconds)
  (82/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.270236566 seconds)
  (83/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.287420459 seconds)
  (84/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.265710473 seconds)
  (85/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.261753392 seconds)
  (86/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.254470678 seconds)
  (87/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.333114143 seconds)
  (88/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.257733272 seconds)
  (89/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.261983365 seconds)
  (90/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.262825627 seconds)
  (91/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.415961106 seconds)
  (92/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.268327117 seconds)
  (93/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.291464059 seconds)
  (94/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.271434671 seconds)
  (95/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.318822152 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.265111674 seconds)
  (97/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.260306034 seconds)
  (98/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.270343985 seconds)
  (99/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.250551372 seconds)
  (100/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.275748927 seconds)
  (101/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.283606795 seconds)
  (102/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.34040894 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.286288106 seconds)
  (104/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.291128006 seconds)
  (105/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.256638444 seconds)
  (106/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.266215644 seconds)
  (107/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.310286329 seconds)
  (108/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.414124524 seconds)
  (109/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.263785957 seconds)
  (110/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.29944721 seconds)
  (111/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.268885457 seconds)
  (112/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.290761919 seconds)
  (113/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.258572967 seconds)
  (114/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.276002299 seconds)
  (115/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.257695325 seconds)
  (116/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.285955928 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.261805928 seconds)
  (118/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.288513368 seconds)
  (119/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.371962933 seconds)
  (120/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.272114967 seconds)
  (121/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.262396387 seconds)
  (122/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.268956172 seconds)
  (123/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.274626051 seconds)
  (124/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.258378688 seconds)
  (125/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.299958183 seconds)
  (126/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.249763245 seconds)
  (127/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.269980482 seconds)
  (128/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.266385282 seconds)
  (129/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.272054278 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.315264221 seconds)
  (131/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.332504497 seconds)
  (132/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.273525827 seconds)
  (133/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.259529769 seconds)
  (134/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.267181605 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.26083423 seconds)
  (136/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.256087465 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.269084853 seconds)
  (138/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.271607853 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.291876479 seconds)
  (140/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.257926463 seconds)
  (141/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.289774034 seconds)
  (142/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.288073725 seconds)
  (143/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.266580321 seconds)
  (144/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.289311094 seconds)
  (145/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.260057606 seconds)
  (146/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.26724758 seconds)
  (147/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.255837764 seconds)
  (148/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.262483361 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.266991531 seconds)
  (150/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.292148276 seconds)
  (151/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.269388795 seconds)
  (152/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.259220457 seconds)
  (153/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.313809945 seconds)
  (154/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.268546481 seconds)
  (155/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.29532453 seconds)
  (156/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.299459774 seconds)
  (157/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.257249854 seconds)
  (158/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.25797984 seconds)
  (159/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.259189178 seconds)
  (160/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.25140582 seconds)
  (161/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.307271779 seconds)
  (162/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.267138773 seconds)
  (163/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.297686168 seconds)
  (164/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.259234066 seconds)
  (165/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.271452379 seconds)
  (166/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.28626744 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.256965956 seconds)
  (168/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.267812067 seconds)
  (169/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.27687755 seconds)
  (170/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.271412667 seconds)
  (171/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.296371822 seconds)
  (172/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.29446733 seconds)
  (173/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.26709354 seconds)
  (174/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.267289707 seconds)
  (175/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.296345728 seconds)
  (176/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.272894693 seconds)
  (177/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.266659554 seconds)
  (178/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.274107846 seconds)
  (179/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.307328386 seconds)
  (180/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.267234625 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.277031273 seconds)
  (182/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.258727669 seconds)
  (183/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.315449492 seconds)
  (184/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.266114569 seconds)
  (185/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.267185274 seconds)
  (186/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.282473769 seconds)
  (187/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.275400856 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.264733839 seconds)
  (189/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.302954937 seconds)
  (190/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.262744467 seconds)
  (191/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.276929446 seconds)
  (192/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.26612835 seconds)
  (193/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.272447044 seconds)
  (194/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.264480261 seconds)
  (195/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.254966778 seconds)
  (196/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.274086851 seconds)
  (197/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.285168324 seconds)
  (198/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.265493637 seconds)
  (199/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.27747141 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.259913018 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.311030931 seconds)
  (202/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.291268929 seconds)
  (203/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.275739944 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.289589754 seconds)
  (205/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.269198109 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.280478302 seconds)
  (207/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.273784765 seconds)
  (208/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.463804371 seconds)
  (209/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.26482925 seconds)
  (210/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.267660657 seconds)
  (211/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.264410834 seconds)
  (212/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.259914657 seconds)
  (213/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.296872398 seconds)
  (214/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.26773198 seconds)
  (215/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.271956633 seconds)
  (216/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.267828211 seconds)
  (217/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.356097661 seconds)
  (218/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.298436181 seconds)
  (219/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.260002616 seconds)
  (220/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.271494084 seconds)
  (221/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.278451779 seconds)
  (222/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.264851759 seconds)
  (223/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.264668562 seconds)
  (224/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.268369696 seconds)
  (225/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.415135171 seconds)
  (226/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.268741607 seconds)
  (227/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.2783284 seconds)
  (228/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.275032067 seconds)
  (229/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.262555964 seconds)
  (230/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.26415087 seconds)
  (231/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.287759919 seconds)
  (232/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.353786924 seconds)
  (233/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.287318715 seconds)
  (234/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.300502898 seconds)
  (235/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.335542835 seconds)
  (236/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.262137742 seconds)
  (237/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.260240206 seconds)
  (238/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.255832916 seconds)
  (239/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.257107798 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.266787635 seconds)
  (241/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.254358356 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.261305209 seconds)
  (243/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.267237057 seconds)
  (244/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.288203352 seconds)
  (245/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.268971045 seconds)
  (246/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.299666666 seconds)
  (247/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.262122962 seconds)
  (248/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.262700338 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.269036382 seconds)
  (250/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.275158682 seconds)
  (251/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.261236319 seconds)
  (252/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.269129436 seconds)
  (253/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.259637589 seconds)
  (254/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.262109178 seconds)
  (255/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.272570172 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.265192425 seconds)
  (257/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.263949504 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.266211754 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.282352757 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.258396522 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.26556286 seconds)
  (262/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.257174361 seconds)
  (263/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.301681865 seconds)
  (264/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.280495194 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.301751945 seconds)
  (266/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.27593524 seconds)
  (267/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.268968546 seconds)
  (268/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.26614724 seconds)
  (269/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.25796917 seconds)
  (270/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.390775722 seconds)
  (271/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.270358272 seconds)
  (272/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.259253044 seconds)
  (273/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.267345559 seconds)
  (274/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.269840075 seconds)
  (275/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.259457523 seconds)
  (276/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.287049858 seconds)
  (277/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.276373284 seconds)
  (278/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.264757137 seconds)
  (279/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.26405793 seconds)
  (280/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.266984981 seconds)
  (281/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.267249162 seconds)
  (282/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.294436066 seconds)
  (283/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.303002104 seconds)
  (284/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.274754925 seconds)
  (285/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.256256569 seconds)
  (286/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.269067924 seconds)
  (287/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.265009613 seconds)
  (288/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.270186716 seconds)
  (289/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.263763774 seconds)
  (290/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.298897784 seconds)
  (291/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.317646718 seconds)
  (292/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.261544262 seconds)
  (293/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.257118419 seconds)
  (294/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.292686195 seconds)
  (295/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.270188505 seconds)
  (296/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.264909295 seconds)
  (297/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.255188429 seconds)
  (298/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.31035922 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.26910416 seconds)
  (300/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.251690131 seconds)
  (301/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.274257642 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.263989416 seconds)
  (303/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.281631277 seconds)
  (304/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.287847423 seconds)
  (305/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.28073229 seconds)
  (306/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.283471624 seconds)
  (307/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.300106716 seconds)
  (308/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.290800189 seconds)
  (309/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.390461024 seconds)
  (310/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.274239613 seconds)
  (311/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.293230189 seconds)
  (312/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.273481643 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.278437575 seconds)
  (314/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.267167687 seconds)
  (315/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.281423626 seconds)
  (316/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.294994561 seconds)
  (317/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.269390692 seconds)
  (318/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.268055365 seconds)
  (319/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.261975346 seconds)
  (320/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.265343766 seconds)
  (321/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.275916022 seconds)
  (322/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.260195404 seconds)
  (323/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.268252766 seconds)
  (324/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.278261897 seconds)
  (325/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.275697217 seconds)
  (326/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.288271342 seconds)
  (327/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.275746442 seconds)
  (328/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.268754798 seconds)
  (329/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.251117124 seconds)
  (330/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.26462142 seconds)
  (331/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.377817855 seconds)
  (332/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.259140001 seconds)
  (333/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.275713468 seconds)
  (334/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.273303263 seconds)
  (335/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.263222118 seconds)
  (336/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.299829408 seconds)
  (337/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.279881163 seconds)
  (338/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.317720117 seconds)
  (339/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.258370796 seconds)
  (340/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.26777603 seconds)
  (341/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.276027112 seconds)
  (342/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.272832612 seconds)
  (343/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.306482116 seconds)
  (344/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.26541465 seconds)
  (345/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.267889448 seconds)
  (346/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.264869603 seconds)
  (347/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.269116047 seconds)
  (348/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.259299956 seconds)
  (349/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.275339002 seconds)
  (350/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.273472721 seconds)
  (351/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.315779413 seconds)
  (352/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.259003136 seconds)
  (353/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.257392639 seconds)
  (354/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.269937085 seconds)
  (355/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.278845438 seconds)
  (356/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.264186106 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.315746508 seconds)
  (358/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.272871734 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.286911989 seconds)
  (360/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.282727018 seconds)
  (361/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.264943086 seconds)
  (362/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.26512644 seconds)
  (363/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.265438826 seconds)
  (364/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.282034817 seconds)
  (365/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.268016096 seconds)
  (366/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.260293657 seconds)
  (367/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.420558031 seconds)
  (368/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.308399569 seconds)
  (369/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.312221354 seconds)
  (370/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.270730942 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.263823583 seconds)
  (372/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.268188604 seconds)
  (373/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.27254783 seconds)
  (374/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.267538525 seconds)
  (375/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.28745552 seconds)
  (376/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.391256647 seconds)
  (377/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.273933942 seconds)
  (378/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.262347276 seconds)
  (379/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.26369935 seconds)
  (380/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.260910415 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.279913714 seconds)
  (382/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.288464581 seconds)
  (383/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.255434401 seconds)
  (384/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.269118534 seconds)
  (385/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.26357053 seconds)
  (386/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.275317284 seconds)
  (387/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.27908905 seconds)
  (388/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.259078353 seconds)
  (389/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.279969533 seconds)
  (390/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.297375502 seconds)
  (391/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.272033459 seconds)
  (392/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.267697793 seconds)
  (393/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.265643647 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.279738315 seconds)
  (395/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.281358991 seconds)
  (396/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.27514739 seconds)
  (397/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.27116278 seconds)
  (398/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.334822406 seconds)
  (399/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.284695019 seconds)
  (400/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.272843639 seconds)
  (401/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.266791818 seconds)
  (402/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.323466203 seconds)
  (403/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.270668284 seconds)
  (404/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.267907749 seconds)
  (405/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.268976497 seconds)
  (406/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.285916773 seconds)
  (407/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.321525361 seconds)
  (408/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.331702423 seconds)
  (409/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.263974339 seconds)
  (410/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.267551716 seconds)
  (411/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.270050102 seconds)
  (412/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.279617728 seconds)
  (413/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.274909939 seconds)
  (414/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.375148894 seconds)
  (415/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.324466517 seconds)
  (416/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.285042141 seconds)
  (417/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.276898511 seconds)
  (418/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.257430913 seconds)
  (419/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.273989974 seconds)
  (420/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.266328231 seconds)
  (421/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.269303406 seconds)
  (422/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.255916733 seconds)
  (423/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.345483936 seconds)
  (424/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.26052388 seconds)
  (425/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.279437956 seconds)
  (426/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.263806155 seconds)
  (427/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.273403284 seconds)
  (428/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.270782708 seconds)
  (429/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.263785078 seconds)
  (430/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.264708283 seconds)
  (431/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.26066332 seconds)
  (432/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.269227807 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.269046253 seconds)
  (434/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.266590408 seconds)
  (435/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.253789925 seconds)
  (436/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.287397961 seconds)
  (437/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.264296132 seconds)
  (438/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.354161628 seconds)
  (439/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.260707669 seconds)
  (440/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.472699398 seconds)
  (441/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.269748843 seconds)
  (442/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.35820584 seconds)
  (443/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.273463499 seconds)
  (444/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.260967934 seconds)
  (445/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.271013229 seconds)
  (446/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.280631452 seconds)
  (447/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.282406948 seconds)
  (448/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.301243782 seconds)
  (449/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.276060564 seconds)
  (450/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.271373686 seconds)
  (451/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.417314946 seconds)
  (452/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.279566244 seconds)
  (453/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.26028886 seconds)
  (454/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.300002512 seconds)
  (455/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.261956389 seconds)
  (456/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.354885469 seconds)
  (457/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.269271095 seconds)
  (458/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.280381973 seconds)
  (459/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.266983 seconds)
  (460/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.267296564 seconds)
  (461/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.272285879 seconds)
  (462/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.259780827 seconds)
  (463/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.277839527 seconds)
  (464/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.277914948 seconds)
  (465/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.272214784 seconds)
  (466/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.253210048 seconds)
  (467/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.296771106 seconds)
  (468/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.263512747 seconds)
  (469/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.304652392 seconds)
  (470/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.298772478 seconds)
  (471/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.285148075 seconds)
  (472/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.265645184 seconds)
  (473/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.294819065 seconds)
  (474/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.287975671 seconds)
  (475/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.268956184 seconds)
  (476/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.42217811 seconds)
  (477/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.331555129 seconds)
  (478/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.269182156 seconds)
  (479/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.26216502 seconds)
  (480/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.29881109 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.271078953 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.279495582 seconds)
  (483/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.267845099 seconds)
  (484/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.305518659 seconds)
  (485/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.26949415 seconds)
  (486/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.268121721 seconds)
  (487/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.269816901 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.269185063 seconds)
  (489/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.263951272 seconds)
  (490/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.270003117 seconds)
  (491/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.279099224 seconds)
  (492/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.273355522 seconds)
  (493/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.256496523 seconds)
  (494/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.330913391 seconds)
  (495/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.261401031 seconds)
  (496/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.257189367 seconds)
  (497/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.297703698 seconds)
  (498/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.358713601 seconds)
  (499/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.251873612 seconds)
  (500/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.270525795 seconds)
  (501/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.267314836 seconds)
  (502/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.269592437 seconds)
  (503/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.272254279 seconds)
  (504/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.262316053 seconds)
  (505/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.282983026 seconds)
  (506/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.270833855 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.280083541 seconds)
  (508/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.267833794 seconds)
  (509/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.280508413 seconds)
  (510/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.262916265 seconds)
  (511/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.384042981 seconds)
  (512/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.254985942 seconds)
  (513/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.270592944 seconds)
  (514/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.2935847 seconds)
  (515/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.28080312 seconds)
  (516/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.306890396 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.260976787 seconds)
  (518/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.290375958 seconds)
  (519/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.321455435 seconds)
  (520/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.466994923 seconds)
  (521/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.263087243 seconds)
  (522/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.277167126 seconds)
  (523/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.255177931 seconds)
  (524/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.264935394 seconds)
  (525/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.421134892 seconds)
  (526/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.281060603 seconds)
  (527/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.273393981 seconds)
  (528/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.260824961 seconds)
  (529/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.28381538 seconds)
  (530/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.281567904 seconds)
  (531/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.275923752 seconds)
  (532/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.284663171 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.266238262 seconds)
  (534/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.378873347 seconds)
  (535/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.268361216 seconds)
  (536/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.296875531 seconds)
  (537/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.276617977 seconds)
  (538/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.271432898 seconds)
  (539/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.278107643 seconds)
  (540/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.291816961 seconds)
  (541/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.262711363 seconds)
  (542/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.276505624 seconds)
  (543/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.263540228 seconds)
  (544/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.263783 seconds)
  (545/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.284406326 seconds)
  (546/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.2857532 seconds)
  (547/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.314910633 seconds)
  (548/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.295946477 seconds)
  (549/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.292364231 seconds)
  (550/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.262959509 seconds)
  (551/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.271878114 seconds)
  (552/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.267741948 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.265013257 seconds)
  (554/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.300388318 seconds)
  (555/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.255828333 seconds)
  (556/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.295466112 seconds)
  (557/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.264643496 seconds)
  (558/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.272533386 seconds)
  (559/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.272696797 seconds)
  (560/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.295035241 seconds)
  (561/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.254393153 seconds)
  (562/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.312715587 seconds)
  (563/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.292892186 seconds)
  (564/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.271147667 seconds)
  (565/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.30426644 seconds)
  (566/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.284301766 seconds)
  (567/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.282473472 seconds)
  (568/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.26930575 seconds)
  (569/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.380563398 seconds)
  (570/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.295459141 seconds)
  (571/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.272013911 seconds)
  (572/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.268068587 seconds)
  (573/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.27186069 seconds)
  (574/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.273183275 seconds)
  (575/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.260004727 seconds)
  (576/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.2656168 seconds)
  (577/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.360027463 seconds)
  (578/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.273225686 seconds)
  (579/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.333864088 seconds)
  (580/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.293244888 seconds)
  (581/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.292107784 seconds)
  (582/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.268224746 seconds)
  (583/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.259026591 seconds)
  (584/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.381013884 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.268400966 seconds)
  (586/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.423300787 seconds)
  (587/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.299841158 seconds)
  (588/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.307553609 seconds)
  (589/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.267777943 seconds)
  (590/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.30110812 seconds)
  (591/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.257102259 seconds)
  (592/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.275506478 seconds)
  (593/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.285092099 seconds)
  (594/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.273726312 seconds)
  (595/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.264739097 seconds)
  (596/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.378227946 seconds)
  (597/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.261353232 seconds)
  (598/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.276393835 seconds)
  (599/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.327594916 seconds)
  (600/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.328239462 seconds)
  (601/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.281901599 seconds)
  (602/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.395431779 seconds)
  (603/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.290603237 seconds)
  (604/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.270954229 seconds)
  (605/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.261605159 seconds)
  (606/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.308372152 seconds)
  (607/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.296850696 seconds)
  (608/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.262592966 seconds)
  (609/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.2704629 seconds)
  (610/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.279104987 seconds)
  (611/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.274648521 seconds)
  (612/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.270551065 seconds)
  (613/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.269566318 seconds)
  (614/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.273000821 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.298565708 seconds)
  (616/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.253590899 seconds)
  (617/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.294307589 seconds)
  (618/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.262657154 seconds)
  (619/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.255920305 seconds)
  (620/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.307305246 seconds)
  (621/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.275362039 seconds)
  (622/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.278478102 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.287500629 seconds)
  (624/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.273225515 seconds)
  (625/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.357212435 seconds)
  (626/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.276493007 seconds)
  (627/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.270592964 seconds)
  (628/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.283067324 seconds)
  (629/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.2714292 seconds)
  (630/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.278372557 seconds)
  (631/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.279534484 seconds)
  (632/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.306953607 seconds)
  (633/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.267809609 seconds)
  (634/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.271275367 seconds)
  (635/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.266977788 seconds)
  (636/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.277171609 seconds)
  (637/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.256873669 seconds)
  (638/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.259537544 seconds)
  (639/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.274196304 seconds)
  (640/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.330287281 seconds)
  (641/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.260966101 seconds)
  (642/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.293546487 seconds)
  (643/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.380604366 seconds)
  (644/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.300653739 seconds)
  (645/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.267967337 seconds)
  (646/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.290198329 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.297792988 seconds)
  (648/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.263225313 seconds)
  (649/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.261541311 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.274478733 seconds)
  (651/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.299489568 seconds)
  (652/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.269492515 seconds)
  (653/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.269143552 seconds)
  (654/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.255289826 seconds)
  (655/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.265958506 seconds)
  (656/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.287916138 seconds)
  (657/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.262164401 seconds)
  (658/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.328171935 seconds)
  (659/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.280034861 seconds)
  (660/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.263522485 seconds)
  (661/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.338452342 seconds)
  (662/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.301210709 seconds)
  (663/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.307347177 seconds)
  (664/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.313153263 seconds)
  (665/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.27788692 seconds)
  (666/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.293097572 seconds)
  (667/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.26590364 seconds)
  (668/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.340663413 seconds)
  (669/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.270107692 seconds)
  (670/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.317609967 seconds)
  (671/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.26997765 seconds)
  (672/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.275612623 seconds)
  (673/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.282414101 seconds)
  (674/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.328991864 seconds)
  (675/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.290595145 seconds)
  (676/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.34407031 seconds)
  (677/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.319540476 seconds)
  (678/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.274643972 seconds)
  (679/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.282672363 seconds)
  (680/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.265273185 seconds)
done (took 1555.817701808 seconds)
(21/22) benchmarking "inference"...
  (1/3) benchmarking "allinference"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 37.73300242 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 32.745652035 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 34.169195808 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 35.179155714 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 33.938955278 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 34.159763418 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 42.032755656 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 35.711158775 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 37.579422105 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 35.458385236 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 34.173295988 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 34.820289175 seconds)
  done (took 429.947490669 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 35.770610873 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 34.777695828 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 35.843487806 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 34.443629032 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 35.285869503 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 37.617080639 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 47.062854168 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 36.429610092 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 36.111281477 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 36.012130011 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 38.195036228 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 35.917897042 seconds)
  done (took 446.923480152 seconds)
  (3/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 37.313286184 seconds)
    (2/12) benchmarking "rand(Float64)"...
    done (took 37.504733588 seconds)
    (3/12) benchmarking "broadcasting"...
    done (took 37.833430789 seconds)
    (4/12) benchmarking "many_const_calls"...
    done (took 36.048684707 seconds)
    (5/12) benchmarking "many_global_refs"...
    done (took 38.088458447 seconds)
    (6/12) benchmarking "many_opaque_closures"...
    done (took 38.103799811 seconds)
    (7/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 41.291420688 seconds)
    (8/12) benchmarking "many_method_matches"...
    done (took 35.321835613 seconds)
    (9/12) benchmarking "println(::QuoteNode)"...
    done (took 37.378880917 seconds)
    (10/12) benchmarking "many_invoke_calls"...
    done (took 35.672967672 seconds)
    (11/12) benchmarking "many_local_vars"...
    done (took 37.132608676 seconds)
    (12/12) benchmarking "sin(42)"...
    done (took 35.556497294 seconds)
  done (took 451.708267753 seconds)
done (took 1330.827772318 seconds)
(22/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 5.095392589 seconds)
    (2/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 5.123235152 seconds)
    (3/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 5.236582708 seconds)
    (4/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 5.270505232 seconds)
    (5/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 8.771038012 seconds)
    (6/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 10.063180517 seconds)
    (7/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 5.455716657 seconds)
    (8/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 5.09515364 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 10.059291811 seconds)
    (10/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 5.421442358 seconds)
    (11/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 9.632385834 seconds)
    (12/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 9.114823448 seconds)
    (13/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 5.30673777 seconds)
    (14/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 5.475365651 seconds)
    (15/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 5.321058346 seconds)
    (16/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 5.406403805 seconds)
    (17/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 5.329119382 seconds)
    (18/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 5.279449034 seconds)
    (19/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 5.406862509 seconds)
    (20/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 5.32473671 seconds)
    (21/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 5.221077874 seconds)
    (22/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 5.152622779 seconds)
    (23/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 5.083122242 seconds)
    (24/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 5.242967892 seconds)
    (25/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 5.366635384 seconds)
    (26/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 7.643963481 seconds)
    (27/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 5.56462088 seconds)
    (28/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 5.253897371 seconds)
    (29/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 5.110745496 seconds)
    (30/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 5.146301939 seconds)
    (31/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 5.459668258 seconds)
    (32/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 5.429980243 seconds)
    (33/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 5.312138878 seconds)
    (34/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 5.401728208 seconds)
    (35/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 5.265632503 seconds)
    (36/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 10.061094855 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.179907508 seconds)
    (38/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 5.399864382 seconds)
    (39/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 5.089968486 seconds)
    (40/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 5.145892729 seconds)
    (41/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 5.339693389 seconds)
    (42/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 5.304427723 seconds)
    (43/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 10.065968278 seconds)
    (44/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 5.554252964 seconds)
    (45/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 9.563805042 seconds)
    (46/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 9.340954797 seconds)
    (47/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 5.306346525 seconds)
    (48/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 5.405565364 seconds)
    (49/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 5.18940625 seconds)
    (50/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 5.312456941 seconds)
    (51/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 5.713130198 seconds)
    (52/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 10.09497945 seconds)
    (53/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 15.66255531 seconds)
    (54/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 5.202588189 seconds)
    (55/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 5.385911605 seconds)
    (56/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 5.32168853 seconds)
    (57/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 5.319345674 seconds)
    (58/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 5.080083744 seconds)
    (59/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 5.415399486 seconds)
    (60/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 10.069442487 seconds)
    (61/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 10.495304411 seconds)
    (62/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.447642916 seconds)
    (63/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 5.284753014 seconds)
    (64/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 7.969952855 seconds)
    (65/434) benchmarking ("perf_countequals", "Float32")...
    done (took 5.131410697 seconds)
    (66/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 5.384937764 seconds)
    (67/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 5.312706138 seconds)
    (68/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 5.459077642 seconds)
    (69/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 5.101996958 seconds)
    (70/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 5.242074538 seconds)
    (71/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 5.305907982 seconds)
    (72/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 5.312169563 seconds)
    (73/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 6.111227157 seconds)
    (74/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 5.138444611 seconds)
    (75/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 5.082989987 seconds)
    (76/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 5.136039251 seconds)
    (77/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 10.067788199 seconds)
    (78/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 14.263486452 seconds)
    (79/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 5.363612114 seconds)
    (80/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 5.45099919 seconds)
    (81/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 5.14509514 seconds)
    (82/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 5.397715579 seconds)
    (83/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.16071723 seconds)
    (84/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 5.350941698 seconds)
    (85/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 5.087139355 seconds)
    (86/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 5.400544404 seconds)
    (87/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 5.460603807 seconds)
    (88/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 5.205706968 seconds)
    (89/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 5.128461992 seconds)
    (90/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 5.244585195 seconds)
    (91/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 5.938972256 seconds)
    (92/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 5.08232167 seconds)
    (93/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.168121805 seconds)
    (94/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 5.220706386 seconds)
    (95/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 5.309864279 seconds)
    (96/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 9.204548775 seconds)
    (97/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 8.938823814 seconds)
    (98/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 10.068959752 seconds)
    (99/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 5.495555073 seconds)
    (100/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 5.310880685 seconds)
    (101/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 5.433858992 seconds)
    (102/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 5.552704366 seconds)
    (103/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 5.302966096 seconds)
    (104/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 5.518087927 seconds)
    (105/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 5.092836617 seconds)
    (106/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 10.066446773 seconds)
    (107/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 12.008933123 seconds)
    (108/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 10.289705691 seconds)
    (109/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 5.171172475 seconds)
    (110/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 5.238289654 seconds)
    (111/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 5.140295924 seconds)
    (112/434) benchmarking ("sort", "BigInt", 0)...
    done (took 10.058835084 seconds)
    (113/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 10.354167016 seconds)
    (114/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 5.131827169 seconds)
    (115/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 5.40350997 seconds)
    (116/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 10.07236987 seconds)
    (117/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 16.393499368 seconds)
    (118/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 5.83311055 seconds)
    (119/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 5.121070025 seconds)
    (120/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.166681472 seconds)
    (121/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 10.083282243 seconds)
    (122/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 12.627184874 seconds)
    (123/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 10.227581778 seconds)
    (124/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 9.109387946 seconds)
    (125/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 5.399647131 seconds)
    (126/434) benchmarking ("sort", "Float32", 0)...
    done (took 5.783872279 seconds)
    (127/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 5.154271899 seconds)
    (128/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 5.092852094 seconds)
    (129/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 5.354031899 seconds)
    (130/434) benchmarking ("sort", "Int8", 0)...
    done (took 5.144143636 seconds)
    (131/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 5.736775877 seconds)
    (132/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 5.313999926 seconds)
    (133/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 10.075731651 seconds)
    (134/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 11.959611206 seconds)
    (135/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 5.313035276 seconds)
    (136/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 5.343004932 seconds)
    (137/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 5.317455591 seconds)
    (138/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 5.908368879 seconds)
    (139/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 5.141893844 seconds)
    (140/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 5.330582192 seconds)
    (141/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 9.835063946 seconds)
    (142/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 5.323439182 seconds)
    (143/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 5.312186769 seconds)
    (144/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 5.206394113 seconds)
    (145/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 5.218463765 seconds)
    (146/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.258004562 seconds)
    (147/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 5.100475202 seconds)
    (148/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 5.310012227 seconds)
    (149/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 5.257127804 seconds)
    (150/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 5.303690017 seconds)
    (151/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 5.092334394 seconds)
    (152/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 5.257635886 seconds)
    (153/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 10.072412441 seconds)
    (154/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 9.878995657 seconds)
    (155/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 5.250876942 seconds)
    (156/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 5.073306896 seconds)
    (157/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 5.401986218 seconds)
    (158/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 5.293780484 seconds)
    (159/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 5.081653029 seconds)
    (160/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 5.185825866 seconds)
    (161/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 5.122948453 seconds)
    (162/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 5.198326958 seconds)
    (163/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 5.089985557 seconds)
    (164/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 5.190678364 seconds)
    (165/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 9.692358014 seconds)
    (166/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 6.163022172 seconds)
    (167/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 5.439485464 seconds)
    (168/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 5.27132289 seconds)
    (169/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 5.995494264 seconds)
    (170/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 10.074804978 seconds)
    (171/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 9.248574963 seconds)
    (172/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 5.147994216 seconds)
    (173/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 5.128266311 seconds)
    (174/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 10.069955499 seconds)
    (175/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 13.605975057 seconds)
    (176/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 5.312751253 seconds)
    (177/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 5.667518064 seconds)
    (178/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.281410538 seconds)
    (179/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 5.705289505 seconds)
    (180/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 5.082613968 seconds)
    (181/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 5.433853372 seconds)
    (182/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 5.135853071 seconds)
    (183/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 5.423836905 seconds)
    (184/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 9.921577149 seconds)
    (185/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 5.98457696 seconds)
    (186/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 5.279400398 seconds)
    (187/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 5.309150298 seconds)
    (188/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 5.311513083 seconds)
    (189/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 5.334526731 seconds)
    (190/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 5.446001297 seconds)
    (191/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 10.078811407 seconds)
    (192/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 13.900139285 seconds)
    (193/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 5.505078139 seconds)
    (194/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 5.93845119 seconds)
    (195/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 5.131888087 seconds)
    (196/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 5.087075735 seconds)
    (197/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 5.192374806 seconds)
    (198/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 5.145785715 seconds)
    (199/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 5.60975882 seconds)
    (200/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 5.32610311 seconds)
    (201/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 5.457352212 seconds)
    (202/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 5.159192074 seconds)
    (203/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 5.523780767 seconds)
    (204/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 5.089333293 seconds)
    (205/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 5.315655515 seconds)
    (206/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 5.306975095 seconds)
    (207/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 5.259253058 seconds)
    (208/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 5.086509713 seconds)
    (209/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 5.30350427 seconds)
    (210/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 5.112251086 seconds)
    (211/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 5.315188938 seconds)
    (212/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 5.170582007 seconds)
    (213/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 5.151018418 seconds)
    (214/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 5.097780746 seconds)
    (215/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 5.316888977 seconds)
    (216/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 5.267607746 seconds)
    (217/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 5.204403944 seconds)
    (218/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 5.406276513 seconds)
    (219/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 5.49407703 seconds)
    (220/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 5.211324473 seconds)
    (221/434) benchmarking ("perf_countequals", "Int64")...
    done (took 5.176844765 seconds)
    (222/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 5.165073723 seconds)
    (223/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 5.295986317 seconds)
    (224/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 10.068282746 seconds)
    (225/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 5.725503417 seconds)
    (226/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 10.070717074 seconds)
    (227/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 5.291455038 seconds)
    (228/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 5.167953069 seconds)
    (229/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 5.670333172 seconds)
    (230/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 5.335552808 seconds)
    (231/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 5.188233471 seconds)
    (232/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 5.126892815 seconds)
    (233/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 5.582847153 seconds)
    (234/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 5.27053542 seconds)
    (235/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 5.4116168 seconds)
    (236/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 5.280340388 seconds)
    (237/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 10.064526394 seconds)
    (238/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 5.882858767 seconds)
    (239/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 6.0716702 seconds)
    (240/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 5.490382803 seconds)
    (241/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 5.173169211 seconds)
    (242/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 5.07831139 seconds)
    (243/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 5.215095932 seconds)
    (244/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 10.06864687 seconds)
    (245/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 6.424586693 seconds)
    (246/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 5.136035918 seconds)
    (247/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 5.347563941 seconds)
    (248/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 5.154865107 seconds)
    (249/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 5.718712765 seconds)
    (250/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 10.077896438 seconds)
    (251/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 12.372460991 seconds)
    (252/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 5.08384576 seconds)
    (253/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 10.069077847 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 12.137288078 seconds)
    (255/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 5.331589679 seconds)
    (256/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 5.311809547 seconds)
    (257/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 5.174158098 seconds)
    (258/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 5.155916135 seconds)
    (259/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 10.064876683 seconds)
    (260/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 5.160607298 seconds)
    (261/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 5.175221512 seconds)
    (262/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 5.145897866 seconds)
    (263/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 5.221030089 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 5.321312459 seconds)
    (265/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 5.284137792 seconds)
    (266/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 5.407983543 seconds)
    (267/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 5.143491424 seconds)
    (268/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 5.539401976 seconds)
    (269/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 5.140785712 seconds)
    (270/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 5.178954859 seconds)
    (271/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 5.265611926 seconds)
    (272/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 5.348731994 seconds)
    (273/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 5.451903837 seconds)
    (274/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 5.100139262 seconds)
    (275/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 10.072553571 seconds)
    (276/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 9.489878091 seconds)
    (277/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 5.558909189 seconds)
    (278/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 5.27210755 seconds)
    (279/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 5.090537778 seconds)
    (280/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 5.07982298 seconds)
    (281/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 5.308140945 seconds)
    (282/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 5.320430246 seconds)
    (283/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 5.353554353 seconds)
    (284/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 5.291492873 seconds)
    (285/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 5.092739443 seconds)
    (286/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 5.335443684 seconds)
    (287/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 5.202084601 seconds)
    (288/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 5.569861911 seconds)
    (289/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 5.585274913 seconds)
    (290/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.219223672 seconds)
    (291/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.161783184 seconds)
    (292/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 5.318111511 seconds)
    (293/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 5.100208049 seconds)
    (294/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 5.665773342 seconds)
    (295/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 5.151270095 seconds)
    (296/434) benchmarking ("perf_countequals", "Int8")...
    done (took 5.24173774 seconds)
    (297/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 9.007392699 seconds)
    (298/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 8.952061695 seconds)
    (299/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 5.097969152 seconds)
    (300/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 5.29512624 seconds)
    (301/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 5.233934647 seconds)
    (302/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 10.071336937 seconds)
    (303/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 14.142171251 seconds)
    (304/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 9.821652559 seconds)
    (305/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 5.3452632 seconds)
    (306/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 5.092944951 seconds)
    (307/434) benchmarking ("sort", "Int64", 0)...
    done (took 7.58640592 seconds)
    (308/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 10.070790733 seconds)
    (309/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 5.924472197 seconds)
    (310/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 5.286897702 seconds)
    (311/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 10.077916677 seconds)
    (312/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 5.856566911 seconds)
    (313/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 10.069354642 seconds)
    (314/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 12.505128968 seconds)
    (315/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 10.075207438 seconds)
    (316/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 8.952385825 seconds)
    (317/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.172435468 seconds)
    (318/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 10.067210132 seconds)
    (319/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 5.823151744 seconds)
    (320/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 5.31535545 seconds)
    (321/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 5.093180307 seconds)
    (322/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 5.267016025 seconds)
    (323/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 6.099159053 seconds)
    (324/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 5.249836092 seconds)
    (325/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 10.069981852 seconds)
    (326/434) benchmarking ("sort", "Float64", 0)...
    done (took 7.195826737 seconds)
    (327/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 10.075143876 seconds)
    (328/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 12.552055073 seconds)
    (329/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 5.160259105 seconds)
    (330/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 5.299390798 seconds)
    (331/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 5.405600168 seconds)
    (332/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 5.317408186 seconds)
    (333/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 5.748610501 seconds)
    (334/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.244748794 seconds)
    (335/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 5.283666423 seconds)
    (336/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 5.204574931 seconds)
    (337/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 6.246096216 seconds)
    (338/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 6.284545822 seconds)
    (339/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 5.282991044 seconds)
    (340/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 5.137558394 seconds)
    (341/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 5.47679037 seconds)
    (342/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 5.159887186 seconds)
    (343/434) benchmarking ("perf_countequals", "Float64")...
    done (took 5.158096925 seconds)
    (344/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 10.064349836 seconds)
    (345/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 5.94052391 seconds)
    (346/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 10.069490665 seconds)
    (347/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 5.117422795 seconds)
    (348/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 5.355128652 seconds)
    (349/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 5.802864914 seconds)
    (350/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 5.324406066 seconds)
    (351/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 10.074063946 seconds)
    (352/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 5.889842422 seconds)
    (353/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 5.258723019 seconds)
    (354/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 5.756319184 seconds)
    (355/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 5.374412446 seconds)
    (356/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 5.267318592 seconds)
    (357/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 5.186759587 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.290623445 seconds)
    (359/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 5.499362797 seconds)
    (360/434) benchmarking ("sort", "Bool", 0)...
    done (took 5.105394666 seconds)
    (361/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 5.45077441 seconds)
    (362/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 5.24683306 seconds)
    (363/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 5.428431329 seconds)
    (364/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 5.151297561 seconds)
    (365/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 5.983371474 seconds)
    (366/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 10.082533605 seconds)
    (367/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 10.508317291 seconds)
    (368/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 12.615864858 seconds)
    (369/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 5.28228343 seconds)
    (370/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 5.427289924 seconds)
    (371/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 5.265650493 seconds)
    (372/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 5.548350623 seconds)
    (373/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 5.329170225 seconds)
    (374/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 10.080216291 seconds)
    (375/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 10.499356822 seconds)
    (376/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 6.302445728 seconds)
    (377/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 5.178561803 seconds)
    (378/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 5.252085964 seconds)
    (379/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 5.089546085 seconds)
    (380/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 5.359872313 seconds)
    (381/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 10.074937518 seconds)
    (382/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 10.523915436 seconds)
    (383/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 5.834101997 seconds)
    (384/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 5.247372258 seconds)
    (385/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 10.06985136 seconds)
    (386/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 5.487858167 seconds)
    (387/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.08205022 seconds)
    (388/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 9.695609126 seconds)
    (389/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 5.321361399 seconds)
    (390/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 5.336103016 seconds)
    (391/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 5.302288899 seconds)
    (392/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 5.159229087 seconds)
    (393/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 5.133988515 seconds)
    (394/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 5.25138657 seconds)
    (395/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 5.094900531 seconds)
    (396/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 10.069136069 seconds)
    (397/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 12.751599692 seconds)
    (398/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 5.18779648 seconds)
    (399/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 5.161919151 seconds)
    (400/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 5.12796666 seconds)
    (401/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 10.115339468 seconds)
    (402/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 16.334218053 seconds)
    (403/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.706212368 seconds)
    (404/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 5.094151727 seconds)
    (405/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 5.082366505 seconds)
    (406/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 5.15104472 seconds)
    (407/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 10.073685369 seconds)
    (408/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 10.761715779 seconds)
    (409/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 5.987188697 seconds)
    (410/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 5.409788935 seconds)
    (411/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 5.262939615 seconds)
    (412/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 5.246624386 seconds)
    (413/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 5.159276836 seconds)
    (414/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 5.172706868 seconds)
    (415/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 5.153808757 seconds)
    (416/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 5.268357136 seconds)
    (417/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 5.140187837 seconds)
    (418/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 5.282921616 seconds)
    (419/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 5.156220014 seconds)
    (420/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 5.327769898 seconds)
    (421/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 5.290162864 seconds)
    (422/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 5.218582447 seconds)
    (423/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 5.08943719 seconds)
    (424/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 9.848781175 seconds)
    (425/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 11.102931647 seconds)
    (426/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 5.728617021 seconds)
    (427/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 8.043910142 seconds)
    (428/434) benchmarking ("perf_countequals", "Bool")...
    done (took 5.254421405 seconds)
    (429/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 5.297769872 seconds)
    (430/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 5.638529264 seconds)
    (431/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 5.405746702 seconds)
    (432/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 5.27181577 seconds)
    (433/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 5.627516508 seconds)
    (434/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 5.173886164 seconds)
  done (took 2800.443651866 seconds)
done (took 2805.508348808 seconds)
SAVING RESULT...
DONE!
