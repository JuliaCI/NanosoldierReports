cset: moving following pidspec: 1848322
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 2.494152048 seconds)
loading group "string"... done (took 0.279370574 seconds)
loading group "linalg"... done (took 3.425829176 seconds)
loading group "parallel"... done (took 0.019394935 seconds)
loading group "find"... done (took 1.118004691 seconds)
loading group "tuple"... done (took 0.643335398 seconds)
loading group "dates"... done (took 0.144317369 seconds)
loading group "micro"... done (took 0.064042312 seconds)
loading group "io"... done (took 1.3192826 seconds)
loading group "frontend"... done (took 0.018966237 seconds)
loading group "scalar"... done (took 1.010599902 seconds)
loading group "sparse"... done (took 0.403274113 seconds)
loading group "alloc"... done (took 0.017063052 seconds)
loading group "broadcast"... done (took 0.304640214 seconds)
loading group "union"... done (took 2.74046193 seconds)
loading group "simd"... done (took 1.17516739 seconds)
loading group "random"... done (took 2.064106292 seconds)
loading group "inference"... done (took 2.313380634 seconds)
loading group "problem"... done (took 1.077754428 seconds)
loading group "array"... done (took 2.273423986 seconds)
loading group "misc"... done (took 0.376170671 seconds)
loading group "sort"... done (took 0.23261921 seconds)
loading group "collection"... done (took 5.375843014 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/22) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.619404665 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.152902752 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.094583218 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.07742178 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.11753351 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.08819931 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.06986626 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.049814505 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.821810427 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.063579749 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.119615897 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.411054715 seconds)
done (took 5.469197213 seconds)
(2/22) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.344556205 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.023166456 seconds)
    (2/2) benchmarking "String"...
    done (took 0.023151167 seconds)
  done (took 0.734890327 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.022813226 seconds)
    (2/3) benchmarking "different length"...
    done (took 6.657e-6 seconds)
    (3/3) benchmarking "different"...
    done (took 3.503e-6 seconds)
  done (took 0.705481076 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020877493 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.145859855 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.2123e-5 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.000970018 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.00089695 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.000226501 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.784e-6 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 3.123e-6 seconds)
  done (took 0.831354163 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.037278936 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.024359454 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020829367 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021088022 seconds)
  done (took 0.786340171 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.021316001 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.040086874 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.7517e-5 seconds)
    (4/4) benchmarking "different"...
    done (took 3.437e-6 seconds)
  done (took 0.748307383 seconds)
done (took 4.861368567 seconds)
(3/22) benchmarking "parallel"...
done (took 0.686004883 seconds)
(4/22) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.092385024 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.048190942 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019228406 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.080369172 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.2312e-5 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.080215174 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.086991613 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.082921857 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.2766e-5 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.0037e-5 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.1642e-5 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.083853387 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.082475633 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.5022e-5 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.079606136 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.083537033 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.2239e-5 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.5737e-5 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.1865e-5 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 7.122e-6 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 9.434e-6 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.622e-5 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 6.419e-6 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 8.269e-6 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.079152383 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.3641e-5 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.1579e-5 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.079585461 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.2283e-5 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.07882801 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.7825e-5 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.0504e-5 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.0441e-5 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.080293042 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.4082e-5 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.078857753 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.5576e-5 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.6345e-5 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 9.102e-6 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.3543e-5 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.1909e-5 seconds)
  done (took 1.939245618 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.027723759 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.04043063 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.050700015 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.6146e-5 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.030881267 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.040026007 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.0039e-5 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.040369411 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.051732371 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.040743855 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.040894745 seconds)
  done (took 1.056898476 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.03771355 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.035055184 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.053373835 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.6227e-5 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028056969 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.039275194 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.8181e-5 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.03944075 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.053805245 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.03936467 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.039455376 seconds)
  done (took 1.057849567 seconds)
done (took 4.736598736 seconds)
(5/22) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.043603751 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.020812722 seconds)
  done (took 0.752851941 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.350142483 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.130019571 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.027502856 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.078418174 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.022415663 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.037302756 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.755479521 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.037166409 seconds)
  done (took 4.175881295 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.072287843 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.022599494 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.0227162 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.020384643 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.020578299 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.020906259 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.021340396 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.020922943 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.020164568 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.021898119 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.021927433 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.02031715 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022207059 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.021665824 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.020485702 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.020369753 seconds)
  done (took 1.146916803 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.022464079 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.023393601 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.021152909 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.019939244 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.022661452 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.022134787 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.023692061 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027865953 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.022563738 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.022333304 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.02134589 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.021657705 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.022409004 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.021639603 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.021710795 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.019879681 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.025941698 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.021302346 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.021130386 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.02273558 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.022085449 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.02153905 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.026045333 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.022814427 seconds)
  done (took 1.239093768 seconds)
done (took 8.010293752 seconds)
(6/22) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.163550315 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.019171465 seconds)
  done (took 0.878595223 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.034935091 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029516988 seconds)
  done (took 0.76826373 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.033881953 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.020100992 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.035792038 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.0302177 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.020280294 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.020130453 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.033239659 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.020517737 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.020563555 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.020426265 seconds)
  done (took 0.952806941 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.021616326 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.021918281 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.021815593 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.020206406 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.022738228 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.021294652 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.022276138 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.021272918 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.026272973 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.020364011 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.023490391 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.028873576 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019645602 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.0298568 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.022407522 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.020917276 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.025364938 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.019915354 seconds)
  done (took 1.109165197 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.020043772 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.020652631 seconds)
  done (took 0.741550804 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019069541 seconds)
    (2/7) benchmarking "second"...
    done (took 0.020963748 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018779226 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018865882 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.020683111 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.019943796 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.020688355 seconds)
  done (took 0.839055341 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.484930751 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.201687614 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.279011677 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.021869398 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.026020423 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.203219485 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.021798606 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.026056668 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.025878121 seconds)
  done (took 1.989408734 seconds)
done (took 7.981964661 seconds)
(7/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.037299697 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.136318786 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.037259233 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.816693143 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.059479451 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022895822 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.129297784 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.100273767 seconds)
done (took 2.053074185 seconds)
(8/22) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.239507727 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.87722908 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.903502204 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.753052299 seconds)
  done (took 4.249759268 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.889955172 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.140387539 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.03790242 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022920113 seconds)
  done (took 1.841826547 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.023356488 seconds)
    (2/2) benchmarking "read"...
    done (took 0.029615789 seconds)
  done (took 0.776796315 seconds)
done (took 7.834157343 seconds)
(9/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 0.022260303 seconds)
done (took 0.744374173 seconds)
(10/22) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018963333 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.0861e-5 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.019164918 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.873e-5 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 6.817e-6 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 6.398e-6 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 5.038e-6 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 6.241e-6 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 6.823e-6 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 5.524e-6 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 9.426e-6 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.961e-6 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.357e-6 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.382e-6 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 5.195e-6 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.625e-6 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 5.003e-6 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 5.165e-6 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.2e-6 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.121e-6 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 5.039e-6 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 4.775e-6 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 5.129e-6 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 4.948e-6 seconds)
  done (took 0.756344545 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.018919124 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.019048699 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.4139e-5 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 6.175e-6 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 6.161e-6 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 5.986e-6 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 5.64e-6 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.0604e-5 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 6.75e-6 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 5.505e-6 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.0576e-5 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 5.773e-6 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 6.171e-6 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 6.041e-6 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.735e-6 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 5.611e-6 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 5.49e-6 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.941e-6 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.528e-6 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 5.571e-6 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 5.805e-6 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.809e-6 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 5.546e-6 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.889e-6 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 5.581e-6 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.521e-6 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 6.135e-6 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 5.819e-6 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.65e-6 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 5.903e-6 seconds)
  done (took 0.760449783 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.020328971 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.015509234 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.019177889 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024190644 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.01579837 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.019263743 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.018871075 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.01535892 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.015935634 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.019401495 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.019973858 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.018841037 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.02005084 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.019335631 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.015520279 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.019492591 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019311898 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.021652458 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.015519491 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.015460643 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.020086935 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.018829447 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.015473048 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.019412585 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.020116101 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.019143419 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.015495279 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.019049311 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.01892449 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.018770194 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.018927035 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.02013074 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.018962424 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.020687854 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.020605982 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.020672345 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.020487667 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.019731459 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.019102574 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.015360021 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.015323479 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.015260792 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.018587632 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.015284864 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.019937766 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.018965594 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.018816478 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.018992379 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.015443859 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.015410738 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.015409438 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.019701642 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.019283173 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.019630472 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.015330706 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.019056994 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.015250696 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.019088132 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.019148968 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.015244759 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.015425647 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.019868856 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.019536554 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.018949182 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.028312304 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.019489284 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.019681488 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.015369443 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.019260529 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.022459994 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.020266417 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.022909617 seconds)
  done (took 2.063661348 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.018986628 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020748774 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.1155e-5 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 9.454e-6 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.985e-6 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.027e-5 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 6.358e-6 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.144e-6 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.813e-6 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 6.24e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.0355e-5 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 6.483e-6 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.725e-6 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.545e-6 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.497e-6 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 6.028e-6 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 6.08e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 6.017e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 5.969e-6 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.508e-6 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.613e-6 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.747e-6 seconds)
  done (took 0.76334461 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018648178 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.017189671 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.01885993 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017131853 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.017142504 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 6.2611e-5 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.314e-5 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017026537 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 9.459e-6 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.9229e-5 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.1539e-5 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 6.794e-6 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 6.0581e-5 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.959e-6 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.755e-6 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 4.3247e-5 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 6.266e-6 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 4.5871e-5 seconds)
  done (took 0.82925541 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.019092738 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 9.785e-6 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.018477671 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.5213e-5 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 7.248e-6 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 6.26e-6 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.91e-6 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 5.323e-6 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 5.251e-6 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 5.225e-6 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 9.361e-6 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.359e-6 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 5.212e-6 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.96e-6 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.347e-6 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 4.841e-6 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 4.979e-6 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.184e-6 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.333e-6 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.149e-6 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 6.155e-6 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.099e-6 seconds)
  done (took 0.761709461 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018693502 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 9.325e-6 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.018829725 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 9.237e-6 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 6.012e-6 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 9.525e-6 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 5.061e-6 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 8.246e-6 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.017190824 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.35e-5 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.3611e-5 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 6.09e-6 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 4.9516e-5 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.6667e-5 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 5.859e-6 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.5e-6 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 6.032e-6 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.477e-6 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.693e-6 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 5.484e-6 seconds)
  done (took 0.778592176 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.05376281 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.0317e-5 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.896e-6 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.321e-6 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 6.14e-6 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 6.429e-6 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.213e-6 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 6.234e-6 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.814e-6 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 6.218e-6 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 9.061e-6 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.689e-6 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.199e-6 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.818e-6 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.726e-6 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.647e-6 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.332e-6 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.68e-6 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.876e-6 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.72e-6 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 6.236e-6 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.884e-6 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 5.799e-6 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 6.011e-6 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.276e-6 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.523e-6 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.672e-6 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.874e-6 seconds)
  done (took 0.779951341 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018826252 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.0041e-5 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.019013808 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.0249e-5 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.1112e-5 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 6.369e-6 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 7.836e-6 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 6.801e-6 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 9.758e-6 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 6.119e-6 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.0699e-5 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 6.019e-6 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 5.725e-6 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 6.086e-6 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 6.068e-6 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 5.669e-6 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.359e-6 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 5.381e-6 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.126e-6 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.527e-6 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 5.049e-6 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.698e-6 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 5.087e-6 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 5.031e-6 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.746e-6 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 4.811e-6 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 5.164e-6 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 4.884e-6 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.203e-6 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 5.207e-6 seconds)
  done (took 0.766010373 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.020050423 seconds)
    (2/2) benchmarking "in"...
    done (took 0.019730364 seconds)
  done (took 0.765625718 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.01911886 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.018469469 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.3675e-5 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.0354e-5 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 6.19e-6 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 5.908e-6 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 5.154e-6 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 5.235e-6 seconds)
  done (took 0.760768568 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.02149358 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027319174 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.020684992 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.020564623 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.02038411 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.051241026 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.020797949 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.021510593 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022213205 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019300814 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.020477467 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.021333255 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.019889047 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.021769102 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021743767 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.020487093 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.021241175 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025753434 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.021966072 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.018843802 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025354438 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.021087097 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.027121866 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.020696448 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.00843923 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.021418655 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.026532379 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.02162492 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022329116 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.021186273 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028418296 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.018747852 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.021346521 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.022240449 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.02016712 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.020500228 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.031914211 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.020067879 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.021028713 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.019660694 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.023715475 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.026079726 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.021814981 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.023095859 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.020982849 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.021259586 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.019473825 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.020398657 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019749118 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.021182743 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.019216347 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.020655762 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.01974162 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.02024553 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.022864401 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.020723718 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.020986037 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.022562759 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.02567547 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.022758037 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.021697484 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.025733521 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.022050545 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.02086201 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.020857738 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026146177 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.020130099 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.021587073 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022050627 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.021151818 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.023334988 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.019278154 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.020744962 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.019484204 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.034879166 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.020530875 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.019888063 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.019722979 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.019247055 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.02079525 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021627163 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.021899672 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020565478 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020909444 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.026095742 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.021709962 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.020008964 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021701983 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.022153105 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019457231 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.019853723 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.022012953 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.020455016 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.018813576 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.021880897 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.020560101 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.020507419 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.020066617 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.020125734 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.024520164 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.020554532 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.019335266 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020948919 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.020175729 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.018766982 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.021181604 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021442127 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.020545155 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.023626071 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.021583814 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.021312281 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.003219182 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.003125366 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.020226996 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.019453921 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.02212603 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.020285361 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.023636963 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.021863698 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.02159157 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.026889122 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.022803511 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.026648891 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.020635149 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.019117893 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.026493646 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.02185995 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.020450883 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.02646968 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.020121662 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.022462748 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.019814939 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.020021927 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.021615478 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.019420851 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020266059 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.018779175 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.020924504 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.020219703 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.02120133 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021424903 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.021989881 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.022935541 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.020869823 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.021656077 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.02066465 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.023281939 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.022828298 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020569446 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021414803 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.020265665 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.022869763 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.021172239 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.022398029 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.019964836 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.02016936 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.020310804 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.021008871 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.022803456 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.020714145 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.021644773 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020306845 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.020710085 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.020814756 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.020711933 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020258709 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.026148968 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.020581 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021137051 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.022430393 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.022174541 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.029689626 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.021731227 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.019250495 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.020046819 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.020509321 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.019564213 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020621674 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.021968512 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026548445 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.022641809 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.02255374 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.02019126 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.02203604 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.020555073 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.021786699 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.021573298 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.020449961 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021330291 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.003186847 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.020850783 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.021369563 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02359171 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.022027316 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.022235266 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.020286856 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020280584 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.019446153 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.02650036 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.020451081 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021168023 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.02165025 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.021502455 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.020051173 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.020250153 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.021938608 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021000552 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.008873739 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.025565115 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.021513383 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.019570317 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.022111564 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.020968889 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.022667922 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.020113777 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020099778 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.020961771 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.021300595 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.023181471 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026981589 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.019469408 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.020326805 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.026381905 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.020579529 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021481854 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.021693081 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.026243889 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.020959201 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.021858496 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.022110461 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.021119131 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.020590292 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.020878071 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.020625853 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.021509408 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.021454881 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.022725108 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.020398772 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026644254 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.019561871 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.025811105 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.022814266 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.021927228 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.020158908 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021964545 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.020535292 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.021687578 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.020534508 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.020416182 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.02232359 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.019526301 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.021452019 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.019901271 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020647136 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.021551491 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.021382608 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.020424362 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021820373 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.020671988 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.022577211 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.020370333 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.022040009 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.021562415 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.019784186 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.019177824 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.021293268 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.022847942 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.021366353 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.020721887 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.020932332 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.020646896 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.021791918 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.020512119 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.020240226 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020570753 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020519321 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.02068075 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.020760852 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.020459836 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.020361076 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.020695144 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.021953126 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.026508291 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021201088 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.02069394 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.021406754 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.019477567 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026369741 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.019884336 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.021438981 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.019310713 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.022353709 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.021432536 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.020638446 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.023451462 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.021415415 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.021788881 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.022720794 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021302613 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.020106415 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.022186864 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.020897975 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.021207701 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.021275334 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020307996 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.020943848 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.020739424 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.021081457 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.022209638 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.021743926 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.02104509 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.020591424 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.021704403 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020588602 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.020401061 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.020637566 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.021077267 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.021384225 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.019615233 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020512315 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.023073388 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020350936 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.004034653 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.020050264 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.019065438 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.020207913 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.022941554 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019777604 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.021716486 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.026012358 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.019242539 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.0199702 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.019183998 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.020002441 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.026028884 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.022002442 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.021021836 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.020415048 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.019168558 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.020507654 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.020927897 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.020050814 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.020709317 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.003758725 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.018705561 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.022063916 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.020217958 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.003262837 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020061782 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.021044452 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.022595773 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.020764328 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.019875096 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.020802386 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.020226745 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020595577 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.018918372 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.020056077 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020414708 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.003415079 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019239436 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.022330588 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.021881442 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.020843226 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.025591252 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.020480715 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.021413182 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.026188832 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021890721 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.02071826 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.022188073 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.01949984 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.027376504 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.022544835 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.021059498 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.021888034 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.020499101 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.021479938 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020193588 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.021109354 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026217122 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020698053 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.020933509 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.01935282 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.026463271 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020202439 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.01893016 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.020869743 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.020707261 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.020559534 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.022126546 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.020197589 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.021307125 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.022132581 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.022101806 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.020304627 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.02025143 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.021559676 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.021454292 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.020483317 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.021012455 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.021366763 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.020893664 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020182301 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.023679643 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.021300318 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.020936682 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.020535553 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020057923 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.020852699 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.022462794 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.020438076 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020233828 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020086966 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.019286538 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.020819869 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027528108 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.0217928 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.021863242 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.019324519 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.019060551 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.025302644 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019719518 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.02082831 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.021220661 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.022426455 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.023611802 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.02170852 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.021425489 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.019850157 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.020487705 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.02358299 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.020211387 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.019566178 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019964249 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.020134825 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.021721631 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.021611124 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.020429835 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020929659 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.021309489 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.021103538 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.020137887 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020067957 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.021083939 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.020364751 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.022087548 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.021187752 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.02109051 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.020634294 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.019276314 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.003281501 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.021340983 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.020655456 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.021476377 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020209461 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.02312233 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.021689978 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.020499894 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021123602 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.019592939 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021098341 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.022038515 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.019642896 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.01943788 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.020391621 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.019817278 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.021347744 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.02180107 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.01995712 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.01926447 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.021489082 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.021036436 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.021045818 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.02042175 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.020120412 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.02013465 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.019179101 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.022541114 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.019358938 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.019988737 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.020233792 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.020296277 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.024829263 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.021221944 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026250476 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.019852999 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020169798 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.019371977 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.021766051 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.019477337 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.020018777 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.022929196 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.019050741 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026380023 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.021347505 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.022761123 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.019244899 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.020490151 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.020892832 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.025807693 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.021783305 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.021400549 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020570989 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.021744777 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.019919997 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.021656158 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.019156045 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.018888634 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.021159505 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.021148373 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.023091139 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.019264793 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.021315926 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.020167447 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.021094656 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.02071631 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.020125087 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020339866 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.020862515 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.021796281 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.019553766 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.020638198 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020361852 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.025896321 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.019958871 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.022323095 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.021411876 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.021627867 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.025331141 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.022570364 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.020686121 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.020099906 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02035831 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.020938908 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.02024472 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020747664 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.020878174 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.027729603 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.02089596 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.020076244 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.02257795 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.02243483 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.020297647 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021127857 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.019582475 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.021509894 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.020018798 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.021873325 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.020796953 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.020214407 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020350958 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020255414 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.018873993 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.019443292 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.003550055 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.021518306 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.004178352 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.019713659 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.022978826 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.020199024 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.021000865 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.022400197 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.020666137 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.02009744 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.019073264 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.019942533 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.024880877 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.025903804 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.004387166 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.020897497 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.020483106 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.021690946 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.018629393 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.021710594 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.02141543 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.021291004 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.019214977 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019999367 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.025973344 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.026094292 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020391824 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.00910144 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.021758745 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.020648898 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.027647137 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.022250633 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.020468277 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.021832084 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.019790968 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.003723036 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.018831223 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.020164365 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.022433104 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.01901547 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.019606064 seconds)
  done (took 13.269067127 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.019162442 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.1439e-5 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 7.618e-6 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 6.805e-6 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.382e-6 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 6.514e-6 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.966e-6 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.77e-6 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.624e-6 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 6.167e-6 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 8.923e-6 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.942e-6 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.818e-6 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.62e-6 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.836e-6 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 5.869e-6 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.487e-6 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.652e-6 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.523e-6 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.273e-6 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.702e-6 seconds)
  done (took 0.812837713 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.02022541 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.018704914 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.5264e-5 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.1304e-5 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.531e-6 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 7.082e-6 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 6.106e-6 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.793e-6 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 5.313e-6 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.685e-6 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.1989e-5 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.831e-6 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 5.825e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 5.618e-6 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.618e-6 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.812e-6 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 5.696e-6 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.763e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 5.211e-6 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 5.605e-6 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 5.861e-6 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 5.848e-6 seconds)
  done (took 0.815276047 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.02030222 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.019694997 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.02087407 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.019301903 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.019264119 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.019801239 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.019068005 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.020453703 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.020298362 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019745486 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.021066612 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.020207445 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.019561462 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020994381 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.019078211 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.019902713 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.035065191 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.020333535 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.020299776 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.019295364 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.020745125 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.020869049 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.019422842 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.019713073 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.020455232 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.020191814 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.019370888 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.020783777 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.020042011 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019755821 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.020098473 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.019176202 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.021142056 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.021061826 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.020074261 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019852409 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.020577304 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.020281036 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.019163543 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.019322291 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.020716887 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.020366045 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.019993352 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.020612132 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.020930473 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.019234806 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.018788227 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.021332619 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.019535963 seconds)
  done (took 1.772612988 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.025654705 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.00841478 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.025735792 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.008893647 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 3.0533e-5 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 9.074e-6 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 7.184e-6 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.008988985 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 3.4119e-5 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.7219e-5 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.2771e-5 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.8445e-5 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.2928e-5 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 8.262e-6 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.2949e-5 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.1856e-5 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 8.619e-6 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.926e-6 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 8.758e-6 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 7.06e-6 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 6.405e-6 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 6.533e-6 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 6.288e-6 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 5.808e-6 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.615e-6 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 6.086e-6 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 5.636e-6 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 6.434e-6 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 5.928e-6 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 5.75e-6 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 6.446e-6 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 6.318e-6 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 5.96e-6 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 7.026e-6 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 6.381e-6 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 6.028e-6 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 6.076e-6 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 7.122e-6 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 6.213e-6 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 6.025e-6 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 5.968e-6 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 6.642e-6 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.2738e-5 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 6.793e-6 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 6.602e-6 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 6.418e-6 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 6.567e-6 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 5.7e-6 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 5.593e-6 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 5.682e-6 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 5.9e-6 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 5.533e-6 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.908e-6 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 6.443e-6 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 6.158e-6 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 5.983e-6 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 6.231e-6 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 9.108e-6 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 6.208e-6 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 6.837e-6 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 5.359e-6 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.534e-6 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 5.94e-6 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 5.947e-6 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 5.501e-6 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 5.97e-6 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 5.313e-6 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 6.482e-6 seconds)
  done (took 0.99055391 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.019559574 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 9.707e-6 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 6.299e-6 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.0834e-5 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 6.132e-6 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 5.502e-6 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 5.429e-6 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 5.215e-6 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.153e-6 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 5.12e-6 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.0757e-5 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.019147778 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.2314e-5 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 6.738e-6 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 5.776e-6 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 5.767e-6 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 5.021e-6 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 5.11e-6 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 5.492e-6 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 5.277e-6 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 5.226e-6 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.482e-6 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 5.105e-6 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.145e-6 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 5.551e-6 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 5.029e-6 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 5.012e-6 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.235e-6 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.306e-6 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 5.028e-6 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 5.147e-6 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 5.123e-6 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 5.406e-6 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 4.904e-6 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 5.679e-6 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 5.64e-6 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 5.314e-6 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.104e-6 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 5.125e-6 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 5.096e-6 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 5.355e-6 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 4.974e-6 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.864e-5 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 5.929e-6 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.469e-6 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 5.366e-6 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 5.665e-6 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 4.929e-6 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 5.681e-6 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 5.396e-6 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 5.135e-6 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 5.18e-6 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 5.256e-6 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 5.398e-6 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 4.892e-6 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 5.235e-6 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 5.338e-6 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 5.564e-6 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 5.101e-6 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 5.616e-6 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 4.902e-6 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 5.052e-6 seconds)
  done (took 0.815424806 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018463976 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.0078e-5 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.018618788 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.0623e-5 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.4802e-5 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 6.597e-6 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 6.396e-6 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 6.083e-6 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 6.29e-6 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 5.452e-6 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.1096e-5 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 5.975e-6 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.801e-6 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.203e-6 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 4.993e-6 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.446e-6 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 4.965e-6 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 4.837e-6 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 5.076e-6 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 4.765e-6 seconds)
  done (took 0.819123525 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.020833989 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020525918 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.545e-5 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 6.808e-6 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 6.42e-6 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 5.912e-6 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 5.276e-6 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.269e-6 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 5.594e-6 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.455e-6 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 9.588e-6 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 5.666e-6 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.283e-6 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 5.212e-6 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 5.04e-6 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 5.371e-6 seconds)
  done (took 0.8200385 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.018860637 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.01833256 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.021980873 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.0614e-5 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018580455 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.020232496 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.0549e-5 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.023982794 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.8167e-5 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.02331238 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.1971e-5 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.0957e-5 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.018709769 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.8946e-5 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.021007734 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.8645e-5 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.3304e-5 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.082e-5 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 8.063e-6 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.022402255 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.765e-5 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.32e-5 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.0325e-5 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.020607459 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.8518e-5 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 8.813e-6 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 9.854e-6 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 9.635e-6 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.021146983 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.0033e-5 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.0653e-5 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 9.477e-6 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 7.979e-6 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 7.761e-6 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.2224e-5 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 6.82e-6 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 7.603e-6 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 6.721e-6 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 8.769e-6 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 6.558e-6 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 9.158e-6 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 8.507e-6 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.8802e-5 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 8.668e-6 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 6.927e-6 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 6.703e-6 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 6.555e-6 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 7.133e-6 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 9.398e-6 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 6.581e-6 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 6.308e-6 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 7.068e-6 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 6.113e-6 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 5.908e-6 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 5.449e-6 seconds)
  done (took 1.026270289 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.018425654 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 9.805e-6 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.018808243 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.3649e-5 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 5.723e-6 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.0895e-5 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 5.183e-6 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.016864784 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 9.528e-6 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 9.711e-6 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.2136e-5 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 5.584e-5 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 6.767e-6 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 6.101e-6 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 5.623e-6 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 7.858e-6 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 6.123e-6 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 5.544e-6 seconds)
  done (took 0.832913027 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.018814329 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.0482e-5 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020510169 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.169e-5 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 9.195e-6 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 7.302e-6 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 6.169e-6 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 6.464e-6 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 6.077e-6 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 5.885e-6 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.1059e-5 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 5.545e-6 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.32e-6 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 5.447e-6 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 5.85e-6 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 5.763e-6 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 5.629e-6 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 5.031e-6 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 5.082e-6 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 5.173e-6 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 5.443e-6 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 6.186e-6 seconds)
  done (took 0.818405681 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "Int64", "+")...
    done (took 0.025668842 seconds)
    (2/6) benchmarking ("#6", "BigInt", "+")...
    done (took 0.044991127 seconds)
    (3/6) benchmarking ("#8", "BigInt", "+")...
    done (took 0.044686941 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 0.042161315 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 0.037088855 seconds)
    (6/6) benchmarking ("#8", "UInt64", "+")...
    done (took 0.043615054 seconds)
  done (took 1.014755056 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.01897049 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.018492417 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.0728e-5 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 7.251e-6 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.893e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 6.243e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.475e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.113e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.254e-6 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 5.267e-6 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 9.565e-6 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.385e-6 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.55e-6 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.219e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.306e-6 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.261e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.241e-6 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.354e-6 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 5.356e-6 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.559e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.465e-6 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.421e-6 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.291e-6 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.242e-6 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.258e-6 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.3e-6 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.245e-6 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 5.376e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.294e-6 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.716e-6 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.263e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.552e-6 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 4.919e-6 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.216e-6 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 5.216e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.263e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.386e-6 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.339e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.222e-6 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.128e-6 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 6.6e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.927e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.4179e-5 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 6.27e-6 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.489e-6 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 4.953e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.375e-6 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 4.787e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 4.809e-6 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.633e-6 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.534e-6 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.526e-6 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.356e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.154e-6 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.187e-6 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.167e-6 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.374e-6 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.15e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 4.922e-6 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.364e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 4.952e-6 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.499e-6 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.068e-6 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.375e-6 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.267e-6 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.019e-6 seconds)
  done (took 0.815500186 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018924714 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.7456e-5 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 7.892e-6 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 6.134e-6 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.659e-6 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.25e-6 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.324e-6 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.661e-6 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.226e-6 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 5.347e-6 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.018246743 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.2223e-5 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 6.684e-6 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.521e-6 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.344e-6 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.703e-6 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.679e-6 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.341e-6 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 5.406e-6 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 6.249e-6 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.34e-6 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.274e-6 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.097e-6 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.46e-6 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 5.413e-6 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.257e-6 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.406e-6 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.112e-6 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.276e-6 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.129e-6 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.302e-6 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 4.896e-6 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.096e-6 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.2217e-5 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.826e-6 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.534e-6 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.249e-6 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 6.201e-6 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.371e-6 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 6.577e-6 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.141e-6 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.121e-6 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.5625e-5 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 5.627e-6 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 5.14e-6 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.18e-6 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.161e-6 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 5.2e-6 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 5.215e-6 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 5.236e-6 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 5.516e-6 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 5.214e-6 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 5.342e-6 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.569e-6 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.132e-6 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 5.826e-6 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.325e-6 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 5.231e-6 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.201e-6 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.396e-6 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 5.385e-6 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 5.456e-6 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 5.463e-6 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.454e-6 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 5.179e-6 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 5.471e-6 seconds)
  done (took 0.813396666 seconds)
done (took 35.947271893 seconds)
(11/22) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.534674975 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.45182005 seconds)
  done (took 1.759200869 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.025576483 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.250489433 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.179135278 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.276384905 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.338504345 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.768632663 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.698210415 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 8.9751e-5 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.108787269 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.000140623 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.000196435 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.000179807 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.000193795 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.044583169 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.284159996 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.127010733 seconds)
  done (took 3.898574945 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.136675046 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.210262513 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.131383505 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.4502e-5 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.102546086 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 3.6025e-5 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.056199521 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 1.3654e-5 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.7792e-5 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.000248357 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.10445508 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.145099678 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 2.1902e-5 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 9.9e-6 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 3.7507e-5 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.7002e-5 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.3874e-5 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.428e-5 seconds)
  done (took 1.725981823 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.210554633 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.025193547 seconds)
  done (took 1.026142258 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.998970465 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.412421455 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.154118365 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 1.483214019 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.485718857 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.809842223 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133291622 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.112565348 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.107395761 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.110397467 seconds)
  done (took 5.599894147 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.091068661 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.083063083 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.290332898 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.066853571 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.054436876 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 5.3339e-5 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.040439341 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.069299737 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.041117336 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.03782196 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.087275576 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.000108997 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.0525434 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.079996344 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.029526561 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.077574965 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.050614576 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.026307184 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.051520882 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.0273e-5 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 4.019e-5 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 1.4043e-5 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.200569577 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.000869761 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.002648123 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.9056e-5 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 4.994e-5 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.4363e-5 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 7.583e-6 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.0606e-5 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.000717756 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.001738566 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.0822e-5 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.01253628 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.5558e-5 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.1668e-5 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.000129574 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.7117e-5 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 4.4894e-5 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 5.4216e-5 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.000744358 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.542e-5 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.001092052 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.5156e-5 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 3.4168e-5 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 1.2788e-5 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.000865892 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.00074154 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.000714246 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.000769927 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.000965779 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.1297e-5 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.00074951 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.000802218 seconds)
  done (took 2.363727544 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.329628574 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.306872258 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.035155202 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.08829761 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.085572092 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.033225458 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.09124385 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.075213724 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.123985768 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.033603332 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.031486913 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 5.4173e-5 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030957671 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.012637863 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.089797179 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.074711795 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.034798371 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.032249777 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.078039297 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.07239649 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 6.5382e-5 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070981973 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.123595424 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.091755265 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 5.6811e-5 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.033768015 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 5.4102e-5 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 6.0907e-5 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.001167247 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.002607265 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 4.3761e-5 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.030766211 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.013247309 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.002020226 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 6.2115e-5 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 6.8631e-5 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.0546e-5 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.00215805 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.030466805 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.002633968 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.000935989 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000124243 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 6.0072e-5 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000119227 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.03243295 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000103361 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.000760308 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.002505415 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.000754459 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000103 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000167405 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.000144167 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 4.3268e-5 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001662121 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.02795244 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.003347473 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002767532 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.000104562 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 7.5345e-5 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.03445981 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004976253 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.008043656 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.00235211 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.032590381 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.0042705 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 7.6779e-5 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.00832051 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.012427011 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 5.3e-5 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 4.4278e-5 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 6.0691e-5 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 9.7027e-5 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 5.0737e-5 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.002603895 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.002978078 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000174078 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 7.3001e-5 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000172277 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.006264382 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.002671059 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 6.4511e-5 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.002544143 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.00017595 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.000259326 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000222922 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.000110282 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.001502378 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.004004737 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.000102008 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.000150084 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.0002887 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000231446 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 5.6971e-5 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.003041975 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.002649159 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.002757205 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.002975797 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.00015313 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.029090015 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.00068996 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000104822 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.000631844 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 5.9809e-5 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000216516 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.766e-5 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.00172028 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.000776119 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.008270129 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.000123545 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 8.105e-5 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.001964999 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.008180432 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 8.2616e-5 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.000431118 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.004696887 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.001494618 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 5.9782e-5 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013127148 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000133192 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.004057013 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000144163 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.00231439 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.000147612 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001398406 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.8973e-5 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.000195169 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000137535 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.001295514 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000213051 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.000118946 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 4.7349e-5 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000215665 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.001807262 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.007437842 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.00011796 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002569957 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.002755025 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.000190042 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.001794227 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 7.3692e-5 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.004573093 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.000255611 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 4.2005e-5 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 5.3037e-5 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.006794682 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000222521 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 7.7812e-5 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.968e-5 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.006908801 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 9.3523e-5 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.00891907 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000363006 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.0001048 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.005603625 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.007445129 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.001469627 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.012138674 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000103161 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 9.5605e-5 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 5.6841e-5 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 3.9049e-5 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.014098418 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.002046162 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 4.5007e-5 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 4.8567e-5 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.000742505 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.001148445 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.000138476 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.002186073 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.001426897 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.002901586 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.000203333 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.000191232 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.013597865 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.005135318 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.000355497 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.001371511 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.003496392 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000183142 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.001269385 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.001628663 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000122927 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.01190659 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 8.4582e-5 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.008679058 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.001431787 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.000729249 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.002431573 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.002569607 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.00383421 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.009372123 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.009251522 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000240449 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 7.6685e-5 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.000526097 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.000189383 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.000118198 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.00020253 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.000157307 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 7.3245e-5 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.016365341 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.000233695 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.003971746 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 5.0859e-5 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.00298108 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 6.0077e-5 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.000130259 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.011140213 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.00023345 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.000214556 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.000355395 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 3.2836e-5 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.001980415 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.008083102 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.001596372 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.000177608 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 5.674e-5 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.00224927 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.001746354 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 4.1477e-5 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.000110993 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.000105394 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.001135575 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.001479424 seconds)
  done (took 3.405391385 seconds)
done (took 20.557792408 seconds)
(12/22) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 0.124483028 seconds)
  (2/4) benchmarking "arrays"...
  done (took 0.080160795 seconds)
  (3/4) benchmarking "structs"...
  done (took 0.087947688 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 0.058458321 seconds)
done (took 1.159272133 seconds)
(13/22) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.117289267 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.072585722 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.231825246 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.093529013 seconds)
  done (took 1.31865436 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.061459612 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 1.0362e-5 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.041721311 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.047723996 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 1.4617e-5 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.032102863 seconds)
  done (took 1.00183719 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.306570893 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.171675918 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.256953526 seconds)
  done (took 1.549048864 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.112208565 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.161981885 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.283713089 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.154287205 seconds)
  done (took 1.535002311 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.036434865 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.02956859 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.023362921 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.031435454 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.025638599 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.020402735 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.102743612 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.021279011 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.028750354 seconds)
  done (took 1.1965611 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.063647044 seconds)
done (took 7.477215937 seconds)
(14/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.158311747 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.029363281 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.030254358 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.030883229 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.114289963 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 0.030496428 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 6.976e-5 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.112526375 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 0.032432452 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 0.038172423 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.028739403 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.109390875 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.197304264 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.152783654 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.046626625 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 0.039122509 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.062327992 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 0.0315113 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.073988668 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.11699814 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.028534717 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028663364 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.026019114 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.226811577 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.105923878 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 0.03057376 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.123702272 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.028521536 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 0.873051745 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.028138211 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.176371744 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.076533543 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.183327982 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.187124769 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.136014768 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.027777896 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.109840593 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.039884148 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.205514356 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.111408347 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 0.030471368 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 4.1162e-5 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 0.038170785 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.045738909 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 5.9348e-5 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.127283967 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032592351 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 0.047804886 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.091906837 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.156600085 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.129645891 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.029744882 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 0.024817259 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.136764001 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.026239542 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 7.6562e-5 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.02881349 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.031002261 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.026869263 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.059088606 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.029533155 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.038654713 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.4966e-5 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.114695921 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 3.5402e-5 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.086880311 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.000830241 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 0.037072635 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 0.037764614 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.164911284 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.089923867 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.025944227 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 0.034116903 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.027139796 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.141971692 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.040909001 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.026795791 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 0.037821086 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 0.030711837 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.02901812 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 6.7026e-5 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 7.0944e-5 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.031041211 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 8.9006e-5 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 0.033541409 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.026774258 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.8128e-5 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.083888503 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.04921456 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.056810275 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.029134419 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.239711733 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.087281063 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 0.025824284 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.040641676 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.040575236 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 0.025694986 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.028259532 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 0.025637071 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 4.172e-5 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 0.031195996 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.177645281 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 4.4762e-5 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.033534193 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 3.7368e-5 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.046039184 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 0.033279957 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 0.032481418 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 0.037814029 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 7.8978e-5 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 0.030121149 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035526154 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.133723517 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.140231988 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.073849487 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.002120674 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 0.174178231 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.002378147 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.041522737 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.002515283 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 9.8493e-5 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.175857121 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 5.3598e-5 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.000105377 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.026758817 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.1724e-5 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.00011064 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.133655158 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.153995982 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 3.2597e-5 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.028961128 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.001463219 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 0.032814931 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 4.3495e-5 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.002147629 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.001427086 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.08875053 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.205425037 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 0.02949727 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.028569649 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 0.032949318 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 9.3822e-5 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 0.031310164 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 0.031191399 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.245014044 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 0.031175223 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.113095334 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 0.036039775 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 0.031230181 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.029722709 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 0.047592035 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.076191634 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 4.3125e-5 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.029875799 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.029770882 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.120250749 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.029014959 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.117878497 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.002709509 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.039609717 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.269716217 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.094398137 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 0.034938282 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.231372071 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.000103913 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.028220589 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 8.3592e-5 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.114363944 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.047524775 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.02905009 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.028410208 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.02926479 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 5.0982e-5 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.11295109 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 0.035907456 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 4.9606e-5 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.274881737 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 6.8066e-5 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.230922994 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.093526223 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.11606575 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.027055411 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 0.032341557 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.091176027 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.043558982 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.04917977 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041410956 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.000102565 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 0.034034098 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.000136636 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 8.1807e-5 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 0.029304085 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 0.037881047 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.028157497 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 9.9012e-5 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 5.9038e-5 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.03082605 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 0.030599001 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.030860484 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.031036547 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 0.033904255 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.475886537 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 3.2302e-5 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.028922791 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.024273003 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 0.032540409 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.290086164 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.030089638 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.090370778 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.03871618 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 0.035991297 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 0.030075124 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.00010462 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 0.032462176 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.178943465 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 0.020112366 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.033674794 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.072184802 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 9.4513e-5 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.089687599 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.001691357 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 5.2668e-5 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 0.038185743 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 0.032210998 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 0.032717229 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.028612334 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 9.5182e-5 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.027974761 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032605367 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.002253399 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 0.038698447 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.031254412 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 0.031037784 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.6883e-5 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 4.8549e-5 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 0.039319355 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.159086957 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.000103044 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.154243141 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.184798655 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.09041545 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 6.5296e-5 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.035006085 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 0.035536091 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 7.6757e-5 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.116519134 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.000107159 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.067000551 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.181810679 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.032520805 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 0.035422927 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.033573238 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.002348583 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.090010973 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 0.03747488 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 0.030942967 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 9.2028e-5 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.088549679 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.031951583 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.112057393 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.088667312 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.027952385 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.558571856 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 0.038819316 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.030816524 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.000920404 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.028408099 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 0.037958724 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.1688e-5 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.001582467 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 0.032679867 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.093391751 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 4.5265e-5 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.000104288 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 3.1555e-5 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 9.5256e-5 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.56e-5 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.038878177 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.000220612 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 0.028375251 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 3.4529e-5 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 7.4338e-5 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 0.033724397 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 0.037224189 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 3.6841e-5 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 0.028475116 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.000199404 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 5.1967e-5 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 3.5378e-5 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 0.036512455 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.092580785 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.113011947 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 3.4668e-5 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.032245901 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032497561 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 0.035846203 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.065550646 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 2.5769e-5 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.133713431 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 5.4625e-5 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.027396374 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.040492151 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 8.5828e-5 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 0.029987014 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 7.2167e-5 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 6.0838e-5 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.038117258 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 3.8684e-5 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.001651396 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.6321e-5 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 9.7254e-5 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 7.7385e-5 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.000237591 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.000113903 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.2728e-5 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.001626469 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 6.1262e-5 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 7.0995e-5 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 3.0372e-5 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 3.6875e-5 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 0.027750846 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 0.030028841 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.027435591 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.000102514 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.031889566 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.966842383 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.001523069 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.000145499 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 0.038041772 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 5.7055e-5 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 4.8976e-5 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 9.6285e-5 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.002399452 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 7.8563e-5 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 0.038856454 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 8.2479e-5 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 0.029461442 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.000105248 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.029642668 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 7.9466e-5 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.045230771 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 5.2334e-5 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.026860775 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.001168349 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 0.029343788 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 0.029837159 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 0.029604243 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 6.7991e-5 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.02688829 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.038754875 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.106435681 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 0.029911039 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 0.034789509 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.033108102 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 0.029712766 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 3.7222e-5 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.7369e-5 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.26165443 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.084089465 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.038853997 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.038233136 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 7.7003e-5 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.026956811 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 7.0848e-5 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.001003461 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.6609e-5 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.041931294 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 4.1587e-5 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 0.024530891 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 7.4329e-5 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 3.4651e-5 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 6.768e-5 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.065049786 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.3429e-5 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 8.1977e-5 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.3245e-5 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 0.029708331 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 0.024537237 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 0.034288684 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 5.3247e-5 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.043837443 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.00113944 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.000765287 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 0.035680832 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 6.6715e-5 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 0.032445257 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037898252 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.030306027 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 0.047222486 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.030156738 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 4.0208e-5 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.063781056 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 4.544e-5 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 8.8017e-5 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 0.030662398 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 0.03460958 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 8.586e-5 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 0.035177071 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 0.034691994 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 0.031446473 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.217028925 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.034011472 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.001775874 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 8.5851e-5 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.027075859 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03161858 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.7578e-5 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.066191878 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 0.033256598 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 0.025431645 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 3.5331e-5 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.002618597 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 0.03503985 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.9128e-5 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.069065931 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.000285611 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.046805262 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.045795985 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.001235958 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 3.3341e-5 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 0.024982088 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 4.2487e-5 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 5.7201e-5 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 0.867902511 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.6337e-5 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 0.029103046 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 0.323132103 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.000136343 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 4.1608e-5 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.8716e-5 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 5.3036e-5 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.955384203 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.000101541 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 0.026009748 seconds)
  done (took 24.12357345 seconds)
done (took 24.956132419 seconds)
(15/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 0.115876867 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 0.030538923 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 0.085027778 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 0.039724348 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 0.027267231 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 0.033315768 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 0.037253855 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 0.065639109 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 0.118443728 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 0.055254251 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 0.12797577 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 0.045708188 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 0.040290252 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 0.113932941 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 0.030695501 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.8372e-5 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 0.097468183 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 0.048248037 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 0.0874581 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 0.057946406 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 0.039850073 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 0.04839856 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 0.088895888 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 0.048845903 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.067015725 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 0.088832919 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 0.057431148 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 0.089688751 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 3.9492e-5 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 0.058179156 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 0.033953705 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 0.026517229 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 0.035622749 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 0.055491003 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 0.037697862 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.4405e-5 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 0.088697025 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 0.02814342 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 0.048137213 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 0.071549498 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 0.041980113 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 0.052610375 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 0.028373353 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 0.07132324 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 0.058596018 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 0.057909533 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 0.039400682 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 0.070947787 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 0.07626737 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 0.031365535 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 0.045741117 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 0.050344082 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 0.033219068 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 0.070233162 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 0.065926542 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 0.068879057 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.061331732 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 0.067056122 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 0.030537131 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 0.066627098 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.0714e-5 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 0.064591061 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 3.8101e-5 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 0.04554587 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.04769648 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.07650129 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 0.074640121 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 0.071840621 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.8931e-5 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 0.05989217 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 0.068415468 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 0.050975949 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 0.058311858 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.514e-5 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 0.069524525 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 0.070746019 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 0.0745825 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 0.027168384 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 0.073167272 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 0.075572704 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 0.042227468 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 0.02897935 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 0.055932233 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 0.083355203 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.8546e-5 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.1214e-5 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 0.028987836 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.756e-5 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 0.069112349 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.168e-5 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 1.8803e-5 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 0.074972324 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 0.075403844 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.2011e-5 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.821e-5 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 0.051376376 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.8732e-5 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 0.068409031 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 0.085948759 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 3.0197e-5 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 0.044849967 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 0.052397918 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 0.055834962 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 0.067462334 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 0.075759489 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 0.051608404 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 4.0078e-5 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 0.030693997 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 0.037717106 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 3.1964e-5 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 0.026473863 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 0.059477731 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 0.056274371 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 0.067277379 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.6513e-5 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 3.0103e-5 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.6856e-5 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 1.5725e-5 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.1769e-5 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.3857e-5 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 1.4874e-5 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.1727e-5 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 1.514e-5 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.1809e-5 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 0.057776499 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 0.056413561 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.03151601 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 0.028403112 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 0.057051317 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 3.2444e-5 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.4276e-5 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 0.075035812 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 0.052807099 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.4641e-5 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 3.499e-5 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 0.051873438 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.2387e-5 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 0.062810832 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 4.0886e-5 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 0.046296448 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.4919e-5 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.0973e-5 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 0.064562236 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 0.031140021 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 1.8763e-5 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 0.052858617 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 0.051649207 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.8577e-5 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 1.4435e-5 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.5597e-5 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.4903e-5 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 0.049633897 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.2689e-5 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 0.053525333 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 0.04534552 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 0.062644934 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.6025e-5 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.7695e-5 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.5432e-5 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 1.7839e-5 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 0.054882536 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 0.075028238 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 0.067305461 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.9751e-5 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 0.063575036 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.9071e-5 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 0.000110416 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.6075e-5 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.009711152 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 0.059381915 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 0.0345983 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 4.3995e-5 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 0.053191495 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 0.058799665 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 0.085346854 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.109e-5 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 0.028435432 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 3.0358e-5 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 0.059882789 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 3.3973e-5 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 0.051453087 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 0.054307831 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.028827788 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 3.7787e-5 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 0.053281579 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 0.060921314 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 4.7845e-5 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.0286e-5 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 0.059431334 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 4.5874e-5 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.1302e-5 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.0827e-5 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 0.03083883 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 0.037109266 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 4.0496e-5 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 3.0e-5 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 1.4073e-5 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 1.6404e-5 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 0.066258913 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.5604e-5 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.0009e-5 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.0735e-5 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 3.7155e-5 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 1.5586e-5 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.3049e-5 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.5603e-5 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.0227e-5 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 1.7179e-5 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 0.069326702 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 0.024328887 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 3.4246e-5 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.2359e-5 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 1.8109e-5 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 0.063012103 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 0.074758479 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.8422e-5 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 1.9504e-5 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.7155e-5 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 3.5839e-5 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 1.8582e-5 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.2548e-5 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.483e-5 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.1903e-5 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 1.6719e-5 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 0.064142271 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.175e-5 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 3.3634e-5 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 1.8018e-5 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.5151e-5 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.005e-5 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.02e-5 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 3.8983e-5 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 0.056566709 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 3.7206e-5 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.4165e-5 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.3167e-5 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.2329e-5 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.9676e-5 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 1.4323e-5 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 1.4345e-5 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.759e-5 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.5928e-5 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 0.026456004 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.009645001 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 3.3064e-5 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 3.2297e-5 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.5454e-5 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 0.052115912 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 0.053992083 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.9081e-5 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 3.0849e-5 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 3.4322e-5 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 1.9452e-5 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 0.062951185 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.035875349 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 0.051025034 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 3.2075e-5 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 0.05512807 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 4.2374e-5 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.6183e-5 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.2188e-5 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 1.58e-5 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.4346e-5 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 0.062753666 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 0.042841138 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.579e-5 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.2326e-5 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.6011e-5 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.1114e-5 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 1.9905e-5 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 0.062544009 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.0421e-5 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 0.052782742 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.4283e-5 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 0.084510684 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 0.031805228 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 0.030336085 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 1.8827e-5 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 1.7902e-5 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 0.028300805 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 0.027334918 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 3.1009e-5 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.4413e-5 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.1294e-5 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.2211e-5 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.2069e-5 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 0.059019115 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.4976e-5 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 1.5395e-5 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.6463e-5 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 1.7374e-5 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.2901e-5 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 0.057318086 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 1.7733e-5 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 0.060276056 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.6525e-5 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.1454e-5 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 1.7098e-5 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 1.9249e-5 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.6448e-5 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.9138e-5 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 1.4612e-5 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 1.7373e-5 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.1658e-5 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 0.064395921 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 0.027879077 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.955e-5 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.3382e-5 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.9923e-5 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.5349e-5 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.0192e-5 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.7783e-5 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.7957e-5 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 1.2769e-5 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 0.058539112 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.5347e-5 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 3.4023e-5 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 1.9809e-5 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 1.6491e-5 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 1.8758e-5 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 0.053559286 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.3254e-5 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.5998e-5 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 0.057583045 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 3.6387e-5 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 0.064866148 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.5411e-5 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.1714e-5 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 1.7663e-5 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 0.049504815 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 4.2987e-5 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 1.7709e-5 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 1.7452e-5 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.7308e-5 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.0222e-5 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 1.8547e-5 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 1.8274e-5 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.1774e-5 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 0.082746531 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 3.7363e-5 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 0.043654306 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.4038e-5 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.27e-5 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 0.024641676 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.3626e-5 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 4.1492e-5 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.031931196 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.972e-5 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 3.2457e-5 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.2921e-5 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.1354e-5 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 1.9812e-5 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.8643e-5 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.2112e-5 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 1.2518e-5 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 0.057520861 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 3.0801e-5 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 1.9827e-5 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.4208e-5 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 1.3253e-5 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.4031e-5 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.2926e-5 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.5359e-5 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.4569e-5 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 1.8191e-5 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 1.901e-5 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 1.7457e-5 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 0.05758826 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.7084e-5 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 1.3307e-5 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.9854e-5 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 3.5885e-5 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 1.1931e-5 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 1.455e-5 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.4404e-5 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 0.071693722 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 3.8748e-5 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.1067e-5 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.0011e-5 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 1.8543e-5 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 1.7977e-5 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.031696757 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 4.1771e-5 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 1.8897e-5 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.2006e-5 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 5.4583e-5 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.1363e-5 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 1.6279e-5 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 1.8309e-5 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 1.3114e-5 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 1.9695e-5 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.0733e-5 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 0.063775424 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 1.7946e-5 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 1.2403e-5 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 1.8347e-5 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 0.054634259 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 3.6581e-5 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 1.9161e-5 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 0.045674429 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.010018746 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 3.2549e-5 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.6467e-5 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.009672945 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 3.2506e-5 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 1.6771e-5 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 1.8708e-5 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.2999e-5 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 1.8353e-5 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 1.8038e-5 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.5968e-5 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 3.9736e-5 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 1.9378e-5 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.2019e-5 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 3.7828e-5 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 4.547e-5 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.4707e-5 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 1.7837e-5 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 1.7981e-5 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.0109e-5 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 1.3586e-5 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 1.2209e-5 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 1.3231e-5 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 1.5998e-5 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.075e-5 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.3237e-5 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 1.5529e-5 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 1.4782e-5 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 1.6258e-5 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 1.8908e-5 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 0.030164705 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.6294e-5 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 1.8376e-5 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 5.7475e-5 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.8517e-5 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 1.6995e-5 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 1.9721e-5 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 3.1553e-5 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.4034e-5 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.04e-5 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 1.952e-5 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 1.8306e-5 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.5177e-5 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 1.2034e-5 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 3.0358e-5 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 1.9198e-5 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 1.2832e-5 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 1.5726e-5 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 1.7845e-5 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.3744e-5 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.154e-5 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 1.0843e-5 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 1.4037e-5 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 1.2706e-5 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 1.8353e-5 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.1389e-5 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 1.7371e-5 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 0.075563064 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.1924e-5 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.6395e-5 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 1.8608e-5 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.4124e-5 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 0.046457239 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.4413e-5 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.3837e-5 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 1.8302e-5 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 1.9419e-5 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.25e-5 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 0.056183725 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.6774e-5 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 0.062604415 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.0357e-5 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.0827e-5 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 1.4926e-5 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.752e-5 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.352e-5 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 1.4247e-5 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 1.8616e-5 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 1.4798e-5 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 0.032160658 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.8719e-5 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 3.1547e-5 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 1.5701e-5 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.6597e-5 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 1.3476e-5 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 1.8592e-5 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 4.9321e-5 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 1.7442e-5 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 1.7741e-5 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 1.6238e-5 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 1.2398e-5 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.432e-5 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 1.6524e-5 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 1.9053e-5 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 1.9414e-5 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 0.033875389 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 4.4001e-5 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 1.942e-5 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 6.1927e-5 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 1.7951e-5 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 1.8025e-5 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 1.2698e-5 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 1.5196e-5 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 1.8312e-5 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 1.4996e-5 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 1.7102e-5 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 1.8615e-5 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 1.3015e-5 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.3428e-5 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 1.5538e-5 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 1.7782e-5 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 1.6434e-5 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 1.4302e-5 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 1.5335e-5 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 1.889e-5 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 1.3263e-5 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 1.3832e-5 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 5.4208e-5 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.0143e-5 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.1886e-5 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 1.4745e-5 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 1.2529e-5 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 1.2729e-5 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 1.0083e-5 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.0593e-5 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.7682e-5 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 1.45e-5 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 1.2755e-5 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 9.759e-6 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.1003e-5 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 1.4045e-5 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.0139e-5 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 1.3634e-5 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.1974e-5 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 1.0534e-5 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 1.4145e-5 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 1.2759e-5 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 1.3497e-5 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 1.7811e-5 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 1.9915e-5 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.3176e-5 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 1.5104e-5 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.2737e-5 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 1.3925e-5 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.4542e-5 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.0194e-5 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 1.0707e-5 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 1.5486e-5 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 1.2968e-5 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 1.9505e-5 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 1.6735e-5 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 1.3246e-5 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 1.8651e-5 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.0176e-5 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 1.2924e-5 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 1.4921e-5 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.5266e-5 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 1.4032e-5 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.541e-5 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 5.8067e-5 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 1.761e-5 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 1.5996e-5 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 1.5476e-5 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 1.185e-5 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 1.0144e-5 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 3.0308e-5 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.6035e-5 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.6133e-5 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 1.8576e-5 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 1.7657e-5 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 1.9765e-5 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 3.5226e-5 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 1.5485e-5 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 1.3252e-5 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 1.1885e-5 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 1.1509e-5 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.1737e-5 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 1.6648e-5 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 1.7916e-5 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 1.2898e-5 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.4429e-5 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 1.2852e-5 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 1.6254e-5 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.2767e-5 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 1.4819e-5 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.4286e-5 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.1397e-5 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.8412e-5 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 1.3937e-5 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.0245e-5 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 1.1697e-5 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.9925e-5 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.1117e-5 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 1.8222e-5 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 1.5168e-5 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 1.2918e-5 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 3.6258e-5 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 1.4854e-5 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 1.7675e-5 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 1.814e-5 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 9.859e-6 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 1.858e-5 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.241e-5 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 1.0769e-5 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 1.0105e-5 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.8744e-5 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 1.2702e-5 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 9.184e-6 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 1.3751e-5 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 1.7423e-5 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 1.8068e-5 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 1.2984e-5 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 8.976e-6 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 1.7558e-5 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.2733e-5 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 1.6446e-5 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 1.6678e-5 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 1.9588e-5 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 1.4548e-5 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 1.1059e-5 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 1.6776e-5 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 1.4837e-5 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 1.6811e-5 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 7.915e-6 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 1.7518e-5 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 1.0806e-5 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 1.6681e-5 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 1.6588e-5 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.8542e-5 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 1.0506e-5 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 1.1135e-5 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 7.581e-6 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 1.7206e-5 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 1.1453e-5 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 1.714e-5 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 1.0628e-5 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 1.5672e-5 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 1.4602e-5 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.5866e-5 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 1.2558e-5 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 1.31e-5 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.2776e-5 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 1.486e-5 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 1.4875e-5 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 1.5551e-5 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 1.3028e-5 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 9.958e-6 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 1.2617e-5 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 1.7062e-5 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 1.4637e-5 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 1.4953e-5 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 9.788e-6 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 1.1159e-5 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 1.2883e-5 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 1.5394e-5 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 1.2172e-5 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 1.0295e-5 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 1.1828e-5 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 1.0556e-5 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.8687e-5 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 1.0319e-5 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 3.3243e-5 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 1.3612e-5 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 1.3114e-5 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.0715e-5 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 1.4957e-5 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 4.788e-5 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 1.5431e-5 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 1.2504e-5 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 9.003e-6 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 1.0873e-5 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 1.5392e-5 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 1.3052e-5 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.3604e-5 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.2991e-5 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 1.3753e-5 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 1.3046e-5 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.5208e-5 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 1.6619e-5 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 1.917e-5 seconds)
done (took 11.357046003 seconds)
(16/22) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.041553868 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.053542937 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.048554653 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.032888734 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.03607898 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.036145402 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.025127255 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.033487662 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.024945407 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.036298142 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.041646063 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.04226599 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.040941662 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.042396208 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 3.1607e-5 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.03154756 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.9341e-5 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.03802985 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.033453241 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.047106411 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.050016169 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.5097e-5 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.023395553 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.036291215 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.005612104 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.03595128 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.046662573 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.5994e-5 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.035802452 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.03063696 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.047896225 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 6.1681e-5 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.7745e-5 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.032513281 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.031541615 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.02500208 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 3.1714e-5 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 1.3273e-5 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.0292752 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.5424e-5 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.048788605 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.033498535 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.001092991 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.001070352 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.1928e-5 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.033231413 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.6179e-5 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.1175e-5 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.005588256 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 1.052e-5 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 6.307e-5 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.024604208 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 1.6153e-5 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.032184591 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.3392e-5 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 1.7126e-5 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 7.418e-6 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 9.027e-6 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.7562e-5 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 9.234e-6 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.8278e-5 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.000100093 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 7.2456e-5 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.024851072 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.001071636 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.1364e-5 seconds)
  done (took 2.268872901 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.040179001 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.07341423 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.034625009 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034814526 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.020419856 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.021561746 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.021541207 seconds)
  done (took 1.201545692 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.022176284 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.024403142 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.034107499 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.034391111 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.022942501 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.026397573 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.022070821 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.051638176 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.057039539 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.025606012 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.040167746 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.034457223 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.032509641 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.03194793 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.022235736 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.038165632 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.023001263 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027525449 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.036797342 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.03687363 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.023258435 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.05070156 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.034940898 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.023427836 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.034086266 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.025613636 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.025735431 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.064312932 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023295107 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.021936084 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021313765 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.050698449 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.023997701 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.032234867 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021137359 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.020144137 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.022731392 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020883064 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.022229768 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.02527107 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.02189918 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.024411295 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.024094107 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.022462426 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.022267196 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.021827631 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.022455808 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.021478601 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.021714106 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.024533446 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.032557303 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.024246929 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.025556649 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.032200046 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.031566431 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025363809 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.02729061 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.023552189 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.025429108 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.033398555 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.024357027 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.035825152 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.035113927 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.022606054 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.035386027 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.031105863 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.024563564 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.021970291 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.021975392 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.02998107 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.02256705 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.035091692 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024443834 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023526153 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.019300775 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.030225732 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.021964957 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.021935851 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.022039611 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.030996062 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.021920197 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021406232 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.021913246 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.021729192 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.022733229 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021315274 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.020972779 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.039615348 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.049724795 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.024001176 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.024739159 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.021649329 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031822651 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.02345575 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.025850682 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.035494065 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.032586085 seconds)
  done (took 3.699157263 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.032647537 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022110174 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.022918149 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.020918164 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.020583198 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.020655389 seconds)
  done (took 1.103048817 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.056590549 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.02085082 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.0210483 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.493e-5 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.039262217 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.022757409 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.023157589 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.7849e-5 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.035388665 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.031655739 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.022865088 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.024280757 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.023478522 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.4453e-5 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.022878166 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.031430339 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.023189745 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.023847479 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.03135296 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.9679e-5 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.028074624 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.7334e-5 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.42e-5 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.026628769 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.0451e-5 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.031396608 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.027598741 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.031336647 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.031077914 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.5155e-5 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.1744e-5 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.0139e-5 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.2697e-5 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 9.657e-6 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.022964126 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.9809e-5 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.0527e-5 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.5152e-5 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.02282025 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.5705e-5 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.024326576 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.3071e-5 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.022390218 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.7451e-5 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.6657e-5 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 1.694e-5 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 1.3309e-5 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.027891329 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.023082069 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.0372e-5 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.4426e-5 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.7687e-5 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.3138e-5 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 8.432e-6 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.2848e-5 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.6083e-5 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 7.898e-6 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.023152837 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.4434e-5 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.6922e-5 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 1.3208e-5 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.4296e-5 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.5467e-5 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 1.3505e-5 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.023491663 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.5283e-5 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.6752e-5 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 1.5896e-5 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 8.663e-6 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.2294e-5 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.3603e-5 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 9.291e-6 seconds)
  done (took 1.780898922 seconds)
done (took 11.030256752 seconds)
(17/22) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 13.186227368 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.129348969 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.391787352 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.061593284 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 1.227497962 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 2.26739085 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.044439769 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.315526591 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.159767569 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.09522923 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.04563497 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 0.431559457 seconds)
  done (took 19.312005926 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 16.766949187 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.279263946 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.61167871 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.534653787 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 4.16575602 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 0.163532644 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.112083229 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.817371912 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.381835616 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.251333605 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.083530479 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.401958849 seconds)
  done (took 26.817428001 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 9.171040475 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 0.268813568 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 0.607073275 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 0.398092506 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 4.257255501 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 0.103963316 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 0.106730034 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 0.692898108 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 0.373435581 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 0.393205696 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 0.078535238 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 1.276170178 seconds)
  done (took 19.349924333 seconds)
done (took 66.444695047 seconds)
(18/22) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.962010614 seconds)
  done (took 2.840825672 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.96982787 seconds)
  done (took 2.875824835 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.056897566 seconds)
  done (took 1.958196584 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.730769263 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.978849336 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.926797521 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.123770652 seconds)
  done (took 4.652519329 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.986339412 seconds)
  done (took 2.939369263 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.242233871 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.191779825 seconds)
  done (took 2.371465913 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.755419423 seconds)
  done (took 2.672018194 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.561317392 seconds)
  done (took 3.481359514 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.202909549 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159937349 seconds)
  done (took 2.273444931 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.747872541 seconds)
  done (took 2.660662714 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.46011005 seconds)
  done (took 7.380285383 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.238292776 seconds)
  done (took 2.152908846 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.32638003 seconds)
  done (took 2.24346049 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.960096187 seconds)
  done (took 2.878535343 seconds)
done (took 45.353348767 seconds)
(19/22) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.05092222 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.054183499 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.053500058 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.048303035 seconds)
  done (took 2.122810149 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.044626569 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.042833461 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.034316388 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.040314365 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.023454095 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.024187662 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.043543451 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.028331424 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023380026 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.038344479 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.027235598 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.038199772 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.038699572 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.032841349 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.03332952 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.039807475 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.038713473 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.042827052 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.0234067 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.032740376 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.038329259 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.038622064 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.028065071 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.03004207 seconds)
  done (took 2.753958622 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.213831106 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.093445625 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.033467876 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.035476045 seconds)
  done (took 2.303483194 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.039908558 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.044491083 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.056247014 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.03887077 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.032163039 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 0.044533665 seconds)
    (7/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.044174931 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 0.049734404 seconds)
    (9/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 0.051890734 seconds)
    (10/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 0.046191193 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 0.032542866 seconds)
    (12/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.045536031 seconds)
    (13/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.03517079 seconds)
    (14/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.034379642 seconds)
    (15/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.035490273 seconds)
    (16/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.04383057 seconds)
    (17/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.021126084 seconds)
    (18/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.025927279 seconds)
    (19/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 0.043279588 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.043989375 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.031805721 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.037748631 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.031253179 seconds)
    (24/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 0.042930198 seconds)
  done (took 2.889322158 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.058991547 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.070902448 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.066679864 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.058734202 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.056927405 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.025885229 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.06089928 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.052154704 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.093440774 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.094609941 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.042060967 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.092268166 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.067619649 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.034948081 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.050820814 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.11646903 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.160454567 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.041769355 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.056067969 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.087490556 seconds)
  done (took 3.316948944 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.035869718 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.025243987 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.025037749 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.025738687 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.058146722 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.046700334 seconds)
  done (took 2.147481028 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.045371325 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.033436138 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.044217616 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.040603715 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 2.5681e-5 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 6.662e-6 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 2.3084e-5 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.4416e-5 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 5.746e-6 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 2.1643e-5 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 1.6645e-5 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 6.209e-6 seconds)
  done (took 2.097153329 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.203764727 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.034723229 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.037627328 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.029276869 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.041304465 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.03800606 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.046721776 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.033401086 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.051641093 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.029221412 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.028803239 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.032423677 seconds)
  done (took 2.5357675 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.199205351 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.159181519 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.311176758 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.225134392 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.30846644 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117362805 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049080369 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.081321527 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.400024484 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.068890214 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053445336 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.027170025 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1171224 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.102694732 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031335817 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.136904626 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.284511943 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.013789713 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055019486 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101754707 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054063406 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.130281106 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.07002832 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05939603 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.3151e-5 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072540409 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.029344803 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.024108088 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.054883672 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038529597 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058572487 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.236869136 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.096090713 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 7.2936e-5 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092799874 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.018669522 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0425278 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.039056382 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.156515094 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.024890347 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033230466 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.016846714 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.001433993 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 1.8811e-5 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 6.1187e-5 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.063077232 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.014411632 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041887191 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03135691 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.342925623 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044594459 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033032315 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.020271097 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048835963 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.25125378 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.028659165 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.038358164 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052141908 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.025936639 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.067677539 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.026606281 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071118652 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.027160272 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025167837 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.08905438 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.033884518 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.3434e-5 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.038018985 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.000305661 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.027235886 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.048871115 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.076328918 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044726759 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.198e-5 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.041563546 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.035268247 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0594413 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.006613559 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.058141907 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.032098089 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.023442463 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.040434574 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.075093501 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116834672 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045515831 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042532804 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.026992165 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.019166203 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 4.0789e-5 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.067319587 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.012910657 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.7293e-5 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.5571e-5 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.061418415 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044090427 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022326572 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04462348 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.038176274 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.017444593 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055556055 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048462284 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.013507541 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056192456 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034238977 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.120944227 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026897951 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.0173548 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.045479103 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.023710427 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.22801272 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019066897 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.065502286 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043500484 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.038410924 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.034085647 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09912236 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.040803493 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071411766 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039901088 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.069280103 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.014014249 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.035525931 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039197327 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046899141 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047489577 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057279083 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.02043199 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.03141678 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056258457 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.025564807 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.021271781 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053220632 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 3.3463e-5 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.4646e-5 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051197605 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.017789922 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.06639625 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.037483452 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066907927 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.066692171 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.000124124 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048077936 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.034961292 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051950125 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.038335444 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.040246449 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.039850997 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.000338483 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.023522875 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.5644e-5 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0445212 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 8.3184e-5 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086284959 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.020943577 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.035428617 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050802667 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053138441 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.027423012 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045803977 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.025054976 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046229197 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.034786561 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07261341 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060970803 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031801982 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.039127726 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033379405 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.085561554 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.044535329 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090940785 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024402272 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.057312057 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.023163761 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073052786 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 4.5884e-5 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022303312 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.020108238 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039825748 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.00031014 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048482326 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.074428742 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.039607406 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.014543765 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02093047 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104817753 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 7.8291e-5 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.044367909 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.028000012 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.038756485 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048940372 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.006660361 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020183274 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.01120967 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036322936 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080567107 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.015993893 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072459283 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.000109198 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023233305 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.7319e-5 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.408e-5 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.044381841 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.07182587 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049691722 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.048170064 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.204665743 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035289156 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.068868012 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.3142e-5 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.6289e-5 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.022245607 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.06829899 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066672996 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019657456 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047169677 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.03329869 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.049601345 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.000130244 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.505e-5 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054138181 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.000308664 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056558746 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.024721057 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.018331064 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072776492 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057818702 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.071842056 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.0226014 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048438406 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048391672 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.055134918 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.027115028 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064664928 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.000311884 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.034859651 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.000479157 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066467674 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.000122329 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 6.4406e-5 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040850555 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045051948 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.013768122 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.0262e-5 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.075499996 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.3351e-5 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.028682548 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023814231 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.000138213 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.073456214 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.00010485 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.046606959 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.063215362 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038577016 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041519461 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.048610465 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.023413171 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.018179406 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.045054356 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.019700522 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.3473e-5 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.8086e-5 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02537878 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056891803 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.014985097 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.012630561 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115477484 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041454218 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.018161314 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.020225924 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024401583 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.095713362 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.025224582 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.069273606 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049521015 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0540072 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072521716 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.026304878 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.063400269 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060437248 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.018092131 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.032699005 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.015074982 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.030902954 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.019690241 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.2207e-5 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.014025821 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.045667366 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.012157448 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.062007736 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 7.4592e-5 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.042395061 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038630964 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.041560539 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094350291 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.026549496 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071636905 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.019683381 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035955169 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.043195668 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.022771538 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.023964959 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.039572076 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.039364426 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05703769 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.059508902 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038955662 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070288604 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027670036 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.075914153 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.03467977 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.056360119 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047978199 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.068877411 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.036913575 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.205270029 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065418536 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050990146 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053422954 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.016476705 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.026892555 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041214754 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.033595864 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109027317 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03173282 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.014742748 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.02779942 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.026398904 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030402329 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03795681 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023820267 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115336418 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030130471 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.023060671 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039136851 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.000237851 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033485939 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020818925 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.024119532 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.000184696 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.026900752 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.030251401 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.060865369 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067705994 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05972124 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.076112317 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.07096564 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.053081735 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.062242818 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054153572 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065156164 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.021916553 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.02143473 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069122016 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037376737 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.000228368 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.044566718 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031211799 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.033852066 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.021448886 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080879811 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.031678386 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.000119874 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024014691 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.000490532 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.014613764 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.011202965 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.060928179 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.046373993 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.02730124 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050492613 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.015735549 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040241845 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045999211 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012634801 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04445982 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.018081945 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04690625 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.2443e-5 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024222026 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 8.2763e-5 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.043127754 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.045411828 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043683125 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.057284423 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.049807707 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02670322 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.073339008 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092797566 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020203642 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020692885 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.014774243 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.014482825 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048609801 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113579572 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050826421 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.000560544 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.020659239 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.017609854 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018584919 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.012233441 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.017729464 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.059557677 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05358571 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030612693 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.063482875 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048075181 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019710749 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044762126 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.033260414 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.025724043 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032164965 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056825905 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.039518799 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.000124313 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033950148 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040608638 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023275251 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.6233e-5 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.014813236 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.015316166 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.042855304 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.014648082 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.025735913 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075493623 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.050250641 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047089193 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046221792 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.019389579 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017549896 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063214948 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.011098011 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066503477 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.014369031 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.023677573 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.017610012 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.017828188 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.017116397 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.46315302 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.033953049 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038417412 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047729118 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.040900813 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.202513748 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.089826674 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 6.5468e-5 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.09551025 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.019586639 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 6.8349e-5 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.013975701 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058615925 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.018867258 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.04861955 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.048747713 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049812248 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.026026317 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 7.7213e-5 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071447197 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.04138978 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.045540869 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.017819529 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.015900236 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071168845 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041226207 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.209e-5 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.023627087 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.051421133 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.012388933 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039568558 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.021738714 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.011929816 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.199356481 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.309949747 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023555169 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.000125979 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.026921724 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101617381 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059305977 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031163752 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04214386 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.058678665 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.042038208 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.027700171 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045161119 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.217065989 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.034507987 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.017610474 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.00016595 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.040422704 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034597311 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.031393725 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.013826014 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.035937865 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.021698417 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.021860151 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044569839 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.02772094 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.023075819 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.054733904 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.021535208 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.006631619 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061676824 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.000176824 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.000500789 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.016175441 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.000120276 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.024157034 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047570025 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.015388303 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04293536 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.048682142 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035258336 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.017710667 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.043134915 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06515252 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.070852334 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058756798 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.325e-5 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.057160826 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.020067529 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.000437762 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.032131902 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.000325026 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.037703243 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060682212 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.000120861 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 8.2049e-5 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041492437 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.027081731 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059634173 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042676774 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060216258 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.039005496 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023302573 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.023340535 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.6207e-5 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 4.4705e-5 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 8.3236e-5 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.4662e-5 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.014668884 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045967569 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 7.4899e-5 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.022670586 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.073353644 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.01780829 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.041074757 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.000196266 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056861718 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.021130117 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.03828268 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.046614623 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.031921715 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.030487016 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053097535 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061131475 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109183945 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.057745926 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.065303466 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062842916 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.000485034 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.488e-5 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.015251857 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.050762129 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.01583026 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.02047917 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.021211014 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063290999 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.047931284 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.026832459 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.298354415 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.015041767 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.020618318 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.020800805 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.015008761 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.021321824 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.042520595 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.020174421 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.021245381 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.023779669 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.022350948 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08754855 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058536407 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.020493496 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.02723011 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.024340768 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.019462954 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.000328169 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.050094342 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033746432 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.9294e-5 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.309506449 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.039592179 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069603161 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.01964693 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048333686 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.061465474 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.027903357 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.431043256 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.018084169 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.049276366 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075664153 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.042290662 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065663152 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.012793793 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.043044589 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.027977832 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.050322084 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.7177e-5 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.022609666 seconds)
  done (took 29.665806723 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.275961371 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.47580175 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.294030517 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.113966594 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.184389283 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.185261394 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.342933742 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 0.110107566 seconds)
  done (took 4.028497465 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.040602229 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.029081355 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.07586826 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.224656349 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.068094732 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 1.4385e-5 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.5917e-5 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.052973918 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.007412853 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.034030639 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.080715177 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 1.44e-5 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.009410831 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.520311455 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 1.9734e-5 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 3.9167e-5 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.007729455 seconds)
  done (took 3.242119864 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.475585834 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.393960867 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.969905999 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.469050485 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.102109453 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.668411849 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.009369201 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.006801787 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.789358055 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 10.594110918 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.086720146 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.170533575 seconds)
  done (took 28.7874542 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.189375937 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.0118981 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.012224068 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.010080262 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.01374987 seconds)
  done (took 2.287461692 seconds)
done (took 90.102677902 seconds)
(20/22) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.061828486 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.148750347 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 9.0808e-5 seconds)
  done (took 2.223942078 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.057099785 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.033226715 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.026052391 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.05772188 seconds)
  done (took 2.229454368 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.097555749 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.038589154 seconds)
  done (took 2.188071961 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.216308899 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.174899093 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.063323961 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.063352392 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.04646974 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.056391881 seconds)
  done (took 2.229442862 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.02270327 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.022305665 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.02253134 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.023139003 seconds)
  done (took 2.145474642 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.020831895 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.020183203 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.03048637 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.046544107 seconds)
  done (took 2.174563804 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.229163926 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.096846762 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.1492148 seconds)
  done (took 2.535303399 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039890475 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.03603771 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.037438389 seconds)
  done (took 2.174784521 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.057232528 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.05354435 seconds)
  done (took 2.173023044 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.039615942 seconds)
  done (took 2.100871783 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.099683434 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.075252688 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.156890605 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.037525027 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.120236742 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.09666924 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 5.933e-5 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 3.7087e-5 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.0316e-5 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.6639e-5 seconds)
  done (took 2.648039228 seconds)
done (took 27.392348154 seconds)
(21/22) benchmarking "sort"...
  (1/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.179502154 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.059934431 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.077438525 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.06092808 seconds)
  done (took 2.431174149 seconds)
  (2/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.256099296 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.220861538 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.048422906 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.069467756 seconds)
  done (took 2.666502704 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.02480193 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.771451524 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 0.029478154 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 0.102055036 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.989200328 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 0.025336213 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.595367631 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 1.6902e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 0.029282837 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 1.1462e-5 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 0.132556681 seconds)
    (12/17) benchmarking "ascending"...
    done (took 0.031299106 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 2.4428e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 0.035857724 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.117479339 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 1.2199e-5 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.027465425 seconds)
  done (took 10.983236409 seconds)
  (4/11) benchmarking "length = 10"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 4.4499e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 9.993e-6 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 1.0393e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 8.016e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.6765e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.244e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.00095581 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 8.006e-6 seconds)
    (9/17) benchmarking "all same"...
    done (took 6.34e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.324e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 1.2915e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 6.542e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.0552e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 6.891e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 9.404e-6 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.497e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.893e-6 seconds)
  done (took 2.120621871 seconds)
  (5/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.000154555 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 4.8772e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 7.6447e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 9.12e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.5489e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 6.307e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.007615108 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 7.6226e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 1.63e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.2694e-5 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 9.4007e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 4.7393e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.6862e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 4.7845e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 8.4206e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 4.983e-5 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 4.4199e-5 seconds)
  done (took 2.103063195 seconds)
  (6/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm on a view (Float64)"...
    done (took 0.415132219 seconds)
    (2/13) benchmarking "sort(rand(10^8))"...
    done (took 8.631162302 seconds)
    (3/13) benchmarking "sortperm(rand(10^5))"...
    done (took 0.035863753 seconds)
    (4/13) benchmarking "small Int view"...
    done (took 0.039005989 seconds)
    (5/13) benchmarking "sortperm(rand(10^7))"...
    done (took 8.581653426 seconds)
    (6/13) benchmarking "small Float64 view"...
    done (took 1.4962e-5 seconds)
    (7/13) benchmarking "inplace sorting of a view"...
    done (took 0.034616636 seconds)
    (8/13) benchmarking "sortperm on a view (Int)"...
    done (took 0.18501818 seconds)
    (9/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 0.382968758 seconds)
    (10/13) benchmarking "sortslices sorting very short slices"...
    done (took 1.770379772 seconds)
    (11/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 0.041296165 seconds)
    (12/13) benchmarking "Float16"...
    done (took 1.021214161 seconds)
    (13/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 0.183458535 seconds)
  done (took 23.41762021 seconds)
  (7/11) benchmarking "length = 30"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 4.7818e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.0625e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 1.2447e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 7.922e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.6875e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.141e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.007414539 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 2.2981e-5 seconds)
    (9/17) benchmarking "all same"...
    done (took 1.1018e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.641e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 1.5613e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 7.934e-6 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.8293e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 9.745e-6 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 1.3174e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.514e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 9.431e-6 seconds)
  done (took 2.165176009 seconds)
  (8/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.035631143 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.03979622 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.050555228 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.060928891 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.026777598 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.036501101 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.031256319 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.026510119 seconds)
  done (took 2.415906713 seconds)
  (9/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 0.166780109 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 0.120126194 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 0.047519138 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 0.068073159 seconds)
  done (took 2.513330577 seconds)
  (10/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 0.001004091 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 0.000454622 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 0.000724785 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 1.4492e-5 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 0.000552685 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 1.252e-5 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.017479933 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 0.000446705 seconds)
    (9/17) benchmarking "all same"...
    done (took 9.8732e-5 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 0.00040779 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 0.001141979 seconds)
    (12/17) benchmarking "ascending"...
    done (took 0.000679527 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 0.000560117 seconds)
    (14/17) benchmarking "descending"...
    done (took 0.000760461 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 0.001116929 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 0.000465661 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 0.000672279 seconds)
  done (took 2.144180318 seconds)
  (11/11) benchmarking "length = 100"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 4.9537e-5 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 1.2662e-5 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 1.8331e-5 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 8.461e-6 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 1.828e-5 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.439e-6 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 0.000220977 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 8.231e-6 seconds)
    (9/17) benchmarking "all same"...
    done (took 6.275e-6 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 7.308e-6 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 2.255e-5 seconds)
    (12/17) benchmarking "ascending"...
    done (took 1.4321e-5 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 1.1721e-5 seconds)
    (14/17) benchmarking "descending"...
    done (took 1.3613e-5 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 2.0667e-5 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 6.889e-6 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 1.2791e-5 seconds)
  done (took 2.108394054 seconds)
done (took 57.140611632 seconds)
(22/22) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.042701087 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.024680697 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.030858632 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.072983471 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.034023727 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.022720599 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.02201515 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.033057626 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.037473954 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.029859432 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.032968074 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.7464e-5 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.028066243 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.8455e-5 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.03007758 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.03088603 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.026343144 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.011085381 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.024054739 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.026206471 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.008649609 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.019008872 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.013812614 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.003691703 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.023923028 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.003401786 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.022021879 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.014617139 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.7464e-5 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.009308116 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.0263129 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.005593564 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.012457033 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.012310724 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.030859488 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.011944282 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.005554554 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.029575866 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.005570584 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.008879047 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.0099423 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.008996827 seconds)
  done (took 2.953480986 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.025203716 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.031499827 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.02413567 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.029954604 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.027805417 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.032934131 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028717979 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028080989 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.030337419 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.02755043 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.026608227 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.026934983 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.03034526 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.022127569 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.030056002 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.027909031 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.027921645 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.023150709 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.030140935 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.02701491 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.026556377 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.022972409 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028342632 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.030986094 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023933893 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.031222192 seconds)
  done (took 2.842821686 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.033708292 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.049527755 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.059615463 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.062131472 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.025986445 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.040316212 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.047826394 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.042571739 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.057128349 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.025942 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.047011578 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.020076639 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.088011381 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.033003823 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.020029096 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.042064682 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.031825152 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.030318912 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.037965681 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.123103393 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.0428903 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.044911259 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.056010876 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.071937415 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.026159305 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.048151431 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.032937694 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.030685407 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.03605846 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.03018663 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.027662171 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.020768819 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.02634661 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.034145516 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.027477095 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.8078e-5 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.039698428 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.031537185 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.040421051 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.027167744 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.024918702 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.027364566 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.053045426 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.099604302 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.026683784 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.020612931 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.026957714 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.031735027 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.027442754 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.069081443 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036486332 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.027298271 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.020722926 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.031467385 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.027713543 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.037992616 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.025890525 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.025925508 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.036866552 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.02449591 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.042652373 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.032107205 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.034781362 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.027261093 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.029478294 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.03169085 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.020615721 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.020009907 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.0568828 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.040641811 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.066844755 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.02328028 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019599685 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.030453293 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.031182021 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.034875579 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.022128409 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.040228247 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.029333637 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.020702561 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.040347053 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.026208156 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.021082259 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.101431603 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.708e-5 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 8.906e-6 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 8.693e-6 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.020467848 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.020438276 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.030579962 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.036411015 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.02060787 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.021042271 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.039570046 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.03494633 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.025945855 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.7309e-5 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 9.822e-6 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.021296896 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036501688 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.023022724 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.020565851 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.028794725 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.027066812 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.021335293 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.057307415 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.03144685 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.026135113 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 4.1162e-5 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 9.276e-6 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022391985 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.033075804 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.021249822 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.029537598 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.02647373 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.039523951 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.030025719 seconds)
  done (took 6.025439168 seconds)
  (4/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.09567294 seconds)
    (2/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.094659775 seconds)
    (3/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.09455559 seconds)
    (4/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.174292685 seconds)
    (5/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.023081178 seconds)
    (6/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.034219025 seconds)
    (7/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.097515127 seconds)
    (8/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.098266992 seconds)
    (9/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.027349585 seconds)
    (10/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.044229772 seconds)
    (11/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.02464839 seconds)
    (12/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.048944915 seconds)
    (13/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.042226906 seconds)
    (14/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.063407711 seconds)
    (15/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.052496127 seconds)
    (16/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.022399749 seconds)
    (17/27) benchmarking ("BitSet", "Int8")...
    done (took 0.046229737 seconds)
    (18/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.040827696 seconds)
    (19/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.0993343 seconds)
    (20/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.167288498 seconds)
    (21/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.023438315 seconds)
    (22/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.044522071 seconds)
    (23/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.043510775 seconds)
    (24/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.028175586 seconds)
    (25/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.026039628 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.04192774 seconds)
    (27/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.022744191 seconds)
  done (took 3.754005267 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.027862434 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.03583481 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.028664397 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.038726259 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.036986433 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.022624034 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.035599566 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.030689102 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.036951161 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.028228715 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.025938737 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.041573222 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.025481469 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.037235577 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.029585178 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.04025092 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.040791254 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.029682893 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.027437878 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.02647207 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.036192368 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.043030577 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.041067549 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.022819303 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.022363435 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 4.7306e-5 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.4882e-5 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.030466223 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021735302 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021678548 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.020012653 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.033323611 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.036589776 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.028061022 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 6.723e-5 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.034429659 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 7.1004e-5 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.034853237 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.025274797 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.021430745 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.021210855 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.028584501 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.022457667 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.1356e-5 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.041945627 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.033972054 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022802563 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.9486e-5 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.02499788 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.019981343 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.033544249 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.032387253 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 3.1138e-5 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.036422012 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.023094301 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 3.3632e-5 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.2221e-5 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.038804703 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.029751059 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.034691568 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.022718286 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.022262418 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.024837369 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.024059897 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.045387883 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.0664e-5 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.02218529 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 3.6071e-5 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.034299662 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.085e-5 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 6.3645e-5 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.037684454 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.020097246 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.023973541 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.4158e-5 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.040493928 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 8.5855e-5 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 4.97e-5 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 3.2131e-5 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.028335811 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.024057352 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.022437241 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.7682e-5 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.021758582 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.020698517 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 9.7094e-5 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 7.4901e-5 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.3328e-5 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.0843e-5 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.0087e-5 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024947247 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.029529826 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 4.8507e-5 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.8799e-5 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.039470045 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.9731e-5 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.03915972 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.061e-5 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.027774532 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.01996927 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.042793527 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.1503e-5 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.02621324 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.000150083 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.040116193 seconds)
  done (took 4.434171146 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.057403037 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.032637072 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.038606367 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.065734837 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.04280135 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.026891274 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.034488084 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.034566988 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.043989108 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.022474648 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.039662784 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.022347144 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.032535866 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.037301346 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.033279192 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.043215041 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.022717852 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.040337724 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.05077549 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.022456379 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.034578396 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.046608718 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.044921066 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.04674557 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.037600642 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039103374 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.052654201 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.022632902 seconds)
  done (took 3.217212857 seconds)
done (took 25.338034776 seconds)
RUNNING BENCHMARKS...
(1/22) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.199548007 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.249260539 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.134638814 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.399894221 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.219937611 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.185245287 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.166092585 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.140492582 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 9.016633102 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.136679226 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.462868745 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.951939927 seconds)
done (took 72.474795575 seconds)
(2/22) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.311428361 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.256439776 seconds)
    (2/2) benchmarking "String"...
    done (took 2.336137568 seconds)
  done (took 6.75340969 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.446358263 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.175899794 seconds)
    (3/3) benchmarking "different"...
    done (took 2.204134982 seconds)
  done (took 8.962619921 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.138719801 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.017520469 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.353040189 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.978180828 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.568967637 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.227844662 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.884087587 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.85689197 seconds)
  done (took 32.028596073 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.565728848 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.274668484 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.505104014 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.433875758 seconds)
  done (took 15.921267769 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.441994573 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.307358172 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.307067333 seconds)
    (4/4) benchmarking "different"...
    done (took 2.236472805 seconds)
  done (took 11.43409834 seconds)
done (took 87.846049934 seconds)
(3/22) benchmarking "parallel"...
done (took 2.13620205 seconds)
(4/22) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.210702053 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.494156547 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 4.594243988 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.231138295 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.208526087 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.174395162 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.295738878 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.262783055 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.253436203 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.191059319 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.236687256 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.201004045 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.195750017 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.257669283 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.262596618 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.229224208 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.204615759 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 3.806392101 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.255235925 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.20268345 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.180976178 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.235617157 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.204243956 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.252565695 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.27932891 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.19288187 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.53845228 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.262366881 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.205220762 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.235319165 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.314230814 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.201506672 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.296444058 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.255738038 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.250805245 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.267964596 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.258885859 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.311016943 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.181214127 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.308498256 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.259567801 seconds)
  done (took 98.402541873 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 3.083291384 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.318877774 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.405835718 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.357972783 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.751103038 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.410336192 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.431248002 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.306741319 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.306422394 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.398080634 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.406191408 seconds)
  done (took 29.32751418 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.711018524 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.310886656 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.403325106 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.287109239 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.385477467 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.396939425 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.302023849 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.311164496 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.312189726 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.407707028 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.420969758 seconds)
  done (took 28.390897149 seconds)
done (took 158.253513689 seconds)
(5/22) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.552747685 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.195075137 seconds)
  done (took 6.889765618 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 2.148781384 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 2.146190291 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 2.148662966 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 2.146765332 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 2.14980472 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 2.149381076 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 2.166581755 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 2.151687946 seconds)
  done (took 19.348093141 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 2.146078676 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 2.151993286 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 2.149045919 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 2.146460385 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 2.150854112 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 2.148221059 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 2.147112168 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 2.147958568 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 2.150511579 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 2.162816785 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 2.151394326 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 2.151865425 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 2.148879661 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 2.152054068 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 2.15542731 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 2.147750723 seconds)
  done (took 36.549321182 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 2.150225872 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 2.147702714 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 2.149750955 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 2.147786426 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 2.151894617 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 2.150048775 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 2.150096117 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 2.150299914 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 2.153569165 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 2.14961652 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 2.147830584 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 2.152647319 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 2.150305811 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 2.150201787 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 2.152320532 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 2.149622116 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 2.151914102 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 2.151462248 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 2.155991257 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 2.153053302 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 2.149681751 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 2.151778558 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 2.15088108 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 2.150590698 seconds)
  done (took 53.766715727 seconds)
done (took 118.69381943 seconds)
(6/22) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.269816659 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.46403343 seconds)
  done (took 8.87486066 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.16170071 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.161433426 seconds)
  done (took 6.465815917 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.492779128 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.176529878 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.68624907 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.43132334 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.179288286 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.173259446 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.610908534 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.179091516 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.175360095 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.176591178 seconds)
  done (took 25.423967114 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.189973863 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.354033188 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.339349481 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.272804961 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.34176868 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.194799272 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.212054631 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.187505241 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.382476 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.181195648 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.309662021 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.363485546 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.316576509 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.389336181 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.201203349 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.343819889 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.379092029 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.314707781 seconds)
  done (took 43.418046356 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.176928643 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.180989802 seconds)
  done (took 6.50025101 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.305008693 seconds)
    (2/7) benchmarking "second"...
    done (took 2.191833336 seconds)
    (3/7) benchmarking "month"...
    done (took 2.279495514 seconds)
    (4/7) benchmarking "year"...
    done (took 2.268129552 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.215053287 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.18476422 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.192881879 seconds)
  done (took 17.778680398 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.670857255 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.177954191 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.202204014 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.63553683 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.783496876 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 3.036345522 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.817333623 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 3.047532438 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.940082037 seconds)
  done (took 26.455170976 seconds)
done (took 137.053719504 seconds)
(7/22) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 5.04376639 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.14105393 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.099524363 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.179964862 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.172723365 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.540083442 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.221617371 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.568418243 seconds)
done (took 45.115145655 seconds)
(8/22) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.261097034 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.713354306 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.74634761 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.743301832 seconds)
  done (took 25.351726104 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.150331154 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 5.594240264 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.188210259 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.58646934 seconds)
  done (took 26.692616654 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.603803596 seconds)
    (2/2) benchmarking "read"...
    done (took 2.739179298 seconds)
  done (took 7.489462561 seconds)
done (took 68.93535355 seconds)
(9/22) benchmarking "frontend"...
  (1/1) benchmarking "nestedscopes"...
  done (took 7.142181058 seconds)
done (took 9.281039811 seconds)
(10/22) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.213077263 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.19531407 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.209586265 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.209200415 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.209237579 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.208276049 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 2.149977844 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.210040242 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.191911685 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.217455948 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.212451191 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.01073937 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.210143798 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 4.526699502 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 2.150451161 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.012281631 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 2.150149748 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.206151689 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 4.525325993 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.210129589 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 2.152133817 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.210656731 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.209362946 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.205891485 seconds)
  done (took 65.158072131 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.22823952 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.219106588 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.232335563 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.223277946 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.277136221 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.228092119 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.223849264 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.200367624 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.228087511 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.202409859 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.194232697 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.277894921 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.20102013 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.273789171 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.202345407 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.275806179 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.233902592 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.200949223 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.199536734 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.275785293 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.218598281 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.202426663 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.272776879 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.195574579 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.266145698 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.198037869 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.203013067 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.219112 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.194733787 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.265733539 seconds)
  done (took 68.975836669 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.195461345 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.166050961 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.177400773 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.246545487 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.162531172 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.176199602 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.176667801 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.167950022 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.163141577 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.178423989 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.180979696 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.17894664 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.177342753 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.186486405 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.165074906 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.175358771 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.180473106 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.234476501 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.167587243 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.163719192 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.206085718 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.180802342 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.165782578 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.178698252 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.183635855 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.17536481 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.164596251 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.176654364 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.177437196 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.178386268 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.181905866 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.211022219 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.178440212 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.184895149 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.186026716 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.224183173 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.182077246 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.191426973 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.185691238 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.164176435 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.165501116 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.165412008 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.179517995 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.163360582 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.185499346 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.178977816 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.177630689 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.183584367 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.170449082 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.165424649 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.167975625 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.180527873 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.174668555 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.186529804 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.168492543 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.180652428 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.166316909 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.172926091 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.179804541 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.165995644 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.167800785 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.193583297 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.187234833 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.178724058 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.337767473 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.188195916 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.18081173 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.170991856 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.182132525 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.269402707 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.182334095 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.271091999 seconds)
  done (took 159.436053886 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.205130943 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.284791939 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.356041873 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.444491471 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.467642991 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.210973758 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.272570668 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.738023554 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.814638564 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.355552123 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.650120805 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.284919791 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.757538511 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.264098883 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.210295296 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.234677945 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.267021506 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.24086539 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.203821366 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.263395156 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.216480449 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.25399948 seconds)
  done (took 54.140795151 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.19922924 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 3.03846199 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.197135139 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 3.032948714 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 3.049850646 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 3.037966064 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.198833226 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 3.03476849 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.197325056 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.198247942 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.1991172 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.200403597 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 3.086800193 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.198933088 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.198002117 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 3.06951163 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.199961219 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 3.054462472 seconds)
  done (took 48.540986297 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.378841688 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.290726851 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.222320987 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.205746869 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.386135866 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.335646403 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.266673601 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.32852318 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.195410073 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.291628868 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.329622897 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.197117538 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.335964022 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.207255178 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.196798013 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.386463664 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.220311861 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.207191828 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.265786864 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.269591178 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.376842834 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.264487377 seconds)
  done (took 52.306496554 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.206289784 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.198707345 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.252058228 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.25339831 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.205968003 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.209758129 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.218694203 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.20007676 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 3.042841346 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.203831371 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.19924336 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.201114235 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 3.042314152 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.22242899 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.266300761 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.199650658 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.201433238 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.219978172 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.205690055 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.205184806 seconds)
  done (took 48.101968937 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.228590388 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.202443155 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.20505228 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.231134601 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.204654556 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.201405705 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.234258111 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.20569462 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.202307047 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.389969054 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.200965619 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.20217633 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.232839634 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.209893399 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.202121235 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.238019571 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.226980979 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.227997055 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.203181659 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.208498842 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.389602886 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.204176824 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.229091921 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.199924501 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.204594347 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.201268177 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.20645258 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.208881764 seconds)
  done (took 64.451210856 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.220911618 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.194045232 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.205049126 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.230596886 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.226661201 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.244206538 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.22580499 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.235263123 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.202103655 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.20392152 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.221949068 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.19636331 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.195147405 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.224248263 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.198073376 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.221344965 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.689802154 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.231416437 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.241833974 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 7.150937773 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.224532552 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.686726251 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.224716502 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.198972657 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 7.146590952 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.22376093 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.22389103 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.222837647 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.224323538 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.198504109 seconds)
  done (took 85.485789831 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.178973156 seconds)
    (2/2) benchmarking "in"...
    done (took 2.181542072 seconds)
  done (took 6.51097865 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.195641541 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.256987824 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.195038092 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.336002999 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.376920004 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.307513391 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.325809291 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.266541823 seconds)
  done (took 20.409489086 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.184396098 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 3.793753851 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.231504683 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.185896903 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.188680983 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.835925389 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.69243276 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.125763869 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.062420457 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.640579774 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.997636501 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 4.425884201 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.422244211 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 3.095825335 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.254836419 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 3.531910711 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.491066332 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.986784848 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.361461473 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.203792881 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.709875446 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.206140321 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 3.252998481 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.195572844 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 3.240148561 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.606996303 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.945232706 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 3.196702315 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.450020417 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 3.277861596 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.732035936 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.181308549 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.185539762 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.581167171 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.20513126 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.183329904 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.774518421 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.196245082 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.33892192 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.182440606 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 3.928198917 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.019443942 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 3.085664782 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.704226049 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.195306535 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.194473196 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.178998756 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.183039971 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.915469872 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 3.380239638 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.748247428 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.666118422 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.262677215 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.187551919 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 3.90770479 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.223039441 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.241525913 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.882795601 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.721741609 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.815596397 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 3.078775579 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.596812842 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.251929656 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.226525099 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.206979562 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.062317905 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 3.619785877 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.704462106 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.131592031 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.19292256 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.861962987 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.218343612 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 3.294348953 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.181743108 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.837158889 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.353008435 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.183866182 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.18493187 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.184285376 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.184641297 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.631262529 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.249346067 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.534926069 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.270646023 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.046876223 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.453416784 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.190795527 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.223177222 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.970956677 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.660811867 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.951029488 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 3.855420511 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.93891072 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.256552972 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.380805094 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 3.152311812 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.199270759 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.185712271 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.559739084 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.814985049 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.221082543 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.185371443 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.113232928 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.785322124 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.186625904 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.318819208 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 3.095837298 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.188544146 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.700587132 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.317822269 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.190085148 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 3.224596323 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 3.745824651 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 3.013400823 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.184138305 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.03737326 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.72525332 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.716254717 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 3.700063964 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 3.141651851 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.373800382 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 3.936966749 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.099517827 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 3.603027501 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.185846035 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.492970857 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 3.322855849 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 4.239689201 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.316135525 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.191071423 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.01110414 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.212773336 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.192340406 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.10733167 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.242972152 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.190850252 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.184625898 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.392222161 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.189886853 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.19359516 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 3.046973865 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.540947443 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 3.963430993 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.283568525 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 3.040378035 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.245463577 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 3.986017961 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.6885185 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 3.47278618 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.266765309 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.187824602 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 3.827034557 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 3.94875013 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 3.084151273 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.184000476 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.190348269 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.186501744 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 3.538016558 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.109167319 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.318577757 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.256690336 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.608251151 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 3.006257242 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.183186538 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.187106492 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 3.133245383 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.305151503 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.19650854 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.456816476 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 3.207775056 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 3.816172016 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.42753416 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 3.106146642 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.238192225 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.184563336 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.189802171 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.183596412 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.519580523 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 3.389440989 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 5.214538437 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 3.36922846 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.292127342 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.241583742 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.715315325 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.316939517 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.501368302 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.980795253 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.257482272 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.250720271 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 3.236383584 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.197220566 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 3.309854365 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 4.318980369 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 3.983692562 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.190138296 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 3.021403241 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.675023322 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 3.003190589 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 3.184356549 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.275138061 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.940070603 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.263096869 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.363324471 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.187717669 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.189636333 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 3.061499617 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.854917089 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 3.308836043 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.56273311 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.225188797 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.182935094 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.899660506 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.338227384 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.8143167 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.324052489 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.531587189 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.195230282 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.34426136 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.710650266 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.11362701 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.20667943 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.186965012 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.037047754 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.210192929 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.194649591 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.312120224 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.708675864 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.531921548 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 3.405407559 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.941912151 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.609219605 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 3.160583066 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.909217019 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.257564887 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 4.120634376 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.323581356 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 3.067640704 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.790823648 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 3.734383168 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.271657527 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 3.227248767 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 3.297113242 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 3.799840931 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.259796951 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.270586112 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.331742527 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.661967331 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.329175089 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.183563649 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.689289469 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.316677809 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.884836662 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.331896997 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 3.050944516 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 3.715715866 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.183084688 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.322424196 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.077372443 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.792641954 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.517211926 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.673795524 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 3.032087713 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.15193428 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.73122021 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 3.012640395 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.963859372 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.074817107 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.734455476 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.259095919 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.208406296 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.188635779 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.450739237 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.320087095 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.195060481 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.708852896 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.692454289 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.944128073 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 3.019405507 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.192518227 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.192929341 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.590525421 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.348858267 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 3.843016694 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.55676965 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 3.2874878 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.961941509 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.332805454 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.040531444 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.193110799 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.67182841 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 3.015369343 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.255459688 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.887278978 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.335374442 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.586600479 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.346630886 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.820242003 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.777648189 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.462332841 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 3.036837862 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.318156087 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.338513713 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.929703796 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 3.243003017 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.871581679 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 3.965135184 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.201019221 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 3.344563649 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 5.9311038 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 3.424657532 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.748651205 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.64708408 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.382165696 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.305977424 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.236506414 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.196520528 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 3.337547401 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.724171834 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.192237456 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.516737504 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.678578571 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.731897587 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 3.974225444 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 3.017811934 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.188453425 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.18563078 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.23404662 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.906992496 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.086420384 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 3.772268932 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.444081939 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.188075976 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.183170058 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.677396348 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 3.544437191 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.122139793 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.102906679 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.694442158 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.25258258 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.19832741 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.189400292 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.18913273 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.192632903 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 3.354742462 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.188503512 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.670123098 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.360178971 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 3.715470781 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 3.023337839 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.196559599 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.730768435 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.353439165 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.186468251 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 3.460170864 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.399357058 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 3.046250174 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.213886071 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.190400285 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 3.096255005 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 3.3503689 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.887271446 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.391045254 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.691986764 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 3.058392563 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 3.786636643 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.494113305 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 3.10480131 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.099878237 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 3.60683718 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.192464068 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.617541624 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 3.00519572 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.56376503 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 3.08688092 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.321279124 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 3.420656395 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.733834001 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.501540194 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.664168274 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 3.171587176 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.110402234 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.308911549 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.266695958 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.187676193 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.495815021 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 3.286014887 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.203958643 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 3.536741423 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 3.253862243 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.90343074 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.507492759 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.322293629 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 3.684180077 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.534646338 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 3.300309043 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.192782903 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.194249853 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.696539998 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.711057371 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.405932757 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.328094821 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.880132302 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.776314778 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.665747104 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.372602239 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.093014675 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.255586661 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.19175699 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 3.192919327 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.216549729 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 3.697263975 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.454380107 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.533292088 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 3.255298896 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.209885855 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 3.451155628 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 3.335796465 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.474703008 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.645653953 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.333481678 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.184878125 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.313490691 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.712738368 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.257766468 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.559546602 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.807610466 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.436944275 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.863062032 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.038898934 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.328029347 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.595338568 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.8534126 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.73765266 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.189472192 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.550828188 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.260582 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.502589199 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.175292408 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 3.031245745 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.260666818 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.624285408 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 4.148648203 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.267960109 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 3.316404357 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.28351021 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.18870067 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 3.723905192 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 3.131661408 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.107206392 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.340279129 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.187593429 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 3.2253426 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.895403973 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 3.285047916 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.456269604 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.308492796 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.208343812 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 3.655692879 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.949053388 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 3.021522997 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.188006832 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.205166812 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 3.704964066 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.504298114 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.189486455 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 3.09105598 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 3.201780854 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.335666217 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 3.327399875 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.40056489 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.254099096 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.509593031 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 3.689991978 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 3.507618068 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.426676079 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.19151049 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.25886841 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.285187966 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.649291429 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.422449644 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.259602528 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 3.327554775 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.259881057 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 3.222729414 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.654138055 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.599419651 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.309276888 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 3.085464043 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.253912223 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 3.28128181 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 4.406346052 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.997553504 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 3.101711994 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.77941929 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.525193875 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.931828526 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.345280988 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.185384821 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.120742946 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 3.632114279 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.392821703 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.560087778 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.584027778 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.318563484 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.943023138 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.328132646 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 3.662446475 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.448471123 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.184844262 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 3.301598837 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.891265911 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.764720612 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.345119156 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.634837475 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.331614315 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 3.104068635 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.544121004 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.229515889 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.195148155 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.19141485 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.211539904 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 3.038254443 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 4.11284291 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.094324906 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.249822256 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.342064307 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 3.323601549 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.58009977 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 3.735741554 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.280153415 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.058731053 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 3.884138544 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.374409095 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.671970402 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 3.526631222 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.399316834 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 3.033263599 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.236516679 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.512321311 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.396940586 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.191669583 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.607073524 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.385370078 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.183225068 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.326205565 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.875352671 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.621652216 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.322778882 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.571746998 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.356725134 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.196251197 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 3.310371528 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 3.218888934 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.19536141 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.189220298 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 3.232880025 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 4.100482413 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 3.469526196 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.188462945 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.612277311 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.36119358 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.508742041 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.777733992 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 3.082677491 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.229287916 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.18897924 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.189938734 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 3.271106754 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 3.668174335 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 3.700040785 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.123726865 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.772803864 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 3.315354062 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.718077509 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.700885351 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 3.241148922 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.088578417 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.329220167 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.191672295 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.922190744 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 3.777867155 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.814730079 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 4.905465364 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.365586349 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.317851759 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.554253326 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.726121786 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.299691575 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 3.944478621 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.4346256 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 3.267326794 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.18344354 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.192095977 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 3.284088124 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.721209075 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.233528794 seconds)
  done (took 1811.68594387 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.409320973 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.214561388 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.206495444 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.204964358 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.246398142 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.21158034 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.203671261 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.212352526 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.213398408 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.227324794 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.205579333 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.20165163 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.23515968 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.41322737 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.265383666 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.232289762 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.20755675 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.216796 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.205489791 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.212870355 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.233050813 seconds)
  done (took 49.131496785 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.204684909 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.204905688 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.255230887 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.258837341 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.238530185 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.200194711 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.252965539 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.203426216 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.257443013 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.203800481 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.260291275 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.201199344 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.203490209 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.203893443 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.203314901 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.213878332 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.259734689 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.239691951 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.201987411 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.252630136 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.215905742 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.252456813 seconds)
  done (took 51.142966666 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.19154678 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.19182527 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.938236151 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.334008289 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.186520882 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.239804 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.187846661 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 3.190573126 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.670594051 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.731346341 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.928887321 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.776758168 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.189216447 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 3.047149094 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.229798567 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.186805214 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.184420892 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.191270324 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.191719638 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.189927947 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.196375141 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.59213965 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.340312563 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.194933097 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.523994914 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.297231146 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.184633212 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.190867812 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.190399001 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.885666332 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.987352173 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.185747493 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.044411266 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.596879723 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 3.149159128 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.713984435 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 3.005066741 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.194532135 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.186316687 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.188595053 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 3.049320574 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 3.550108362 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.193800843 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.192933389 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.695496546 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.329047381 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.184983563 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 3.10884328 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.767493045 seconds)
  done (took 131.052116037 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.204252631 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.277738171 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.216993244 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.213093371 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.285813553 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.21646755 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.214901327 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.211797106 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.208005229 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.205342045 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.291065846 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.341288457 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.217981234 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.215033562 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.244866443 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.2157943 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.216821915 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.215039214 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.217469004 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.214491355 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.22368127 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.212641962 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.273597713 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.340637666 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.211523968 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.215166019 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.214695786 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.214877022 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.33631753 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.221632557 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.20820936 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.21114098 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.284786416 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.283831455 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.21304739 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.201131829 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.278774035 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.212131647 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.215392432 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.208343331 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.204554476 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.211815601 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.217035271 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.291546785 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.214080726 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.274010912 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.218572669 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.205229591 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.336900357 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.205132628 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.217152774 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.346598217 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.207886297 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.215013528 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.215988336 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.274404404 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.217504953 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.209416917 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.205136906 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.335851444 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.206560021 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.213718221 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.341317036 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.202863519 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.2171091 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.344889104 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.273810551 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.212341324 seconds)
  done (took 154.417979178 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.241413224 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.28293923 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.343650114 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.347391426 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.284764814 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.286793353 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.286099583 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.282638485 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.285297209 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.307023568 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.282431295 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.256554559 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.260273329 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.256670422 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.288829148 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.284491021 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.284213824 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.284877319 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.289182017 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.284175167 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.285637846 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.342214667 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.282850893 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.347303979 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.496343636 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.259345396 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.285082081 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.284899085 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.346018196 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.282966847 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.494957755 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.286033715 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.285543645 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.34546298 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.495985843 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.285645116 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.243575946 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.287566047 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.289312539 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.285613938 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.2613973 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.347370813 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.415506899 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.263356059 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.288236207 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.285004489 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.345019806 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.500497994 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.258767011 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.307855072 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.287889251 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.345456493 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.283054427 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.286172427 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.34401713 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.25890522 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.341814285 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.346918943 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.288041859 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.33989854 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.346241053 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.251242166 seconds)
  done (took 145.377758725 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.269873783 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.275449092 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.293295621 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.204930747 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.206317808 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.303843089 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.208660342 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.203329989 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.272730822 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.27289387 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.099044809 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.291770603 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.368568817 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.094799168 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.306530606 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.367703717 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.288641238 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.304706742 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.272615023 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.302261991 seconds)
  done (took 51.367027501 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.220977089 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.28759151 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.22035281 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.33582997 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.222281468 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.292665629 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.224698207 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 3.007550983 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 3.019068151 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 3.004539055 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.298606507 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.296939606 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 3.018583659 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.334723657 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.288483783 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.293157337 seconds)
  done (took 41.519508923 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.220510397 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.232019542 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.196243218 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.199475489 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.214458645 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.189503712 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.200033483 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.192799746 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.221737628 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.555856603 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.190251565 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.22754765 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.203230253 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.188764938 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.19099553 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.226957496 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.217582673 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.1966788 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.202014663 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.195707568 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.678356766 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.189728315 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.22729965 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.189148378 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.218388639 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.669637728 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.203369094 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.221963092 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.191148774 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.225276367 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.216714316 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.572715348 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.214838146 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.196636121 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.195045502 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.194801189 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.199264799 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.224269761 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.22806529 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.203537974 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.188102198 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.221418022 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.202045147 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.190979104 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.214823158 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.227257778 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.222112254 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.55942471 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.192980747 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.221331697 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.200486921 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.196897194 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.189386959 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.564230905 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.195938332 seconds)
  done (took 125.864751122 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.202015737 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.210896979 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.210050844 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.205193931 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.222174405 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.207969617 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.204238398 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 3.09300514 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.20613597 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.206344394 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.238592762 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 3.085551869 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.208874951 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.210332349 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.258785607 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.210732435 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.21058736 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.27108614 seconds)
  done (took 43.818076393 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.223651042 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.268509586 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.214443651 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.225357072 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.225509563 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.269620668 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.203421182 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.214831502 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.6207457 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.222545098 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.680923646 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.210843139 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.619463996 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.21293333 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.260197761 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.67657166 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.214979121 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.200616428 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.224444925 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.202299429 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.265802766 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.202276718 seconds)
  done (took 52.817111081 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#8", "Int64", "+")...
    done (took 2.161871739 seconds)
    (2/6) benchmarking ("#6", "BigInt", "+")...
    done (took 2.173553464 seconds)
    (3/6) benchmarking ("#8", "BigInt", "+")...
    done (took 2.190571798 seconds)
    (4/6) benchmarking ("#6", "UInt64", "+")...
    done (took 2.170422498 seconds)
    (5/6) benchmarking ("#6", "Int64", "+")...
    done (took 2.162704014 seconds)
    (6/6) benchmarking ("#8", "UInt64", "+")...
    done (took 2.162100202 seconds)
  done (took 15.172269248 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.216048732 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.227389424 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.211772101 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.21002317 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.231298221 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.234202116 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.23273803 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.235131842 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.222244583 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.444611014 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.24169965 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.2299752 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.225025056 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.295019575 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.226821224 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.228203119 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.235015682 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.242558829 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.22022899 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.224632885 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.239040258 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.223550438 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.234492928 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.23357441 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.236630496 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.295269648 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.220684025 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.44800496 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.233539953 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.227306604 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.226991253 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.235017907 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.226427614 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.440756065 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.207211112 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.221129229 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.233726721 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.224721907 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.223728262 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.291714428 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.204033837 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.22465025 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.223845264 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.258953818 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.222224405 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.240094886 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.257998664 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.236535397 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.237371964 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.432715269 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.227478771 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.290789036 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.224569685 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.228516297 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.225263098 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.434673245 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.446361787 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.290840329 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.226035058 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.448981968 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.293525956 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.224301273 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.288056854 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.447481287 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.224451769 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.295750007 seconds)
  done (took 151.469520515 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.292365966 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.214853956 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.234393213 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.445832815 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.291460056 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.234746495 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.235397758 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.23950078 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.241451235 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.221903493 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.226011202 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.247809619 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.289281485 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.298270534 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.246280726 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.238389591 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.235184614 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.288518428 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.222345487 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.430103051 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.236687372 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.2898237 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.292209709 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.291372498 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.437153162 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.230903519 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.239984121 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.232294352 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.235441726 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.235939589 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.268649114 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.246639207 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.297280441 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.211885204 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.292319714 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.246618085 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.236470851 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.254247064 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.233027835 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.227965509 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.295769209 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.22760428 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.233328999 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.23611318 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.446370315 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.240672685 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.240943805 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.220409569 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.24014182 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.219859748 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.44136956 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.441191686 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.447421154 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.292226842 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.243774751 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.248196481 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.235427253 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.241976294 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.244495608 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.227324174 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.29363266 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.239978063 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.437404346 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.236717591 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.236502525 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.290487292 seconds)
  done (took 152.168611489 seconds)
done (took 3652.66227233 seconds)
(11/22) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.476897236 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.643551402 seconds)
  done (took 17.277513716 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 2.732174498 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 3.039690307 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 3.970892382 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 7.404018627 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 7.25789247 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 7.703834292 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 7.605752356 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 2.44910494 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 7.211334534 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 2.775420321 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 2.94526326 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 2.990817475 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 3.014489857 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 7.206189724 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 7.470335511 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 7.273596271 seconds)
  done (took 85.357526404 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 3.943832695 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 3.098670983 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 2.808307704 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.811016233 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 4.192430894 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.648688767 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.697690035 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 3.394203541 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.654387691 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 2.42326002 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.31608022 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 3.22089395 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 3.986734667 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 4.03543743 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 2.915707539 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 2.510681499 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.585939301 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.661797869 seconds)
  done (took 57.060886891 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 7.230010308 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 3.069410668 seconds)
  done (took 12.481211553 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.222977188 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.223998557 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.223372577 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.240116753 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.210351162 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.231430514 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.22185228 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.198842525 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.207911798 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.239403856 seconds)
  done (took 74.385977875 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 3.837963455 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 3.555647418 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 6.631791087 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.936191274 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.248543178 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.789591392 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.388017227 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 2.536538338 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.296192013 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.031101169 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 7.15146551 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.509313833 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.923491091 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.99651749 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 2.746695989 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.840406033 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 3.167130646 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.602180614 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.453575515 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.290045333 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 3.290049269 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 3.398571653 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.60418366 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 6.890197527 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.159511732 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.120410489 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 3.226344464 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.286264472 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.252920583 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.906782956 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 7.268150858 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.157963135 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 3.406597849 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.48304684 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 3.014720156 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.696012213 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.703409025 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 2.273659924 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 3.320285848 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.520297035 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 6.298714128 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.145662955 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.31193122 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.061363152 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.534657448 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.171332342 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 6.857878447 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 5.955356577 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 5.818292384 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 5.874338049 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 7.160492383 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.346670534 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 5.852927706 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 5.831796972 seconds)
  done (took 222.369388101 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.155573911 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 4.506380101 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.526189528 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.168391617 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.70247019 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.66108175 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.166277978 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.6035112 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.173525648 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.710594632 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.782574828 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.353569905 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.163683797 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.169517461 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.179690901 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.163830692 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.760631013 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.678207157 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.182437589 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.154895632 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.588022879 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.634371452 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.63376875 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.169816495 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.473361135 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.619439815 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.522193404 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.401099162 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.165883082 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.156549054 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.614623072 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.172437051 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.180686804 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.156304895 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.521540172 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.612373653 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.612839488 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.163291872 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.160347775 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.159857081 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 6.392774954 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.647852 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.570567835 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.653113505 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.55192123 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.616358972 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 6.078973052 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.155717649 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 6.006510697 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.59555277 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.922285306 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.836042799 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.437675391 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.167467547 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 7.159047925 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.155009183 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.15572071 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.616281151 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.438700878 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.392623124 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.166534898 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.181731282 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.157326959 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.177620946 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.173957907 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.381592126 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.173079369 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.159015836 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.332552467 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.339118965 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.360345633 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.614344769 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.57423643 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 7.176766069 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 7.163692053 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.60916423 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.669277352 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.673154931 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.169674423 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.156963781 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.581224777 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.171046887 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.550175093 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.85752137 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.729152975 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.650317678 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 6.009125178 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.156638529 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.4439788 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.550021242 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.992848331 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.760731509 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.522000616 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 7.173219036 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.153424859 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.159164836 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 7.175507737 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.518710766 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.166578177 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 5.886753274 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.618899703 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 5.124252475 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.459340191 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.110860666 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.394650293 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.165677522 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 6.177268629 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.165773496 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.63323153 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.698905116 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.177193334 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.168326894 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.412788777 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 4.296615172 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.158823305 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 7.159440639 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.649235059 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.180600183 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.603816218 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.174047249 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.690390588 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.169362318 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.715016326 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.166202512 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.701870548 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.97977548 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.663668469 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 7.168588738 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.092158102 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.711330493 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.556019694 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.054898347 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.172523146 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.164864606 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.633324814 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.164385758 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.174792854 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.892142329 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.17986376 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.41656325 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.163958662 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 3.080166841 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.400242003 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.626757707 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.177438725 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 3.040563922 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.729793811 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.55368582 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.173020637 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.502813944 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.168461124 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.878915834 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.592549454 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.166559178 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.165375206 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 7.158344234 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.167281002 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.524161253 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.560852027 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.838840325 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.677552897 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 5.765000504 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.155615682 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.604308258 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.447989541 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 5.033479904 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.151582374 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.665617631 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.167715293 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.155833776 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.155199196 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.996643063 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.970433906 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.176709914 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.171211816 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.797093043 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.154728196 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.162426099 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.897806282 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 7.170548795 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.1583806 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.640671257 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.175491802 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.619112523 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.179052921 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 7.15878376 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 5.884759827 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.160341858 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.161639847 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.168902126 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.168288717 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.177657621 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.051386521 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.587947208 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 4.652502564 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.870278694 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.655791803 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 3.028352868 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.873847404 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.760316577 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.189032157 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.064873692 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.179157074 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.617009498 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.171650686 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 3.13332011 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.885199672 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.17442859 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 3.051517549 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 3.093398771 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.813635205 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.585183608 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.169800863 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.166491471 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.161545587 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.765113438 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.618235979 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.167876509 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.160876365 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.493544667 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.524532111 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.550947357 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.168818543 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 7.162645036 seconds)
  done (took 1068.367340186 seconds)
done (took 1539.44914403 seconds)
(12/22) benchmarking "alloc"...
  (1/4) benchmarking "strings"...
  done (took 7.441061663 seconds)
  (2/4) benchmarking "arrays"...
  done (took 7.155925641 seconds)
  (3/4) benchmarking "structs"...
  done (took 7.199498703 seconds)
  (4/4) benchmarking "grow_array"...
  done (took 7.180732495 seconds)
done (took 31.133068694 seconds)
(13/22) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 7.157491131 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.158275822 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 7.162657015 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.160806773 seconds)
  done (took 30.80007709 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.496868276 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.473945101 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 2.331519925 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 2.39082947 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.645233798 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 2.359353603 seconds)
  done (took 16.860939204 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.051635502 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 7.162126289 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 7.16068698 seconds)
  done (took 22.533530603 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 2.551333827 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 2.558447908 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 2.276647321 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 2.241604141 seconds)
  done (took 11.787599334 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 2.206732431 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.201302647 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 2.200811915 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.211726747 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 2.204712854 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 2.199780218 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 7.161395621 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 2.66284852 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 2.205562179 seconds)
  done (took 27.42137814 seconds)
  (6/6) benchmarking "26942"...
  done (took 3.296652333 seconds)
done (took 114.992209921 seconds)
(14/22) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/434) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 2.371571938 seconds)
    (2/434) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 2.351005954 seconds)
    (3/434) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 7.164629924 seconds)
    (4/434) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 2.254350715 seconds)
    (5/434) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 2.28133498 seconds)
    (6/434) benchmarking ("skipmissing", "eachindex", "Bool", 0)...
    done (took 2.409172699 seconds)
    (7/434) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 2.35502176 seconds)
    (8/434) benchmarking ("map", "identity", "Float32", 0)...
    done (took 2.237518149 seconds)
    (9/434) benchmarking ("skipmissing", "perf_sumskipmissing", "ComplexF64", 0)...
    done (took 2.251496056 seconds)
    (10/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigFloat}", 1)...
    done (took 7.160769957 seconds)
    (11/434) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 2.179376984 seconds)
    (12/434) benchmarking ("collect", "all", "Float64", 1)...
    done (took 2.40745499 seconds)
    (13/434) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 2.390897458 seconds)
    (14/434) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 2.414153696 seconds)
    (15/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.512676865 seconds)
    (16/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int8}", 1)...
    done (took 2.499220361 seconds)
    (17/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.533567342 seconds)
    (18/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float64}", 0)...
    done (took 2.412508589 seconds)
    (19/434) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 2.393904629 seconds)
    (20/434) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 2.350093303 seconds)
    (21/434) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 2.183469945 seconds)
    (22/434) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 2.176949133 seconds)
    (23/434) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 2.22388858 seconds)
    (24/434) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.673960689 seconds)
    (25/434) benchmarking ("map", "abs", "Bool", 1)...
    done (took 2.370653822 seconds)
    (26/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int8}", 0)...
    done (took 2.408410698 seconds)
    (27/434) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 2.382516057 seconds)
    (28/434) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 2.249467985 seconds)
    (29/434) benchmarking ("sort", "Float32", 0)...
    done (took 2.872640768 seconds)
    (30/434) benchmarking ("perf_sum", "Int64", 1)...
    done (took 2.187495715 seconds)
    (31/434) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.404976894 seconds)
    (32/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 2.229393683 seconds)
    (33/434) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 2.307118505 seconds)
    (34/434) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.163696014 seconds)
    (35/434) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 7.252094716 seconds)
    (36/434) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 2.187747469 seconds)
    (37/434) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 2.242049438 seconds)
    (38/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 2.404134068 seconds)
    (39/434) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.600734223 seconds)
    (40/434) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 2.34819007 seconds)
    (41/434) benchmarking ("skipmissing", "keys", "Float64", 0)...
    done (took 2.407966516 seconds)
    (42/434) benchmarking ("map", "abs", "Bool", 0)...
    done (took 2.233914989 seconds)
    (43/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float64}", 1)...
    done (took 2.492231428 seconds)
    (44/434) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 2.433773314 seconds)
    (45/434) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 2.373598438 seconds)
    (46/434) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 7.17570045 seconds)
    (47/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigFloat}", 0)...
    done (took 2.409108147 seconds)
    (48/434) benchmarking ("skipmissing", "filter", "BigFloat", 0)...
    done (took 7.166672449 seconds)
    (49/434) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 2.248509425 seconds)
    (50/434) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 2.51797319 seconds)
    (51/434) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 2.363985172 seconds)
    (52/434) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 2.242524937 seconds)
    (53/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int8}", 0)...
    done (took 2.208153585 seconds)
    (54/434) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 7.160511375 seconds)
    (55/434) benchmarking ("perf_sum", "Float32", 1)...
    done (took 2.689156047 seconds)
    (56/434) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 2.372814052 seconds)
    (57/434) benchmarking ("perf_sum", "Int8", 1)...
    done (took 2.173845182 seconds)
    (58/434) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.410762042 seconds)
    (59/434) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 2.246118624 seconds)
    (60/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.623619311 seconds)
    (61/434) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 2.246693061 seconds)
    (62/434) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.335478756 seconds)
    (63/434) benchmarking ("perf_sum", "Int8", 0)...
    done (took 2.170169743 seconds)
    (64/434) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 2.457178328 seconds)
    (65/434) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 2.225885674 seconds)
    (66/434) benchmarking ("map", "identity", "Bool", 0)...
    done (took 2.225487291 seconds)
    (67/434) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.826355809 seconds)
    (68/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, BigInt}", 1)...
    done (took 7.162872246 seconds)
    (69/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigFloat}", 1)...
    done (took 9.627484498 seconds)
    (70/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.553244603 seconds)
    (71/434) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 3.197025349 seconds)
    (72/434) benchmarking ("perf_sum", "Float64", 0)...
    done (took 2.247937728 seconds)
    (73/434) benchmarking ("perf_countequals", "Int8")...
    done (took 2.332234985 seconds)
    (74/434) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 2.174832498 seconds)
    (75/434) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 7.154372246 seconds)
    (76/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.488443462 seconds)
    (77/434) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 2.183987798 seconds)
    (78/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigInt}", 1)...
    done (took 3.091339653 seconds)
    (79/434) benchmarking ("skipmissing", "keys", "Int8", 0)...
    done (took 2.407380574 seconds)
    (80/434) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.167740619 seconds)
    (81/434) benchmarking ("map", "identity", "Bool", 1)...
    done (took 9.701485663 seconds)
    (82/434) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 2.387745512 seconds)
    (83/434) benchmarking ("collect", "all", "Bool", 0)...
    done (took 2.223465407 seconds)
    (84/434) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 2.477081268 seconds)
    (85/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int64}", 1)...
    done (took 2.302449819 seconds)
    (86/434) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 2.187498138 seconds)
    (87/434) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 2.177702668 seconds)
    (88/434) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 2.187802477 seconds)
    (89/434) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 2.306242072 seconds)
    (90/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 2.219917401 seconds)
    (91/434) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 7.157341959 seconds)
    (92/434) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 5.819924523 seconds)
    (93/434) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 2.343642542 seconds)
    (94/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float64", 0)...
    done (took 2.248721703 seconds)
    (95/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.640492147 seconds)
    (96/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 7.167384272 seconds)
    (97/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float32}", 0)...
    done (took 2.724270988 seconds)
    (98/434) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.164224188 seconds)
    (99/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Float32", 0)...
    done (took 9.659441546 seconds)
    (100/434) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 2.26827261 seconds)
    (101/434) benchmarking ("skipmissing", "keys", "BigFloat", 0)...
    done (took 2.423305235 seconds)
    (102/434) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 7.176601891 seconds)
    (103/434) benchmarking ("collect", "all", "Float64", 0)...
    done (took 2.718467782 seconds)
    (104/434) benchmarking ("map", "identity", "Float64", 1)...
    done (took 2.409780906 seconds)
    (105/434) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 2.254091361 seconds)
    (106/434) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.633494154 seconds)
    (107/434) benchmarking ("skipmissing", "filter", "Int64", 0)...
    done (took 2.732929645 seconds)
    (108/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigFloat}", 0)...
    done (took 2.418644057 seconds)
    (109/434) benchmarking ("skipmissing", "keys", "Union{Missing, ComplexF64}", 1)...
    done (took 2.511882453 seconds)
    (110/434) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 2.429369674 seconds)
    (111/434) benchmarking ("skipmissing", "filter", "Int8", 0)...
    done (took 2.749637836 seconds)
    (112/434) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 2.607085456 seconds)
    (113/434) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 2.744043474 seconds)
    (114/434) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 7.166538041 seconds)
    (115/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 11.583176799 seconds)
    (116/434) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 13.437917153 seconds)
    (117/434) benchmarking ("sort", "BigInt", 0)...
    done (took 10.953914361 seconds)
    (118/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 7.160016233 seconds)
    (119/434) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.624881709 seconds)
    (120/434) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 10.733706184 seconds)
    (121/434) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 7.130922344 seconds)
    (122/434) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 2.409949086 seconds)
    (123/434) benchmarking ("map", "identity", "Float64", 0)...
    done (took 2.269287115 seconds)
    (124/434) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 2.549962606 seconds)
    (125/434) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 2.187648102 seconds)
    (126/434) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 2.178375649 seconds)
    (127/434) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.541280684 seconds)
    (128/434) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 2.351738144 seconds)
    (129/434) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 2.35934991 seconds)
    (130/434) benchmarking ("perf_sum", "Int64", 0)...
    done (took 2.18604263 seconds)
    (131/434) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 2.231283431 seconds)
    (132/434) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 7.19867994 seconds)
    (133/434) benchmarking ("skipmissing", "keys", "Union{Nothing, BigInt}", 0)...
    done (took 2.410006716 seconds)
    (134/434) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 2.253612528 seconds)
    (135/434) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 7.159512212 seconds)
    (136/434) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 11.934263423 seconds)
    (137/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 2.386349788 seconds)
    (138/434) benchmarking ("sort", "BigFloat", 0)...
    done (took 7.162510399 seconds)
    (139/434) benchmarking ("skipmissing", "eachindex", "Float64", 0)...
    done (took 2.405096825 seconds)
    (140/434) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 2.30487586 seconds)
    (141/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigFloat", 0)...
    done (took 7.161375793 seconds)
    (142/434) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 2.399402191 seconds)
    (143/434) benchmarking ("skipmissing", "keys", "Bool", 0)...
    done (took 2.405754272 seconds)
    (144/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float64}", 0)...
    done (took 2.410116499 seconds)
    (145/434) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 7.170786551 seconds)
    (146/434) benchmarking ("skipmissing", "eachindex", "Int64", 0)...
    done (took 2.404863877 seconds)
    (147/434) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 2.350076131 seconds)
    (148/434) benchmarking ("perf_countequals", "Float32")...
    done (took 2.22863487 seconds)
    (149/434) benchmarking ("skipmissing", "keys", "ComplexF64", 0)...
    done (took 2.406731023 seconds)
    (150/434) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.896558274 seconds)
    (151/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float32}", 0)...
    done (took 2.81712017 seconds)
    (152/434) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 7.164106664 seconds)
    (153/434) benchmarking ("perf_sum", "Float64", 1)...
    done (took 2.240348954 seconds)
    (154/434) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 2.167288195 seconds)
    (155/434) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 2.224145589 seconds)
    (156/434) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 3.165928569 seconds)
    (157/434) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 2.361268899 seconds)
    (158/434) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 2.367281752 seconds)
    (159/434) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 7.161876265 seconds)
    (160/434) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 7.209309062 seconds)
    (161/434) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 7.074226604 seconds)
    (162/434) benchmarking ("map", "abs", "Int8", 1)...
    done (took 2.39629435 seconds)
    (163/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float64}", 1)...
    done (took 2.730208416 seconds)
    (164/434) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 7.165210987 seconds)
    (165/434) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 2.429782165 seconds)
    (166/434) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 2.184800108 seconds)
    (167/434) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 2.313392156 seconds)
    (168/434) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 2.443819949 seconds)
    (169/434) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 7.200593233 seconds)
    (170/434) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 2.245768021 seconds)
    (171/434) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 2.272431078 seconds)
    (172/434) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 2.295003029 seconds)
    (173/434) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 2.248599929 seconds)
    (174/434) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 2.362062008 seconds)
    (175/434) benchmarking ("perf_countequals", "Int64")...
    done (took 2.274571503 seconds)
    (176/434) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 2.242990147 seconds)
    (177/434) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 7.155640536 seconds)
    (178/434) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 2.337142687 seconds)
    (179/434) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 5.07612081 seconds)
    (180/434) benchmarking ("map", "abs", "Float32", 1)...
    done (took 2.378624587 seconds)
    (181/434) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 2.345769212 seconds)
    (182/434) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 2.24179182 seconds)
    (183/434) benchmarking ("perf_countequals", "Bool")...
    done (took 2.334442058 seconds)
    (184/434) benchmarking ("map", "identity", "Int8", 0)...
    done (took 2.235785027 seconds)
    (185/434) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 2.179672109 seconds)
    (186/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.467527263 seconds)
    (187/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 2.384044124 seconds)
    (188/434) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 2.449238308 seconds)
    (189/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float64}", 1)...
    done (took 2.297294503 seconds)
    (190/434) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 2.555096479 seconds)
    (191/434) benchmarking ("map", "identity", "Float32", 1)...
    done (took 2.363097397 seconds)
    (192/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Float32}", 0)...
    done (took 2.40686068 seconds)
    (193/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int8}", 1)...
    done (took 2.500887321 seconds)
    (194/434) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 2.288501582 seconds)
    (195/434) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 2.434394378 seconds)
    (196/434) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 2.358970705 seconds)
    (197/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.404734344 seconds)
    (198/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Bool}", 0)...
    done (took 2.412815814 seconds)
    (199/434) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 2.366171665 seconds)
    (200/434) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 2.214316867 seconds)
    (201/434) benchmarking ("skipmissing", "filter", "Union{Missing, Bool}", 1)...
    done (took 2.692444939 seconds)
    (202/434) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 2.525487722 seconds)
    (203/434) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 2.263527927 seconds)
    (204/434) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 2.169071006 seconds)
    (205/434) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 2.221157674 seconds)
    (206/434) benchmarking ("skipmissing", "keys", "BigInt", 0)...
    done (took 2.408392782 seconds)
    (207/434) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 7.167837913 seconds)
    (208/434) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 7.348811541 seconds)
    (209/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 2.241720522 seconds)
    (210/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.443329769 seconds)
    (211/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int64}", 1)...
    done (took 2.761481423 seconds)
    (212/434) benchmarking ("skipmissing", "filter", "Float64", 0)...
    done (took 2.686469355 seconds)
    (213/434) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 2.539567586 seconds)
    (214/434) benchmarking ("skipmissing", "eachindex", "BigInt", 0)...
    done (took 2.41586706 seconds)
    (215/434) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 2.366983907 seconds)
    (216/434) benchmarking ("sort", "Int64", 0)...
    done (took 4.708618081 seconds)
    (217/434) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 2.341311848 seconds)
    (218/434) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.252585524 seconds)
    (219/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 2.477878574 seconds)
    (220/434) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 2.425412762 seconds)
    (221/434) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 7.161717505 seconds)
    (222/434) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 2.796269139 seconds)
    (223/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float64}", 1)...
    done (took 2.492433228 seconds)
    (224/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, BigInt}", 0)...
    done (took 2.416778805 seconds)
    (225/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Int8}", 1)...
    done (took 2.303868289 seconds)
    (226/434) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 2.437895704 seconds)
    (227/434) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.536009523 seconds)
    (228/434) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 2.18423657 seconds)
    (229/434) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 7.300864921 seconds)
    (230/434) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 7.537362649 seconds)
    (231/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Bool}", 1)...
    done (took 2.489909079 seconds)
    (232/434) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 2.317521119 seconds)
    (233/434) benchmarking ("skipmissing", "eachindex", "BigFloat", 0)...
    done (took 2.416084426 seconds)
    (234/434) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 2.191352181 seconds)
    (235/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 2.33402139 seconds)
    (236/434) benchmarking ("skipmissing", "keys", "Union{Missing, BigInt}", 1)...
    done (took 2.500781389 seconds)
    (237/434) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.60259463 seconds)
    (238/434) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.555164756 seconds)
    (239/434) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 2.389650601 seconds)
    (240/434) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.608244356 seconds)
    (241/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 2.199834306 seconds)
    (242/434) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 2.353223361 seconds)
    (243/434) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 2.354267406 seconds)
    (244/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Bool}", 0)...
    done (took 2.837385485 seconds)
    (245/434) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 2.382592547 seconds)
    (246/434) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 2.363112931 seconds)
    (247/434) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 2.519110882 seconds)
    (248/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 2.227757763 seconds)
    (249/434) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.601345897 seconds)
    (250/434) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.563756629 seconds)
    (251/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int8}", 0)...
    done (took 2.835706605 seconds)
    (252/434) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 2.384824981 seconds)
    (253/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 7.165465339 seconds)
    (254/434) benchmarking ("map", "abs", "Float64", 0)...
    done (took 6.1078901 seconds)
    (255/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, ComplexF64}", 1)...
    done (took 2.497057132 seconds)
    (256/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Bool}", 0)...
    done (took 2.41715008 seconds)
    (257/434) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 2.450522047 seconds)
    (258/434) benchmarking ("collect", "all", "Int64", 1)...
    done (took 2.417462662 seconds)
    (259/434) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.608654772 seconds)
    (260/434) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 2.31221833 seconds)
    (261/434) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 2.246085706 seconds)
    (262/434) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 2.305623167 seconds)
    (263/434) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 5.141021689 seconds)
    (264/434) benchmarking ("skipmissing", "keys", "Union{Missing, Float32}", 1)...
    done (took 2.518599152 seconds)
    (265/434) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.169862345 seconds)
    (266/434) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 13.960032853 seconds)
    (267/434) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 3.018835122 seconds)
    (268/434) benchmarking ("skipmissing", "keys", "Union{Missing, Bool}", 1)...
    done (took 2.509452354 seconds)
    (269/434) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 2.189691549 seconds)
    (270/434) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.162328442 seconds)
    (271/434) benchmarking ("skipmissing", "filter", "Union{Missing, Int8}", 1)...
    done (took 10.051598618 seconds)
    (272/434) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.514663501 seconds)
    (273/434) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 6.533317527 seconds)
    (274/434) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.520814239 seconds)
    (275/434) benchmarking ("map", "abs", "Float32", 0)...
    done (took 2.240447818 seconds)
    (276/434) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.548455841 seconds)
    (277/434) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 2.250091029 seconds)
    (278/434) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 3.023421553 seconds)
    (279/434) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 3.163061439 seconds)
    (280/434) benchmarking ("skipmissing", "eachindex", "ComplexF64", 0)...
    done (took 2.403702467 seconds)
    (281/434) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 2.189997402 seconds)
    (282/434) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 2.327326928 seconds)
    (283/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Float32}", 1)...
    done (took 2.293547943 seconds)
    (284/434) benchmarking ("skipmissing", "keys", "Union{Missing, Int64}", 1)...
    done (took 2.493714555 seconds)
    (285/434) benchmarking ("perf_sum", "Float32", 0)...
    done (took 2.253551075 seconds)
    (286/434) benchmarking ("skipmissing", "eachindex", "Float32", 0)...
    done (took 2.404651433 seconds)
    (287/434) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 3.017289697 seconds)
    (288/434) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 2.299431332 seconds)
    (289/434) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 2.196015543 seconds)
    (290/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigInt}", 1)...
    done (took 2.492612956 seconds)
    (291/434) benchmarking ("map", "abs", "Int64", 0)...
    done (took 2.282715914 seconds)
    (292/434) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 2.286462583 seconds)
    (293/434) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 2.208760608 seconds)
    (294/434) benchmarking ("collect", "all", "Float32", 1)...
    done (took 2.356608545 seconds)
    (295/434) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.888317882 seconds)
    (296/434) benchmarking ("perf_countequals", "Float64")...
    done (took 2.249688137 seconds)
    (297/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.159786497 seconds)
    (298/434) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 9.66238308 seconds)
    (299/434) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.531422434 seconds)
    (300/434) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 6.567459168 seconds)
    (301/434) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 2.181172907 seconds)
    (302/434) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 2.177000684 seconds)
    (303/434) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 2.390374924 seconds)
    (304/434) benchmarking ("skipmissing", "eachindex", "Union{Nothing, Int64}", 0)...
    done (took 2.407421122 seconds)
    (305/434) benchmarking ("collect", "all", "Bool", 1)...
    done (took 2.359370902 seconds)
    (306/434) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 2.344898281 seconds)
    (307/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.580577733 seconds)
    (308/434) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 2.253065365 seconds)
    (309/434) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 7.157764325 seconds)
    (310/434) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 2.643805034 seconds)
    (311/434) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 2.526780302 seconds)
    (312/434) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 2.465995402 seconds)
    (313/434) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 3.166001188 seconds)
    (314/434) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.633253143 seconds)
    (315/434) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 2.18155533 seconds)
    (316/434) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 7.158958799 seconds)
    (317/434) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 2.847119616 seconds)
    (318/434) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 2.387733372 seconds)
    (319/434) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 2.265240899 seconds)
    (320/434) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 2.225251141 seconds)
    (321/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int8", 0)...
    done (took 2.166356669 seconds)
    (322/434) benchmarking ("skipmissing", "keys", "Float32", 0)...
    done (took 2.40446286 seconds)
    (323/434) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 2.188958039 seconds)
    (324/434) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 2.424699106 seconds)
    (325/434) benchmarking ("collect", "all", "Int8", 1)...
    done (took 2.355617077 seconds)
    (326/434) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 3.336971602 seconds)
    (327/434) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 7.163178124 seconds)
    (328/434) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 3.619748777 seconds)
    (329/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigInt}", 0)...
    done (took 3.089367502 seconds)
    (330/434) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 2.307740997 seconds)
    (331/434) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 2.338515985 seconds)
    (332/434) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 2.538767501 seconds)
    (333/434) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 7.168055637 seconds)
    (334/434) benchmarking ("map", "abs", "Float64", 1)...
    done (took 6.567171771 seconds)
    (335/434) benchmarking ("skipmissing", "filter", "Union{Nothing, BigFloat}", 0)...
    done (took 7.164537137 seconds)
    (336/434) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.610336602 seconds)
    (337/434) benchmarking ("skipmissing", "perf_sumskipmissing", "BigInt", 0)...
    done (took 7.171687273 seconds)
    (338/434) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 9.848006046 seconds)
    (339/434) benchmarking ("skipmissing", "keys", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.410280465 seconds)
    (340/434) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 2.410178797 seconds)
    (341/434) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 2.218190624 seconds)
    (342/434) benchmarking ("collect", "all", "Int64", 0)...
    done (took 2.266498372 seconds)
    (343/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, ComplexF64}", 0)...
    done (took 2.251418109 seconds)
    (344/434) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.163265058 seconds)
    (345/434) benchmarking ("skipmissing", "filter", "Float32", 0)...
    done (took 10.091062066 seconds)
    (346/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Float32}", 0)...
    done (took 2.410727286 seconds)
    (347/434) benchmarking ("skipmissing", "filter", "Bool", 0)...
    done (took 2.573099354 seconds)
    (348/434) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 2.344641495 seconds)
    (349/434) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 2.181920114 seconds)
    (350/434) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.447788457 seconds)
    (351/434) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 2.290844188 seconds)
    (352/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int8}", 0)...
    done (took 2.410033529 seconds)
    (353/434) benchmarking ("skipmissing", "filter", "Union{Missing, BigFloat}", 1)...
    done (took 7.166597673 seconds)
    (354/434) benchmarking ("map", "identity", "Int64", 1)...
    done (took 2.527594769 seconds)
    (355/434) benchmarking ("skipmissing", "keys", "Int64", 0)...
    done (took 2.416329084 seconds)
    (356/434) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 2.27456331 seconds)
    (357/434) benchmarking ("collect", "all", "Float32", 0)...
    done (took 2.231518151 seconds)
    (358/434) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 7.161622503 seconds)
    (359/434) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 2.194010552 seconds)
    (360/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.628773653 seconds)
    (361/434) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.449061949 seconds)
    (362/434) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 2.409994856 seconds)
    (363/434) benchmarking ("perf_sum", "Bool", 0)...
    done (took 2.184880443 seconds)
    (364/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 2.366803288 seconds)
    (365/434) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.048064883 seconds)
    (366/434) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 6.114242129 seconds)
    (367/434) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 2.179379416 seconds)
    (368/434) benchmarking ("collect", "all", "Int8", 0)...
    done (took 2.224981288 seconds)
    (369/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Float64}", 0)...
    done (took 2.24556202 seconds)
    (370/434) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 2.368195886 seconds)
    (371/434) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 2.259214242 seconds)
    (372/434) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 2.395395321 seconds)
    (373/434) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 7.161663775 seconds)
    (374/434) benchmarking ("perf_sum", "Bool", 1)...
    done (took 2.931321245 seconds)
    (375/434) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 2.395979928 seconds)
    (376/434) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 2.185992283 seconds)
    (377/434) benchmarking ("skipmissing", "keys", "Union{Nothing, Int64}", 0)...
    done (took 2.403690772 seconds)
    (378/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Int64", 0)...
    done (took 2.185294424 seconds)
    (379/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Float64}", 0)...
    done (took 2.819731641 seconds)
    (380/434) benchmarking ("map", "identity", "Int64", 0)...
    done (took 2.27494151 seconds)
    (381/434) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.164824386 seconds)
    (382/434) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 13.914117295 seconds)
    (383/434) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 12.27089107 seconds)
    (384/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, BigFloat}", 1)...
    done (took 3.288519596 seconds)
    (385/434) benchmarking ("map", "identity", "Int8", 1)...
    done (took 2.357066036 seconds)
    (386/434) benchmarking ("skipmissing", "filter", "Union{Missing, Float32}", 1)...
    done (took 2.760924636 seconds)
    (387/434) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.578025595 seconds)
    (388/434) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.426226998 seconds)
    (389/434) benchmarking ("sort", "Bool", 0)...
    done (took 2.196520246 seconds)
    (390/434) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 7.168981433 seconds)
    (391/434) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 10.566044575 seconds)
    (392/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 2.244983612 seconds)
    (393/434) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 2.236877448 seconds)
    (394/434) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 2.447118277 seconds)
    (395/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigInt}", 0)...
    done (took 7.167874337 seconds)
    (396/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Float32}", 1)...
    done (took 9.799026847 seconds)
    (397/434) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 2.399615 seconds)
    (398/434) benchmarking ("skipmissing", "filter", "BigInt", 0)...
    done (took 3.024920589 seconds)
    (399/434) benchmarking ("skipmissing", "eachindex", "Union{Missing, Int64}", 1)...
    done (took 2.503652449 seconds)
    (400/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, Bool}", 1)...
    done (took 2.335748641 seconds)
    (401/434) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 5.240311029 seconds)
    (402/434) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.382510455 seconds)
    (403/434) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 7.157934621 seconds)
    (404/434) benchmarking ("map", "abs", "Int64", 1)...
    done (took 2.845997303 seconds)
    (405/434) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 2.184504067 seconds)
    (406/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, BigFloat}", 0)...
    done (took 7.147565563 seconds)
    (407/434) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 2.935750981 seconds)
    (408/434) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 2.248117104 seconds)
    (409/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Missing, ComplexF64}", 1)...
    done (took 2.31458014 seconds)
    (410/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Bool", 0)...
    done (took 2.176431399 seconds)
    (411/434) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 2.225237216 seconds)
    (412/434) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 7.164336113 seconds)
    (413/434) benchmarking ("skipmissing", "filter", "Union{Nothing, Int64}", 0)...
    done (took 11.486986778 seconds)
    (414/434) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 2.186378416 seconds)
    (415/434) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 2.264879811 seconds)
    (416/434) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 2.423756786 seconds)
    (417/434) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.510316928 seconds)
    (418/434) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 2.429858716 seconds)
    (419/434) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.128965492 seconds)
    (420/434) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 6.046035377 seconds)
    (421/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Int64}", 0)...
    done (took 2.209328625 seconds)
    (422/434) benchmarking ("map", "abs", "Int8", 0)...
    done (took 2.251419318 seconds)
    (423/434) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 2.335301791 seconds)
    (424/434) benchmarking ("sort", "Float64", 0)...
    done (took 4.300526152 seconds)
    (425/434) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 2.175371678 seconds)
    (426/434) benchmarking ("skipmissing", "eachindex", "Int8", 0)...
    done (took 2.404002178 seconds)
    (427/434) benchmarking ("sort", "Int8", 0)...
    done (took 2.242481095 seconds)
    (428/434) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.642126243 seconds)
    (429/434) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 2.250262923 seconds)
    (430/434) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 2.182149606 seconds)
    (431/434) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 2.352883012 seconds)
    (432/434) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 4.754804695 seconds)
    (433/434) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 2.435659227 seconds)
    (434/434) benchmarking ("skipmissing", "perf_sumskipmissing", "Union{Nothing, Bool}", 0)...
    done (took 2.241205216 seconds)
  done (took 1531.315804563 seconds)
done (took 1533.874222872 seconds)
(15/22) benchmarking "simd"...
  (1/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 32)...
  done (took 2.187420711 seconds)
  (2/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4096)...
  done (took 2.172858561 seconds)
  (3/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 31)...
  done (took 2.194945475 seconds)
  (4/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4095)...
  done (took 2.181383948 seconds)
  (5/680) benchmarking ("Linear", "inner", "Int32", 4096)...
  done (took 2.17911507 seconds)
  (6/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4095)...
  done (took 2.186603329 seconds)
  (7/680) benchmarking ("Cartesian", "inner", "Float32", 2, 63)...
  done (took 2.238947128 seconds)
  (8/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.214138823 seconds)
  (9/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 63)...
  done (took 2.194103201 seconds)
  (10/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 63)...
  done (took 2.18358022 seconds)
  (11/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 31)...
  done (took 2.273110473 seconds)
  (12/680) benchmarking ("Cartesian", "inner", "Int64", 2, 64)...
  done (took 2.184860239 seconds)
  (13/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4096)...
  done (took 2.184192056 seconds)
  (14/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.300676998 seconds)
  (15/680) benchmarking ("Linear", "axpy!", "Float32", 4095)...
  done (took 2.177184143 seconds)
  (16/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 31)...
  done (took 2.184445232 seconds)
  (17/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.176909587 seconds)
  (18/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 32)...
  done (took 2.18517956 seconds)
  (19/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.205827392 seconds)
  (20/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 32)...
  done (took 2.189957901 seconds)
  (21/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4096)...
  done (took 2.189929094 seconds)
  (22/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 64)...
  done (took 2.176954193 seconds)
  (23/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.204501753 seconds)
  (24/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 32)...
  done (took 2.188577336 seconds)
  (25/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.17841616 seconds)
  (26/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 64)...
  done (took 2.181459306 seconds)
  (27/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 31)...
  done (took 2.19850194 seconds)
  (28/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 32)...
  done (took 2.18636926 seconds)
  (29/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.251636956 seconds)
  (30/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 63)...
  done (took 2.203368422 seconds)
  (31/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4096)...
  done (took 2.183793915 seconds)
  (32/680) benchmarking ("Linear", "auto_inner", "Int32", 4096)...
  done (took 2.17199684 seconds)
  (33/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4096)...
  done (took 2.190308141 seconds)
  (34/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 31)...
  done (took 2.189201225 seconds)
  (35/680) benchmarking ("Cartesian", "inner", "Float64", 2, 31)...
  done (took 2.207027709 seconds)
  (36/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.237030947 seconds)
  (37/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 32)...
  done (took 2.209923454 seconds)
  (38/680) benchmarking ("Linear", "sum_reduce", "Float32", 4096)...
  done (took 2.171032837 seconds)
  (39/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 63)...
  done (took 2.194906954 seconds)
  (40/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 31)...
  done (took 2.189879204 seconds)
  (41/680) benchmarking ("Cartesian", "inner", "Float32", 3, 31)...
  done (took 2.274037345 seconds)
  (42/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 32)...
  done (took 2.183869183 seconds)
  (43/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4096)...
  done (took 2.171342995 seconds)
  (44/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.179968047 seconds)
  (45/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 63)...
  done (took 2.196333751 seconds)
  (46/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 64)...
  done (took 2.17283603 seconds)
  (47/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4095)...
  done (took 2.219211089 seconds)
  (48/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.177552192 seconds)
  (49/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 63)...
  done (took 2.194130901 seconds)
  (50/680) benchmarking ("Linear", "two_reductions", "Float32", 4096)...
  done (took 2.17292244 seconds)
  (51/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 32)...
  done (took 2.174185188 seconds)
  (52/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 31)...
  done (took 2.228334354 seconds)
  (53/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4095)...
  done (took 2.172966577 seconds)
  (54/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 31)...
  done (took 2.291197327 seconds)
  (55/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 31)...
  done (took 2.189858124 seconds)
  (56/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.176276183 seconds)
  (57/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.205088945 seconds)
  (58/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 64)...
  done (took 2.185382 seconds)
  (59/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4095)...
  done (took 2.181413116 seconds)
  (60/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 63)...
  done (took 2.182815019 seconds)
  (61/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 64)...
  done (took 2.180324338 seconds)
  (62/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 32)...
  done (took 2.198116167 seconds)
  (63/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.207490071 seconds)
  (64/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 64)...
  done (took 2.180580949 seconds)
  (65/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.173233061 seconds)
  (66/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.206878683 seconds)
  (67/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 32)...
  done (took 2.231485156 seconds)
  (68/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 31)...
  done (took 2.216554539 seconds)
  (69/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.207165551 seconds)
  (70/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 31)...
  done (took 2.194216475 seconds)
  (71/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 64)...
  done (took 2.19054426 seconds)
  (72/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 64)...
  done (took 2.176419774 seconds)
  (73/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 63)...
  done (took 2.249717464 seconds)
  (74/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 64)...
  done (took 2.186170235 seconds)
  (75/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.177829258 seconds)
  (76/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 64)...
  done (took 2.185940211 seconds)
  (77/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 31)...
  done (took 2.227647246 seconds)
  (78/680) benchmarking ("Linear", "auto_inner", "Int64", 4095)...
  done (took 2.185737051 seconds)
  (79/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 32)...
  done (took 2.241754391 seconds)
  (80/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 32)...
  done (took 2.206179975 seconds)
  (81/680) benchmarking ("Cartesian", "inner", "Int32", 3, 64)...
  done (took 2.176922669 seconds)
  (82/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4095)...
  done (took 2.1771707 seconds)
  (83/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 32)...
  done (took 2.192705689 seconds)
  (84/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 31)...
  done (took 2.267692426 seconds)
  (85/680) benchmarking ("Linear", "manual_example!", "Int64", 4096)...
  done (took 2.180688708 seconds)
  (86/680) benchmarking ("Cartesian", "inner", "Int32", 3, 63)...
  done (took 2.192603247 seconds)
  (87/680) benchmarking ("Linear", "inner_aliased", "Float64", 4096)...
  done (took 2.175845203 seconds)
  (88/680) benchmarking ("Cartesian", "inner", "Int64", 2, 63)...
  done (took 2.186694709 seconds)
  (89/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 64)...
  done (took 2.184700479 seconds)
  (90/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.167224391 seconds)
  (91/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 64)...
  done (took 2.177450321 seconds)
  (92/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 32)...
  done (took 2.190899785 seconds)
  (93/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 64)...
  done (took 2.214536038 seconds)
  (94/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.168263978 seconds)
  (95/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.174018538 seconds)
  (96/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 63)...
  done (took 2.187653625 seconds)
  (97/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 63)...
  done (took 2.213441369 seconds)
  (98/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 63)...
  done (took 2.200618254 seconds)
  (99/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 32)...
  done (took 2.215475305 seconds)
  (100/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 63)...
  done (took 2.196548667 seconds)
  (101/680) benchmarking ("Cartesian", "inner", "Float32", 4, 32)...
  done (took 2.189823318 seconds)
  (102/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 32)...
  done (took 2.181831976 seconds)
  (103/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.192336096 seconds)
  (104/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 31)...
  done (took 2.201976884 seconds)
  (105/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 32)...
  done (took 2.192649232 seconds)
  (106/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 31)...
  done (took 2.207522331 seconds)
  (107/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.205099352 seconds)
  (108/680) benchmarking ("Linear", "axpy!", "Int32", 4095)...
  done (took 2.175204084 seconds)
  (109/680) benchmarking ("Cartesian", "inner", "Int32", 2, 31)...
  done (took 2.188937816 seconds)
  (110/680) benchmarking ("Cartesian", "inner", "Float32", 3, 32)...
  done (took 2.191227377 seconds)
  (111/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4095)...
  done (took 2.167999266 seconds)
  (112/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 31)...
  done (took 2.216710252 seconds)
  (113/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 63)...
  done (took 2.20097011 seconds)
  (114/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 64)...
  done (took 2.189304475 seconds)
  (115/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 63)...
  done (took 2.196385822 seconds)
  (116/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 63)...
  done (took 2.245104722 seconds)
  (117/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.213961316 seconds)
  (118/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 32)...
  done (took 2.176604967 seconds)
  (119/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4095)...
  done (took 2.185052645 seconds)
  (120/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 31)...
  done (took 2.210748001 seconds)
  (121/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 64)...
  done (took 2.178939105 seconds)
  (122/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 63)...
  done (took 2.214956914 seconds)
  (123/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.181607491 seconds)
  (124/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.204099306 seconds)
  (125/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 32)...
  done (took 2.17980513 seconds)
  (126/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 64)...
  done (took 2.183706561 seconds)
  (127/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.173398015 seconds)
  (128/680) benchmarking ("Linear", "sum_reduce", "Int64", 4095)...
  done (took 2.166627683 seconds)
  (129/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4095)...
  done (took 2.331132024 seconds)
  (130/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 63)...
  done (took 2.220926015 seconds)
  (131/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 31)...
  done (took 2.207551136 seconds)
  (132/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 63)...
  done (took 2.241337036 seconds)
  (133/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 32)...
  done (took 2.18528918 seconds)
  (134/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 31)...
  done (took 2.194407781 seconds)
  (135/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.207433297 seconds)
  (136/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 32)...
  done (took 2.190472657 seconds)
  (137/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 32)...
  done (took 2.182280943 seconds)
  (138/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 31)...
  done (took 2.299922414 seconds)
  (139/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 63)...
  done (took 2.237883317 seconds)
  (140/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 32)...
  done (took 2.180308937 seconds)
  (141/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 64)...
  done (took 2.191102527 seconds)
  (142/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 63)...
  done (took 2.191295992 seconds)
  (143/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 32)...
  done (took 2.200294648 seconds)
  (144/680) benchmarking ("Linear", "axpy!", "Int64", 4096)...
  done (took 2.179277091 seconds)
  (145/680) benchmarking ("Linear", "auto_axpy!", "Int32", 4095)...
  done (took 2.171093892 seconds)
  (146/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 32)...
  done (took 2.190501468 seconds)
  (147/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.18034613 seconds)
  (148/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.17231754 seconds)
  (149/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 64)...
  done (took 2.177619066 seconds)
  (150/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 63)...
  done (took 2.22265518 seconds)
  (151/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 64)...
  done (took 2.217011799 seconds)
  (152/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.171644008 seconds)
  (153/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 63)...
  done (took 2.18319438 seconds)
  (154/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 64)...
  done (took 2.179778405 seconds)
  (155/680) benchmarking ("Cartesian", "inner", "Float64", 4, 32)...
  done (took 2.177411256 seconds)
  (156/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 63)...
  done (took 2.190486356 seconds)
  (157/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 64)...
  done (took 2.192860501 seconds)
  (158/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.174840595 seconds)
  (159/680) benchmarking ("Linear", "two_reductions", "Int64", 4095)...
  done (took 2.179495905 seconds)
  (160/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.175954961 seconds)
  (161/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 31)...
  done (took 2.207754396 seconds)
  (162/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 63)...
  done (took 2.214254213 seconds)
  (163/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 63)...
  done (took 2.204751917 seconds)
  (164/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4095)...
  done (took 2.18651301 seconds)
  (165/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 31)...
  done (took 2.192293599 seconds)
  (166/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 31)...
  done (took 2.197810454 seconds)
  (167/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 32)...
  done (took 2.209996726 seconds)
  (168/680) benchmarking ("Linear", "auto_axpy!", "Int64", 4096)...
  done (took 2.18314368 seconds)
  (169/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.171879917 seconds)
  (170/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4095)...
  done (took 2.301480063 seconds)
  (171/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4095)...
  done (took 2.224927943 seconds)
  (172/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 31)...
  done (took 2.21114777 seconds)
  (173/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 32)...
  done (took 2.17967284 seconds)
  (174/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 32)...
  done (took 2.181360392 seconds)
  (175/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 32)...
  done (took 2.196992248 seconds)
  (176/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.182000502 seconds)
  (177/680) benchmarking ("Linear", "sum_reduce", "Float64", 4096)...
  done (took 2.165825183 seconds)
  (178/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 32)...
  done (took 2.191935756 seconds)
  (179/680) benchmarking ("Linear", "local_arrays", "Int64", 4095)...
  done (took 2.34310604 seconds)
  (180/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 32)...
  done (took 2.182983494 seconds)
  (181/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 63)...
  done (took 2.17463147 seconds)
  (182/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 31)...
  done (took 2.188771474 seconds)
  (183/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.173458996 seconds)
  (184/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 32)...
  done (took 2.182209976 seconds)
  (185/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 32)...
  done (took 2.190937703 seconds)
  (186/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 64)...
  done (took 2.182605699 seconds)
  (187/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 63)...
  done (took 2.247929521 seconds)
  (188/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 63)...
  done (took 2.185034403 seconds)
  (189/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 32)...
  done (took 2.180866611 seconds)
  (190/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 63)...
  done (took 2.243030144 seconds)
  (191/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 32)...
  done (took 2.183714352 seconds)
  (192/680) benchmarking ("Linear", "inner", "Float64", 4096)...
  done (took 2.178230186 seconds)
  (193/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4095)...
  done (took 2.18439146 seconds)
  (194/680) benchmarking ("Linear", "two_reductions", "Int32", 4096)...
  done (took 2.17643662 seconds)
  (195/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.291924537 seconds)
  (196/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 64)...
  done (took 2.183105115 seconds)
  (197/680) benchmarking ("Cartesian", "inner", "Float32", 2, 32)...
  done (took 2.178302347 seconds)
  (198/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 64)...
  done (took 2.183274868 seconds)
  (199/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 31)...
  done (took 2.197237438 seconds)
  (200/680) benchmarking ("Cartesian", "inner", "Int64", 2, 31)...
  done (took 2.187467523 seconds)
  (201/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 64)...
  done (took 2.182580977 seconds)
  (202/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 31)...
  done (took 2.194346562 seconds)
  (203/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 31)...
  done (took 2.278679361 seconds)
  (204/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 64)...
  done (took 2.185203435 seconds)
  (205/680) benchmarking ("Linear", "auto_two_reductions", "Int64", 4096)...
  done (took 2.17556056 seconds)
  (206/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 31)...
  done (took 2.227758562 seconds)
  (207/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 32)...
  done (took 2.188285941 seconds)
  (208/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 63)...
  done (took 2.177324271 seconds)
  (209/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 63)...
  done (took 2.200340611 seconds)
  (210/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4095)...
  done (took 2.174053 seconds)
  (211/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 63)...
  done (took 2.207971423 seconds)
  (212/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 63)...
  done (took 2.19083233 seconds)
  (213/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 64)...
  done (took 2.183279724 seconds)
  (214/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 64)...
  done (took 2.184110967 seconds)
  (215/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 63)...
  done (took 2.218298482 seconds)
  (216/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4096)...
  done (took 2.172753713 seconds)
  (217/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 32)...
  done (took 2.179096295 seconds)
  (218/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.17999272 seconds)
  (219/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 32)...
  done (took 2.215959899 seconds)
  (220/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 32)...
  done (took 2.183052731 seconds)
  (221/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 32)...
  done (took 2.180106659 seconds)
  (222/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 31)...
  done (took 2.214204161 seconds)
  (223/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 32)...
  done (took 2.208896292 seconds)
  (224/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 64)...
  done (took 2.178641445 seconds)
  (225/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 64)...
  done (took 2.184751006 seconds)
  (226/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 63)...
  done (took 2.17940035 seconds)
  (227/680) benchmarking ("Linear", "manual_example!", "Float32", 4096)...
  done (took 2.174404362 seconds)
  (228/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.17655762 seconds)
  (229/680) benchmarking ("Cartesian", "inner", "Float32", 4, 63)...
  done (took 2.236962681 seconds)
  (230/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 64)...
  done (took 2.185377225 seconds)
  (231/680) benchmarking ("Cartesian", "inner", "Float64", 4, 31)...
  done (took 2.207874076 seconds)
  (232/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 31)...
  done (took 2.297112096 seconds)
  (233/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 31)...
  done (took 2.213369111 seconds)
  (234/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 32)...
  done (took 2.202476097 seconds)
  (235/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.174136809 seconds)
  (236/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 31)...
  done (took 2.190750236 seconds)
  (237/680) benchmarking ("Cartesian", "inner", "Float32", 2, 31)...
  done (took 2.216462288 seconds)
  (238/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 31)...
  done (took 2.233799383 seconds)
  (239/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 32)...
  done (took 2.179175722 seconds)
  (240/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 31)...
  done (took 2.188574248 seconds)
  (241/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.218202935 seconds)
  (242/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.182608837 seconds)
  (243/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4095)...
  done (took 2.167473818 seconds)
  (244/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.17458158 seconds)
  (245/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 63)...
  done (took 2.195551283 seconds)
  (246/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 31)...
  done (took 2.224897038 seconds)
  (247/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 31)...
  done (took 2.210446787 seconds)
  (248/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.179229243 seconds)
  (249/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 63)...
  done (took 2.19468996 seconds)
  (250/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.177899682 seconds)
  (251/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 64)...
  done (took 2.182133428 seconds)
  (252/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 63)...
  done (took 2.251261935 seconds)
  (253/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 32)...
  done (took 2.179495453 seconds)
  (254/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 63)...
  done (took 2.190205927 seconds)
  (255/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.294950565 seconds)
  (256/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 32)...
  done (took 2.179115192 seconds)
  (257/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 31)...
  done (took 2.208370551 seconds)
  (258/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 63)...
  done (took 2.19353399 seconds)
  (259/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 31)...
  done (took 2.274668117 seconds)
  (260/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 64)...
  done (took 2.182773593 seconds)
  (261/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 64)...
  done (took 2.18777241 seconds)
  (262/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.180661966 seconds)
  (263/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 31)...
  done (took 2.203766468 seconds)
  (264/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 32)...
  done (took 2.192246914 seconds)
  (265/680) benchmarking ("Cartesian", "inner", "Float64", 3, 63)...
  done (took 2.190704133 seconds)
  (266/680) benchmarking ("Linear", "two_reductions", "Float32", 4095)...
  done (took 2.174163727 seconds)
  (267/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 32)...
  done (took 2.186513583 seconds)
  (268/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.176302823 seconds)
  (269/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 31)...
  done (took 2.208515752 seconds)
  (270/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 64)...
  done (took 2.185146037 seconds)
  (271/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 63)...
  done (took 2.240235102 seconds)
  (272/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.189827045 seconds)
  (273/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 32)...
  done (took 2.186737211 seconds)
  (274/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 32)...
  done (took 2.190541917 seconds)
  (275/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 64)...
  done (took 2.190530352 seconds)
  (276/680) benchmarking ("Linear", "two_reductions", "Float64", 4095)...
  done (took 2.179574501 seconds)
  (277/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4096)...
  done (took 2.183116532 seconds)
  (278/680) benchmarking ("Linear", "axpy!", "Int32", 4096)...
  done (took 2.180867689 seconds)
  (279/680) benchmarking ("Linear", "auto_conditional_loop!", "Float32", 4096)...
  done (took 2.186074136 seconds)
  (280/680) benchmarking ("Linear", "sum_reduce", "Int32", 4096)...
  done (took 2.167722532 seconds)
  (281/680) benchmarking ("Linear", "inner", "Float32", 4096)...
  done (took 2.169850364 seconds)
  (282/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 63)...
  done (took 2.195507039 seconds)
  (283/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 31)...
  done (took 2.201167416 seconds)
  (284/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 32)...
  done (took 2.189207946 seconds)
  (285/680) benchmarking ("Cartesian", "two_reductions", "Float64", 4, 31)...
  done (took 2.210997996 seconds)
  (286/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 4, 32)...
  done (took 2.255643859 seconds)
  (287/680) benchmarking ("Linear", "local_arrays", "Int32", 4096)...
  done (took 2.511577735 seconds)
  (288/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 32)...
  done (took 2.322553448 seconds)
  (289/680) benchmarking ("Linear", "auto_conditional_loop!", "Int64", 4096)...
  done (took 2.393029799 seconds)
  (290/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 64)...
  done (took 2.204310072 seconds)
  (291/680) benchmarking ("CartesianPartition", "inner", "Int32", 2, 31)...
  done (took 2.204203826 seconds)
  (292/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 63)...
  done (took 2.392802271 seconds)
  (293/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 32)...
  done (took 2.255516696 seconds)
  (294/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 64)...
  done (took 2.266469647 seconds)
  (295/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 31)...
  done (took 2.291400142 seconds)
  (296/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 64)...
  done (took 2.256884937 seconds)
  (297/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 32)...
  done (took 2.194434091 seconds)
  (298/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 31)...
  done (took 2.210583072 seconds)
  (299/680) benchmarking ("Cartesian", "axpy!", "Float32", 2, 31)...
  done (took 2.186093076 seconds)
  (300/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.214631386 seconds)
  (301/680) benchmarking ("Cartesian", "two_reductions", "Int32", 4, 31)...
  done (took 2.213278084 seconds)
  (302/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 32)...
  done (took 2.185189008 seconds)
  (303/680) benchmarking ("Linear", "conditional_loop!", "Int32", 4095)...
  done (took 2.173148554 seconds)
  (304/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 64)...
  done (took 2.183253323 seconds)
  (305/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 31)...
  done (took 2.274202584 seconds)
  (306/680) benchmarking ("Linear", "inner_aliased", "Int64", 4096)...
  done (took 2.186635498 seconds)
  (307/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4095)...
  done (took 2.176389054 seconds)
  (308/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.177194704 seconds)
  (309/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 4, 63)...
  done (took 2.208366344 seconds)
  (310/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 64)...
  done (took 2.210469354 seconds)
  (311/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 63)...
  done (took 2.191552478 seconds)
  (312/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.235175712 seconds)
  (313/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 3, 32)...
  done (took 2.223579231 seconds)
  (314/680) benchmarking ("Linear", "two_reductions_aliased", "Int64", 4096)...
  done (took 2.173946516 seconds)
  (315/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4095)...
  done (took 2.334142248 seconds)
  (316/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 4, 31)...
  done (took 2.183508883 seconds)
  (317/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 64)...
  done (took 2.191186224 seconds)
  (318/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 31)...
  done (took 2.201243317 seconds)
  (319/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 63)...
  done (took 2.181087233 seconds)
  (320/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 2, 31)...
  done (took 2.197406853 seconds)
  (321/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 64)...
  done (took 2.184828447 seconds)
  (322/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 64)...
  done (took 2.1828608 seconds)
  (323/680) benchmarking ("Linear", "axpy!", "Int64", 4095)...
  done (took 2.183014464 seconds)
  (324/680) benchmarking ("Linear", "local_arrays", "Float32", 4095)...
  done (took 2.333667936 seconds)
  (325/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 3, 31)...
  done (took 2.237837167 seconds)
  (326/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 31)...
  done (took 2.210999774 seconds)
  (327/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 32)...
  done (took 2.195439565 seconds)
  (328/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 63)...
  done (took 2.198405336 seconds)
  (329/680) benchmarking ("Cartesian", "inner", "Float32", 2, 64)...
  done (took 2.183573213 seconds)
  (330/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 32)...
  done (took 2.176699766 seconds)
  (331/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.232353352 seconds)
  (332/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 31)...
  done (took 2.181620111 seconds)
  (333/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 64)...
  done (took 2.189517844 seconds)
  (334/680) benchmarking ("Linear", "loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.176663364 seconds)
  (335/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4096)...
  done (took 2.176567716 seconds)
  (336/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 32)...
  done (took 2.194131586 seconds)
  (337/680) benchmarking ("Linear", "axpy!", "Float64", 4095)...
  done (took 2.178784576 seconds)
  (338/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 3, 64)...
  done (took 2.189585336 seconds)
  (339/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 64)...
  done (took 2.220367854 seconds)
  (340/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 63)...
  done (took 2.19875642 seconds)
  (341/680) benchmarking ("Cartesian", "inner", "Int64", 3, 63)...
  done (took 2.185478422 seconds)
  (342/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 31)...
  done (took 2.18750445 seconds)
  (343/680) benchmarking ("Linear", "manual_example!", "Int32", 4095)...
  done (took 2.176454565 seconds)
  (344/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4095)...
  done (took 2.169082715 seconds)
  (345/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 32)...
  done (took 2.17900959 seconds)
  (346/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 63)...
  done (took 2.230651323 seconds)
  (347/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.185317977 seconds)
  (348/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 64)...
  done (took 2.182080421 seconds)
  (349/680) benchmarking ("Linear", "conditional_loop!", "Float32", 4095)...
  done (took 2.186871899 seconds)
  (350/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 64)...
  done (took 2.187073706 seconds)
  (351/680) benchmarking ("Cartesian", "inner", "Int32", 2, 63)...
  done (took 2.198212633 seconds)
  (352/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 2, 32)...
  done (took 2.189442235 seconds)
  (353/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 31)...
  done (took 2.206227492 seconds)
  (354/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 32)...
  done (took 2.189177497 seconds)
  (355/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 32)...
  done (took 2.173093403 seconds)
  (356/680) benchmarking ("Linear", "local_arrays", "Float64", 4096)...
  done (took 2.391070791 seconds)
  (357/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 2, 64)...
  done (took 2.196830359 seconds)
  (358/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 64)...
  done (took 2.182530287 seconds)
  (359/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 63)...
  done (took 2.212646301 seconds)
  (360/680) benchmarking ("Linear", "sum_reduce", "Int32", 4095)...
  done (took 2.165825418 seconds)
  (361/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 64)...
  done (took 2.178977954 seconds)
  (362/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.179314349 seconds)
  (363/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.22717512 seconds)
  (364/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 32)...
  done (took 2.213611571 seconds)
  (365/680) benchmarking ("Cartesian", "inner", "Float64", 2, 63)...
  done (took 2.191964122 seconds)
  (366/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 64)...
  done (took 2.191264873 seconds)
  (367/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 3, 64)...
  done (took 2.186284191 seconds)
  (368/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 64)...
  done (took 2.186510935 seconds)
  (369/680) benchmarking ("Linear", "auto_inner", "Int64", 4096)...
  done (took 2.184499603 seconds)
  (370/680) benchmarking ("Linear", "inner_aliased", "Int32", 4096)...
  done (took 2.167235131 seconds)
  (371/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 32)...
  done (took 2.188205736 seconds)
  (372/680) benchmarking ("Cartesian", "inner", "Float32", 4, 31)...
  done (took 2.267990307 seconds)
  (373/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4095)...
  done (took 2.172264632 seconds)
  (374/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 32)...
  done (took 2.179891083 seconds)
  (375/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 63)...
  done (took 2.210145892 seconds)
  (376/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 63)...
  done (took 2.188775268 seconds)
  (377/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 31)...
  done (took 2.209188761 seconds)
  (378/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 31)...
  done (took 2.190143544 seconds)
  (379/680) benchmarking ("Linear", "inner_aliased", "Float32", 4096)...
  done (took 2.16979316 seconds)
  (380/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 63)...
  done (took 2.19332204 seconds)
  (381/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 32)...
  done (took 2.181850532 seconds)
  (382/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.179881158 seconds)
  (383/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 31)...
  done (took 2.239986709 seconds)
  (384/680) benchmarking ("Cartesian", "inner", "Float32", 4, 64)...
  done (took 2.185212075 seconds)
  (385/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 63)...
  done (took 2.195897553 seconds)
  (386/680) benchmarking ("Linear", "local_arrays", "Float32", 4096)...
  done (took 2.330266347 seconds)
  (387/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 63)...
  done (took 2.20294277 seconds)
  (388/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 32)...
  done (took 2.184816288 seconds)
  (389/680) benchmarking ("Cartesian", "two_reductions", "Float32", 2, 64)...
  done (took 2.18399647 seconds)
  (390/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 64)...
  done (took 2.180250844 seconds)
  (391/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 64)...
  done (took 2.181931334 seconds)
  (392/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 64)...
  done (took 2.183318178 seconds)
  (393/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 32)...
  done (took 2.208046966 seconds)
  (394/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 32)...
  done (took 2.1732778 seconds)
  (395/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 31)...
  done (took 2.185122566 seconds)
  (396/680) benchmarking ("Cartesian", "inner", "Int32", 3, 32)...
  done (took 2.181723873 seconds)
  (397/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 31)...
  done (took 2.192414281 seconds)
  (398/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 31)...
  done (took 2.213369002 seconds)
  (399/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 32)...
  done (took 2.192048054 seconds)
  (400/680) benchmarking ("Cartesian", "inner", "Int32", 4, 63)...
  done (took 2.193716354 seconds)
  (401/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.185615461 seconds)
  (402/680) benchmarking ("Linear", "inner_aliased", "Float32", 4095)...
  done (took 2.172432723 seconds)
  (403/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.185576594 seconds)
  (404/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.18079161 seconds)
  (405/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 63)...
  done (took 2.218480435 seconds)
  (406/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 32)...
  done (took 2.187797052 seconds)
  (407/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 64)...
  done (took 2.187431664 seconds)
  (408/680) benchmarking ("Cartesian", "inner", "Int32", 4, 31)...
  done (took 2.21316485 seconds)
  (409/680) benchmarking ("Linear", "two_reductions_aliased", "Float64", 4096)...
  done (took 2.181059803 seconds)
  (410/680) benchmarking ("Linear", "manual_example!", "Int64", 4095)...
  done (took 2.184745476 seconds)
  (411/680) benchmarking ("Cartesian", "inner", "Float32", 3, 63)...
  done (took 2.236388428 seconds)
  (412/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.296774831 seconds)
  (413/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 64)...
  done (took 2.191049684 seconds)
  (414/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 64)...
  done (took 2.201922135 seconds)
  (415/680) benchmarking ("Linear", "conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.298033579 seconds)
  (416/680) benchmarking ("Linear", "auto_local_arrays", "Int32", 4096)...
  done (took 2.304322925 seconds)
  (417/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 63)...
  done (took 2.2003849 seconds)
  (418/680) benchmarking ("Cartesian", "two_reductions", "Int64", 3, 64)...
  done (took 2.176247773 seconds)
  (419/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 2, 64)...
  done (took 2.18082428 seconds)
  (420/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 31)...
  done (took 2.216604441 seconds)
  (421/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 64)...
  done (took 2.184024058 seconds)
  (422/680) benchmarking ("Linear", "manual_example!", "Float32", 4095)...
  done (took 2.17619281 seconds)
  (423/680) benchmarking ("Cartesian", "inner", "Float32", 3, 64)...
  done (took 2.181843132 seconds)
  (424/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 32)...
  done (took 2.172901611 seconds)
  (425/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 32)...
  done (took 2.181306645 seconds)
  (426/680) benchmarking ("CartesianPartition", "inner", "Float32", 3, 63)...
  done (took 2.235678673 seconds)
  (427/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 32)...
  done (took 2.190125618 seconds)
  (428/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 64)...
  done (took 2.183014176 seconds)
  (429/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 64)...
  done (took 2.192044547 seconds)
  (430/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 4, 64)...
  done (took 2.188018648 seconds)
  (431/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4096)...
  done (took 2.173034869 seconds)
  (432/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 31)...
  done (took 2.178963809 seconds)
  (433/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 64)...
  done (took 2.179791878 seconds)
  (434/680) benchmarking ("Linear", "local_arrays", "Int64", 4096)...
  done (took 2.344898833 seconds)
  (435/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 63)...
  done (took 2.241171919 seconds)
  (436/680) benchmarking ("Cartesian", "inner", "Float64", 2, 64)...
  done (took 2.173429852 seconds)
  (437/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 63)...
  done (took 2.190732118 seconds)
  (438/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 31)...
  done (took 2.252518051 seconds)
  (439/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.218429933 seconds)
  (440/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.202312643 seconds)
  (441/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 31)...
  done (took 2.209791317 seconds)
  (442/680) benchmarking ("Linear", "two_reductions", "Int64", 4096)...
  done (took 2.179405275 seconds)
  (443/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 64)...
  done (took 2.211574441 seconds)
  (444/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.177814146 seconds)
  (445/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 63)...
  done (took 2.251377553 seconds)
  (446/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 63)...
  done (took 2.185967229 seconds)
  (447/680) benchmarking ("Linear", "auto_conditional_loop!", "Int32", 4096)...
  done (took 2.168242461 seconds)
  (448/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 31)...
  done (took 2.185357444 seconds)
  (449/680) benchmarking ("Cartesian", "inner", "Int64", 3, 64)...
  done (took 2.18532062 seconds)
  (450/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.216306239 seconds)
  (451/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 31)...
  done (took 2.190865244 seconds)
  (452/680) benchmarking ("Linear", "auto_axpy!", "Float32", 4095)...
  done (took 2.174853769 seconds)
  (453/680) benchmarking ("Cartesian", "inner", "Float64", 2, 32)...
  done (took 2.181997186 seconds)
  (454/680) benchmarking ("Linear", "auto_inner", "Int32", 4095)...
  done (took 2.171566675 seconds)
  (455/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 64)...
  done (took 2.183280164 seconds)
  (456/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4096)...
  done (took 2.20542228 seconds)
  (457/680) benchmarking ("Cartesian", "manual_example!", "Int64", 2, 63)...
  done (took 2.187012224 seconds)
  (458/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 32)...
  done (took 2.205958234 seconds)
  (459/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 4, 63)...
  done (took 2.186531145 seconds)
  (460/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 3, 31)...
  done (took 2.210032905 seconds)
  (461/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 64)...
  done (took 2.18230688 seconds)
  (462/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 31)...
  done (took 2.216786118 seconds)
  (463/680) benchmarking ("Cartesian", "inner", "Int64", 4, 63)...
  done (took 2.186512033 seconds)
  (464/680) benchmarking ("Cartesian", "manual_example!", "Int32", 2, 31)...
  done (took 2.191170987 seconds)
  (465/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 31)...
  done (took 2.209567013 seconds)
  (466/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 31)...
  done (took 2.174762846 seconds)
  (467/680) benchmarking ("Linear", "auto_manual_example!", "Int32", 4096)...
  done (took 2.176441175 seconds)
  (468/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 3, 32)...
  done (took 2.204361997 seconds)
  (469/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4096)...
  done (took 2.380354648 seconds)
  (470/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 31)...
  done (took 2.196415853 seconds)
  (471/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 31)...
  done (took 2.183956293 seconds)
  (472/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 32)...
  done (took 2.175431252 seconds)
  (473/680) benchmarking ("Cartesian", "manual_example!", "Int64", 4, 32)...
  done (took 2.185287559 seconds)
  (474/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 32)...
  done (took 2.192567926 seconds)
  (475/680) benchmarking ("Linear", "manual_example!_aliased", "Float64", 4096)...
  done (took 2.221890343 seconds)
  (476/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 32)...
  done (took 2.205519248 seconds)
  (477/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 3, 64)...
  done (took 2.177403727 seconds)
  (478/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 63)...
  done (took 2.188073245 seconds)
  (479/680) benchmarking ("Cartesian", "two_reductions", "Int64", 4, 64)...
  done (took 2.180901767 seconds)
  (480/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4096)...
  done (took 2.209490072 seconds)
  (481/680) benchmarking ("Cartesian", "axpy!", "Int64", 4, 63)...
  done (took 2.190807449 seconds)
  (482/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 63)...
  done (took 2.21934198 seconds)
  (483/680) benchmarking ("Linear", "inner", "Float32", 4095)...
  done (took 2.172892707 seconds)
  (484/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 63)...
  done (took 2.242811035 seconds)
  (485/680) benchmarking ("Cartesian", "inner", "Int32", 2, 32)...
  done (took 2.173578198 seconds)
  (486/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 63)...
  done (took 2.189748058 seconds)
  (487/680) benchmarking ("Linear", "local_arrays", "Int32", 4095)...
  done (took 2.313392892 seconds)
  (488/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 31)...
  done (took 2.201009709 seconds)
  (489/680) benchmarking ("Cartesian", "two_reductions", "Int64", 2, 64)...
  done (took 2.180454393 seconds)
  (490/680) benchmarking ("CartesianPartition", "inner", "Float64", 2, 63)...
  done (took 2.192321657 seconds)
  (491/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 64)...
  done (took 2.180985319 seconds)
  (492/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 31)...
  done (took 2.218787222 seconds)
  (493/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 63)...
  done (took 2.192320898 seconds)
  (494/680) benchmarking ("Cartesian", "axpy!", "Int64", 2, 31)...
  done (took 2.189157723 seconds)
  (495/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 31)...
  done (took 2.19250368 seconds)
  (496/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4095)...
  done (took 2.183014256 seconds)
  (497/680) benchmarking ("Cartesian", "conditional_loop!", "Float64", 3, 31)...
  done (took 2.217509428 seconds)
  (498/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 64)...
  done (took 2.184432382 seconds)
  (499/680) benchmarking ("Linear", "auto_local_arrays", "Float64", 4095)...
  done (took 2.382886089 seconds)
  (500/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 3, 32)...
  done (took 2.19248224 seconds)
  (501/680) benchmarking ("Cartesian", "inner", "Float64", 4, 64)...
  done (took 2.180621707 seconds)
  (502/680) benchmarking ("Linear", "sum_reduce", "Float32", 4095)...
  done (took 2.170598497 seconds)
  (503/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 64)...
  done (took 2.18675423 seconds)
  (504/680) benchmarking ("Cartesian", "inner", "Int64", 3, 32)...
  done (took 2.187549438 seconds)
  (505/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4095)...
  done (took 2.192002533 seconds)
  (506/680) benchmarking ("Linear", "two_reductions", "Float64", 4096)...
  done (took 2.182765714 seconds)
  (507/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 4, 63)...
  done (took 2.200184796 seconds)
  (508/680) benchmarking ("Linear", "manual_example!", "Float64", 4096)...
  done (took 2.187560148 seconds)
  (509/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 63)...
  done (took 2.192550541 seconds)
  (510/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 64)...
  done (took 2.180180541 seconds)
  (511/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 64)...
  done (took 2.190153894 seconds)
  (512/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 32)...
  done (took 2.190877993 seconds)
  (513/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 64)...
  done (took 2.185827082 seconds)
  (514/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 64)...
  done (took 2.180139385 seconds)
  (515/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 63)...
  done (took 2.211937782 seconds)
  (516/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 4, 64)...
  done (took 2.174789235 seconds)
  (517/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 64)...
  done (took 2.178759713 seconds)
  (518/680) benchmarking ("Linear", "local_arrays", "Float64", 4095)...
  done (took 2.386937382 seconds)
  (519/680) benchmarking ("Cartesian", "manual_example!", "Int32", 4, 63)...
  done (took 2.204742719 seconds)
  (520/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 64)...
  done (took 2.210495145 seconds)
  (521/680) benchmarking ("CartesianPartition", "inner", "Float64", 4, 32)...
  done (took 2.186389552 seconds)
  (522/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 32)...
  done (took 2.182863793 seconds)
  (523/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 2, 31)...
  done (took 2.176345259 seconds)
  (524/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 2, 64)...
  done (took 2.176412972 seconds)
  (525/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 3, 64)...
  done (took 2.21169509 seconds)
  (526/680) benchmarking ("Linear", "loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.181268515 seconds)
  (527/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 32)...
  done (took 2.182401912 seconds)
  (528/680) benchmarking ("Linear", "inner_aliased", "Float64", 4095)...
  done (took 2.177509456 seconds)
  (529/680) benchmarking ("Linear", "two_reductions_aliased", "Float32", 4096)...
  done (took 2.172332977 seconds)
  (530/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 31)...
  done (took 2.215008816 seconds)
  (531/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 31)...
  done (took 2.195285122 seconds)
  (532/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 63)...
  done (took 2.19940824 seconds)
  (533/680) benchmarking ("Cartesian", "inner", "Int32", 4, 64)...
  done (took 2.177776034 seconds)
  (534/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 32)...
  done (took 2.214877358 seconds)
  (535/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 64)...
  done (took 2.17336839 seconds)
  (536/680) benchmarking ("Linear", "manual_example!_aliased", "Int32", 4095)...
  done (took 2.189053608 seconds)
  (537/680) benchmarking ("Linear", "auto_two_reductions", "Int32", 4096)...
  done (took 2.181235373 seconds)
  (538/680) benchmarking ("Cartesian", "inner", "Int32", 2, 64)...
  done (took 2.182424571 seconds)
  (539/680) benchmarking ("CartesianPartition", "inner", "Int64", 3, 31)...
  done (took 2.194932271 seconds)
  (540/680) benchmarking ("Cartesian", "inner", "Int64", 4, 32)...
  done (took 2.187410847 seconds)
  (541/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 2, 63)...
  done (took 2.207859337 seconds)
  (542/680) benchmarking ("CartesianPartition", "axpy!", "Int32", 2, 31)...
  done (took 2.192854401 seconds)
  (543/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 31)...
  done (took 2.221033279 seconds)
  (544/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 32)...
  done (took 2.189082193 seconds)
  (545/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 4, 31)...
  done (took 2.249653253 seconds)
  (546/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 63)...
  done (took 2.195715517 seconds)
  (547/680) benchmarking ("Linear", "sum_reduce", "Int64", 4096)...
  done (took 2.167657489 seconds)
  (548/680) benchmarking ("Linear", "inner", "Int64", 4096)...
  done (took 2.182275092 seconds)
  (549/680) benchmarking ("Linear", "manual_example!_aliased", "Int64", 4095)...
  done (took 2.194463415 seconds)
  (550/680) benchmarking ("Linear", "auto_conditional_loop!", "Float64", 4095)...
  done (took 2.21150921 seconds)
  (551/680) benchmarking ("Cartesian", "inner", "Int64", 2, 32)...
  done (took 2.186477885 seconds)
  (552/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 2, 63)...
  done (took 2.189467398 seconds)
  (553/680) benchmarking ("CartesianPartition", "inner", "Int32", 3, 63)...
  done (took 2.202996394 seconds)
  (554/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 3, 64)...
  done (took 2.195683278 seconds)
  (555/680) benchmarking ("Cartesian", "axpy!", "Float32", 4, 64)...
  done (took 2.182145131 seconds)
  (556/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 4, 64)...
  done (took 2.198442688 seconds)
  (557/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 31)...
  done (took 2.213145227 seconds)
  (558/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 63)...
  done (took 2.178934196 seconds)
  (559/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 63)...
  done (took 2.240318786 seconds)
  (560/680) benchmarking ("Linear", "auto_local_arrays", "Float32", 4096)...
  done (took 2.333283246 seconds)
  (561/680) benchmarking ("Cartesian", "axpy!", "Float64", 4, 63)...
  done (took 2.193081719 seconds)
  (562/680) benchmarking ("Linear", "auto_manual_example!", "Int64", 4095)...
  done (took 2.179197372 seconds)
  (563/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 63)...
  done (took 2.185364537 seconds)
  (564/680) benchmarking ("Cartesian", "axpy!", "Float64", 2, 32)...
  done (took 2.180321333 seconds)
  (565/680) benchmarking ("Linear", "manual_example!", "Int32", 4096)...
  done (took 2.175536324 seconds)
  (566/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 4, 31)...
  done (took 2.260133837 seconds)
  (567/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 31)...
  done (took 2.225646562 seconds)
  (568/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 3, 31)...
  done (took 2.244017552 seconds)
  (569/680) benchmarking ("CartesianPartition", "inner", "Int32", 4, 63)...
  done (took 2.205661213 seconds)
  (570/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 32)...
  done (took 2.183080404 seconds)
  (571/680) benchmarking ("Cartesian", "axpy!", "Int32", 4, 31)...
  done (took 2.208157762 seconds)
  (572/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.288319408 seconds)
  (573/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 64)...
  done (took 2.201390474 seconds)
  (574/680) benchmarking ("Cartesian", "conditional_loop!", "Int64", 2, 63)...
  done (took 2.176675128 seconds)
  (575/680) benchmarking ("Linear", "manual_example!", "Float64", 4095)...
  done (took 2.184683787 seconds)
  (576/680) benchmarking ("Linear", "two_reductions_aliased", "Int32", 4095)...
  done (took 2.177864588 seconds)
  (577/680) benchmarking ("Cartesian", "axpy!", "Int32", 3, 63)...
  done (took 2.196894078 seconds)
  (578/680) benchmarking ("CartesianPartition", "axpy!", "Float64", 3, 32)...
  done (took 2.203766327 seconds)
  (579/680) benchmarking ("Cartesian", "manual_example!", "Float64", 3, 31)...
  done (took 2.207297938 seconds)
  (580/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 64)...
  done (took 2.176103363 seconds)
  (581/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 4, 32)...
  done (took 2.228415112 seconds)
  (582/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 2, 63)...
  done (took 2.192192192 seconds)
  (583/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 64)...
  done (took 2.183765321 seconds)
  (584/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 3, 32)...
  done (took 2.221046379 seconds)
  (585/680) benchmarking ("Cartesian", "two_reductions", "Float64", 3, 63)...
  done (took 2.195574483 seconds)
  (586/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 31)...
  done (took 2.2211062 seconds)
  (587/680) benchmarking ("Linear", "manual_example!_aliased", "Float32", 4096)...
  done (took 2.221075209 seconds)
  (588/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 3, 31)...
  done (took 2.263493756 seconds)
  (589/680) benchmarking ("Linear", "axpy!_aliased", "Float64", 4096)...
  done (took 2.184958226 seconds)
  (590/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 3, 32)...
  done (took 2.225898937 seconds)
  (591/680) benchmarking ("Cartesian", "axpy!", "Float64", 3, 64)...
  done (took 2.18204426 seconds)
  (592/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 2, 63)...
  done (took 2.250867384 seconds)
  (593/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 31)...
  done (took 2.19711062 seconds)
  (594/680) benchmarking ("Cartesian", "two_reductions", "Int32", 3, 31)...
  done (took 2.212175552 seconds)
  (595/680) benchmarking ("Cartesian", "axpy!", "Int32", 2, 63)...
  done (took 2.1935156 seconds)
  (596/680) benchmarking ("Linear", "inner", "Int64", 4095)...
  done (took 2.185413348 seconds)
  (597/680) benchmarking ("Cartesian", "two_reductions", "Float32", 4, 31)...
  done (took 2.293730217 seconds)
  (598/680) benchmarking ("Cartesian", "manual_example!", "Int64", 3, 32)...
  done (took 2.188084215 seconds)
  (599/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 4, 63)...
  done (took 2.193978437 seconds)
  (600/680) benchmarking ("Cartesian", "inner", "Int32", 3, 31)...
  done (took 2.209722652 seconds)
  (601/680) benchmarking ("Linear", "inner", "Int32", 4095)...
  done (took 2.171506808 seconds)
  (602/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 31)...
  done (took 2.200698434 seconds)
  (603/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 31)...
  done (took 2.215308478 seconds)
  (604/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 32)...
  done (took 2.180431561 seconds)
  (605/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 3, 32)...
  done (took 2.184601879 seconds)
  (606/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.180399048 seconds)
  (607/680) benchmarking ("Linear", "inner_aliased", "Int64", 4095)...
  done (took 2.182351935 seconds)
  (608/680) benchmarking ("Linear", "auto_sum_reduce", "Int32", 4096)...
  done (took 2.16950401 seconds)
  (609/680) benchmarking ("Cartesian", "two_reductions", "Float64", 2, 32)...
  done (took 2.181862975 seconds)
  (610/680) benchmarking ("Cartesian", "two_reductions", "Float32", 3, 64)...
  done (took 2.186574849 seconds)
  (611/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 2, 64)...
  done (took 2.209328731 seconds)
  (612/680) benchmarking ("Cartesian", "inner", "Float64", 4, 63)...
  done (took 2.192494102 seconds)
  (613/680) benchmarking ("Linear", "auto_sum_reduce", "Int64", 4096)...
  done (took 2.170335099 seconds)
  (614/680) benchmarking ("CartesianPartition", "manual_example!", "Int32", 4, 64)...
  done (took 2.195394796 seconds)
  (615/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float64", 4, 31)...
  done (took 2.23556826 seconds)
  (616/680) benchmarking ("CartesianPartition", "manual_example!", "Float64", 4, 32)...
  done (took 2.198472499 seconds)
  (617/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 4, 63)...
  done (took 2.200080658 seconds)
  (618/680) benchmarking ("Cartesian", "two_reductions", "Int32", 2, 64)...
  done (took 2.206345947 seconds)
  (619/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 64)...
  done (took 2.191918709 seconds)
  (620/680) benchmarking ("Linear", "axpy!", "Float32", 4096)...
  done (took 2.174355023 seconds)
  (621/680) benchmarking ("CartesianPartition", "conditional_loop!", "Float32", 2, 32)...
  done (took 2.195035919 seconds)
  (622/680) benchmarking ("Linear", "axpy!_aliased", "Int64", 4096)...
  done (took 2.18929624 seconds)
  (623/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 64)...
  done (took 2.187178458 seconds)
  (624/680) benchmarking ("Linear", "inner_aliased", "Int32", 4095)...
  done (took 2.174047318 seconds)
  (625/680) benchmarking ("CartesianPartition", "manual_partition!", "Float32", 2, 31)...
  done (took 2.202661877 seconds)
  (626/680) benchmarking ("Linear", "axpy!_aliased", "Float32", 4096)...
  done (took 2.186477635 seconds)
  (627/680) benchmarking ("CartesianPartition", "two_reductions", "Int64", 2, 63)...
  done (took 2.188941421 seconds)
  (628/680) benchmarking ("Cartesian", "conditional_loop!", "Float32", 2, 64)...
  done (took 2.20565567 seconds)
  (629/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 31)...
  done (took 2.248252385 seconds)
  (630/680) benchmarking ("Linear", "inner", "Float64", 4095)...
  done (took 2.177638403 seconds)
  (631/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 2, 63)...
  done (took 2.182984281 seconds)
  (632/680) benchmarking ("Linear", "sum_reduce", "Float64", 4095)...
  done (took 2.170833293 seconds)
  (633/680) benchmarking ("Linear", "axpy!_aliased", "Int32", 4096)...
  done (took 2.188099736 seconds)
  (634/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 2, 31)...
  done (took 2.181189609 seconds)
  (635/680) benchmarking ("CartesianPartition", "manual_example!", "Float32", 3, 32)...
  done (took 2.207431593 seconds)
  (636/680) benchmarking ("CartesianPartition", "axpy!", "Float32", 2, 32)...
  done (took 2.183515036 seconds)
  (637/680) benchmarking ("Cartesian", "manual_example!", "Int32", 3, 32)...
  done (took 2.190662089 seconds)
  (638/680) benchmarking ("CartesianPartition", "inner", "Float32", 4, 32)...
  done (took 2.201661843 seconds)
  (639/680) benchmarking ("Linear", "loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.178441229 seconds)
  (640/680) benchmarking ("Cartesian", "manual_example!", "Float32", 2, 64)...
  done (took 2.185123464 seconds)
  (641/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 3, 64)...
  done (took 2.187303556 seconds)
  (642/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 63)...
  done (took 2.239460752 seconds)
  (643/680) benchmarking ("CartesianPartition", "manual_example!", "Int64", 2, 63)...
  done (took 2.190795115 seconds)
  (644/680) benchmarking ("Cartesian", "axpy!", "Int64", 3, 63)...
  done (took 2.186085092 seconds)
  (645/680) benchmarking ("Cartesian", "inner", "Int64", 4, 31)...
  done (took 2.190431099 seconds)
  (646/680) benchmarking ("CartesianPartition", "inner", "Int64", 4, 63)...
  done (took 2.194010985 seconds)
  (647/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int32", 4, 63)...
  done (took 2.181509526 seconds)
  (648/680) benchmarking ("Linear", "axpy!", "Float64", 4096)...
  done (took 2.184385787 seconds)
  (649/680) benchmarking ("Cartesian", "inner", "Float64", 3, 31)...
  done (took 2.208238006 seconds)
  (650/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 3, 64)...
  done (took 2.194486225 seconds)
  (651/680) benchmarking ("CartesianPartition", "manual_partition!", "Int32", 2, 63)...
  done (took 2.196454873 seconds)
  (652/680) benchmarking ("Cartesian", "inner", "Float64", 3, 32)...
  done (took 2.17981868 seconds)
  (653/680) benchmarking ("CartesianPartition", "conditional_loop!", "Int64", 4, 64)...
  done (took 2.175835341 seconds)
  (654/680) benchmarking ("Cartesian", "inner", "Int64", 4, 64)...
  done (took 2.187691422 seconds)
  (655/680) benchmarking ("Cartesian", "manual_example!", "Float64", 4, 63)...
  done (took 2.193485401 seconds)
  (656/680) benchmarking ("Cartesian", "conditional_loop!", "Int32", 3, 63)...
  done (took 2.180197983 seconds)
  (657/680) benchmarking ("Cartesian", "inner", "Float64", 3, 64)...
  done (took 2.181900942 seconds)
  (658/680) benchmarking ("CartesianPartition", "manual_partition!", "Float64", 3, 63)...
  done (took 2.186959165 seconds)
  (659/680) benchmarking ("CartesianPartition", "manual_partition!", "Int64", 3, 32)...
  done (took 2.178729683 seconds)
  (660/680) benchmarking ("CartesianPartition", "two_reductions", "Int32", 4, 32)...
  done (took 2.24956118 seconds)
  (661/680) benchmarking ("Cartesian", "inner", "Int32", 4, 32)...
  done (took 2.182499173 seconds)
  (662/680) benchmarking ("Cartesian", "manual_example!", "Float32", 3, 31)...
  done (took 2.276712394 seconds)
  (663/680) benchmarking ("Cartesian", "manual_example!", "Float32", 4, 32)...
  done (took 2.193624545 seconds)
  (664/680) benchmarking ("Linear", "auto_axpy!", "Float64", 4095)...
  done (took 2.185043508 seconds)
  (665/680) benchmarking ("Linear", "conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.180476337 seconds)
  (666/680) benchmarking ("Cartesian", "inner", "Int64", 3, 31)...
  done (took 2.18837334 seconds)
  (667/680) benchmarking ("Linear", "auto_local_arrays", "Int64", 4096)...
  done (took 2.337451661 seconds)
  (668/680) benchmarking ("Linear", "conditional_loop!", "Float64", 4095)...
  done (took 2.213700018 seconds)
  (669/680) benchmarking ("Linear", "two_reductions", "Int32", 4095)...
  done (took 2.181464512 seconds)
  (670/680) benchmarking ("Linear", "conditional_loop!", "Int64", 4095)...
  done (took 2.179951088 seconds)
  (671/680) benchmarking ("Cartesian", "axpy!", "Float32", 3, 64)...
  done (took 2.184356711 seconds)
  (672/680) benchmarking ("CartesianPartition", "two_reductions", "Float64", 4, 63)...
  done (took 2.201202005 seconds)
  (673/680) benchmarking ("Cartesian", "manual_example!", "Float64", 2, 32)...
  done (took 2.189866386 seconds)
  (674/680) benchmarking ("Linear", "loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.181185989 seconds)
  (675/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 63)...
  done (took 2.241298955 seconds)
  (676/680) benchmarking ("CartesianPartition", "inner", "Int64", 2, 63)...
  done (took 2.191302994 seconds)
  (677/680) benchmarking ("CartesianPartition", "axpy!", "Int64", 4, 64)...
  done (took 2.193097569 seconds)
  (678/680) benchmarking ("CartesianPartition", "two_reductions", "Float32", 4, 63)...
  done (took 2.255249607 seconds)
  (679/680) benchmarking ("CartesianPartition", "inner", "Float64", 3, 31)...
  done (took 2.210618341 seconds)
  (680/680) benchmarking ("CartesianPartition", "inner", "Float32", 2, 31)...
  done (took 2.219581256 seconds)
done (took 1498.773445638 seconds)
(16/22) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.545069542 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.164732595 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.461764009 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.353345173 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.52674153 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.434121986 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.250247706 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.633320535 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.233573965 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.588763682 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.355915939 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 7.158655063 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.167180706 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.372289173 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.55744253 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.388565602 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.234064436 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.360262609 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.651178982 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.553366531 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.161591435 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.357359116 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.372809324 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.492945677 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.163000539 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.162651474 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.437221471 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.288022775 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.419066167 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.161701088 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.159823557 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.364257395 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.436775502 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 7.162248299 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 7.160668522 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 7.15791756 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.433517703 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 7.168340336 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.421011774 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.542898526 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.409720335 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 7.161945429 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.15725076 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.160238891 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.269704728 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.418524685 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.249416861 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 7.158203906 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.163993512 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 7.161892974 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.416831074 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 7.159570201 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 7.162341696 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.408278197 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.366983758 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 7.160044486 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.527534987 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.538609236 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.553813775 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.479314358 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.423202877 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.590633322 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.488748577 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.365321069 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.162335967 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.457473983 seconds)
  done (took 266.843421039 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.475999907 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.310929482 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.501090665 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.762488241 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.467906654 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.499181244 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.825203589 seconds)
  done (took 20.005805245 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 3.097128191 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.219363207 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.455261055 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.462305661 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.224995025 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.329361379 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.297286309 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 7.157816163 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.398984789 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.254560276 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.493888479 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.457137649 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 7.161987622 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.163835664 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.292618799 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.499449138 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 3.065445834 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.238466251 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.213832951 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.5090329 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 7.162143834 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 7.161215169 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.349248056 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.211783712 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.240170626 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.259934897 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.225212545 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 3.072158202 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.220247974 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.207196184 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.225049976 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.213766048 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.213813258 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.156789849 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.205692951 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.510030669 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.228793735 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.227907554 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.349422252 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.158605395 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.212189462 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.226172789 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.351060495 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.23597574 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.209025999 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.386731945 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.209656816 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.228787293 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.20066321 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.215090368 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.373405443 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.222112768 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.206013719 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 7.162842776 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.415477254 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 7.154217337 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.244676029 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.21625672 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.223633811 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.282473098 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.220372741 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.50262585 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.447491539 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.203245479 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.457278046 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.521107307 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.220418808 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.204472352 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.20501565 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.488625076 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.218446624 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.460374718 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.227578418 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.267976082 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.228279788 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.328748159 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.389816541 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.922621385 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.898185037 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.160270349 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 3.404343954 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.208136587 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 3.349270183 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 3.055641338 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 7.163881668 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.208984506 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.230742174 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 3.602127098 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 3.047368515 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.222142376 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.469040281 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.209748716 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.281378771 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.26804971 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.199236445 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.222639479 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.365700168 seconds)
  done (took 286.854782986 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 3.285716465 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.439571685 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.36026958 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.719817588 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.718379862 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 3.28937375 seconds)
  done (took 19.978174051 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.558408652 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.821314973 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.239254755 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.239798846 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.266589097 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.208426782 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.212287037 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 3.277324077 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 3.070055994 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.226775329 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.205867677 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.229232099 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.206878567 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.337548499 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.209632679 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.227734142 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.206543817 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.250744674 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.22463004 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.280879355 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.285086977 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.265336357 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.279621967 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.706759349 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.978830488 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.222582886 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 3.054722775 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.22653361 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.225194139 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 3.188835497 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.513078308 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.205950448 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.684473057 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.954961554 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.753886432 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.707741392 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 3.077962398 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.22977012 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.23711996 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.203679168 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.228567927 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.284652605 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.243177697 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.230077025 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 3.437984657 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 3.397940221 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 3.001582017 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.53546086 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.20952168 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.226633068 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.231026692 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.259111248 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.204427117 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.229191499 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.184872052 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 4.17402157 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.925985419 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.206340661 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.265270457 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.709070179 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 3.015337924 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.204652948 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.496044228 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.900165858 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 7.160764867 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.232263608 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.712661337 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 3.066579082 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.279979555 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.241165011 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.228326347 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.241242504 seconds)
  done (took 190.649334285 seconds)
done (took 786.538064597 seconds)
(17/22) benchmarking "inference"...
  (1/3) benchmarking "abstract interpretation"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 37.691258729 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 35.082602576 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 34.001126856 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 34.320957522 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 35.470518639 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 36.98136978 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 34.064817621 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 34.974399687 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 35.300269093 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 35.241689192 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 34.916105926 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 35.153217215 seconds)
  done (took 425.364462898 seconds)
  (2/3) benchmarking "optimization"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 43.367743624 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 34.332410052 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 35.913829797 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 34.716137856 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 37.036722365 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 35.726266866 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 35.883113823 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 34.568998254 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 37.794977409 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 37.424536252 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 36.535315561 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 38.794787122 seconds)
  done (took 445.089939428 seconds)
  (3/3) benchmarking "allinference"...
    (1/12) benchmarking "Base.init_stdio(::Ptr{Cvoid})"...
    done (took 40.754807052 seconds)
    (2/12) benchmarking "many_global_refs"...
    done (took 38.222522406 seconds)
    (3/12) benchmarking "many_local_vars"...
    done (took 39.608252153 seconds)
    (4/12) benchmarking "many_method_matches"...
    done (took 39.080521678 seconds)
    (5/12) benchmarking "REPL.REPLCompletions.completions"...
    done (took 43.621489672 seconds)
    (6/12) benchmarking "many_const_calls"...
    done (took 39.498480417 seconds)
    (7/12) benchmarking "many_invoke_calls"...
    done (took 39.499002067 seconds)
    (8/12) benchmarking "many_opaque_closures"...
    done (took 37.39278389 seconds)
    (9/12) benchmarking "broadcasting"...
    done (took 36.191092311 seconds)
    (10/12) benchmarking "rand(Float64)"...
    done (took 35.723370231 seconds)
    (11/12) benchmarking "sin(42)"...
    done (took 39.892007233 seconds)
    (12/12) benchmarking "println(::QuoteNode)"...
    done (took 40.775069217 seconds)
  done (took 474.445305206 seconds)
done (took 1347.059656996 seconds)
(18/22) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 10.764094201 seconds)
  done (took 15.803874135 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 10.278670757 seconds)
  done (took 15.53098804 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.038733258 seconds)
  done (took 15.081761146 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 10.135942731 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 10.075311624 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 10.051998655 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 10.128182127 seconds)
  done (took 45.77305878 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 10.561751104 seconds)
  done (took 15.612311592 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 9.585352883 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 10.048697114 seconds)
  done (took 25.130447637 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 10.324658977 seconds)
  done (took 15.377867389 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 10.705028154 seconds)
  done (took 15.823938235 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 10.067660418 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 10.115703422 seconds)
  done (took 25.230855631 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 10.043261928 seconds)
  done (took 15.088628779 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 12.871095076 seconds)
  done (took 17.989044611 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 10.072178676 seconds)
  done (took 15.340409509 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 10.130842081 seconds)
  done (took 15.177400159 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 10.318008386 seconds)
  done (took 15.359039902 seconds)
done (took 273.396887536 seconds)
(19/22) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 10.039386568 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 10.276618527 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 10.07880999 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 10.076165844 seconds)
  done (took 45.520865681 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 5.359409629 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 5.357348202 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 5.390730314 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 5.387844072 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 5.291577696 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 5.278442755 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 5.360050367 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 5.342112774 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 5.282883789 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 5.403208505 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 5.343413547 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 5.407716367 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 5.396125822 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 5.391054284 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 5.392527281 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 5.411220457 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 5.39745511 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 5.363216233 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 5.285657696 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 5.392168079 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 5.410017901 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 5.39632305 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 5.733900715 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 5.738796414 seconds)
  done (took 134.643298208 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 5.716150303 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 5.975477763 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 5.53017842 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 5.559116355 seconds)
  done (took 27.827634825 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 10.043130353 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 5.453795908 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 5.401237716 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 5.453098342 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 5.294569362 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64} isequal Vector{Float64}")...
    done (took 5.274597087 seconds)
    (7/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 5.275478081 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int16} isequal Vector{Int16}")...
    done (took 5.146161073 seconds)
    (9/24) benchmarking ("isequal", "Vector{Float32} isequal Vector{Float32}")...
    done (took 5.254561903 seconds)
    (10/24) benchmarking ("==", "Vector{Int16} == Vector{Int16}")...
    done (took 5.105116934 seconds)
    (11/24) benchmarking ("isequal", "BitArray")...
    done (took 5.105139031 seconds)
    (12/24) benchmarking ("==", "Vector{Int16}")...
    done (took 5.678662073 seconds)
    (13/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 5.358101624 seconds)
    (14/24) benchmarking ("==", "Vector{Int64}")...
    done (took 5.377768202 seconds)
    (15/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 5.459688733 seconds)
    (16/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 5.262345242 seconds)
    (17/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 5.080567108 seconds)
    (18/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 5.077730696 seconds)
    (19/24) benchmarking ("==", "Vector{Float64} == Vector{Float64}")...
    done (took 5.245930792 seconds)
    (20/24) benchmarking ("==", "Vector{Float32}")...
    done (took 5.84094994 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 5.526874671 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 5.65752216 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 5.463087433 seconds)
    (24/24) benchmarking ("==", "Vector{Float32} == Vector{Float32}")...
    done (took 5.383127587 seconds)
  done (took 138.267577541 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 5.864168342 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 5.387235857 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 5.959035091 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 6.022601762 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 6.278276922 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 6.172636205 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 5.913607979 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 5.906209766 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 5.195184318 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 5.945275987 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 5.790776075 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 5.913959508 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 5.572856838 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 5.976974002 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 5.871504371 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 5.11703106 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 5.123208675 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 5.920487678 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 5.912338946 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 5.474880912 seconds)
  done (took 120.371497749 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 10.039623329 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.961350599 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 6.001416626 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 5.457004866 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 10.046537159 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 10.08596253 seconds)
  done (took 52.632124587 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 6.799931582 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 5.12218818 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 5.220659277 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 5.133535219 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 5.150780276 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 5.121629515 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 5.341121148 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 5.14694085 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 5.286514913 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 5.297534809 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 5.858336985 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 5.268007533 seconds)
  done (took 69.913747899 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 10.053051778 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 10.048986607 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 10.042856244 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 5.169675801 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 5.620375089 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 5.736077995 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 5.937976347 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 10.046902487 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 5.775061568 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 5.290674781 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 5.663257582 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 5.179366972 seconds)
  done (took 89.626915025 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.063399517 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.58735236 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.037125861 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.037765762 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.042508257 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.034866902 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.053949659 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 6.722525374 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 8.457066748 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.020506646 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.037883616 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.041914366 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.035118105 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 9.650662628 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.041226139 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.046395755 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.03590344 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 8.93772705 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.040103909 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.041705461 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.0378688 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 5.17165293 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.061341489 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.042070451 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.210140978 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.056865128 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.179517685 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.03582293 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.036821286 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.05121105 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.036532122 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 10.079618342 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 7.773493606 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 5.333434139 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.044939487 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 8.269987448 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.042513486 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 10.041763647 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.758350527 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.210318603 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.158219758 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 5.175572759 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 10.03584154 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 5.751036114 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 5.302311619 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.035527359 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 8.276676749 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.03954509 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.035011097 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.034873883 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.068167425 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.034385018 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.141941506 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.036947352 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.03654374 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.039330748 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.185115009 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.039893823 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.089095223 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 8.948256883 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 10.106244872 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.041662006 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.041867659 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.039564509 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.041427034 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.06554166 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 5.959171476 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.133646755 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 6.439563648 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.665592187 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.405650746 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.041200855 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.079402397 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 5.116839043 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.045777795 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.040237757 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.043459717 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 10.042674095 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 10.041144928 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.04433911 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 10.04121274 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.078320432 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.038424276 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.046803883 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.979006286 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.042698404 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.042800282 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.039877964 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 5.081849538 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 10.047922502 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.03745936 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 5.112354856 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.1597711 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 5.212367737 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.036292363 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.04313448 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.054164286 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.041608892 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.042812346 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.051946474 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.041356177 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.082531576 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.115543412 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.046345138 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.039811108 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.040729495 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 10.051994588 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.041052033 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.040962582 seconds)
    (110/608) benchmarking "5d"...
    done (took 8.125977127 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.039943128 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.037024795 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.035753262 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.042722012 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.038928781 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.039216084 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.076445799 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.037857961 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.047742373 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.040664245 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.038127428 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 7.961261274 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.042642212 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.045239992 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.056557141 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.041276097 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 10.044059236 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.037408911 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.040017131 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.037163411 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.039791401 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.042580009 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 5.752123627 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 5.301173003 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.044362534 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 10.049549708 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.044610318 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 10.042689437 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.042893712 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.043388047 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.532343249 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.045315433 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.045933675 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.049873068 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 7.820298951 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.048987295 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.037091634 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 6.55330576 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.084810986 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 5.070392082 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.041604666 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 5.181319751 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.05517662 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.052580172 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 10.075665275 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.038354457 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.292306142 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.170954296 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.282142952 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.107865234 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.036373913 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.0780191 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.042197647 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.060427438 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.041244385 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.001391038 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.040473056 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 10.03828381 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.038624799 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.037974741 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.037283446 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.037505216 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.036789359 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.038682229 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 5.278171599 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.386693442 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.136803782 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.102791913 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 6.460187595 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.048297488 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.043443187 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 9.944052385 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 10.101289028 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.040387789 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.059913835 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 5.322003145 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.100717461 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 10.04376457 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 10.038655133 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.158246579 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 10.062649289 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.048274075 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 9.65331046 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.042610568 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.044999811 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 10.059690945 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.044227649 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 5.458004504 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.050177887 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 5.504763366 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 5.194550883 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.044377822 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.042732644 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.039808377 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.044830925 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.043947622 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.049213912 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.043557286 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 5.575130121 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 5.84776814 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.130724352 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 10.043781464 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.931789294 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.037436181 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.06361666 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.044090693 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.043770612 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 5.543657114 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 5.527335613 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.041846457 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 6.458295872 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.045470387 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.042171174 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.799046077 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.041701266 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.046284513 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 9.14788839 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.056365996 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.041081377 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.038543875 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.042956404 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.04134412 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.06417459 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 6.440245767 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.99104265 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 7.398955382 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.041385598 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.527522543 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 5.329363131 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.066344602 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.043719119 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 5.176571602 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 5.193168834 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.039870141 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 5.56988953 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.083473163 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.040368669 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 5.546177347 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.046846171 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.47442255 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.301573039 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.045394561 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.17917777 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.040403622 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.047989611 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 5.127154176 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.04287054 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.060288255 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.674580298 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 5.068476795 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.313814728 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.039344847 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.037372995 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.038706736 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.071666114 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.040506933 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.045904979 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.039408778 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.05538517 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.040475418 seconds)
    (271/608) benchmarking "4d"...
    done (took 6.828552249 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.721016905 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.038861601 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.039941552 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.036980092 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.042306055 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 10.042412529 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 10.044418215 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.042783218 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.065551283 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 7.666867837 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 5.183690163 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 7.982788377 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 5.077468762 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.405642852 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.055562222 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.045778302 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 9.667234342 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.986423536 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 5.226601765 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 10.048293226 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.194238378 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.045907549 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.041983185 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.722992772 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.076028036 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.044936627 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.058582153 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.045795463 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.240635541 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.045338488 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.04424924 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.434790939 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.049655535 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 10.040641326 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.125954692 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.044755923 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.041266979 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.038568952 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.041714329 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.045487657 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.046103617 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.040332487 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.039953404 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.059654825 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.040070348 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.050077734 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.058835362 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.118956303 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.044596844 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.042173221 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.040655362 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.040232214 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.042493483 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 10.042491072 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.040521134 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.11949842 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 9.919674768 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.038935194 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.059005021 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.045426263 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.043772077 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 7.788691898 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.044196391 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 6.008521509 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.047309548 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.049260195 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.042747274 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 5.877782381 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.04788899 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.043344483 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.046230558 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.038505961 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.043017523 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.054562102 seconds)
    (346/608) benchmarking "3d"...
    done (took 6.701559168 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 6.174648405 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 10.045677692 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.047375368 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.041609149 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.069442549 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.053664727 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.04233662 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.31976707 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 6.263809309 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 9.540846324 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.051632825 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.044756166 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.046305081 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.045359074 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.050653573 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 5.531589438 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.05161397 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 7.407527669 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 5.191554237 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 7.796399076 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.052750715 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.080530843 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.061525678 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.332336212 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 10.049161718 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.192926812 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.040371023 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.041526674 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.066123099 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.054247042 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.060406209 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 5.081616206 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.050825153 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 5.288090902 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 10.051630563 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.054644517 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.090966185 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.062837848 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 8.799089023 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.044745187 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.052470702 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.043544474 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.046979014 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.046641143 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 10.061387189 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.039315762 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.057843556 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.041372692 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.978000669 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 7.779708072 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.726631136 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 8.651103924 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.067486638 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 7.798401815 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 10.04790033 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 10.045688047 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.046071552 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.040248388 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 10.047516186 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.048242362 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.039904936 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.045737073 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.093476998 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.051210014 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.158149724 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.043454823 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.061594615 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 5.522103992 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.050082198 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.054683747 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.058052761 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 5.085751683 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.047128658 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.048577043 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.058063879 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 8.701890773 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.068020123 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.040369901 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 10.041156853 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.048211497 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.041270064 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.019829017 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.049876128 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.056844544 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 9.654491948 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.050677524 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 10.042714624 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.043349558 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 9.564354528 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.138689507 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.043785386 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.060711753 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.041211476 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.044571222 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.046586523 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.044439242 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.04641531 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.050697395 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.215748323 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.045508701 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.210630762 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 5.331318714 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.043837577 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.082409154 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.044732311 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.043454138 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.046811268 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.043844201 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.046693192 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 5.347645123 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.041071473 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 10.072371723 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.089203043 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.04047592 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.144153205 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.046707045 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.044795244 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 5.320750634 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.982155641 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.096124708 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 7.782749825 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.05020779 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.053258536 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.044721445 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.041616836 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 10.185308111 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.382255088 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 5.607290104 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 9.985723228 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.042556369 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.072678517 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.04462509 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.048197579 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 8.538174789 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.271732335 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.050318355 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.044202041 seconds)
    (484/608) benchmarking "6d"...
    done (took 10.027332638 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 8.950610909 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.045554963 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 5.895917363 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 10.05003054 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.113765365 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 10.053407248 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.78627757 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 10.050387911 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 8.293049739 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.051472124 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.044463331 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.044413031 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.002256405 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.042032031 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.046421827 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 10.052215361 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.813566524 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 5.874816587 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 7.399677693 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.049501979 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 5.481534979 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.045101039 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.068598516 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 10.047485733 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.049386965 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.044538897 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.047577021 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 10.06868658 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.049498222 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.04802287 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.053713173 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.059922867 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 5.157956781 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.060410459 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.134164502 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 7.162290352 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.045810963 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 6.443944007 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.053761669 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.070405094 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 5.525243715 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 5.390232436 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.067398131 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 5.225028068 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.047896278 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.091126734 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.050419354 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.047986688 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.046462843 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.0453064 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 5.397930004 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.221027277 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 5.319306638 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 5.200533323 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 10.043893927 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.04549541 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 5.272857445 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.047169607 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.045824702 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.936507527 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.049308268 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 5.890730218 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 10.059085356 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.047835459 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.025004092 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.055998837 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.556518358 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.253420676 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 10.20547935 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 9.765752649 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.056893364 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.048879172 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 10.047084047 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.094612485 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 7.396003781 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 5.857136852 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 10.144231797 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.054680612 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 5.150644898 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 9.617080323 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.139831581 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.048151677 seconds)
    (567/608) benchmarking "2d"...
    done (took 6.270817936 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.067082875 seconds)
    (569/608) benchmarking "7d"...
    done (took 7.689494285 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.061101029 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 8.992487809 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.04985824 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 10.049415571 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.044645592 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.044065893 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.75869256 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.048596721 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.068019392 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.04703334 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 10.052373112 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.048711896 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.066300836 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 10.051452767 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.050325773 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 10.044343213 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.577425614 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.070940796 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 9.262177152 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 5.300408871 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.045633947 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 9.037728019 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.050074374 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 5.184750873 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.047562798 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 9.974646438 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.048271633 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.042613515 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 10.049552054 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 10.06601117 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.044410857 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 10.051079048 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 10.045999247 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 10.054776913 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 10.062981853 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 10.046046567 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 10.048841998 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 5.159747635 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 10.045662577 seconds)
  done (took 5580.205399891 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 10.131104575 seconds)
    (2/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.472057461 seconds)
    (3/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 10.21273719 seconds)
    (4/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.145749888 seconds)
    (5/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 10.088902187 seconds)
    (6/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 10.074115137 seconds)
    (7/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.200718099 seconds)
    (8/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}")...
    done (took 10.062691607 seconds)
  done (took 86.438108583 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 10.04904676 seconds)
    (2/17) benchmarking "4467"...
    done (took 5.274069452 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 6.871515099 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 10.603197199 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 10.045394244 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 6.185832744 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 5.503670366 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 6.383745793 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 10.543225097 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 6.913854954 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 10.495941427 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 7.571569552 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 11.23442991 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 10.044007231 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 6.247476063 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 5.595394742 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 10.044513483 seconds)
  done (took 144.65879488 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 10.117841054 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 13.755687185 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 10.058912308 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 15.063179596 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 10.101438518 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 10.540322453 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 10.062515157 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 10.05453451 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 10.706867893 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 15.651515813 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 10.105397227 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 10.179451534 seconds)
  done (took 141.448740367 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 5.30721766 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 5.294159879 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 5.336254638 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 5.339810607 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 5.266397858 seconds)
  done (took 31.60361367 seconds)
done (took 6668.325675754 seconds)
(20/22) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 5.296814883 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 5.304962057 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 5.498746742 seconds)
  done (took 15.851056167 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 6.106669865 seconds)
    (2/4) benchmarking "Float32"...
    done (took 5.52052858 seconds)
    (3/4) benchmarking "Float64"...
    done (took 5.764016249 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 6.176631618 seconds)
  done (took 28.6335238 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 5.675286637 seconds)
    (2/2) benchmarking "Float64"...
    done (took 5.812730174 seconds)
  done (took 16.542613123 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 5.309031191 seconds)
  (6/15) benchmarking "18129"...
  done (took 10.076721059 seconds)
  (7/15) benchmarking "20517"...
  done (took 5.628033374 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 10.057750149 seconds)
    (2/3) benchmarking "Float64"...
    done (took 10.14507239 seconds)
    (3/3) benchmarking "Float16"...
    done (took 10.05997359 seconds)
  done (took 35.31790348 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 5.086412741 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 5.087743762 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 5.086582894 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 5.082982954 seconds)
  done (took 25.399534891 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.128471784 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 5.454659656 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 10.049753654 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 10.097157196 seconds)
  done (took 37.778915281 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 5.545659573 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 5.240193426 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 5.598265231 seconds)
  done (took 21.434105579 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 5.696040331 seconds)
    (2/3) benchmarking "Int"...
    done (took 5.142165054 seconds)
    (3/3) benchmarking "Float64"...
    done (took 5.667784541 seconds)
  done (took 21.554987423 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 5.910603281 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 5.887117798 seconds)
  done (took 16.850636005 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 5.218935532 seconds)
  done (took 10.266200437 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 5.886825517 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 5.370102503 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 5.528601472 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 5.554296923 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 5.737940991 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 5.209916044 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 5.343113609 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 5.273442496 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 5.454546215 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 5.384136207 seconds)
  done (took 59.795642038 seconds)
done (took 320.783615334 seconds)
(21/22) benchmarking "sort"...
  (1/11) benchmarking "insertionsort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 5.095888563 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 5.070445544 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 5.079880662 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 5.08253341 seconds)
  done (took 25.374947178 seconds)
  (2/11) benchmarking "mergesort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 10.052428329 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 10.050536291 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 10.053373399 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 10.052172356 seconds)
  done (took 45.262760289 seconds)
  (3/11) benchmarking "length = 3"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.059323822 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.052943052 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.059491046 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.054887668 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.062783074 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.062664209 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.070725062 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.061482354 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.055875595 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.060178035 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.056380234 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.059267507 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.061083547 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.057450295 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.060609907 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.058025568 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.059260977 seconds)
  done (took 91.063772484 seconds)
  (4/11) benchmarking "length = 10"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.064097071 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.061574959 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.062659504 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.062051769 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.071752597 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.054994289 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.116879036 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.0651561 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.062708192 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.068964581 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.060119719 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.064189782 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.067258718 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.057905932 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.064268124 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.070429793 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.059925596 seconds)
  done (took 91.18681591 seconds)
  (5/11) benchmarking "length = 1000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.447754817 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.231960094 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.287879546 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.06510353 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.255818124 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.06690095 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 10.054140026 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.299722077 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.082991139 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.292770755 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.401591008 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.254057717 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.312907044 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.261567373 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.413586562 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.282243311 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.213192334 seconds)
  done (took 99.277145057 seconds)
  (6/11) benchmarking "issues"...
    (1/13) benchmarking "sortperm on a view (Float64)"...
    done (took 5.44841436 seconds)
    (2/13) benchmarking "sort(rand(10^8))"...
    done (took 15.722399261 seconds)
    (3/13) benchmarking "sortperm(rand(10^5))"...
    done (took 10.062894055 seconds)
    (4/13) benchmarking "small Int view"...
    done (took 5.06471388 seconds)
    (5/13) benchmarking "sortperm(rand(10^7))"...
    done (took 16.199010396 seconds)
    (6/13) benchmarking "small Float64 view"...
    done (took 5.059331739 seconds)
    (7/13) benchmarking "inplace sorting of a view"...
    done (took 5.216786912 seconds)
    (8/13) benchmarking "sortperm on a view (Int)"...
    done (took 9.584476626 seconds)
    (9/13) benchmarking "partialsort!(rand(10_000), 1:3, rev=true)"...
    done (took 5.484998583 seconds)
    (10/13) benchmarking "sortslices sorting very short slices"...
    done (took 10.257347805 seconds)
    (11/13) benchmarking "sortperm(collect(1000000:-1:1))"...
    done (took 10.056442416 seconds)
    (12/13) benchmarking "Float16"...
    done (took 10.05262153 seconds)
    (13/13) benchmarking "partialsort(rand(10_000), 10_000)"...
    done (took 5.542538176 seconds)
  done (took 118.81473384 seconds)
  (7/11) benchmarking "length = 30"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.071627888 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.059677697 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.061902235 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.055609687 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.080233892 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.05881051 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 5.324289155 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.067102845 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.061276027 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.066036001 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.266505997 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.557778499 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.100530619 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.297307212 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.239157426 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.108742626 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.063514151 seconds)
  done (took 92.598627727 seconds)
  (8/11) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 5.657349992 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 5.667255107 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 5.674709948 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 6.097054256 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 5.871491356 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 5.497012865 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 6.099359761 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 5.663691764 seconds)
  done (took 51.283651361 seconds)
  (9/11) benchmarking "quicksort"...
    (1/4) benchmarking "sortperm! reverse"...
    done (took 10.06277769 seconds)
    (2/4) benchmarking "sort forwards"...
    done (took 10.057261643 seconds)
    (3/4) benchmarking "sort! reverse"...
    done (took 10.055112561 seconds)
    (4/4) benchmarking "sortperm forwards"...
    done (took 10.052738244 seconds)
  done (took 45.281472287 seconds)
  (10/11) benchmarking "length = 10000"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 9.805115812 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 6.911845156 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 7.609845144 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.093185137 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 6.931348759 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.090901414 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 10.067202536 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 6.870196736 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.26494543 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 6.784975368 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 9.252255245 seconds)
    (12/17) benchmarking "ascending"...
    done (took 7.753536361 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 6.949982558 seconds)
    (14/17) benchmarking "descending"...
    done (took 7.794424566 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 9.367363558 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 6.796847252 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 7.677303202 seconds)
  done (took 131.073272063 seconds)
  (11/11) benchmarking "length = 100"...
    (1/17) benchmarking "sortperm(rand(length))"...
    done (took 5.102252779 seconds)
    (2/17) benchmarking "sort!(rand(2n, 2n, n); dims=3)"...
    done (took 5.078091883 seconds)
    (3/17) benchmarking "sort(randn(length))"...
    done (took 5.08632198 seconds)
    (4/17) benchmarking "sort!(fill(missing, length), rev=true)"...
    done (took 5.062812084 seconds)
    (5/17) benchmarking "sort(rand(2n, 2n, n); dims=3)"...
    done (took 5.082236876 seconds)
    (6/17) benchmarking "sort!(fill(missing, length))"...
    done (took 5.055537304 seconds)
    (7/17) benchmarking "mixed eltype with by order"...
    done (took 6.049471724 seconds)
    (8/17) benchmarking "sort!(rand(2n, 2n, n); dims=2)"...
    done (took 5.072816293 seconds)
    (9/17) benchmarking "all same"...
    done (took 5.057833015 seconds)
    (10/17) benchmarking "sort!(rand(2n, 2n, n); dims=1)"...
    done (took 5.070376653 seconds)
    (11/17) benchmarking "Int unions with missing"...
    done (took 5.096502493 seconds)
    (12/17) benchmarking "ascending"...
    done (took 5.089439796 seconds)
    (13/17) benchmarking "sort(rand(2n, 2n, n); dims=2)"...
    done (took 5.081543294 seconds)
    (14/17) benchmarking "descending"...
    done (took 5.091059421 seconds)
    (15/17) benchmarking "Float64 unions with missing"...
    done (took 5.105680805 seconds)
    (16/17) benchmarking "sort(rand(2n, 2n, n); dims=1)"...
    done (took 5.067884623 seconds)
    (17/17) benchmarking "sort!(rand(Int, length))"...
    done (took 5.078769494 seconds)
  done (took 92.38327934 seconds)
done (took 888.664625026 seconds)
(22/22) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 6.233159838 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 5.664343052 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 5.189155587 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 5.250300268 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 6.204962922 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 5.2804184 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 5.255654196 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 5.198972178 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 5.601916197 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 5.192014913 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 5.41430462 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 5.24373191 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 5.636309813 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 5.249094138 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 5.201813773 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 5.172935972 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 5.469884994 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 5.622011554 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 5.209605419 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 5.667389611 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 5.207406167 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 5.700375881 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 5.219717742 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 5.59672423 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 5.408802129 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 5.706538426 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 6.066168605 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 5.395438325 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 5.242562753 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 5.223259099 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 7.931052499 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 6.223369184 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 5.184114781 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 5.197541831 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 5.183851768 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 5.186273284 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 6.27237603 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 5.977996296 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 5.292971438 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 5.548736401 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 5.69442246 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 5.490457589 seconds)
  done (took 237.959053541 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 5.097447973 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 5.159791767 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 5.139685783 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 5.139587017 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 5.5884529 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 5.169748495 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 5.200845658 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 5.167517814 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 5.148542426 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 5.185526555 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 5.187359592 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 5.617742508 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 5.210399443 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 5.578857165 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 5.180085258 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 5.196219453 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 5.144183416 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 5.60857147 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 5.206511139 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 5.15799016 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 5.106516443 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 5.142451831 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 5.093147238 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 5.195576597 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 5.089139798 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 5.145715456 seconds)
  done (took 140.909300299 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 5.131289568 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 5.200591856 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 5.251572587 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 6.486196733 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 5.359716114 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 6.175332521 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 5.228136439 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 5.245238241 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 6.397006611 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 6.549683323 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 5.163429124 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 5.204274625 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 5.157274367 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 5.257912464 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 7.037494615 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 5.862230656 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 5.270457749 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 5.253609246 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 5.215951464 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 6.152171187 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 6.381359535 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 5.16919447 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 5.411661365 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 6.108763981 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 5.773520665 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 6.293708454 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 6.089000774 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 5.518103285 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 6.502245991 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 5.822479048 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 5.220029739 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 5.198798884 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 5.352921232 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 5.263963567 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 5.218135951 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 5.118587071 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 5.108943777 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 5.169436712 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 5.868497631 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 5.235872211 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 5.221424242 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 5.854534852 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 5.41752972 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 5.627205448 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 5.735793762 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 5.284360359 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 5.362433712 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 5.170853587 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 5.218574836 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 5.961133229 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 5.408534167 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 6.403410281 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 5.687818567 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 5.311236106 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 5.214153916 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.463484027 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 5.298063666 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 5.362292295 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 5.984548689 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 6.663131004 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 5.167262481 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 5.359558029 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 5.215415752 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 5.734539182 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 5.365741918 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 5.319393581 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 6.03203626 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 5.97097222 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 5.414975072 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 6.558824804 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 6.273634236 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 5.161293085 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 5.122530846 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 5.159751501 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 5.210566955 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 5.385992779 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 6.324047162 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.466417521 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 5.347016856 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 5.20132876 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 6.042558964 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 5.549272194 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 6.243762123 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 5.871116495 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 5.214381101 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 5.106344655 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 5.163629087 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 5.307462729 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 5.199352116 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 5.620059835 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 5.660309387 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 5.364962016 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 6.485553654 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 6.26516537 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 6.02967815 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 5.503424351 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 5.091453623 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 5.107309496 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 5.253270592 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 5.653221752 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 5.164394312 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 6.035489119 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 5.735892617 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 6.161701209 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 6.326450656 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 5.837645252 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 5.322917585 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 5.736529684 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 5.441774576 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 5.083714805 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 6.032657766 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 6.357530876 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 6.882845567 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 6.479225766 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 5.089888052 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 5.632090644 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 5.180132459 seconds)
  done (took 662.153926773 seconds)
  (4/6) benchmarking "optimizations"...
    (1/27) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 10.056744328 seconds)
    (2/27) benchmarking ("Set", "abstract", "Int8")...
    done (took 10.053234341 seconds)
    (3/27) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 10.055940499 seconds)
    (4/27) benchmarking ("Dict", "concrete", "Bool")...
    done (took 10.055319032 seconds)
    (5/27) benchmarking ("Dict", "abstract", "Bool")...
    done (took 10.04987971 seconds)
    (6/27) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 6.378282669 seconds)
    (7/27) benchmarking ("Set", "abstract", "Bool")...
    done (took 10.05753943 seconds)
    (8/27) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 10.054181517 seconds)
    (9/27) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 5.284412779 seconds)
    (10/27) benchmarking ("Set", "concrete", "Bool")...
    done (took 10.052056142 seconds)
    (11/27) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 10.06004121 seconds)
    (12/27) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 10.052460505 seconds)
    (13/27) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 10.05495961 seconds)
    (14/27) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 10.057619905 seconds)
    (15/27) benchmarking ("Set", "concrete", "Nothing")...
    done (took 7.222241787 seconds)
    (16/27) benchmarking ("Set", "abstract", "Nothing")...
    done (took 5.830344602 seconds)
    (17/27) benchmarking ("BitSet", "Int8")...
    done (took 6.843276217 seconds)
    (18/27) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 10.045709231 seconds)
    (19/27) benchmarking ("Set", "abstract", "UInt16")...
    done (took 10.054664871 seconds)
    (20/27) benchmarking ("Dict", "concrete", "Int8")...
    done (took 10.050299374 seconds)
    (21/27) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 10.045399333 seconds)
    (22/27) benchmarking ("Set", "concrete", "UInt16")...
    done (took 10.048381055 seconds)
    (23/27) benchmarking ("Set", "concrete", "Int8")...
    done (took 10.053649046 seconds)
    (24/27) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 10.049654107 seconds)
    (25/27) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 10.056313547 seconds)
    (26/27) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 10.056511486 seconds)
    (27/27) benchmarking ("Dict", "abstract", "Int8")...
    done (took 10.202950727 seconds)
  done (took 257.938953031 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 5.118840307 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 5.42742478 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 5.141906967 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 5.185351658 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 5.157642036 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 5.113846342 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 5.453378837 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 5.127795952 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 5.134500644 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 5.121825352 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 5.093345974 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 5.371898514 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 5.357843017 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 5.511688442 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 5.152102837 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 6.187085194 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 5.627331058 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 5.305356842 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 5.128311439 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 5.132844274 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 5.284474949 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 5.420838974 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 5.310466831 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 5.315355397 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 5.259146435 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 5.417717077 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 5.738770678 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 5.257563626 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 5.499103475 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 5.657100441 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 5.15022488 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 5.433108432 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 5.26009466 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 5.111961958 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 5.472412997 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 5.351384042 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 5.514147358 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 5.572228665 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 5.259193934 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 5.085322746 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 5.086006199 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 5.294594198 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 5.392177175 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 5.156074412 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 5.113200119 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 5.623614917 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 5.112139535 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 5.402765682 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 5.141476562 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 5.082850238 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 5.119728272 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 5.118298235 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 5.302804337 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 6.869696512 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 5.273453919 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 5.391340945 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 5.543752303 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 10.068195327 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 5.360082044 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 5.353401856 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 5.094550794 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 5.470773357 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 6.505069088 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 5.166441936 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 5.127935232 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 5.911745103 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 5.188969084 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 5.472011269 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 5.52697874 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 5.124967523 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 5.395110489 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 5.296131271 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 5.090906276 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 5.313511769 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 5.361830131 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 5.560246278 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 5.521274693 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 5.214333966 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 5.190875027 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 5.133834191 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 5.327403607 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 5.090238166 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 5.565397194 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 5.190790985 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 5.091850413 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 5.474212428 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 5.443098149 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 5.099106539 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 5.126022275 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 5.220073746 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 5.338406536 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 5.216642026 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 5.346583969 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 5.181523438 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 5.779398512 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 5.329228328 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 5.407067816 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 5.129587902 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 5.197581719 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 5.089968418 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 6.645635686 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 5.261339235 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 5.103712653 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 5.366067367 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 5.500589579 seconds)
  done (took 571.266466825 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 5.635328471 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 5.121423531 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 5.293202682 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 5.503301395 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 5.378600525 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 7.235373684 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 5.294741468 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 5.145319764 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 5.257252322 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 5.248478308 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 5.230969079 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 5.186283392 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 6.123630576 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 5.71873506 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 5.135430946 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 5.192792567 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 5.167139039 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 5.589213684 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 5.333577969 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 7.257644979 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 6.42541675 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 6.030197134 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 5.342835826 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 5.438951719 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 5.440109746 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 5.41507575 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 5.596518648 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 5.206154311 seconds)
  done (took 161.006874361 seconds)
done (took 2036.285765687 seconds)
SAVING RESULT...
DONE!
