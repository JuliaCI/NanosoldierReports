cset: moving following pidspec: 2947562
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "shootout"... done (took 1.788819778 seconds)
loading group "string"... done (took 0.313776844 seconds)
loading group "linalg"... done (took 3.935284501 seconds)
loading group "parallel"... done (took 0.023033197 seconds)
loading group "find"... done (took 1.427538511 seconds)
loading group "tuple"... done (took 0.949641424 seconds)
loading group "dates"... done (took 0.256812542 seconds)
loading group "micro"... done (took 0.063948146 seconds)
loading group "io"... done (took 1.612739183 seconds)
loading group "frontend"... done (took 0.012489516 seconds)
loading group "scalar"... done (took 5.23549518 seconds)
loading group "sparse"... done (took 3.940537509 seconds)
loading group "alloc"... done (took 0.016482062 seconds)
loading group "broadcast"... done (took 0.396141767 seconds)
loading group "union"... done (took 3.775501896 seconds)
loading group "simd"... done (took 3.226858237 seconds)
loading group "random"... done (took 3.921847386 seconds)
loading group "inference"... done (took 2.63738181 seconds)
loading group "problem"... done (took 1.08840779 seconds)
loading group "array"... done (took 4.911679222 seconds)
loading group "misc"... done (took 1.06065704 seconds)
loading group "sort"... done (took 0.759106625 seconds)
loading group "collection"... done (took 6.533334915 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/4) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.404061639 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.024666455 seconds)
    (2/2) benchmarking "String"...
    done (took 0.024499998 seconds)
  done (took 0.744847329 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.022006585 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.021263019 seconds)
    (3/3) benchmarking "different"...
    done (took 0.021338992 seconds)
  done (took 0.73557981 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.021304236 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.156058896 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021022599 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.022031576 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021894294 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021109428 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.021058009 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.021052359 seconds)
  done (took 0.955376431 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.073894377 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.023951723 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020933835 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.02087514 seconds)
  done (took 0.812465912 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.021540911 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.0392384 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.020034066 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019984125 seconds)
  done (took 0.773135745 seconds)
done (took 5.207174149 seconds)
(2/4) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.260914351 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.011134706 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.168970565 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.021913473 seconds)
  done (took 1.914810491 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.306417118 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.049981287 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.041150107 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.028804947 seconds)
  done (took 1.103839903 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.020684015 seconds)
    (2/2) benchmarking "read"...
    done (took 0.025329439 seconds)
  done (took 0.722594305 seconds)
done (took 4.67379431 seconds)
(3/4) benchmarking "problem"...
  (1/1) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 5.725894746 seconds)
  done (took 6.398812441 seconds)
done (took 7.07530739 seconds)
(4/4) benchmarking "dates"...
  (1/1) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.161580419 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.020169086 seconds)
  done (took 0.859227639 seconds)
done (took 1.589330144 seconds)
RUNNING BENCHMARKS...
(1/4) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 5.769692338 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.794833379 seconds)
    (2/2) benchmarking "String"...
    done (took 0.881953023 seconds)
  done (took 2.364278845 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.977572713 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.715734915 seconds)
    (3/3) benchmarking "different"...
    done (took 0.731236837 seconds)
  done (took 3.10152952 seconds)
  (4/7) benchmarking "replace"...
  done (took 1.732184381 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 3.72385551 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.912695974 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 5.62188778 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 5.128989989 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 1.765131675 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 3.105800373 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.987811658 seconds)
  done (took 23.925148633 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 2.790732546 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.955697503 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 1.87125506 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 1.862398364 seconds)
  done (took 8.174113052 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.983582358 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.867835281 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.871242251 seconds)
    (4/4) benchmarking "different"...
    done (took 0.765588395 seconds)
  done (took 4.172321027 seconds)
done (took 49.979541147 seconds)
(2/4) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 5.6948143 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 5.500405206 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 5.640239702 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 5.732259828 seconds)
  done (took 17.550142125 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 5.679884753 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 1.808208886 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 5.684001262 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 2.020014021 seconds)
  done (took 15.869844247 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.864879444 seconds)
    (2/2) benchmarking "read"...
    done (took 0.961777768 seconds)
  done (took 2.509114183 seconds)
done (took 42.301791134 seconds)
(3/4) benchmarking "problem"...
  (1/1) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.066421846 seconds)
  done (took 7.743428584 seconds)
done (took 8.421379062 seconds)
(4/4) benchmarking "dates"...
  (1/1) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 1.677522784 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.882570399 seconds)
  done (took 4.239580142 seconds)
done (took 4.920668483 seconds)
SAVING RESULT...
DONE!
