cset: moving following pidspec: 3798196
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.747454597 seconds)
loading group "shootout"... done (took 0.812486022 seconds)
loading group "string"... done (took 0.225582892 seconds)
loading group "linalg"... done (took 3.123663768 seconds)
loading group "parallel"... done (took 0.02110616 seconds)
loading group "find"... done (took 1.160897513 seconds)
loading group "tuple"... done (took 0.691769761 seconds)
loading group "union"... done (took 3.048653791 seconds)
loading group "dates"... done (took 0.152639758 seconds)
loading group "micro"... done (took 0.056193764 seconds)
loading group "simd"... done (took 0.359382341 seconds)
loading group "io"... done (took 1.380552744 seconds)
loading group "random"... done (took 2.35295331 seconds)
loading group "problem"... done (took 1.19063393 seconds)
loading group "array"... done (took 4.590598138 seconds)
loading group "misc"... done (took 0.962262532 seconds)
loading group "scalar"... done (took 3.424343986 seconds)
loading group "sort"... done (took 0.303280717 seconds)
loading group "sparse"... done (took 3.511847442 seconds)
loading group "collection"... done (took 5.944984522 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.544936918 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.072207424 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.253211483 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.076340942 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.278760651 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.081340988 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.08803253 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.069817627 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.014699404 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.161889751 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.211438743 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.391527564 seconds)
done (took 5.129287319 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.26373211 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.033279871 seconds)
    (2/2) benchmarking "String"...
    done (took 0.123094189 seconds)
  done (took 0.76130634 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.136819501 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015231524 seconds)
    (3/3) benchmarking "different"...
    done (took 0.022080128 seconds)
  done (took 0.771472756 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020087614 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.098266819 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021224894 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.02178372 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021653975 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.021079063 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020882338 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020910711 seconds)
  done (took 0.825892044 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028256635 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022787338 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.020707392 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.022095025 seconds)
  done (took 0.693280059 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.02222678 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.081940803 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019695073 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019539384 seconds)
  done (took 0.73815305 seconds)
done (took 4.688136098 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.194389319 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.779409485 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.816591262 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.178645738 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.348354631 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.299722301 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.076786172 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.244523758 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.146900921 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.033662049 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.178834262 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.036238482 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.612840299 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.447672674 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.027351313 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.145691191 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.582040782 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.03945777 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.070159567 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.201810673 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.037473411 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.039023312 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.04412828 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.026455159 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.116532492 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.134887752 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.584732107 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.066264641 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.024320957 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049827725 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.027236956 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.117848961 seconds)
  done (took 9.367164869 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.148407071 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.142702107 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.023342128 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.059131256 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.049546635 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.024469909 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029868848 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022678456 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.042435472 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.087630706 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.045282557 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.156180124 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.02103071 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.023991449 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.140350637 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.116242033 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.037613435 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.036791016 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.022264428 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.036621245 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.049213296 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.034210141 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.0329676 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.032552065 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.067743849 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.089616976 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.04281254 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.063774497 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.022186924 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.034797816 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.051228139 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.06341192 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022545489 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020920707 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.064776816 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.040044556 seconds)
  done (took 2.625797703 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.990452058 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.050111664 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.136496885 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.12764368 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.063026681 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.050150581 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.178158799 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.077786506 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.055280952 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023668331 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.206317585 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.640957328 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.167000627 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.029291914 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.028413841 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.180196332 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.880489762 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.932177275 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023292208 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.023453358 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.133448236 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025894189 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.177066134 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.023538779 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.136998653 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.81651358 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025628448 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024142547 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.052463905 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.139723572 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.020618431 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.096683067 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.049827869 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.024816884 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.556048822 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.02156305 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.019487503 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.041509869 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050003845 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.02176015 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.022926354 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.033521647 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.021028976 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073501811 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.035254211 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.524430386 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.025009053 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.688335277 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.80329212 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.030601657 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.027589712 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.057922775 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.019637581 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023264436 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.597424378 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.110886973 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.022504831 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.247846868 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.0252057 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.024345561 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024352155 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.05763364 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.023248277 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.024390695 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.026705579 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.041480554 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.971982472 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.032731684 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.04245756 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.021741503 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.022667082 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.020971302 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.388715117 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.029396655 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.025178898 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.020648703 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.027050614 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022825786 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022280291 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.067689392 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.04962654 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.047120801 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.026024208 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.023248429 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.022307181 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.527171848 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.048414579 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024897253 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.024094957 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.483905162 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020125614 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022037208 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023638573 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.043678115 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022564608 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019418027 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.057832282 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024322136 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.125183272 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.518805278 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023954708 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019720623 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.49616802 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.023932132 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.054130337 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.076091705 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022170356 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.05973822 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022564243 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019813471 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026189069 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.0197199 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.02404507 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020904048 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.021763762 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020635212 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.022578129 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023684731 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.022463738 seconds)
  done (took 19.627796247 seconds)
done (took 33.213023893 seconds)
(4/20) benchmarking "parallel"...
done (took 0.745165407 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.210748817 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.048664099 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.019212353 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.16179407 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.043587273 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.13387907 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.175423446 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.127215735 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.045761093 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.04523007 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.045471918 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.181174499 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.192761841 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.04636578 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.119460639 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.192932431 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.046888657 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.019695395 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.045837052 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.046592092 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.046565437 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.019662181 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.045843308 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.046692932 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.118443142 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.047159815 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.019622752 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.121994748 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.048147036 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.122786907 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.047741401 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.046789289 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.047558031 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.121280103 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.049671291 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.122112054 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.019965093 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.049166284 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.04917118 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.050089385 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.049800011 seconds)
  done (took 3.948752302 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.0452355 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037079911 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039648254 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017566158 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.027145894 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037212549 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.01753946 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036622701 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040793154 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037122407 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.036986177 seconds)
  done (took 1.118582561 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.039890758 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.038154357 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.039547363 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017573349 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.02874835 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037992308 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.01750452 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.037426886 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.040298171 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037961492 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037960741 seconds)
  done (took 1.061185228 seconds)
done (took 6.793421291 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.152459974 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.11989871 seconds)
  done (took 0.948919325 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.532945128 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.218457539 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.1292657 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.254802697 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.12243183 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.154707746 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 4.278959185 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.160078568 seconds)
  done (took 6.582530122 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.073857384 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.140234364 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.023752195 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.022311831 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.022483617 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.022462223 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.024228654 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.022875844 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.022134857 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.024680499 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.024325027 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.022361718 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.023014512 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.024453525 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022391693 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022606457 seconds)
  done (took 1.362986007 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.028459578 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.025263138 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.026312005 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.01678317 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.027323325 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025877965 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.02691479 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.027181078 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.026537551 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.026642463 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.024345217 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.026832255 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025978518 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024641502 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.02708166 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016812313 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.027016191 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026626501 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.028544157 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.027568318 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.026472134 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.024162331 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.028126488 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.025435926 seconds)
  done (took 1.318054367 seconds)
done (took 10.900532302 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.140173021 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.029316992 seconds)
  done (took 0.856401109 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.126232945 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.124678886 seconds)
  done (took 0.94736445 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.028537512 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015607382 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.031771943 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023673322 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015681211 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.015597921 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.030994302 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.015851034 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015651591 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015753974 seconds)
  done (took 0.909246884 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.019126885 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022791887 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.02077457 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018939082 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.02054141 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.016606442 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018743863 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.016975948 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022591103 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.016022829 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019792162 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.037432199 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.019332359 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.037804036 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.019179706 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019815418 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.021244933 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.01896521 seconds)
  done (took 1.086466135 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017457143 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016512611 seconds)
  done (took 0.73462043 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.020355045 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016667104 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018368137 seconds)
    (4/7) benchmarking "year"...
    done (took 0.018174516 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.016196418 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015639178 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.016100286 seconds)
  done (took 0.820362773 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.386598988 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.085898324 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.311930905 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.023956323 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.037653733 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.22509954 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.019208903 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023655881 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023516437 seconds)
  done (took 1.834996479 seconds)
done (took 7.889196528 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.040214107 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.141999843 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.145992815 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.44883708 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.033431122 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.022159365 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.051624498 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.227700509 seconds)
done (took 1.822181288 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.482170827 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.258326209 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.256225016 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.023611314 seconds)
  done (took 2.24543659 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.311614764 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.139067378 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.02983617 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.022199641 seconds)
  done (took 1.223991548 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021763672 seconds)
    (2/2) benchmarking "read"...
    done (took 0.026751069 seconds)
  done (took 0.763633678 seconds)
done (took 5.430127314 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030025323 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016538054 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.022895686 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.018047206 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017675751 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.017221119 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.017142471 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.017915579 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.016130074 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.018200168 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.018183452 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.018194356 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017887543 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017785992 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017323779 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018169498 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.016221525 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017845506 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017849122 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017830138 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.016169091 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018183045 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017387253 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017828696 seconds)
  done (took 1.141069206 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035682869 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.020578981 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.021196943 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.020991159 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021511855 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.02104169 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.021032033 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.020125156 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.02099613 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.019817199 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02153903 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021615154 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.019998879 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.021725686 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020047827 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.021704088 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.021349258 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020383199 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020090731 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021719088 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.02114183 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020369187 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.021629712 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.021194707 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.021614531 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021614902 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.020080913 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020485584 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.021170986 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021532576 seconds)
  done (took 1.358361638 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022612102 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.014786682 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.015027455 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024909464 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.01467123 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.014847664 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.015276414 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014436459 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.014785906 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015654539 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.015119697 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014632199 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015390298 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.014570465 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014572482 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.015158038 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019665453 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.03514944 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.014957957 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014681206 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019274392 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.014955492 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014691221 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.014765154 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.015223853 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014811633 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.014553421 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.015086778 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.014705697 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015359004 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014690422 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.019224338 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.020714772 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.014708433 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024874519 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.019931233 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.014702346 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.021245331 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015625961 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014593422 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014534403 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014572003 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014721832 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.014688735 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.025045325 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.014915829 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015900894 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.015261079 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.014903118 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014553928 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014655037 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016156028 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020395318 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.016002891 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014654681 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.015965145 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014698428 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015453539 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014854804 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014722311 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.01470374 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018701522 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016186669 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015490079 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.035818741 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.016130516 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.025178033 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.014858882 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015274495 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.018868814 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015370759 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.034248339 seconds)
  done (took 1.947310674 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.027493529 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025486036 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.033555876 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.024439519 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018226933 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015539789 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018562419 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015550318 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024843523 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019281897 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015679314 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018819949 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024779517 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.019248861 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016727197 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.024832233 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019295642 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018506034 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015682039 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019193213 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016760837 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018850521 seconds)
  done (took 1.171702046 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.100135987 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020887101 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.062737495 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.024123361 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022860423 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.024297218 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020937516 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020979075 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021113501 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021624973 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021608797 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021141297 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023115539 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021529313 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.02156186 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021328009 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.021093322 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021325609 seconds)
  done (took 1.22887066 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.033409266 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020782518 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.047912143 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020514138 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020567981 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.020220037 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.02406693 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.024111514 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.020325998 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020845827 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.024573614 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020470751 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020452075 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020730826 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020442889 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.020754166 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.020413372 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020712549 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.024405515 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.024260835 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.024256449 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.024339363 seconds)
  done (took 1.236895388 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034772591 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019895845 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.035811995 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.021311777 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.015135179 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.015129333 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.021389407 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.02001184 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.021190802 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.01950595 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019982148 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.015101705 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.022150769 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020156641 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.022323563 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020201147 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019778129 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020144215 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019716159 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.01524529 seconds)
  done (took 1.136876098 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.13030443 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.01727807 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.017089021 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021449347 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.016937576 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.016897236 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021510478 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.017188904 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.017096865 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.040856521 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.01712633 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017122897 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021650014 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019950711 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.017115413 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021672164 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021656566 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021689699 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017196842 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.017183622 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.040864141 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017354078 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.022190036 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.017365618 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017339345 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017360835 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017332086 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020341546 seconds)
  done (took 1.396491598 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.03736779 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.017581441 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.015386636 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.019328126 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.019204204 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.03130299 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.019201489 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.019041526 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.01746187 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.015438585 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.017616327 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.017606054 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017574399 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.027731693 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017502096 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017555891 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.02773983 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.019416811 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.031680824 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.031452568 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.017616459 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.027590362 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.017604139 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.015395637 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.031639632 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.017654082 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019702094 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.020539937 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017888988 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.01564511 seconds)
  done (took 1.360712745 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.029303191 seconds)
    (2/2) benchmarking "in"...
    done (took 0.025953862 seconds)
  done (took 0.774953579 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.018229672 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.033064432 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014592629 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027634062 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023412715 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018786825 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023460813 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023276756 seconds)
  done (took 0.895779703 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.124467748 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.147543274 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.016560397 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.016732782 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.121498902 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.083110286 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.132779992 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.028314212 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.0302444 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019496626 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016631583 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.133189141 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.016201511 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029953138 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017971179 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.026140075 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023775203 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.034500328 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029517799 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015316211 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.029189031 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.017058751 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.016584548 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.017209867 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.017407468 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.023265393 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.032363114 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028856663 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.024783168 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014621586 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.035360476 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015516374 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.016180676 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024891254 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.124580591 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015711288 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.053485486 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015657541 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.020071905 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015359452 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027816327 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.036620952 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029899209 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.033878474 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016998294 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.017469444 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015441916 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.017168487 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019663627 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024928561 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015663382 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023012373 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.015275811 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.016984467 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.026238023 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.015746277 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.02043254 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.024989624 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.029409921 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.026217371 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.028060483 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.031327777 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024537389 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.024294079 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.0162511 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.035619665 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.017284209 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.029048102 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030708027 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016825241 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.029153825 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015953551 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014980515 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015722465 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.050114408 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.017056869 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016547738 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015681892 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.01591023 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.017074182 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.025385042 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020564509 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023055391 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018806104 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031875044 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.024970773 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015444109 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.023133695 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.034198057 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019799494 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.0157341 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.033030729 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019690772 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015448705 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.033921542 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.02620193 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017215883 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.016398178 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019674551 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.029391147 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.017057949 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.01474929 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.024259919 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.017223516 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.125511117 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.021147874 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024447603 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015907494 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.02667165 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.022789005 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.017672216 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.015143342 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.021054569 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016975873 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.015150564 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025765761 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.016143479 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.031632353 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.023191651 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.030963351 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.031459145 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.026897841 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032580734 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.015949959 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.015146364 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.034952528 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025636061 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017308722 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034802467 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.015919069 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026811728 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.016110528 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.01765098 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025644413 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015453693 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017858009 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.016262082 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.022765221 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017653358 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017845606 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.022350526 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024724639 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028786285 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.0172122 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.025051238 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016359586 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.032492506 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.026194212 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.021225632 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.01986338 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.017094118 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.028727183 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.023255881 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025571916 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.016080021 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.017054789 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.016349331 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.027626601 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026165258 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.01813667 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.026411541 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.021364638 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.017102221 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.016343488 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.017353181 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.020308959 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019861896 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.01686135 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024168732 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.025256002 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.03106983 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.024249874 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025515314 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.015617697 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.016188696 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.018129956 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.016150176 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.021186596 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025789 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.032434491 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.02849613 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.038193414 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016500344 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.026244258 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.018123982 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.034057456 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.029929908 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.017353316 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.021633447 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015447812 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.018253088 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.026031991 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028251579 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.03114007 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031702374 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.021470317 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.021323496 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.016264638 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.032087271 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016814511 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.025063434 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025876113 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.023232229 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.016283461 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.018363705 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025739606 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021363132 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.01746634 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032704297 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.024761632 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016331531 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.031128064 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016662306 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027522819 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016287608 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.0202756 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.022076126 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018572021 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.026340815 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.03227184 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015492267 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.016814444 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032646902 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018402613 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018270355 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024626142 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.032087963 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021374927 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024411261 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027400099 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.027090781 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.02130407 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.172482993 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.01641532 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.024852529 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.018198536 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.027157582 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.015359444 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033661761 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.014696321 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.030842004 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.01605898 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.026404215 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.015693501 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.024822908 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.015979223 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.032412382 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.016627443 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.01591393 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.026883643 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.014552178 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.024520056 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.015114372 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.020924865 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.022317143 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.024498169 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.01669831 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024632645 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.016559754 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024323361 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.02042576 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.023878342 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.024483051 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.020200731 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.014979094 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.023553373 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025917318 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.023316753 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.016452005 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.016449754 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.0155238 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024465539 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016425057 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.0160409 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023412662 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.02038748 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.021385275 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016454746 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016588081 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016463241 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023620227 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024521559 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033112812 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.02380969 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.02264027 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.02432657 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.015053189 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030855356 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.015087832 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022635134 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014375257 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.021406467 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.02422826 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015238765 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033995529 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016415098 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022937355 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.02695896 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023680224 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.01927906 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.032817085 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017899044 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023447988 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.023030316 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.020066818 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.022222854 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016602377 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023529465 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024537269 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025569868 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015744845 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.02259365 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.024039834 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016526331 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.022950508 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016443161 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023487984 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.01672738 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014599023 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.020358235 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.026489456 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020728879 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020910961 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015706393 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014607243 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015701847 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.0226927 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.020610614 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.024176298 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.031046515 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014650467 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.016159743 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.015267238 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019524013 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033807898 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025226463 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.023570058 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.02072685 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014937641 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016923125 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.0170559 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.015620881 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.018605204 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.014928373 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.015460726 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.026312209 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.017187729 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.020555507 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015840816 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.016691881 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.025667575 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.019917359 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.015938459 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.022777877 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.015354993 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.021227374 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.015017041 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.017081021 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.020618265 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.015331781 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.019741233 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.026029352 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.032434687 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022749854 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.024600032 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.016517798 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.023613968 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.03130018 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.024072967 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016549001 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.025133024 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.015186385 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.034701093 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.025016365 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.024282866 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025509504 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016569802 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032842832 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020696095 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025902797 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031944075 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017214157 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.025136583 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.016082488 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.032383376 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.021104073 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015974502 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.024909742 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.02403714 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.02253148 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.028172869 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.017016805 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.024856901 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.021603067 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.020036736 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.017918718 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.017811321 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.025021486 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.032806794 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.017476243 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.022479997 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.024378622 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.024620618 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.021105555 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.028577388 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.024340187 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.017094171 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.017830317 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.020097858 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.016891333 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.028584673 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016411585 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.021059773 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.021044569 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.016012568 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.023260584 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032980139 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.02553371 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025874892 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.01621826 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015609887 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.034963793 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.020318442 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.020166119 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.024504088 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.026302875 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.029107551 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025905451 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.033795416 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016800199 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022701427 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028859518 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.017209352 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.016053011 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.020306985 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017990222 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025608675 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.026297496 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.024027341 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.018456263 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023727889 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.030029461 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017830283 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.021393274 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.023123027 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.017193106 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.027038379 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.024379669 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.025002174 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.017933223 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.016282978 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.020085057 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.025234066 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023825858 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.02544147 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.01727922 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.025698899 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.031037985 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023884769 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019943792 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.016132334 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019866725 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025575474 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.023224243 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.016169832 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.02144236 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.02027186 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.026025278 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.026044637 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021289334 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.016219592 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.034153012 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.02515379 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.02559255 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.018076952 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.01841544 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016718107 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.016260172 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.028070998 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.016303662 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.018245097 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021500764 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.018330089 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.035133354 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024702487 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032767299 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017463675 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.021367327 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016276336 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.026253111 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021420327 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016360908 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.027113414 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.015760867 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.032397715 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.028782884 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.024632782 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016333623 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021914875 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.025295373 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.032164693 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026327198 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025542027 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.020203706 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026620448 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.166066019 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.026798466 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.015280023 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.014670357 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.02538939 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024104022 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.027444371 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.01523876 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.025377905 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.016760358 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.023669099 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.023861971 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.016631635 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.01665433 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.016585076 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024727164 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.020339629 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.024751667 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.020559155 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.032198952 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.015956215 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.026224075 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.024319943 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.02599186 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.029193783 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.027072709 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.023579386 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.015481898 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022594055 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.023584648 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.016012099 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.020725446 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.017905505 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.036879375 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.016619449 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.016506288 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.029017294 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.021833997 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.015126603 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.021644099 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020320136 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.025093797 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.015817725 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.025434431 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.019691028 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.015770606 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020230021 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.02023101 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014339526 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.014927718 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.015305737 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.02470508 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.019933318 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.015341908 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.03387619 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016229029 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.023713968 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025858845 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.02213495 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.01632924 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014291067 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.015779578 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028436541 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030493433 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019172238 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023720071 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.016515022 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.024253002 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014407805 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.023817221 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.022983442 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023596617 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.014940013 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015250952 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.029947182 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030567074 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020209925 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.031492721 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.024047068 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016419033 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036650648 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.024110842 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.015908521 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025859456 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016920907 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.01468076 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014470743 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016465586 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026429389 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015131908 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.017405297 seconds)
  done (took 15.032924606 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.058646353 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.016239554 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.014949687 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.014951745 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021998667 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016140347 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.015000408 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.01606099 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.016007636 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017020198 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.015057031 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015086004 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.02065384 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.030059376 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022809299 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018639218 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.015120244 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.016232373 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.015165488 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.016269021 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.021060874 seconds)
  done (took 1.18601643 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.019569637 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.01944518 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.01880772 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.019004901 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.018201054 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.015182648 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.01859783 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015203166 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018878304 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015492615 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.019079165 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01542267 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015754497 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015736624 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015697778 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016836468 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.019205255 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018450323 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.015358152 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.018786145 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016745122 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018824409 seconds)
  done (took 1.140449345 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.017901743 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.015756229 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023856974 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.01470808 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014729676 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017390809 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014604887 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019476078 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.019449309 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019479289 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023652625 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.015373053 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.01452606 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020832782 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014436687 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015221823 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.058782985 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015525508 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015572923 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.014832023 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.017052889 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.023948259 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.014837561 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.015003699 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.019546143 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017513685 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.014812857 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.017159462 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015321757 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019597608 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015519459 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.01459416 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023719754 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.022992964 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019558741 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019584992 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.016071779 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015489586 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.014785419 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014809823 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.023162849 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.015976615 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.015101996 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015955521 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023867619 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.015009789 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014736598 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.024052981 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.014838236 seconds)
  done (took 1.657147044 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.028195312 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.067738046 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.021090505 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.050721779 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.026607459 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.020374211 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.020956358 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.05376248 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.016137788 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016692319 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.027881632 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.027988127 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017650017 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.018833295 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.020970575 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017473502 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.018178418 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016889321 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019883274 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017236869 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.019956171 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.022319549 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.027191814 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.027764866 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018608909 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.017090443 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.01740209 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018984058 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.027507072 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.020601773 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.019117626 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019618559 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.027878151 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.022877362 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017407753 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017638142 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.02843777 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.01804674 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.017772203 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.016327555 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017565558 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.019023691 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.022436064 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.028598531 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017996068 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.022867953 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.018006051 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.01601455 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.028168403 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017827407 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.021432195 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.029011538 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018923781 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.018211705 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.019289105 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.028233498 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.018014247 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016849108 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.018203827 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.027872578 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.016401759 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018791243 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.028659995 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017520302 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020964932 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.028729373 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.022932488 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.01879947 seconds)
  done (took 2.424461937 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.025187121 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.050231344 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.028782198 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.02874093 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.024386877 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.02436956 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.024403177 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.024601904 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.024583903 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.027445535 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024739984 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.163915643 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021829775 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026386012 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024885408 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024779915 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.02473437 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024776674 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.025121314 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.025008218 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.025049498 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029612387 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.025056342 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029622826 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.029503034 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021757961 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024944299 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024953198 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029792445 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.024923306 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.029503849 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.025045576 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.025043144 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.030080494 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.029638476 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.025031532 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.015663361 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.024954537 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.025119432 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.024978058 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021804911 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029999976 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.025160382 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.02188908 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.02537295 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.025285415 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.030371181 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.029882709 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.027047356 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.028203489 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.025396902 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.03022144 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.025204218 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.025494177 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.030465416 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.033494969 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.030516842 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.030705109 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025611978 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.03048002 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030519207 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.033722173 seconds)
  done (took 2.577325625 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.030219582 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020751529 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.033431233 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.014759179 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014757128 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.023628737 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014638535 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.01472921 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020606325 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020698006 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.022151592 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023969629 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025767864 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.022208327 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023895695 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.02573668 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023906578 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023917499 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020784645 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023918755 seconds)
  done (took 1.219734133 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.018795883 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020335615 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.015622942 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.030927185 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.01560138 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.022733201 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.015544092 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015515881 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015539378 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01551957 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019915285 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020139476 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015648033 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023567488 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019172757 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.023068729 seconds)
  done (took 1.069454209 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.020071021 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.023951456 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.124696582 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.016128182 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.018048845 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015403294 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.016521763 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.015395145 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.017638421 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.029060348 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.016383116 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018399009 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016417904 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.015090404 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.015678908 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.018350198 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017583843 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.016412118 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016332105 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.125924543 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.024686144 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.017118738 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018563637 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.017102715 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.018226348 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.024578755 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.017900074 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.018255047 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.016462865 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018616014 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.018271989 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.027147071 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.018277138 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.017059226 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015187962 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.016060615 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016531363 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018627959 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018637762 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016553466 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.015415992 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.018287967 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016532844 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016962709 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017727088 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.01863366 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017683172 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.026408146 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016435319 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.01831955 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016550264 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017702827 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016930609 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.027507306 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.018669465 seconds)
  done (took 1.987772757 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.034250852 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020514194 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014775573 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014733479 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.020057053 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.020623978 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.02012496 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020165173 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020683785 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014668267 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020677617 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019737425 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020687419 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.020338605 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020851261 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020404523 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014744358 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020589527 seconds)
  done (took 1.129612025 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.024094091 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.020570964 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.020608343 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016666295 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016627423 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020624784 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.015085606 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.016185092 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.016175458 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016665223 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.016764989 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016368382 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016374832 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016323068 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.020347789 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016733447 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016356683 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015269976 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.016804398 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.015194637 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020809184 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015324987 seconds)
  done (took 1.148401132 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.187350106 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.146124262 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.038746055 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.034475578 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.026496632 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.050945225 seconds)
  done (took 1.247718387 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.051005864 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052447883 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020109838 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.020104774 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024133939 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022583079 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022423609 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02259445 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025499746 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028561226 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022958356 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02612611 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025846798 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027610428 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024448737 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024433525 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02301285 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02312043 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.020386802 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.030363096 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022997929 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026435795 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02330667 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023100736 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023296935 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028025392 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026428671 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029109189 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023123391 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026445751 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024837926 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023173588 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026608385 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029002792 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020492372 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026259095 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02323406 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.030957893 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024847212 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028092817 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020378917 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02490237 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026400441 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026139014 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026803569 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023596567 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026443606 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023502202 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023640536 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.034955489 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025228102 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028318825 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025188458 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027004535 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026786686 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.034885396 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029540195 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028481278 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025263365 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029531096 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028818138 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025521396 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028659823 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.029905656 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025785757 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029132112 seconds)
  done (took 2.525074419 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.059308684 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020541368 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022756034 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028024963 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026976335 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022508744 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02268367 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02293385 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022886112 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.020608725 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.058468822 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023047162 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02749452 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027432 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02300139 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022813413 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.02288419 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0274176 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020652216 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.033797282 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023161452 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027877662 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027875053 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027881625 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.029038929 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024989649 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023295855 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023234512 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023180984 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023227209 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026072089 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023345785 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028094887 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020715231 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.028026006 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023372817 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023146579 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026114038 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023303732 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024929786 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.028005503 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.031003384 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023383183 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023407101 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029531081 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.023547107 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023461786 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.021019827 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023383506 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020952731 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.029452987 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.029366359 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.029346217 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028488565 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023627014 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023611307 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023498208 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.02342003 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023511137 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.025228777 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028426312 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023409623 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.035374814 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023680321 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023702533 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028839835 seconds)
  done (took 2.507785588 seconds)
done (took 51.211448771 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.17532808 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.174738318 seconds)
  done (took 1.103091644 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.136813026 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.13383612 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.15599428 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.02358719 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081811117 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.174176382 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125487466 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.026246323 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023984936 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.026112733 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.023555704 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025777869 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025897937 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023515921 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.086491313 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.026143943 seconds)
  done (took 1.891111308 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.075073607 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.239709839 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.058703875 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022600421 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.105405883 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.028866416 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.024596659 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.02870599 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.028752478 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022879032 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.071782776 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035762193 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.027358454 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.028316329 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.024253911 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.027420028 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.028300807 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.028741261 seconds)
  done (took 1.678595114 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.06897783 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033161481 seconds)
  done (took 0.873517983 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.117208291 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.063526914 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.102360177 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.309816302 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.09532762 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.100064446 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.103284495 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.097321473 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.068293787 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.09493986 seconds)
  done (took 1.920265713 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.061175277 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.057543297 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.2822892 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.055206864 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.03438757 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.029525178 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.02938515 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.031119068 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.029571783 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.02912094 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.07533448 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.02767348 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.024314872 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.072662454 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.050342094 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.060034813 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.023488738 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.030136829 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032402706 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023354087 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.0281802 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.031204785 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.13280857 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.030711182 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.052605693 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.028069738 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.029622629 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028776975 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.028592951 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030691826 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.148849477 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.055171752 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.030680596 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.037236105 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028720802 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.050177775 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024304855 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.051274076 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.027137978 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.02435909 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027701051 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031251735 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024859889 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.03078943 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029981462 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.030183331 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031601607 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023702325 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.029908161 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.027309263 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024562161 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028901846 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.028665628 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029648714 seconds)
  done (took 3.139126731 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.07813909 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.066107039 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.025491457 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.071681905 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.065016957 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.024016566 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.080131986 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.060289087 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078517191 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023601815 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023331692 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023141675 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030873683 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.03482943 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.076133239 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.069431861 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.025271524 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023849346 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.068498179 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.069065529 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022887027 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07995327 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.07115825 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.06810711 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.0226387 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.024079542 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022788374 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023415735 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.031654441 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.031332935 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023274842 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.034084541 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.034952914 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.030605635 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022571521 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022901042 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022824511 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.031573719 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033091705 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032872834 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.029950161 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022544866 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022815726 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023367239 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023898542 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022432764 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033070603 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.030984287 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.032757167 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.02334134 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023410186 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022747356 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023625395 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030443889 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029383049 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.030907456 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.034139511 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023228989 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023273826 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024716166 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.035041941 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.031843419 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.031664433 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024198013 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.032840644 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.023137471 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034165123 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.036972722 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.023168105 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023719816 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023258649 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.02323194 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023604732 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.029980488 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.030138949 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02369785 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023549422 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023026291 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.031961436 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.030385252 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023061993 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.032467937 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.022718165 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023321309 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02366437 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023899409 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.033498402 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.031899312 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023839996 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.023352776 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023360259 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023255563 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022589197 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.032773436 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.0325472 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.032763825 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.034826632 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.024209219 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.035554286 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.033074271 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024336491 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.031899563 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.023828541 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024254377 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.024131521 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031921772 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.031538688 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.033249684 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023863313 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023491391 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.032694031 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034947413 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.024082402 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.032076926 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034400312 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.032117459 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.023218756 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034764932 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023724422 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034837923 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023961766 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.034818905 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.02416437 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.032641876 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024069745 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.023257181 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023900606 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.036154136 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.025154868 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024251178 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024359258 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023963472 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.032554252 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.036866133 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024573542 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.03299585 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.032731709 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.02454003 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.035474076 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.024153487 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.035193792 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024162207 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024390995 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023211102 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.037331556 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.023804388 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024241511 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023908968 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.034777095 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023961229 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034468858 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.031902431 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023528978 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036045739 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.034345166 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.032063484 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.034991022 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.024821668 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.02414525 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023863664 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.024143761 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.035184933 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.037110768 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02507367 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024125219 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.031653897 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.035701608 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023598388 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.032150387 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.031986136 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.032318193 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.024329889 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.024195699 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.174686705 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.033767758 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.029414204 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.031902729 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030183193 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022948117 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.02903266 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031944537 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023004488 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03606493 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022995764 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.032593767 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031930948 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.028425475 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031768408 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.032915788 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.031516208 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.031297989 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.033306947 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022491367 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022784702 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.029166128 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.022720146 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022889468 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.028905544 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023217167 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.02348955 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.035583546 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.02301109 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.032094798 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022418218 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.029892744 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022300394 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023230525 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033796834 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022724897 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023178969 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.029414364 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022790018 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.028883593 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.031855869 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.028784277 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022607051 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.023091422 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.032463828 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.031507825 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022619859 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.022564345 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023144271 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.031455436 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.030899238 seconds)
  done (took 7.80693313 seconds)
done (took 19.193358364 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.15262823 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071380443 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.157685352 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.090332755 seconds)
  done (took 1.241909658 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.056285455 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019273867 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.139736442 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.150779423 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.019539244 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.134113232 seconds)
  done (took 1.308286676 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.211375343 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.13679553 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.140386107 seconds)
  done (took 1.279106694 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.128969927 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.266620686 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.537614913 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.126753005 seconds)
  done (took 1.857572612 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.172019325 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.163636599 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.030843756 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.179509172 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.038092707 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.015717403 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.10188843 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.022233597 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.052220529 seconds)
  done (took 1.6244559 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.095780638 seconds)
done (took 8.197383922 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.179885961 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.138026375 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.032856077 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.026703887 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.131505573 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.130270008 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.144030942 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.029188891 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.12990586 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.298066773 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.161033618 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.047733511 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.155063165 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.043130325 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.257828209 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.031015727 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028614872 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.024193558 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.144259542 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.126886991 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.238826451 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.027874652 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.094136031 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.03021805 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.104901254 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.077940272 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.168328282 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.2897578 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.272773642 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.030282336 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.126629419 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.042356308 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.120549027 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.131553724 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.133247459 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.048606216 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019867591 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.241318143 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.111342776 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.304653341 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.152207402 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.026419904 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.142478079 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.024575332 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.019039474 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.142321034 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.033140627 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.025779946 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.043498604 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.025919515 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.041246614 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.02633138 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.14167568 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.023448701 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.092970809 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.140060268 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.163894752 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.098594324 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.025496834 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.038847534 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.029207518 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.153365905 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.038667957 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.025269356 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.031886657 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.019819218 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.137140542 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.039521498 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.020279471 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.030224526 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.028090109 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.114025757 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.155081274 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.064588899 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.031729214 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.119107245 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.096054055 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.047991132 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.048900678 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.029552894 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.019400011 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.169227065 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.025303976 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.038421089 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.026020323 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.052831918 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019690284 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.035410292 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.15740148 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.151829527 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.087046163 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020705795 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.235473701 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.022027652 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.197358934 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.022489753 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.020008187 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.163908144 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019348954 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.019562684 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029039771 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.027743153 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021108464 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.149980631 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.102939299 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027065218 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.025806184 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.019655537 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.024763981 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.020395499 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.019745094 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.019523877 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.093921487 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.034630715 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.018758304 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.107786417 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.12556252 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030326849 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.037393079 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.08347614 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.022211197 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.027832581 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.026132418 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.122159043 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027181931 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.132026674 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.020627156 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.041921865 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.117994571 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.092980484 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.105797042 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019306136 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.153535749 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.029233216 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.018799622 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.026165983 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.0467825 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.028667859 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.034510891 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.027192186 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.15417694 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.02978332 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.024600501 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.117375671 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.018565914 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.110488243 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.093698813 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.126874287 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.024342404 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029436841 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.092167481 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.042711985 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.048089532 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.041972373 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.023474202 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019307189 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019134161 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.034015746 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018564123 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019506637 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033686011 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.025545578 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.019117404 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.23837355 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.029368638 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023666307 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.2605223 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031563296 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.099288301 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.041370878 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.019958669 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.10459659 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.02154613 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.039983865 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.081334042 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.020024491 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.095476474 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.020033412 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019678422 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.027046269 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.021323002 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.028545269 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.032939102 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.020213038 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.033713365 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.027238557 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.01977089 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.104836008 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021532752 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.168168277 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.104149404 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.11600114 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.020071512 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.03801942 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.019514805 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.133869287 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.019883978 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.067665371 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.115418231 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.036188936 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.039986208 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.020821997 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.093870046 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.035120263 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.019541614 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.101004824 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.128598914 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.098823348 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.027031706 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.243629511 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.02863832 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.020277848 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.027014122 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.027890699 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.020442954 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.095763024 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.024138376 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.019084884 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.019436398 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.021340872 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.018743126 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.045549888 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.018925505 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.027060558 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.019368137 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.022038196 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021401507 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.019084472 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.02751172 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.096572884 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.129429449 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.025491933 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.039693195 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.032626649 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.031040224 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.067157611 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.026323535 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.141522282 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.01922878 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.029107722 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.042093327 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.019383747 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.024657078 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.019843613 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.039147094 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.022974211 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.021386204 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.028309468 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.020207432 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.020398176 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.0200297 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.020146531 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.028150428 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.021511695 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.019433425 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.019464614 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.01998374 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.024408193 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.025045679 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.030560359 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.039895234 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.462212357 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.022330287 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.022284979 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.020214873 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.020103997 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.020480924 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.021728913 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019987498 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.021930078 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.020312079 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.019646459 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.0493872 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.025180423 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.020868821 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.042805833 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.02013696 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.029455419 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.128818457 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.037054416 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.025025804 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.019474211 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.270195769 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.111304792 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.043230735 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.041486841 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.020558674 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.195568071 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.022313687 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.020226275 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.018989644 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.046874179 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.024282249 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.020073268 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.018961126 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.019217593 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.066654609 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.027505425 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.019129228 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.027462001 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019232752 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.019547315 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.046971669 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.02056592 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.019277835 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.03853235 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032118138 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.096660655 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.030782746 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.022176232 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.069416362 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.018712459 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019336398 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.019734873 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.111097217 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.032007198 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.020446584 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019250945 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026371122 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.027811818 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070953935 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.024983825 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022070153 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.026930689 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018488078 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.0196898 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044515325 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.047280585 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.020279923 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.022771222 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019055368 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.019677349 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.092359812 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.026742854 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.023647519 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.101516582 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.02112215 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.02682196 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.01842487 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.452328245 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.023840181 seconds)
  done (took 21.927654494 seconds)
done (took 22.735680471 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.163305073 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.033529595 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.032722986 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.028193459 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031942608 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.032030139 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.033270126 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.028919868 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.031718922 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.031304966 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.146180283 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.019169998 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.026838685 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.034304639 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.027977857 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.035224676 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.03172065 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.034635684 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.019941867 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.035018346 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.030092567 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.032552419 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.028213313 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.03446529 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.019993196 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.02804709 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.155152504 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.038344627 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.023120358 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.029273271 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.02719812 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.033333635 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.027250569 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.026859972 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.029077808 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.024877944 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.029583475 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.025967312 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.156318114 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.025155657 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.020110312 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.032532705 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026736671 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027981216 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.028213964 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031587238 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024881852 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.033332884 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019313009 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.032490456 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.156113292 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.024382442 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.023139265 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.028115929 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.024906525 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.029065707 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.022821253 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.031322822 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024693047 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.031744329 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027620218 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.0275664 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019463833 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.028059472 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026804422 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.027569599 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018731705 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024347309 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019514584 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019451462 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.018800062 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.028164329 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026289183 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024360482 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.018819579 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019378477 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.018951536 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.03190855 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.026677455 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.028417382 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.01994431 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.025113762 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024555439 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.02001927 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024406257 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.031511263 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.018984241 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.020009614 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.018946257 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.031064202 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.026085795 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019486292 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.031389225 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024183202 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.02394671 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019480494 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.018943647 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024002356 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027540681 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019493739 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018534614 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024174908 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024599106 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.028267464 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019904335 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024050913 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.02388583 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018576213 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.028280717 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026659212 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028565379 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.032453051 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.02824735 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.030746615 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.019939495 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018519572 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.029205712 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019817858 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024308459 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027346636 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024759603 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027413882 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.019980034 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.019008909 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024177608 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025362045 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019822484 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.019994011 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019920858 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028524717 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026932987 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018699464 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.01958238 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.028480115 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.028359195 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.019083353 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.018912572 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.028341553 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.02005849 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.025541821 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.02492928 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.028465901 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.019367342 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019970875 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.01887926 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.019266958 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.019018057 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.024856272 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.024369219 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.02013392 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.028436273 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026862099 seconds)
done (took 5.460991522 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.034809317 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.063472768 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.175726417 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.138596929 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.033254088 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.020979504 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.024562052 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.040285698 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.023343609 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.045363575 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.045100082 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041692076 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.162280282 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.018706101 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019795566 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.02053701 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018228948 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.032048287 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.143939819 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.043802379 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.062522827 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019596539 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.036485595 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.040003887 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.032995765 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.039030014 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.021145968 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020768375 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022667674 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.037650098 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.045985523 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.019644113 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.020888561 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.039624873 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.036345431 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.029107821 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020728789 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.027092748 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020788365 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.019814436 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.021808625 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.038616624 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.027103389 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.027386359 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.021020433 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.02043715 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020296887 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.028101316 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.034431096 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.026342664 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.032750162 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.037134945 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.021898013 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020369102 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018645533 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.027794103 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.020330088 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.0204646 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020662054 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019555812 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.02066084 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022712907 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.02589575 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.030697739 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.024082109 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.027678096 seconds)
  done (took 3.28259639 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.038642285 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.04877647 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.033923184 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.034270906 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019830081 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.020385432 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.020203064 seconds)
  done (took 1.11453151 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067420456 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.135607481 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.144248315 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.144416745 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.155241359 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.142283072 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.032874294 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.049671771 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.019542509 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.156061136 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.152472275 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.148043377 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.024112901 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.032911739 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.052957386 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.150695052 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.033266894 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.027202375 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.142464174 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.148697439 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.025204097 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.051119978 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.03223191 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.021243766 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.145903426 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.139178551 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.023872579 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.021297982 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.023080334 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.02039503 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020332379 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.043394637 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.138905081 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.035606905 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021422321 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.019440658 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.136365101 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021652436 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.139416679 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.028214857 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.139614452 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022978817 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.023134227 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020753571 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.021884875 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.143143857 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.021787876 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.02057605 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.020217982 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.141455074 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.020077273 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.140030796 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.023440265 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025953786 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027689067 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.027025072 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027385628 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.021003877 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.143108115 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.030576552 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.022279743 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.151303878 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.150700502 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.140605599 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.151762341 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.029566018 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.141430372 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.14008937 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.020603421 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.028581373 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.021161778 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.15227549 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.024744056 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.023389436 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.026062051 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.028059975 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.159035294 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.159384226 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.159748569 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.035643553 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.023706235 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.021126458 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.156882758 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.160449161 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026880493 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021075202 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.022024436 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.037264701 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.046341268 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.023025211 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.02578911 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020999299 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.031177734 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.023474815 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.023546795 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.152878598 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.021414832 seconds)
  done (took 7.617983016 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.028739032 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.023072399 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021607746 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.021510345 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021710275 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.021495271 seconds)
  done (took 1.132329851 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.048339817 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.021653059 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.033385656 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.021411589 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.043190141 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.140377899 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.14064976 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022785576 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.03730003 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.033116217 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.141115989 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.145326985 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.143539677 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.022342321 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.141210858 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.032845422 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.14266014 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.026211137 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.032219115 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022708563 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.034976235 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.022299335 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022492126 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.151466283 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.023454418 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.032554721 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.030523857 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.032479061 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.031859575 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.022536243 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.022390419 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.023127284 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.028190457 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022515108 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.144199039 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.028556963 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.021750793 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.025296198 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023409569 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.023049893 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.147527325 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022994571 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.026338219 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.025350119 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022619333 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.028275212 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.025346875 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.025438699 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.145240496 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.025779189 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.025382942 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.022130582 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.023192544 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.025297822 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.028432337 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022668104 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.025464782 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.145912272 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.022644504 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.028548934 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.021900966 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.023266753 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022678206 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.023170872 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.026658645 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.025311533 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.028542473 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022750276 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022828338 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.02189542 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.025606654 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.021934441 seconds)
  done (took 4.22148023 seconds)
done (took 18.272297696 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.505970741 seconds)
  done (took 1.412238165 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 1.017074092 seconds)
  done (took 1.954962019 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.052058088 seconds)
  done (took 0.986475278 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.28476642 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.397545057 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.722873359 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.091326403 seconds)
  done (took 2.416000955 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.850571378 seconds)
  done (took 1.793751333 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.218479001 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.1802396 seconds)
  done (took 1.369134464 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.498540532 seconds)
  done (took 1.431194537 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.311344311 seconds)
  done (took 2.253481667 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.18932066 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.129693379 seconds)
  done (took 1.257877144 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.59632137 seconds)
  done (took 1.532535741 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.531194664 seconds)
  done (took 5.468988277 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.196041266 seconds)
  done (took 1.194889085 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.196235588 seconds)
  done (took 1.136470539 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.706428026 seconds)
  done (took 1.643623068 seconds)
done (took 26.795935051 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.043255639 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.03901698 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.038749472 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.03417733 seconds)
  done (took 1.082259005 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.030108286 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.024247058 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026614445 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.027088773 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024579919 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.026277595 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.026668473 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.02299634 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.024371623 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.023518371 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.021895305 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.023474431 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.025936599 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.023023065 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025512961 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.026967419 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.023613106 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.024008009 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025533322 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.023126598 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.026142231 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.023544124 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.02352738 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.025070244 seconds)
  done (took 1.540032603 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033681231 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025572238 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028596927 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.024386914 seconds)
  done (took 1.054882482 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.032230785 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.030151437 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.038544401 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.043342507 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.029596052 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.030878142 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.03711145 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.037016622 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.043331793 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039703989 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.021218342 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.020957143 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.020169488 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038855501 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.036282177 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015709023 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.017150993 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030521648 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.02955457 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.032366639 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.023165099 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.018912167 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029595705 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.030336858 seconds)
  done (took 1.666275242 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.037493297 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.019091946 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.035295641 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.044162331 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.045375766 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.018822681 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.032399512 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.045269252 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.081469031 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018912083 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.024918003 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.018799719 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.057541861 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.018897058 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.03409042 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.063871591 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.066724277 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.022770961 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051668127 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.019028252 seconds)
  done (took 1.706513339 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.028049396 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.024004759 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.023749777 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.01907797 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029823674 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.026244594 seconds)
  done (took 1.100062737 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023972826 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021932524 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.021058461 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025972807 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.021681921 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021586963 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020809285 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019632035 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019544021 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020280041 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020301217 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020720596 seconds)
  done (took 1.203383411 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.170435746 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.026134103 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.023844546 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019646137 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021320634 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020265193 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034338713 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.022112001 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037336409 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020281728 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020486498 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022516172 seconds)
  done (took 1.385306682 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061003336 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.065461447 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.098983324 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069651392 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068908457 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049550294 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.196576463 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.032290718 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.118820841 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091970406 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070532011 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.045257642 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039832794 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.02314537 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054772999 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074095869 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091963323 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.026499848 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068293405 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.239498098 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089053498 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.092255397 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104475094 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071947776 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.047592778 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104760982 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050941458 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.058619328 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.078438153 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.083915554 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07507735 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.053036715 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024948562 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024606544 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107222671 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.062880494 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076234462 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047331547 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.060304958 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042962884 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063593831 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.02340746 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.036302501 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.066719452 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041057325 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08998745 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047739866 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071886253 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035890144 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098968131 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088187392 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.176457109 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042014188 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062779537 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101675071 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.074412861 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100365954 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064949095 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039652221 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.228898173 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.059111499 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053706113 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061535836 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033508842 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.13105566 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042618889 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.065476972 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064324401 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.049363156 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049355766 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.060223824 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089439627 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079540994 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.0794433 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090521097 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04507755 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073037199 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.053626567 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.081508431 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057169635 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.02617129 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.076821466 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083619634 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.054174921 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.055139347 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086474818 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047330702 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.030001922 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.056029838 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.074955704 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034165236 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.069435253 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035611172 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.065210864 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.095592559 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053606636 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066657596 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074123376 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032321014 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114161871 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06411468 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026925062 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.072873823 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069208121 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115482992 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051843768 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.030190702 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055989335 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.059965321 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.111311972 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068629628 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.03578336 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069463812 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103915243 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05163291 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.260316411 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.053484279 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106349227 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.073437448 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042694365 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030551377 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.046789839 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.222325595 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061666175 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065400835 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047624222 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.037393868 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040184382 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068068642 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046241799 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.034212321 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.067184036 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.055868816 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.028194522 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041433302 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.030019839 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094130067 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.031719128 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088470808 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078412014 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.028551556 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059828786 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048434905 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.059001456 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.050864716 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.070565289 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092483778 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.137656748 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.043880352 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.047828502 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060997939 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09843444 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082435367 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.046644078 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.031206997 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055792907 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066967394 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.05312164 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.080746656 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048567312 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063392809 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058846739 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09942444 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103666911 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.054639069 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056494977 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.06490099 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.079007708 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029094608 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115725122 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060828979 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.074736871 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.041590609 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100846142 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.066837074 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.04557265 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.041912161 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.055755547 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.062159895 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.064276448 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106091658 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.051768104 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.027090802 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05212409 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109542083 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033491758 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070794644 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.047860581 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.04943297 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079217152 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.054836244 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.038297135 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.023159466 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.24621424 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112495774 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.023524516 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.065730025 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.060271346 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.055522093 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.075024923 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.022858173 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071559905 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089491516 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069439448 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093444737 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118825464 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07083365 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.071153256 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.066990236 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.058795047 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032573843 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.078354315 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08800451 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048975528 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044939643 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.088411949 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.07266557 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.092415162 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.07437951 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.074580976 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.061870414 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.062245158 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060005743 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.061396371 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103754181 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077921905 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.081844137 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.037810774 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062280727 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.07382456 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.094193352 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036265303 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101109931 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.0408582 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.077163301 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.033000748 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.081359709 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.029949117 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.125391596 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034223498 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057767712 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023963232 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.029233564 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102516669 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.070909022 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067629143 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060756052 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.10120648 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.098665971 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.032143231 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.066562812 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074058079 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060060119 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.229050877 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.062897516 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.042524177 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048351382 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060380525 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.038443613 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.034683279 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.069810452 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.047253629 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.078888277 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037337746 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.02830731 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.092495092 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057543771 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047956783 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.029666099 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059756615 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.078309876 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.046094672 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039915044 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067755272 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057852796 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094339841 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.043981476 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050933152 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077982147 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033454042 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.045625234 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.022806917 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.038988879 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029535141 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082568422 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029170466 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070687678 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022408292 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086154599 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04259664 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.047506182 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.057282221 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066116215 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.083704843 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.049138318 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098991779 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.04504431 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.077109686 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063934019 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049677736 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042002906 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058229926 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.056121485 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.07928957 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.050852067 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080112667 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102483836 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058727143 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.099892286 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045838009 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.078997818 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062849207 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.081448671 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.069327607 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129835163 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101953898 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071824981 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.068894456 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.030253113 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053643398 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065368143 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073442153 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145512959 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.232897982 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026172169 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058157905 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.047658315 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062322824 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05731752 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.03544639 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.097870385 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.056654003 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.042062199 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065117342 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.044394988 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057289055 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029334837 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.053444232 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.056592819 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.047844315 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050214527 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066865285 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081310047 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065299162 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096621136 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.0554256 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.045341512 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.071782282 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063390743 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062561013 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038841318 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.039467647 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092441098 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.073891802 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.081082935 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.055420036 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06445311 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.066391085 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05535244 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.082552206 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0638551 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.085801842 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03468454 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.031275373 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022123445 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.026135005 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081045391 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063930232 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067422922 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.054190481 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026257924 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.059225188 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05913692 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026159534 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042873772 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.050332803 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.053224089 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.048003557 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064046962 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.066360626 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.051435443 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.060217047 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.052890208 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107621413 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.057008649 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045674708 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106366569 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116839614 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045846857 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051816102 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.026165236 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034425854 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.074054607 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.115583064 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.260029396 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.032064393 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.040543442 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.039359606 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.039973822 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025071852 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.04164568 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.042580824 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058611318 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.051479747 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.066743875 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05764419 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.028687693 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055642384 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052306088 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045738805 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.06028813 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0728371 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078743583 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.094402162 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066843889 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060276521 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029379482 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.033644585 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029262145 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.032752201 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.054680795 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.032084749 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029454716 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096625805 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.044800778 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058509599 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062227393 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041402929 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029137905 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090285325 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023186232 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091006326 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024752428 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036290142 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036154707 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032933126 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.049086584 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.095822719 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065246919 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.068497447 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062354356 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060351445 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118989935 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116958048 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.036983458 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099325071 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.030151148 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.030923171 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.030169144 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067404856 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045366815 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.069648332 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100412453 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045526995 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057676016 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032597832 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102860788 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.059260919 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061143341 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040998402 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.034077134 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106507818 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.034407923 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.040487439 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.046273392 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.070310807 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.027051951 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.059730068 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039071601 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03507718 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.272949866 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.663361808 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044773812 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.029202375 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04931645 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.094295918 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084723893 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0495472 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061297513 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.07208833 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.053545183 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.046711317 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060832309 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.145584878 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027483506 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047676666 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.056980414 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050686927 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.054635821 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.051734868 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040033025 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.045477415 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.040027181 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032475942 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.060622351 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.041385758 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049617733 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.060857708 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037233759 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.041976043 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085614607 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.058800253 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.037203837 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042619985 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.057747172 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.042170664 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058187491 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.024701597 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069878589 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044500247 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075505046 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.054906472 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.064014768 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083539505 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.049443372 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09687105 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.064936669 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.079506356 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041989327 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.032646295 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085079624 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.046821353 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032180239 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10564657 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.055739206 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.059490243 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061388716 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.052601852 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070498788 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077568944 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071487756 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.054828867 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034794524 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061863417 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.062738524 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.04443851 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.035593529 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.030154196 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.031607572 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06704201 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.045549646 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04237219 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.072466222 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.048244459 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.212861722 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.058990234 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077874641 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042328635 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.057164191 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.06642825 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046232188 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064874031 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055907413 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.084760546 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130802146 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.080214194 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08558111 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090023871 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.031442098 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.029159043 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.022374999 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067664376 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.033392193 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.043254494 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.0328884 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089191075 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.03784998 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.066006788 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.201365177 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.034910954 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.048801094 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.050290304 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.023564793 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.037138343 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062042459 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.041344818 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034222796 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.073484466 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035852953 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.085951261 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067769783 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0558995 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051305466 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035460754 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070456265 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.058089077 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.085986601 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.050412307 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.029731375 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081124641 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.059719742 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097865516 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.02736364 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035724195 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.088189796 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060371982 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.090807859 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03520089 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110978999 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100620696 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.056545234 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094301399 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.025411657 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042662775 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.045944779 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.083270391 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.041179 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070180877 seconds)
  done (took 40.571720863 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.146437544 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.139791405 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.076806568 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.089578531 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.245365047 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.253541881 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.106332724 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.077882357 seconds)
  done (took 2.248520012 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.024469443 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.037295745 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.034689587 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.278077987 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.053436332 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020819161 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025748531 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.035417497 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.020752715 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.02019366 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.054992852 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020522551 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.0209658 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.430154993 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019877508 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025746572 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.02092363 seconds)
  done (took 2.217727859 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.307285869 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.46600636 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.536656213 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.573766653 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.118327688 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.676920362 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.029113367 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.035251882 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.774338326 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.357701909 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.113508111 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.180300844 seconds)
  done (took 20.231541544 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.031624088 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.155427397 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.153511507 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.0278227 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.027277641 seconds)
  done (took 1.514375103 seconds)
done (took 78.536269792 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040756869 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.123780972 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020388304 seconds)
  done (took 1.234670324 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.158161102 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.152623206 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.15250285 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.155459995 seconds)
  done (took 1.67529432 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.030353322 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029807933 seconds)
  done (took 1.122719944 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.184488353 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.248430994 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.044097603 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.039285405 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.033876776 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.034073678 seconds)
  done (took 1.174919682 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026815509 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024629398 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024642506 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.024897235 seconds)
  done (took 1.161429421 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.135016217 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019291781 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021792073 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023543831 seconds)
  done (took 1.258339118 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.040589326 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.040154755 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.069101676 seconds)
  done (took 1.21149195 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.039100607 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.03846234 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.03264286 seconds)
  done (took 1.173478437 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.065382246 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.05002816 seconds)
  done (took 1.174604187 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.035460918 seconds)
  done (took 1.09694526 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.047194857 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.051363222 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.219155516 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.184078878 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.221851392 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.206736023 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.030293829 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.030790776 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026365595 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.025395955 seconds)
  done (took 2.10036503 seconds)
done (took 15.961854301 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.035659033 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.144866838 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.270745452 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.040662742 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.608761316 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.266334348 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.678400688 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043962246 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.053290901 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021870365 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038459622 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.586220234 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.682245221 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.098364056 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.667040025 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.092540683 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.51606744 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022371196 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021261374 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021863684 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.660854032 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.022870221 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021945735 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022161012 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.513470818 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.410306329 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022886346 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.091091517 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022144549 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025633802 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.39280693 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022893882 seconds)
  done (took 12.195238516 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.025996387 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.076065642 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026716341 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.037131896 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023551333 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023571476 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.025391342 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.021980158 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.064108217 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021577854 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038555874 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021092596 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.025868658 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022539371 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041568946 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021424185 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023655117 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022228899 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021611627 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022066695 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040706017 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021417709 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.022116347 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022218521 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022046503 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.036332107 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022791207 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021804124 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.022116022 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025852945 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026895908 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023196102 seconds)
  done (took 1.987980903 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.078688066 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078994961 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.02784345 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.062304817 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.074201395 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.024475757 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.105503659 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043885355 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.067380561 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.022048351 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.038638065 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021868447 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.058710335 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.023066327 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.042686197 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021747764 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.024290064 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.022402706 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021681754 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.022300874 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.041077469 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021643528 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021924961 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.022467965 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.022357087 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.037823066 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022770711 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021608288 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021869278 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.025768447 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027387359 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.023057169 seconds)
  done (took 2.267371952 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024952134 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.024918289 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.031001029 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.033966029 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.020002996 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.022103769 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.023067259 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019985045 seconds)
  done (took 1.275492951 seconds)
done (took 18.80523569 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035446709 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.022086163 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.024984895 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041464695 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027990321 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.143655695 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.018951635 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028683781 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.025157438 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.025301196 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026647936 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.020109421 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.023781919 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.018623752 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.025811484 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.019916217 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.145946415 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.024163025 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.143915839 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.145042578 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.022447221 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025470543 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028521235 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.144907791 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.144554175 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.144361636 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.029105609 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025834665 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.020240125 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.022906944 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.142473655 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.14431532 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.022950225 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.140699136 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.020387131 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.02025103 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.024620083 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.02189802 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.149462519 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.029319253 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.022481187 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.028841035 seconds)
  done (took 3.423031998 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.148154248 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.153649941 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.146971058 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.031989168 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028477266 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031843124 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.152457549 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028986368 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.02749215 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.151673188 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.023320285 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.02742159 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029934678 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020628061 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.027392954 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.023814749 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.029124454 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.021780374 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.027427176 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.027451264 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.152105975 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.020946909 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.028133071 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028898739 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.023100249 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.029059944 seconds)
  done (took 2.534196277 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.030184502 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.043260853 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045936491 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.099555982 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.063209295 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.036034516 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.03637365 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.047055814 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054518759 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.02114871 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.042869817 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.048630481 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.049488795 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027947308 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.060332785 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.03951688 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033657293 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.022718266 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027758874 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.055376681 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.04379043 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.039836073 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.054220804 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.041691236 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.02031487 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.03039633 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.028533295 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.03760554 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.028457018 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.033191901 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.02499019 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024530691 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021879999 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032456726 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024869835 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.019218696 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.043684492 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.03355152 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035818518 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.060460014 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.031078747 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022529815 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.048327818 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.086333043 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020659192 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023673502 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025297885 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033445184 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022434879 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051534386 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.036171878 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020852578 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.040212705 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022516106 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022436729 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036630809 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022820294 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023306639 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032742537 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.027231875 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.042262805 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.026355482 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041602493 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020938651 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.032291949 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022519666 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022731294 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.01983515 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.055643982 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028490446 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.070826682 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.022243852 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019309801 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.033393053 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032454864 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.028270493 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020814412 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039893645 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033651715 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.025004312 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.032029639 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.024060392 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024343084 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057350821 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.020132459 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.019270971 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019159191 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023418552 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024393213 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021771899 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033551557 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020668612 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024379307 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.035344745 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.020956318 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021739732 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023543634 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022290169 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020480356 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030900348 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024811523 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.022920942 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.034028422 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.022399715 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024572893 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.036418195 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.030615404 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.021112621 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.022501393 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023566662 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.023108933 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025842239 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024815593 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.023090917 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.026336575 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028973677 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.027444234 seconds)
  done (took 4.908506222 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.240190253 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.229279174 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.022044049 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.224656784 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.029744476 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.158442032 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.227912344 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.232191756 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021791278 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.022646753 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020876051 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.171684159 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.166481691 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.178773433 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.15923678 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023909957 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.048725467 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.178841122 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.234044286 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.228572538 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.047713954 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028863073 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.024111836 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.022973516 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022347711 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030515903 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.038507898 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.030318059 seconds)
  done (took 4.170395502 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.030349608 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.066132801 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.025088543 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.046008421 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.038534549 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021597987 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023380424 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022684738 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.038077074 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.027008139 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021257878 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.025603214 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024816133 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023683424 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022295368 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.028110443 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.028064281 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.029054709 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.025024564 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.026028651 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.0322469 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.045560705 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025603701 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021506948 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024846501 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021483972 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026956926 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.030208318 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021259529 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021378247 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018723797 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.025948026 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035986576 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.02269779 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021409897 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.022169387 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021765075 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.021677869 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.021913568 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.01987603 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019825861 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.026632256 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.02035401 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026595145 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.035743196 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023761877 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.023087585 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.024121926 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.024015818 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018605775 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.025327697 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024862087 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.024149782 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029918472 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.025306568 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.023933452 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.022959401 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.035536738 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.027031765 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.020976226 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020682924 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.020106538 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.02322907 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.028274594 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038326593 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.023218905 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.02001056 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021727914 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023237446 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035638794 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.020985801 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.027181236 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018630695 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021696198 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.023950927 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024545338 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.02320444 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.020172025 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.021462565 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021932482 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021695939 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021691028 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.021039649 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.02433085 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019628482 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.020139844 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.022266687 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.023178042 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.027187349 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020564943 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.024366764 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.023013715 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.020439149 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.024309728 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026838474 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024537351 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.04177414 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029630405 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.022321005 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019579028 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.036410149 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023561826 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.021035443 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023493953 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.026202964 seconds)
  done (took 3.809066064 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.051395811 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.023711031 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.041471357 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.052873253 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.031775121 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.027295495 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.035316152 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022903573 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.042625171 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020956481 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.03073177 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.020078537 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.034337512 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.030179085 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.02342616 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031280209 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024310836 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.041993502 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.036085763 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020418617 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030264594 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.033725104 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.034000708 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.039228363 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038874782 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039858186 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.033825401 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024499485 seconds)
  done (took 2.024583152 seconds)
done (took 21.942638294 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.150318733 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.350786107 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.111602179 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.812255613 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.181972629 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.212292939 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.214937668 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.088257878 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.78880359 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.190588691 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.930448138 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.974743945 seconds)
done (took 59.173758547 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.18927415 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.241823438 seconds)
    (2/2) benchmarking "String"...
    done (took 1.329797545 seconds)
  done (took 3.680101779 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.533246702 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.096638892 seconds)
    (3/3) benchmarking "different"...
    done (took 1.131003196 seconds)
  done (took 4.844781298 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.369627778 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.649567288 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.391541256 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.085098111 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.098773036 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.86995131 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.274066346 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.7652311 seconds)
  done (took 27.22874816 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.100858736 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.447582676 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.448542518 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.554042159 seconds)
  done (took 17.733938533 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.542760353 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.512334393 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.514264902 seconds)
    (4/4) benchmarking "different"...
    done (took 1.801051477 seconds)
  done (took 7.583559654 seconds)
done (took 70.727300046 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.085463409 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.363702648 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.122109916 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.279443805 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.183667867 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.207419222 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.097812576 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.126873468 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.095803582 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.096581744 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.097201579 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.094266659 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.109800788 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.142321905 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.097239989 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.157569381 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.366448334 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.098652835 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.122551853 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 6.888848593 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.424031921 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.096481498 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.097934487 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.175284325 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.473185853 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.1533522 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.531188695 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.095450852 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.702085052 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.089792172 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.109543258 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.097710834 seconds)
  done (took 181.963971489 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.084305619 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.878464247 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.913534735 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.12254416 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.48217695 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.460856896 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.941971905 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.497816135 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.096822202 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.096821284 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.107109689 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.093196906 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.140258545 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.686772958 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.131423674 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.138810675 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.020517053 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.953072445 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.142773431 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 2.033199136 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.093701975 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.596438534 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.581072366 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.957918633 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.097320457 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.15013891 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.116337179 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.124489054 seconds)
    (29/36) benchmarking "asum"...
    done (took 1.687067967 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.976109175 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.106729124 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.112299063 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.285168365 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.334972972 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.10059509 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.094194037 seconds)
  done (took 152.531661725 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.348082052 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.092857916 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.132028449 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.243973438 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.046153115 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 3.927243494 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.097836964 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.084197512 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.08435566 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.091349798 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.086457254 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.153942318 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.09432698 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.154100467 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.12863404 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.086970261 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.085129142 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.159992267 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.110419744 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.085371053 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.084439016 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.187363078 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.435432321 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.238499952 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.097234188 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.093538711 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.218019826 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.10284151 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.08646228 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.08453461 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.218010812 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.09713105 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.218632217 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.227038085 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.101491098 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.14273022 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.101184755 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.300684481 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.098037722 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.08426302 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.086744732 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.127449618 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.096114853 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.117214852 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.202686827 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.097526294 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.103898347 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.544515126 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.6941188 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.097289561 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.0883755 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.086068622 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.088727576 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.085651015 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.597191983 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.097557056 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.118352763 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.655066269 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.108045201 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.084900213 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.083232789 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.084054034 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.0846273 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.09082378 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.122914761 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.775691896 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.859821198 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.448540353 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.793213365 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.098752951 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.085058206 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.085186395 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.959641481 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.163725016 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.087668649 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.084717403 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.256951893 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.093773984 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.084459943 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.003178421 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 3.00564381 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.095322831 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.233813854 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.100036188 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.084530495 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.544030488 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.172226965 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.108035103 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.105489732 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.140378031 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.087404801 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.083605816 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.091792593 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 3.003449019 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.096000714 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.095463416 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.498775332 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.098870945 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.084536863 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.131598386 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.454451712 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.094844427 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.166513242 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.492189186 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.065465009 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.097698941 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.083948303 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.104505874 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.086557129 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.09542885 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.097719969 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.08490299 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.084590074 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.090111159 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.084108748 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.083131918 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.085305851 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.103702481 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.085642054 seconds)
  done (took 325.207160765 seconds)
done (took 662.274127734 seconds)
(4/20) benchmarking "parallel"...
done (took 1.084784124 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.345451142 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.482463719 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.216476344 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.342024268 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.297546595 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.271282265 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.299600907 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.387194643 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.324700491 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.263456385 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.317160637 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.269405288 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.3846781 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.352142557 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.388498514 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.362107268 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.299845126 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.77285766 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.309861577 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.269574973 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.297252834 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.297885314 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.253016186 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.33085761 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.394736883 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.26954269 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.491161625 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.333948446 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.309601767 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.343040053 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.3644898 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.38106563 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.308426249 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.379187533 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.339916404 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.397227646 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.314654963 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.358641816 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.278083701 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.305606725 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.319797378 seconds)
  done (took 63.109069693 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.436302589 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.282579012 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.402236841 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.397778852 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.009061107 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.394344785 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.485557048 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.277091377 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.28225186 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.412770636 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.429073869 seconds)
  done (took 17.923349225 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.335736913 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.277530784 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.408051793 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.414259299 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.473750983 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.40363202 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.451287981 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.277080811 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.28544994 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.409442505 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.421200273 seconds)
  done (took 17.266756677 seconds)
done (took 99.383866234 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.650097653 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.166893369 seconds)
  done (took 3.901793231 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.117315421 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.104393797 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.096803986 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.101104534 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.098865378 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.098044886 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.148214916 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.110156349 seconds)
  done (took 9.958107472 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.100921263 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.097381932 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.099708072 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.098517222 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.098025662 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.099966867 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.097366087 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.099199301 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.097679152 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.098553862 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.101345371 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.095399191 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.096657906 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.099695545 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.104477859 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.097956786 seconds)
  done (took 18.670316671 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.098455524 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.102994751 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.100226882 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.099336188 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.101296938 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.098438416 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.099396447 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.10988257 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.099886562 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.100476362 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.100012088 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.099183614 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.100680991 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.098529535 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.099933487 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.099950174 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.10055941 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.099288156 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.100153982 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.100655088 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.09859932 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.100915148 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.099682684 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.104998176 seconds)
  done (took 27.498891769 seconds)
done (took 61.14104474 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.674835356 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.09347769 seconds)
  done (took 6.852636673 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.100932527 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.09945313 seconds)
  done (took 3.397051917 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.097147669 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.098802331 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.098231718 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.09741196 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.09818415 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.097182965 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.097982447 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.097687887 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.098642313 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.097858323 seconds)
  done (took 12.063865957 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.096787878 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.098466016 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.098673829 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.097011095 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.098327985 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.099535749 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.098489929 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.098074048 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.097702948 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.09996459 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.098060958 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.289399912 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.096440081 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.323949738 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.098761439 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.09749087 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.098055323 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.120833523 seconds)
  done (took 21.291224815 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.100004098 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.097644814 seconds)
  done (took 3.29934305 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.109771889 seconds)
    (2/7) benchmarking "second"...
    done (took 1.098600075 seconds)
    (3/7) benchmarking "month"...
    done (took 1.117053564 seconds)
    (4/7) benchmarking "year"...
    done (took 1.107983606 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.105826966 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.105754892 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.106662721 seconds)
  done (took 8.841906291 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.550766153 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.26541867 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.320820599 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.575001458 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.755789756 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.02647341 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 1.748637004 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.023388085 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.912297272 seconds)
  done (took 16.267814243 seconds)
done (took 73.099087898 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.790725287 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.096249377 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.770852631 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.208481545 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.1060392 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.425608249 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.111789398 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.652399513 seconds)
done (took 37.276764458 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.232829324 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.085805939 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.132775161 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.133697824 seconds)
  done (took 19.441895674 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.085982129 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.706088855 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.135305711 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.114738415 seconds)
  done (took 19.230208563 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.599998283 seconds)
    (2/2) benchmarking "read"...
    done (took 1.520075362 seconds)
  done (took 4.22331794 seconds)
done (took 50.217915183 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.09677322 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.09838266 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.099378787 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.096647678 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.099972138 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.098743045 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.099685457 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.097715045 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.097560061 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.097952935 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.09726253 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.096808982 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.099872747 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.101586637 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.099209677 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.09894213 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.097144647 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.099323554 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.100347453 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.099549436 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.097505351 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.097266885 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.098130746 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.099637227 seconds)
  done (took 27.450196582 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.170578726 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.165117772 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.171629842 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.176399881 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.193159916 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.176249622 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.167956358 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.141519865 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.177008063 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.144514616 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.137285521 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.185391376 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.137670906 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.190364953 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.136155698 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.191671834 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.176093696 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.141095077 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.139738697 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.197119599 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.169235141 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.145257823 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.187507458 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.130856692 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.185837663 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.135411222 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.145939774 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.164466961 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.13704403 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.192137515 seconds)
  done (took 35.995672407 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.128846488 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.098155292 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.097421529 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.186577939 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.097856456 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.097601965 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.09847208 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.09705595 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.098255695 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.096873797 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.09679549 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.098025365 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.098885128 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.097775166 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.099267102 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.096782902 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.12984858 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.279401807 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.097783721 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.097243617 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.151218374 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.09694476 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.097766476 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.097464761 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.096776776 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.09763165 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.099420248 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.097466058 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.098831075 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.097387916 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.097646793 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.143382276 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.134427166 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.098353866 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.213144366 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.160013022 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.098409996 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.607847161 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 3.075793477 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.100608026 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.098580626 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.098538263 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.099955304 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.097150404 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.154075681 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.097086826 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.09640634 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.09810664 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.099528055 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.097613918 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.099662375 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.097938589 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.112888122 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.097252701 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.09868363 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.097731237 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.097180535 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.098189354 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.098377478 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.096563336 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.097576717 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.164629568 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.098326696 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.100644237 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.466523203 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.100886671 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.162064573 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.098209889 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.097387191 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.316488906 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.097239524 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.300447473 seconds)
  done (took 85.268415044 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.097223892 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.099866878 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.180649265 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.183290207 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.100680229 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.097702679 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.100022695 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.097783259 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.772072577 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.099140805 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.097025976 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.099620014 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.770691856 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.098999198 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.097792067 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.184129502 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.100766878 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.100018887 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.097608092 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.096548957 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.098282613 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.099677679 seconds)
  done (took 26.8543471 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.132965135 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.112819909 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.134978701 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.112556676 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.115062746 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.114008894 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.134879715 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.112844302 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.133961023 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.146443675 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.137478084 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.13322346 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.115018127 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.136212797 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.142095981 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.182966408 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.134317456 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.183806091 seconds)
  done (took 21.501993537 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.277156744 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.264970001 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.181505383 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.142375275 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.362181343 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.334458735 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.203553683 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.272536996 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.138305549 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.265271425 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.273806762 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.140099228 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.3333068 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.143486436 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.141229693 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.36183074 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.177846582 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.142035078 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.209528625 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.203756433 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.276561596 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.210115624 seconds)
  done (took 28.141022958 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.133014553 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.158496579 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.171858801 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.179171952 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.101073837 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.096488989 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.156251573 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.135664663 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.114049201 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.142449342 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.136263945 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.0971064 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.196417204 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.160520689 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.189760297 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.136186386 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.150756375 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.160244079 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.139703041 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.10069204 seconds)
  done (took 23.942179849 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.098035993 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.09826676 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.098708384 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.097623281 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.098996302 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.098702635 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.099268834 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.100396244 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.097815654 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.336925001 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.098907295 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.097344582 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.098132021 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.099189889 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.097222592 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.098964272 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.097254831 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.098442979 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.098875698 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.098192659 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.335137677 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.099026155 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.099425714 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.098077085 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.099799214 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.097960542 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.097753829 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.099686397 seconds)
  done (took 32.319498564 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.145826378 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.097929073 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.099948463 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.100318415 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.100252374 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.163610542 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.100119295 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.10240356 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.097202461 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.100061576 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.108625238 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.097917934 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.097953218 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.148817756 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.098442658 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.097847185 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 5.192662074 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.10696553 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.163255426 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 6.087162507 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.104798235 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 5.155436599 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.104904369 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.100729719 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 6.085408292 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.10388344 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.099998767 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.099833284 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.100388064 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.100160887 seconds)
  done (took 52.448253912 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.120088421 seconds)
    (2/2) benchmarking "in"...
    done (took 1.119419146 seconds)
  done (took 3.326202772 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.100999755 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.198529672 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.098063041 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.298341793 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.265407083 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.273803165 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.264694566 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.1959489 seconds)
  done (took 10.781012365 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.098374689 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.540893987 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.120076655 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.099859291 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.098133577 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.585214022 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 3.050545654 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 3.010411515 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.897924017 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.970937289 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.179269782 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.597791811 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.046503828 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.410878185 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.22222717 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.939346829 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.372757987 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.673355123 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.194051857 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.231407904 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.877440576 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.208555508 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.099236053 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.097709373 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.100276818 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.013152151 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.968530656 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.532604462 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.27659919 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.232365302 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.892952807 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.187621662 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.099872438 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.362620043 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.225449679 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.099240879 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.265335863 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.214767455 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.101199227 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.101667656 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.876326413 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.838143236 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.390551687 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.338421385 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.193675634 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.098874662 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.101288186 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.098829122 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.381865598 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.738977561 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.048176168 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.092577305 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.251675075 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.098383319 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.842259674 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.114326775 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.098241161 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.010086643 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.684120061 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.364138894 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.467105623 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.165858013 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.133203081 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.23712291 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.098893851 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.298871755 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.891548217 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.899027592 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.906354015 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.220389392 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.624529117 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.123669519 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.098737435 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.09830143 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.041968464 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.411210852 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.101250513 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.098511116 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.099471072 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.101383418 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.359577203 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.226126327 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.94698656 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.247650677 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.280411447 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.537441279 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.236184587 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.099337977 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.789469144 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.964840228 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.180327554 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.778937273 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.339956049 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.24596041 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.122212066 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.363394456 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.139675988 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.099182187 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.949220978 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.746007998 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.11462482 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.100061888 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.440745155 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.104919603 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.102068317 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.101268157 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.816238213 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.236745412 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.254417035 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.146621744 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.09986053 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.09924667 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.696569552 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.187719011 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.104056386 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.578236901 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.049950768 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.634728816 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.373795774 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.317336198 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.47883701 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 5.115858052 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.36645339 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.892574139 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.102584526 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.655133287 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.962763298 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.654717657 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.382764773 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.235139221 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.982332368 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.174159755 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.098971809 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.243659933 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.187153091 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.100146352 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.099836627 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.099031155 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.09990474 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.100093737 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.229723927 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.505758815 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.995958588 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.115011612 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.349116951 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.229493325 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.971442821 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.32995732 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.809259452 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.246591951 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.10032741 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.887269452 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.372238717 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.82908278 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.238757015 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.102194336 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.105877409 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.968359498 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.133634018 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.205759837 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.100342337 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.718451435 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.187912342 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.102951576 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.098875275 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.568193601 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.247727315 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.100092516 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.228438765 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.90530659 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 5.036791116 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.114153047 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.419559511 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.224588323 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.099971973 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.098908304 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.103387817 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.901438615 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.741757788 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.248930297 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.728426912 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.844431801 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.201842742 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.264624967 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.201024068 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.38263969 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.378848994 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.26585455 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.101723045 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.102101276 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.106368824 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.601762105 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.914132936 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 5.175705231 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.983665124 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.122678913 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 3.053682799 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.17644869 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.913679938 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.118629456 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.844475216 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.095951246 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.211611591 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.100230311 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.099862314 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.265219089 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.291673707 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.249869939 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.693375166 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.11490994 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.102586365 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.776976818 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.237689682 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.78571012 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.218223634 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.94925023 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.221222522 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.236356586 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.281107313 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.796343526 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.241007607 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.100495168 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.846586105 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.258786035 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.10411852 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.204635441 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.893645376 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.957793015 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.915394216 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.799790511 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 3.091133236 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.6983335 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.391955714 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.278079664 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.996239201 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.256602386 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.385663914 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.132423035 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.660897754 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.129670817 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.8656649 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.119187795 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.909807963 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.116763896 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.125626926 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.236567634 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.591237388 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.230045434 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.101330236 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.30762899 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.207455578 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.794258932 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.242765667 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.229914255 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.475412603 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 4.07036953 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.211692995 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.359094298 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.130454426 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 3.034500468 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 3.09193649 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.464352918 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 4.065826189 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.118968153 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.180455758 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.910378681 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.278651687 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.36896047 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.249236034 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.100782751 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.100804554 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.301299787 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.198536241 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.100616221 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.461396165 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.09722681 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.158460752 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.18017777 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.104858397 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.099627514 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.353444674 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.333732999 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.461727613 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.608546105 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.699235472 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.949947162 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.24241797 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.825326235 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.245267782 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.789966662 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.192554242 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.10447191 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.801568334 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.240321433 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.406476973 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.259019897 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.235464361 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.80682237 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.241584338 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.410786323 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.311908481 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.236449493 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.902501845 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.671961188 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.381096146 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.550609233 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.143185304 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.641274311 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.174398032 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.686533312 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.078693367 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.803972554 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.170999789 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.164177062 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.102187574 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.102195123 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.64599512 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.051746844 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.105855497 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.898551929 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.847010241 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 3.043827511 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.848690263 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.191144234 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.104367137 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.102021569 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.100407628 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.015069907 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.222600389 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.513777039 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.249381888 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.100782646 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.100427452 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.097672496 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.51410177 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.974460831 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 3.024067848 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.146752735 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.250995456 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.103718393 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.10116366 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.101189735 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.100838627 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.102228417 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.099918414 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.639660151 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.115841883 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.715206625 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.194910532 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.105154919 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.325881996 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.173097815 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.101059949 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.328967675 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.193288928 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.226480791 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.17844877 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.100966424 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.511411417 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.254033316 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.078166681 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.385415474 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.407017292 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.357941921 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.702418334 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.159840718 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.534322775 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.428630546 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.857324798 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.105202163 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.017369967 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.182222178 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.944121243 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.102032203 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.552717476 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.712445711 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.071137579 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.392658837 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.036212173 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.50613541 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.23930681 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.17877942 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.101223362 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.101940983 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.186558965 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.360868424 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.152581779 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.428423551 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.323997004 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.098547495 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.395436927 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.209377963 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.352743719 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.135390154 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.116006122 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.101611165 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.102036283 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.580891913 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 4.049078685 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.200884144 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.101759096 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.012227805 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.982514183 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.042252319 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.734340832 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 4.987462939 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.252971918 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.102470687 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.30996896 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.158229106 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.950734685 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.127845615 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.905136923 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.44425036 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.153886774 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.341622957 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.508837603 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.813201364 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.534973179 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.232518827 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.10166557 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.512791501 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.123290309 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.257217049 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 3.024469804 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.474382432 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.651083701 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.524119912 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.356101012 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.232981401 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.006066064 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.64215009 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.071850385 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.106220467 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.961897248 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.255541327 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.430621471 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 4.105801935 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.388183265 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.253849736 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.744543456 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.791902562 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.252130784 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.718290187 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.253048672 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.102750699 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.982331705 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.030791969 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.304694302 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.23616548 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.104586995 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.12054418 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.81614959 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.715251876 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.378508772 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.187961557 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.101549813 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.935961974 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.813793138 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.19135119 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.107498069 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.100952186 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.612036083 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.15740777 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.103464251 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.514069794 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.730028085 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.25285886 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.579634309 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.204422485 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.257216471 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.395719654 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.528856799 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.317143476 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.170799842 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.10290509 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.101713097 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.103817439 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.701714183 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.120069519 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.101732916 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.698476679 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.25422649 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.869000405 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 3.033852503 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.386270292 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.180967341 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.527305062 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.256048965 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.605366675 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.96212347 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.182861096 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.370690808 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.136118159 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.241772409 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.901481535 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.217615025 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.105880854 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 3.084548609 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.498707203 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.508273804 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.552561535 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.457455941 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.199077923 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.78694501 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.224085476 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.937921383 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.123673044 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.103365251 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.601351992 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.277826076 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.583425504 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.267248305 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.598908121 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.229139681 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.435817034 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.324541856 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.203083696 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.102000685 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.103660066 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.146766208 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.148497432 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.643633867 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 4.986827656 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.611767747 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.246116746 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.946995343 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.608507279 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 5.048793246 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.30703301 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.406309142 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.42496554 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.142108102 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.101579022 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.520112376 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.192706871 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.281457012 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.205921374 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.945593619 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.182459237 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.102556492 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.708816224 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.117703502 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.101852048 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.102278011 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.016361341 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.890244327 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.216770452 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.323270497 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.208316238 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.103231728 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.722835808 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.390354559 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.160108652 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.106149292 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.103394185 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.996358126 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.229890019 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.112351329 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.485344334 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.269448243 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.451709882 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.940570165 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.553858185 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.201647057 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.104791497 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.102717871 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.829033606 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.75197553 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.139215296 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.442171896 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.116838536 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.613407003 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.062392377 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.600220424 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.641726213 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.164881981 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.239042194 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.103970523 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.12726938 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 5.077169656 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 3.036184018 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.861288149 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.556863356 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.203695687 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.940201132 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.12667607 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.171372021 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.290756654 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.179881537 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.104251966 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.101720076 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.102856576 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.600242749 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.068437594 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.107332362 seconds)
  done (took 1435.79082002 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.372251119 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.103502552 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.10542708 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.105484132 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.105214998 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.105659679 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.104642874 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.104777579 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.106538017 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.107022182 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.104651349 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.103991425 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.105739695 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.378538272 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.107564884 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.105014328 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.105079183 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.105581244 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.104774491 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.104428484 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.105676559 seconds)
  done (took 24.842145645 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.103119323 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.104625903 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.104499903 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.104365207 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.1046182 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.102902716 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.103976104 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.10456549 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.103259358 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.104388551 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.103771582 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.103279143 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.103831443 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.105175344 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.104386781 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.102109557 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.102508363 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.104681399 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.101595993 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.104294111 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.102243705 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.10476533 seconds)
  done (took 25.373391757 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.101986865 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.103380719 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.867920813 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.241243528 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.104435083 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.102924449 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.101952718 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.309374352 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.158368134 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.006870018 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.496729623 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.120237461 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.107807893 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.296043394 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.211234315 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.102851616 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.229038067 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.102331757 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.104586159 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.103502181 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.103067952 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.360081894 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.253833385 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.104530898 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.960975041 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.257035705 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.10499428 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.103630491 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.102556907 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.078596541 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.177341191 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.105851788 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 3.016166816 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.942505379 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.464369378 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.007818817 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.189947133 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.107370048 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.103018132 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.103453114 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.31739663 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.860468274 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.109139914 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.102492286 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.464530698 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.231946566 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.105665184 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.4602505 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.122035423 seconds)
  done (took 88.484968466 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.104844211 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.233968434 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.166915311 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.103675801 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.228787397 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.104416144 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.163475463 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.102261555 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.104893413 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.104471131 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.24047141 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.251897402 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.107782646 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.104014298 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.170332586 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.104912462 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.105196343 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.104785892 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.104993766 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.104252698 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.105076676 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.156031918 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.223350553 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.265898846 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.103980622 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.104246672 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.105269319 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.102945522 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.254493927 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.104972606 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.10234134 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.103017339 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.234749743 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.209340323 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.105175475 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.102608443 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.233224183 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.104789466 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.104765907 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.105766232 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.103698885 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.103415181 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.156143837 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.239271014 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.104870347 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.214016611 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.107811252 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.105255678 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.254603299 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.102531866 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.102652369 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.266774444 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.10434012 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.104060765 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.10380956 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.233491627 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.1053427 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.104391836 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.104466339 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.239600656 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.105731948 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.1024317 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.25797932 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.103956341 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.103576126 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.269514142 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.208741019 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.103196655 seconds)
  done (took 79.05997227 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.103226313 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.238616143 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.278278641 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.279679697 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.239538715 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.225143449 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.241951566 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.239812567 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.239668118 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.24365921 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.241453713 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.202034312 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.209867585 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.201593017 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.244877065 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.225270116 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.22533967 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.225472682 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.245671072 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.24337234 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.226570238 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.278736894 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.242558154 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.28080358 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.46200215 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.211191618 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.239475808 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.245627542 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.281617599 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.240076054 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.456416661 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.244542926 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.239581363 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.284351271 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.456906623 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.238135219 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.104019856 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.241240557 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.243207926 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.239748825 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.209888093 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.280714352 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.236523512 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.210059357 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.226899993 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.238317543 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.280559885 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.456982411 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.199822871 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.244355516 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.240170605 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.280885391 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.236967602 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.225124717 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.280334705 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.205065253 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.277430042 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.282476784 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.244791793 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.278258301 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.279665861 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.205124439 seconds)
  done (took 78.765998079 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.103913878 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.103646565 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.189574025 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.105653597 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.104515326 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.190601491 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.10437603 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.103186132 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.103511582 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.103888092 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.106320553 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.189494845 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.466569658 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.107013241 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.190062958 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.466420572 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.194357108 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.193591925 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.103046456 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.19181745 seconds)
  done (took 26.513087278 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.105988589 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.104063014 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.104942868 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.261133545 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.10243444 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.24103582 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.102818519 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.103140463 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.10607421 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.10399443 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.102375668 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.10376606 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.104895646 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.260668086 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.103898743 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.240311342 seconds)
  done (took 19.342829786 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.104338958 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.103244051 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.103020365 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.1036875 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.105199221 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.104192054 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.105576648 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.104484492 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.105359933 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.563215434 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.103814234 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.103601523 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.103041031 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.103539312 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.105441322 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.102778854 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.104637283 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.106041057 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.103724566 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.10403511 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.682232801 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.104851727 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.108192242 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.103556794 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.105258708 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.680880167 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.10741253 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.104606439 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.10650323 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.103835429 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.106016235 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.586241958 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.106714682 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.105949998 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.102730888 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.105171538 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.103414358 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.103494595 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.103017139 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.104400621 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.101991215 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.105254567 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.103770114 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.104502723 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.107685419 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.103002634 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.106154778 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.559690501 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.105165486 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.105395569 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.103023714 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.102822206 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.103024938 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.575383068 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.104541105 seconds)
  done (took 64.861279401 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.144548712 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.164122386 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.105659291 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.102819036 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.158109393 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.145430081 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.147452293 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.121364691 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.145039754 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.103364704 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.166584264 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.118292955 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.144776106 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.157330138 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.168336713 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.146289096 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.107079886 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.18073528 seconds)
  done (took 21.619189547 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.105665885 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.105310745 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.103736064 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.107650341 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.106512708 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.103638766 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.104485292 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.105513355 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.105619366 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.105738061 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.106234251 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.104656029 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.103369345 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.103751442 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.108357445 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.106708836 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.103488463 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.103202224 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.105942561 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.105312414 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.103162627 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.105053905 seconds)
  done (took 25.408062847 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.134653822 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.14978421 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.104925354 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.103877094 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.104233832 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.127496106 seconds)
  done (took 7.816970078 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.169745177 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.166361221 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.142694206 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.15750982 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.172844858 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.190508535 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.185567448 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186213513 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.1693009 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.403879993 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.188731801 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.177406187 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.166055042 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.236752369 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.169421868 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.176235245 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.189913802 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.190342217 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.157353727 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.192584348 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.196803232 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.176186593 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.195410869 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.182310207 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.18982355 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.23918112 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.170285042 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.405718033 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.189458805 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.17455735 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.169986094 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.189703906 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.175737561 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.397033004 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.159764497 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.169443241 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.186003619 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.190559245 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.169329628 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.231034173 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.139809012 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.16811278 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.167838814 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.20056709 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.169385704 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.19592127 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.19762215 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.188534784 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.194156956 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.402401475 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.171400314 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.230003118 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.168633705 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.176034702 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.170052007 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.392734842 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.405056484 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.22912951 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.168020171 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.403864932 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.231591804 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.169229573 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.231679424 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.406365854 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.16940805 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.231575859 seconds)
  done (took 81.039722585 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.23254189 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.145067261 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.19478591 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.407526682 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.234104573 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.190699705 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.192194363 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.198490162 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.195348779 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.16885142 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.189998558 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.194114352 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.233114855 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.238552026 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.196694251 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.189361765 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.192087483 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.233108522 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.170634266 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.394163201 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.189909181 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.233578591 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.233581377 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.232125651 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.397391446 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.174549142 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.196953404 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.188671813 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.189442072 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.191768182 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.197415847 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.192236903 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.234212995 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.145236911 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.230961859 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.195770134 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.189504856 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.201228696 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.191619337 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.169844937 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.237586872 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.191715661 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.188915052 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.187710411 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.398998666 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.196069904 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.196561392 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.168415953 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.192262419 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.170811148 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.398482318 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.397905826 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.40965034 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.235158073 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.194868291 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.186063677 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.1929489 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.197478523 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.194014992 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.17218857 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.233323931 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.191723703 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.403154324 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.191081954 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.19669506 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.231849676 seconds)
  done (took 81.817845862 seconds)
done (took 2409.853134031 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.192993954 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.207864929 seconds)
  done (took 13.492940283 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.104837221 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.104266894 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.256052864 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.105815102 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.113364704 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.160901153 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.113344588 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.115902684 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.104080224 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.195225421 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.10401392 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.241060804 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.206983371 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.104803653 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.111024987 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.115658241 seconds)
  done (took 39.369890547 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.284583185 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.678244926 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.080270845 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.912869406 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.141269826 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.919572098 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.487595034 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.87883328 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.41548704 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.568731012 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.370382125 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 5.0384412 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 6.087376268 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.334287058 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.643334688 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.69713451 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.782195024 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.843184956 seconds)
  done (took 61.257019811 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.093154942 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.267167639 seconds)
  done (took 8.482683305 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.114690672 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.136215401 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.104110989 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.112456781 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.136907652 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.16355542 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.127429317 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.169267159 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.149024189 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.135815156 seconds)
  done (took 62.459683796 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.099778553 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.780737996 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.426570186 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.583147592 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.732181572 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.591109742 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.272453002 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.479657159 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.201053254 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.092486911 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.392493799 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.503022482 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.963811661 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.371317722 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.733975577 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.372772174 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.887891621 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.507732355 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.458822492 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.557214894 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.420863066 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.284101937 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.559778429 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.981780166 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.114854792 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.739695395 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.384655023 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.234914667 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.179527168 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.252988003 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.490775426 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.121409895 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.434302422 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.110841641 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.313957778 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.771269684 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.817538896 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.306207068 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.672048216 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.446071424 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.540336897 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.78496603 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.173821967 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.773735012 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.263131205 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.473717938 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.15764332 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.362468911 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.192117441 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.221688698 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.696896639 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.287169582 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.245536263 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.229002422 seconds)
  done (took 155.157314768 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.093451809 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.479565255 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.252172679 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.096113378 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.490419583 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.312849092 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.894823876 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.610536668 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.117627644 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.337961259 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.270538842 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.229192033 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.09566203 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.099895246 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.101751294 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.102648279 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.293945733 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.636475183 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.112365027 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.100203817 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.318858706 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.341981471 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.23163505 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.095581751 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.269934413 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.346953577 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.507099208 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.230799027 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.502301192 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.093490083 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.546619995 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.112266303 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.101540319 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.995685331 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.492385779 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.418261556 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.537413172 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.106394792 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.88925294 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.101922231 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.774652964 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.302256569 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.409651486 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.244742331 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.35681622 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.33620446 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.728811592 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.095515103 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.856066133 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.277742528 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.317506603 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.332010242 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.379054827 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.101647606 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.654537014 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.099382594 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.10035456 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.359850799 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.25682139 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.22308137 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.097087313 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.101314193 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.101157411 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.351813014 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.096402411 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.219364883 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.095224061 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.101353699 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.222043757 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.224888328 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.262330869 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.349283205 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.346346467 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 3.453261875 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.089261191 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.339511688 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.516661003 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.344159729 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.098011846 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.103943209 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.501907809 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.563540284 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.259089871 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.342473522 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.413444826 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.387911076 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.664584014 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.093348209 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.330098973 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.269149903 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.458058034 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.360578266 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.463110749 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.977848962 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.096181201 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.099891193 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.084966967 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.234519964 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.100461552 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.62135985 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.393372544 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 2.728012281 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.28453519 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.545922607 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.207476299 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.096956143 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.680229935 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.098091121 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.322445107 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.416117209 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.104070546 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.101665206 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.26196185 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.080765317 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.097115118 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.514714815 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.52012503 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.112850574 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.269205866 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.098161817 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.359427016 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.938087768 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.336849555 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.038298229 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.380789117 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.291720088 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.377976772 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.097162628 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.362891435 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.368878382 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.504099851 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.42661024 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.097245809 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.099579836 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.412884759 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.09934532 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.099931932 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.295212383 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 5.06070233 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.283476964 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.096455444 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.474684792 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.265285208 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.476372309 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.096654119 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.370740414 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.35383865 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.509645916 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.107571899 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.238600322 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.094337609 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.084545229 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.26580812 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.094825201 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.1015212 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.935374277 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.102749874 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.276687861 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.331378519 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.792816332 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.519782192 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.467094411 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.095184832 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.561975654 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.308641113 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.539770401 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.629452103 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.273983249 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.843905409 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.336286091 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.099458547 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.348522655 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.398679406 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.096173212 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.104303966 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.815919181 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 4.225890169 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.099231464 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.269872818 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.041461995 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.54478911 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.311756735 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.097128591 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.470263318 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.098099376 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.357080153 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.602938501 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.413412563 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.104061292 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.103676371 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.100929834 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.104614756 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.32366536 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.340761207 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.658843468 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.247103471 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.398797188 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.318066377 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.421425402 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.56041268 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.106884308 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.42915924 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.096195248 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.542195033 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.105626855 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.259184073 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.374005409 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.099606474 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.322815071 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.462480982 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.174751158 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.496273562 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.098922759 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.103357512 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.683161216 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.280440338 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.530162634 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.095355632 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.196839394 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.469137039 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.229625235 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.294875624 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.418481259 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.084712784 seconds)
  done (took 726.654344138 seconds)
done (took 1067.968599534 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.092746326 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.105893904 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.11164308 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.106962588 seconds)
  done (took 25.50835041 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.076408359 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.173112699 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.280389677 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.105536742 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.459355158 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.163841778 seconds)
  done (took 11.364143092 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.093910312 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.102393756 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.103583279 seconds)
  done (took 19.392935261 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.382587379 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.506699066 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.254542979 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.203705825 seconds)
  done (took 6.450361653 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.1308096 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.126304034 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.106293034 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.137561215 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.106310518 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.105487385 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.140346031 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.1227565 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.106987262 seconds)
  done (took 11.18034204 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.628662247 seconds)
done (took 80.62142238 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.394610511 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.397261176 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.10685579 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.415203284 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.231933826 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.425419383 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.222127739 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.126293863 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.405816973 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.503576729 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.600381 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.183306608 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.430413733 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.536608214 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.351617165 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.133340781 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.120185188 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.167298676 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.733331668 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.281342987 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.543999927 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.240359779 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.747163637 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.133169169 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 2.018279404 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.242098798 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.384046505 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 6.952048349 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 2.147311166 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.127855328 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.189462478 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.570287989 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.337652843 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.440594919 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.245540951 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.957547001 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.52999465 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.194385275 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.237889873 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.620144193 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.398477349 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.22947121 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.092477855 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.271650134 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.498600327 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.123480043 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 2.08213413 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.266009676 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.515119879 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.270586429 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.621104198 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.108335925 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.714711913 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.181303526 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.231799597 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.096450395 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.033252159 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.60001285 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.264488051 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.415830619 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.115863201 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.206302038 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 1.981345596 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.137835441 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.292803206 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.379278072 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.548008529 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.237897624 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.556397135 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.134448165 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.1202413 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.129835851 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.78972477 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.248394032 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.095736143 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.24487074 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.379327745 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.248791714 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.102318717 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.325717219 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.329522578 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.103618125 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.243891665 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.414815936 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.271606066 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.471795683 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.58812832 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.564552447 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.552800032 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.978144335 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.698027374 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 6.284320113 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.715262793 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.158130691 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 7.520325244 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 6.221320919 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 3.402081891 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.61429153 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.243554585 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.643654514 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.133579876 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.121886697 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.432124484 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.382052487 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.872685201 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.138466628 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.261342635 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.093377236 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.391665952 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.887479627 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.208409819 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.658153657 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.10842716 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.166422577 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.67665106 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.109043882 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.442829813 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.546614222 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.224684444 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.100951274 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.390965202 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.108904329 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.225207505 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.663338397 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.504741967 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.319699193 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.098897506 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 3.342587945 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.10853744 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.320069746 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.111172251 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.683593169 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.628936337 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.137338949 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.35742935 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.229353923 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.094507726 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.449020926 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.156660775 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.329060564 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.412797148 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.429817214 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.226844258 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.094297349 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.455867501 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.107110489 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.348667355 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.43961852 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.269622048 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.417725476 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.189175851 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.119288121 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 2.063311434 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.521439213 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.70144806 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.662650749 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.374453502 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.23625304 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.589308749 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.457742565 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.917218007 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.205999212 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.155983487 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.107556708 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.12296473 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.166693731 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.095635348 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.105476575 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.393636832 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.360219105 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.656859571 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.896823634 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 5.803390024 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.380312159 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.257723811 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.990097321 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.692182487 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.111492344 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.383099122 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.595341171 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.191220282 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.140331626 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.096549035 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.158774752 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.817226143 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.140747435 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.411146657 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.575103827 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.354661345 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.525064856 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.263668979 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.142894218 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.452253725 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.373903771 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.426255493 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.319997023 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.529123415 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.247252797 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.398996024 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.139145702 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.432296353 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.106135816 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 3.154619385 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.328986681 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.60240737 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.438190723 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.335632463 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.273852685 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.440828368 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.106968014 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 7.349459353 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 6.199150967 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.476179707 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.133461113 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.31874732 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.200666465 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.519469244 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 2.028164574 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.224616828 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.408827387 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.257321969 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.231906624 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.599458409 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.121936404 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.437815765 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.268108802 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.270782013 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.338579067 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.137921331 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.233788555 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.380032971 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.274408556 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.362523264 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.929097291 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.526581811 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 7.649308409 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 1.228872307 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.094155129 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.576263917 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.138385871 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.117118493 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.349705364 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.267449477 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.422902344 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.26720045 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.276291795 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.17398007 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.134420192 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.588920367 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.950241488 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.713364302 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 2.091085265 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.131204018 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.094704446 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.503250747 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.513062438 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.169952945 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.241418543 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.684370902 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.141717167 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.265114367 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.110313082 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.109517373 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.838946349 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.237422585 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.351733084 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.661034042 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.109843073 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 3.362103568 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.168416725 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.536396717 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.581325796 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.157923345 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.230399054 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.419376965 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.008285918 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.505929982 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.132497045 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.276127196 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.433216357 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.226771632 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.216578052 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.099938459 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.14115194 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.610840546 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.331345869 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.587975867 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.138281014 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.557801986 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 7.179897039 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 1.338430613 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.121413281 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.188402957 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.496033355 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.262575115 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.50154063 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.111541026 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.258381337 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.358557252 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.128401851 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.096471103 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.244856111 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 7.697319787 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 7.534527132 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 1.385022536 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.317520091 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 2.06456413 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.348488899 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.105546876 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.685162843 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.248568055 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.233863732 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.706880288 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.58151614 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.107920886 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.337131318 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.099322221 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.500798686 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.133630578 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.121021576 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.242184941 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.188904156 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.096724417 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.63243358 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.299111364 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.615694137 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.193438157 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.99275809 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 7.220375971 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 1.286272484 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.227287395 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.509037066 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.111380293 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.12181985 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.245331348 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.758446522 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.29505493 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.138445713 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.378792804 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.110556311 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.710163503 seconds)
  done (took 865.724251691 seconds)
done (took 866.990084635 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.292892486 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.476912618 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.345079919 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.977068313 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.915849797 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.74874023 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.3620686 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.336065562 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.180712232 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.361562851 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.046134693 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.910619469 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.20719162 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.21903277 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.191588047 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.229349889 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.342062878 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.343993402 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.220736016 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.04716793 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.617024426 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.051154122 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.521905344 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.398361659 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.478839218 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.210132538 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.306126305 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.492742145 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.492441732 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.293641784 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.322631414 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.330315322 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.935983639 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.348828893 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.195246545 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.185845163 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.981757649 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.202093409 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.297778613 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.187132897 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.479692361 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.233842986 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.808976589 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.969240803 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.882829044 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.518518315 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.943345393 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.209973977 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.232108202 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.309236238 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.299278585 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.303012243 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.492927608 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.316140274 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.997429118 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.963103051 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.493747544 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.990199456 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.846684395 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.309923929 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.500093854 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.208625371 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.308259379 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.333887268 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.228183727 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.403439581 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.517507951 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.301019925 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.326710941 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.370148605 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.348700656 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.327007964 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.217244252 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.256274468 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.236036891 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.360791122 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.974569285 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.346426053 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.893683159 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.2071234 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.053119566 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.000139739 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.0572645 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.186507325 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.293795025 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.882609951 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.099052127 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.057262462 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.221061707 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.327318314 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.041915857 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.346469743 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.563888211 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.309045839 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.294727875 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.348340956 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.099085445 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.294024785 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.071199328 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.329062517 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.884635693 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.308322075 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.136763401 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.194620794 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.205457527 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.300190132 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.308486315 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.519803735 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.328412773 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.273168277 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.48383522 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.236454081 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.328533575 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.220093614 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.180243437 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.884519645 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.395363076 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.989684301 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.295649686 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.774990603 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.40315968 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.194391919 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.485793606 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.40161306 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.29654363 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.196027618 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.205904177 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.042714815 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.207426457 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.210175751 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.287441193 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.560883222 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.312158433 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.008564496 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.329969399 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.867045692 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.341921616 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.32876612 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.178153052 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.016216 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.197655274 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.055871294 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.402860788 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.485153548 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.344209279 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.400652578 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.218770075 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.398790639 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.294711124 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.221961023 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.329565743 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.222254358 seconds)
done (took 244.563044716 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.456408142 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 5.275778448 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.374308661 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.387065431 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.503077291 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.497063902 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.171573281 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.538858088 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.221841166 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.522494882 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.358928198 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.994322858 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 5.355314581 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.323828943 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.483951457 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.37540068 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.223899355 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.36708728 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.592759913 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.461875503 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.874083964 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.367940339 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.25432676 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.52062093 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.094844423 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.863885594 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.466761545 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.235730374 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.369503427 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.859200106 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.902349032 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.374927256 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.458193364 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 4.829895201 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 3.577407376 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.838192958 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.504214397 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.933771718 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.476919902 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.460857158 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.367492698 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 5.980361741 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.867351943 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.889740551 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.263275172 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.462901678 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.175045292 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 5.045018781 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.101206757 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.838099333 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.369275699 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.900709732 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 3.014467156 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.437129205 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.319053577 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 4.79964192 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.591577972 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.594211452 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.460418588 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.437743951 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.45671898 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.519705076 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.522680054 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.297877959 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.883898627 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.389735709 seconds)
  done (took 147.830514164 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.529223629 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.403613675 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.506834183 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.511163769 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.672215485 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.527050176 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.612640849 seconds)
  done (took 13.858853698 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.164522304 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.151966353 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.354431391 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.353195927 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.158041555 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.281620402 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.240036522 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.902806894 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.377594784 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.19686886 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.470161779 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.349182819 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.809583844 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.885284013 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.243805227 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.393493589 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.122551178 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.222097077 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.213330423 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.414244842 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.902702734 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.85819945 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.343814092 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.240587896 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.161128137 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.198769892 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.149402691 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.125082196 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.19902671 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.138675424 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.167630114 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.265153244 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.152769148 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.842093972 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.180256378 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.468182816 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.158336607 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.202268757 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.295323294 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.099949848 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.137847274 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.157759196 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.291823069 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.165803705 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.137584594 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.342392937 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.14026166 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.165349652 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.133685194 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.149152329 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.340427579 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.155933514 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.17795269 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.812221225 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.363583657 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.853889801 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.224655287 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.147840818 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.146535077 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.210541682 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.153185548 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.413442127 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.396819968 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.134079561 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.36955057 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.436604055 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.151945571 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.132712507 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.133935671 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.396785736 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.14639849 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.396374993 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.155474209 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.202416517 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.201687555 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.280004611 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.342355397 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.945095848 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.911619512 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.783679604 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.127037137 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.141865219 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.449589906 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.093824632 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.80655416 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.142628852 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.203335377 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.817160543 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.062980285 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.156367518 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.463156734 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.136443801 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.210968909 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.201158447 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.181007915 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.211770842 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.377059531 seconds)
  done (took 151.85261901 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.500939564 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.768841581 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.382627204 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.411664401 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.550597106 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.659760125 seconds)
  done (took 16.369831436 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.452717523 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.954006095 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.170993347 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.167697019 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.206279827 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.150598623 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.14757949 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.325305569 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.284248566 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.160015585 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.147289748 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.169598858 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.153292628 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.286872247 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.146932915 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.160263386 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.15098802 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.17610288 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.155267916 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.217360757 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.457717251 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.208102546 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.217943034 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.046101194 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.187846725 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.164504215 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.153354947 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.157533627 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.155186411 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.468873948 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.344558534 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.149418632 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.987070481 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.471621011 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.90759677 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.051613406 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.28380436 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.174817806 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.207406497 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.14965476 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.169396389 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.217567543 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.166022719 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.173534103 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.496964218 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.95533158 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.212781826 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.438168544 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.14800839 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.169013477 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.17042813 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.16979344 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.147857502 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.178928692 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.673598646 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.576324261 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.115132292 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.15143451 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.21036797 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.048990109 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.208679253 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.152446562 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.471971352 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.083904755 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.836417593 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.176494289 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.052339189 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.269056905 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.221090149 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.168293952 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.171346947 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.17192276 seconds)
  done (took 117.496807076 seconds)
done (took 448.507855954 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.100601711 seconds)
  done (took 7.195808052 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.192885209 seconds)
  done (took 7.429194971 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.096942163 seconds)
  done (took 7.203634361 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.09497075 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.121170702 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.123122519 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.123116226 seconds)
  done (took 25.602997963 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.288725244 seconds)
  done (took 7.39378579 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.095116621 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.120769464 seconds)
  done (took 13.419840639 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.333108358 seconds)
  done (took 7.452557135 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.413381378 seconds)
  done (took 7.522151033 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.106389405 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.129125173 seconds)
  done (took 13.368574199 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.097038696 seconds)
  done (took 7.198997176 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.518800773 seconds)
  done (took 8.715854113 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.111780478 seconds)
  done (took 7.250592348 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.121490875 seconds)
  done (took 7.227339122 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.229089402 seconds)
  done (took 7.32991605 seconds)
done (took 135.408093335 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.09615917 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.10647958 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.10597603 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.105930712 seconds)
  done (took 25.510971447 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.431326047 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.434583398 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.411749519 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.49961397 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.390909516 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.378860223 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.440241011 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.446117098 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.389703834 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.50881785 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.442100015 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.591680434 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.488596447 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.415272701 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.416360288 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.487354457 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.58263617 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.43342439 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.375885608 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.410172497 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.582524209 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.583327111 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.868064118 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.855810172 seconds)
  done (took 36.970489219 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.317377597 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.472425044 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.276211527 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.523965899 seconds)
  done (took 6.686825644 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.142501003 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.482256819 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.465819525 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.525526995 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.465552771 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.278536146 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.466553091 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.317518135 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.287332004 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.247842428 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.732719956 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.259120683 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.272774856 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.425569196 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.281606928 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.106973241 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.108616709 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.248922395 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.482234245 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.356035133 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.360062217 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.465728929 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.466048885 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.46467304 seconds)
  done (took 33.806632894 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.866681405 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.040233746 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.469156403 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.027323636 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.808300805 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.905675737 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.39050147 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.609850427 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.378069924 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.353512748 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.841481802 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 1.842201854 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.255181073 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.002122962 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.883798617 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.287149245 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.287535095 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.963370499 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.713194913 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.41275008 seconds)
  done (took 38.435703563 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.095243986 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 6.105148458 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.339251243 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.274194895 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.097012347 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.106712498 seconds)
  done (took 28.115652299 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.162186223 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.262761665 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.418618588 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.384751975 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.264146057 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.244651749 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.773048086 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.331628686 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.882422019 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.919451223 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.765897327 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.561029542 seconds)
  done (took 22.075475883 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.095546702 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.143237627 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.106989096 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.276444156 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.935403366 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.97433727 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.426277578 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.097986899 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.185556961 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.301977654 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 1.967590228 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.27469594 seconds)
  done (took 39.901349395 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.31998441 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.351128353 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.447393232 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.948584523 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.640892951 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.190062761 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.532378289 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.614851719 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 4.182342139 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.943447523 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.641699453 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.162608729 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.637431974 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.075856042 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.10477293 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.425170751 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.925001625 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.601059866 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.548706029 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.18033861 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.064883935 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.253244761 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.100619455 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.654956123 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.430698668 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.098135642 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.397524189 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.347085179 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.097753891 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.326801326 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.101896859 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.587450986 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.310509965 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.405700362 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.635047368 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.187712812 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.212191879 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.246706373 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.690751808 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.397928185 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.244723001 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.263839873 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.097755304 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.324390027 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.360472105 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.881925742 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.101132046 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.75038026 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.08585776 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.228367628 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.999835875 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.703029406 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.557415417 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.831624955 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.244385822 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.42096643 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.260783986 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.239946069 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.404473094 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.159124122 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.289769848 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.213606209 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.323132287 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070208853 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.610455556 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.445432245 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.442413323 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.432653313 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.409471209 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.434677406 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.470107848 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.22650349 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.923609548 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.247487476 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.63159507 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.013836247 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.46121976 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.099378855 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.83122695 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.636612062 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.08431591 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.217056422 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.865409047 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.065387335 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.099461089 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.279902191 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.969619622 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.074838287 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.199580179 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.16300686 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.584418014 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.239707622 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.253251898 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.36397148 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.803381372 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.080655786 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.888278445 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.397740943 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.065853969 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.666290832 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.114325563 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.075315568 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.120629617 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.671701755 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.515218219 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.153310527 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.832683905 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.766296717 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.429294459 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.731223117 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.264668821 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.09810517 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.479302112 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.430319773 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.095763919 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.865349177 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.235556879 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.215521612 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.461879317 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.099757832 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.073689956 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.523115628 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.307567635 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.123149107 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.327629214 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.100315322 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.257253064 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.099905641 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.916833281 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.154410589 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.347012557 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.635794786 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.321196023 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.189961651 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.068919546 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.252626882 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.610201142 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.192500551 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.451252108 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.544376207 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.706036424 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.59257006 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.092845458 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.965369012 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.589898815 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.373251179 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.437869695 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.730173679 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.284027057 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.192760566 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.097793717 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.269120124 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.109254621 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.630797384 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.101738067 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.929330534 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.902667283 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.453407853 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.099164815 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.086839255 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.865012153 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.356829992 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.747909827 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.153422573 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.276559328 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.389109058 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.353120698 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.097812641 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.072900742 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.482782622 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.451467065 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.632016914 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.359488908 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.764584168 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.466768773 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.617109055 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.391104527 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.475930835 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.861938864 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.525022716 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.455549291 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.343018467 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.126099744 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.103779363 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.170226577 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.529480457 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.327644259 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.837646201 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 4.848741858 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.862427502 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.15117323 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.679021123 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.074294225 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.251622199 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.592913658 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.142508753 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.666157788 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.311281155 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.338026125 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.381890059 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.133741642 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.447745729 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.914258098 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.537795545 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.474801769 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.416816932 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07739351 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.314643035 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.609044993 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.602479523 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.240504847 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.518698022 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.340604144 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.159996568 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.105100731 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.451170917 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.051458616 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.855521993 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.407316325 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.935271857 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.792674867 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.267846033 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.106046293 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.121803278 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.033522204 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.275678002 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.14930119 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.269330556 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.649670234 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.370339826 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.430661473 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.09815737 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10668976 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.386683605 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.412083948 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.380030295 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.61260216 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.718222385 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.788850715 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.208469076 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.756762338 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.270879604 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.139682062 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.762490139 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.413612556 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.045600181 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.298880009 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.85693239 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.238164028 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.16900053 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.401714193 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.097986224 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.587702508 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.72360297 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.103234617 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.097003766 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.244630712 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.106202639 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.395205095 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.863372996 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.341106006 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.836909659 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.39350856 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.357856976 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.296548157 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.508825556 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.640132222 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.892247321 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.07470122 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.261505641 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.246987862 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.424240639 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.097385343 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.395643165 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.794232534 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.771715053 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 1.880759726 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.649056925 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.331745871 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.28595277 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.576455771 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.35592825 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.449466673 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.059168997 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.718375794 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.07934087 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.242618376 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.070838107 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.154901228 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.429406476 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.482282153 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.586092614 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.17322907 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.63658263 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.513847742 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.153532547 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.283433872 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.364214252 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.099812029 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.442416235 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.100045385 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.925401516 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.523352475 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.106567895 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.298571128 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.297742227 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.429161855 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.261692828 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.670535186 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.142465495 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.247555222 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.863968367 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.279554004 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.238368494 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.438829395 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.175265617 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.141766447 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.143118826 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.645565682 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.734451787 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.585334338 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.720317399 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.70344242 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.44623211 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.825369841 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.100598991 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.399372747 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.263817577 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.492872746 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.294831914 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.505683263 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.138295114 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.327680058 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.428705097 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.249009325 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.657444067 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.082549004 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.710379147 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.319794027 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.616222976 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.661821467 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.865613383 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.576253147 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.92554527 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.630192284 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.07568091 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.269974195 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.381164938 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.819913387 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.533895252 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.967654996 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.8952266 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.243394467 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.531087867 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.174453787 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.877404196 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.268010567 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.339512387 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.393485206 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.242287595 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.066756381 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.684239935 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.87462672 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.380022266 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.270473575 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.296128043 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.227199057 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.030320215 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.657039796 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.414846161 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.824172238 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.578062381 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.348269768 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.071710464 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.102767177 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.807471759 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.284799641 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.19874866 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.431302075 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.539407539 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.066231688 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.124986504 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.076804845 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.648422451 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.871451559 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.825747549 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.450618005 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.650035366 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.709277397 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.868750913 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.831968527 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.395207148 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.461252929 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.514322072 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.036677244 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.536656017 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.428298682 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.253761768 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.069645105 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.305040809 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.110117083 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.052798783 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.993946631 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.406542693 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.156406059 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.961611462 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.747169167 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.036622967 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.146691463 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.16300525 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.329558904 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.298982454 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.099060738 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.708084084 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.518907567 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.265518535 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.084436853 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.867960736 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.068437957 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.397534068 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.04833092 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.302470112 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.938258296 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.181444487 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.747753353 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.642194584 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.126672186 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.317755789 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.0726103 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.868455699 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.121676645 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.787302739 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 1.877735102 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.350255391 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.617471531 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.302204686 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.106124042 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.431894619 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.241174364 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.431953409 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.573390873 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.5896009 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.520161478 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.476573473 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.402256866 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.82638652 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.246199622 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.346631211 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.068080271 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.103968541 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.126507541 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.479638155 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.48080955 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.099591045 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.665785876 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.352319327 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.223193425 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.266367338 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.205570653 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.643930153 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.312272531 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.235513582 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.266263615 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.349046159 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.459903132 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.101389302 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.320431076 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.099221434 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.113519291 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.397968458 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.34959231 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.480020147 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.424049636 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.702065695 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.258416018 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.607566229 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.072332469 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.635197455 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10457326 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 4.213493288 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.475065512 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.099920741 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.591995827 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.743594655 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.303647689 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.803939791 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.195326139 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.065959943 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.304976288 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.585938991 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.109749488 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.75232935 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.533548252 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.099030827 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.582958733 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.178805963 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.270660166 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.855027003 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.600108203 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.100504109 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.164676679 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.246239598 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.661016292 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.806025391 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.288858994 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.119520263 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.931118384 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.097376409 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.110398268 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.230877274 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.639104214 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.115396687 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.694960107 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.233206181 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.263721225 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.113795291 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.249842049 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.10766952 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.399990752 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.292091616 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.347924629 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.376560634 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.29994401 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.109392852 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.712919496 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.797281083 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.179957079 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.314974423 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.047562877 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.501837181 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.974160087 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.047472829 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.680523282 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.358567513 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.306325373 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.538063224 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.363116707 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.143365855 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.319776936 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.099686076 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.376747988 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.259491022 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.667380124 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.364931454 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.093233227 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.401046403 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.125626563 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.663274751 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.578474242 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.985350032 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.098823055 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.419124677 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.100097049 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.18415711 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.752093826 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.299009725 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.223433741 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.328757071 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.694672089 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.42176732 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.235325199 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.10530151 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.320081612 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.614003512 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.072434331 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.174207279 seconds)
    (567/608) benchmarking "2d"...
    done (took 1.997941068 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.315263135 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.432615402 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.07068272 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.300313644 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.119260895 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.087040788 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.603832163 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.100478639 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.474506616 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073099727 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.637328555 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.080358792 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.191862419 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.263689393 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.440950166 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.105430885 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.824595741 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.276652348 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.100264812 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.10330214 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.490748938 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.188735336 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.354480694 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.582358532 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.309627654 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.44593472 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.972071653 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.888512229 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.115564161 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.413470837 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.098691313 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.67127718 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.171994886 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.621984255 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.874275317 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.118355122 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.663360786 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.348070662 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.820631682 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.249816602 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.589802446 seconds)
  done (took 1939.156071996 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.128205427 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.185966202 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.188708766 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.201698886 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.130476172 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.137823592 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.17841447 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.147260686 seconds)
  done (took 50.39956878 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.097379005 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.088862498 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.543800322 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.279931542 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.129744126 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.301019264 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.260788956 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.61388148 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.300737042 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 5.136004968 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.163681151 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.153656283 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.11325116 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.141369631 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.962418482 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.189008192 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.104581394 seconds)
  done (took 90.690865147 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.120862239 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 7.075201749 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.135698783 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 6.643936917 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.138256695 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.381838919 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.119226428 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.103783362 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.789812435 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.777656538 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.121607808 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.260968738 seconds)
  done (took 78.80944507 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.139005397 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.137309507 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.136245826 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.138915828 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.137606555 seconds)
  done (took 6.791939608 seconds)
done (took 2398.477683245 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.329228926 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.577998765 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.666671995 seconds)
  done (took 4.342753494 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.168967365 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.23408508 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.301855094 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.248279087 seconds)
  done (took 6.07757681 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.38604561 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.580937326 seconds)
  done (took 4.064279073 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.563864713 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.120370255 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.64700253 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.097287076 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.110190897 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.109688667 seconds)
  done (took 19.431663049 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.133296325 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.131103665 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.131897643 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.127061378 seconds)
  done (took 5.631391289 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.10016039 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.117885447 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.108660649 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.093400387 seconds)
  done (took 18.51654677 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.325436107 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.358469965 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.866636407 seconds)
  done (took 5.661409007 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.917832045 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.483842442 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.908895188 seconds)
  done (took 6.409456961 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.056404008 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.044842657 seconds)
  done (took 5.202276098 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.265537018 seconds)
  done (took 2.364222295 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.595557921 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.592943343 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.964504748 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.995139149 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.129112376 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.425883268 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.429503791 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.473069893 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.800834248 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.648947322 seconds)
  done (took 18.153513669 seconds)
done (took 107.614113623 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.005059673 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.512476247 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.253273258 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 2.812283593 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.199282029 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.254657559 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.723152466 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 2.584864383 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.701069719 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.699396119 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 2.807195665 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.200166797 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.134715409 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.506400979 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.132622012 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.45536044 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.511163974 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.024108787 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.015495133 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.044170527 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.728067395 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.702920105 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.516969044 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.708973546 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.520081146 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.268366598 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.354355795 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.4631561 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.277963285 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.364665782 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.274677373 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.306535047 seconds)
  done (took 154.161794954 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.098356634 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.114355401 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.114677468 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.108735625 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.097993529 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.112735594 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.109448689 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.109640483 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.009819644 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.031849726 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.117409089 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.089328422 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.147002301 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.111121784 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.1237597 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.117516281 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.14316117 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.114794033 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.1146827 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.113161931 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.114557184 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.957494374 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.114102184 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.964166668 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.144026891 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.116191498 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.110009847 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.113273691 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.113306388 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.113386212 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.114444739 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.109362903 seconds)
  done (took 188.298219015 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.100160743 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.112650347 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.115730931 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.10975763 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.112595059 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.114962027 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.111784607 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.11000553 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.114461313 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.113922134 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.11501243 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.113406117 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.114680186 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.109093151 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.112230623 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.108225041 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.111868742 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.11476951 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.114408661 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.110505909 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.111247877 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.109305699 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.117224757 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.113114549 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.113112577 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.115485867 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.110140031 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.112327635 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.111827006 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.111301643 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.113649508 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.109356839 seconds)
  done (took 196.701871911 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.408058646 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.157871389 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.008373459 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.492475055 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.028840123 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.1326327 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.467196561 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.412924279 seconds)
  done (took 15.219411399 seconds)
done (took 555.496662119 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.784909027 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.045677367 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.290917527 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.329182816 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.740653614 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.402640411 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.3259961 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.595734257 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.846913233 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.568736567 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.625729315 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.321000605 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.996073982 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.334511843 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.303441746 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.582997317 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.511135409 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.804975914 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.319500932 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.971321292 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.326392889 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 1.952876927 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.639977032 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.888031899 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.629032064 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.012184798 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.245840671 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.511846091 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.32289629 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.327048473 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.169765429 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.513852085 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.341214691 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.337491587 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.597123633 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.575988536 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.470364035 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.552458055 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.286764782 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.763781667 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.974953191 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.70759163 seconds)
  done (took 74.948013707 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.132272602 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.149538296 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.304781681 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.201292654 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.753044752 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.208884239 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.361517733 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.342097696 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.229499552 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.344285322 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.386360316 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.782004942 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.381080415 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.816526431 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.366646132 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.385288222 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.207269386 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.729272425 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.36345862 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.34320401 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.17247444 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.298816803 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.178091063 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.326553968 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.167511734 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.181404613 seconds)
  done (took 36.241781589 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.177935726 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.29384992 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.391382546 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.525083694 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.361542209 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.172507251 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.478709648 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.258246877 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.121608096 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.58055184 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.23939721 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.290159903 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.308407533 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.41785308 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.721159956 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.298656699 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.297231392 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.298657441 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.301609235 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.384458319 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.250152603 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.221506161 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.482071796 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.329691312 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.815121796 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.546915556 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.571691633 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.766725276 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.683084402 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.295250344 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.264808003 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.459590987 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.5141716 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.391747798 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.279125722 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.161543149 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.161715697 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.237754294 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.084442987 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.309465658 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.474259168 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.349410851 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.534420912 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.691609886 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.235028555 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.387063541 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.632406842 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.251382248 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.264482984 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.942426447 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.438172746 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.097973298 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.300354142 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.32875444 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.262953509 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.606758582 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.340675061 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.450631835 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.325496888 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.904914583 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.220058372 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.52748788 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.309153349 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.234556885 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.450118095 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.360640812 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.360572876 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.592970999 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.531449222 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.64532609 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.707257241 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.219479863 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.17615101 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.236016128 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.300024612 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.664958254 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.579939514 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.396039901 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.526003308 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.460981717 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.686076954 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.634574857 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.132595156 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.84894362 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.20649868 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.149604911 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.231315395 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.476992188 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.458498372 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.632526835 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.700273162 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.469284986 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.595519553 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.558444412 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.588202081 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.585728054 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.140881959 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.161545305 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.377421258 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.703122817 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.221270171 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.432230014 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.811457034 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.604551335 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.571938082 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.421676478 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.540867091 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.232648572 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.600273329 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.13077578 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.362443857 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.397404502 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.428132216 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.491419894 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.131517564 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.667257719 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.261526337 seconds)
  done (took 229.812739786 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.101207209 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.115499532 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.107952615 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.114059792 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.104231513 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.737865479 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.180851701 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.108485699 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.736019293 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.1795222 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.105750455 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.106963756 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.111188407 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.109384739 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.719017674 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.680972203 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.753622614 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.102647266 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.105955293 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.110398103 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.819015219 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.105998178 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.103925568 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.113396225 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.107638333 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.107637201 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.115424165 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.155710572 seconds)
  done (took 152.126259047 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.160597368 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.571359816 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.199199505 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.260637052 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.204050587 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.176710584 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.674760899 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.298774726 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.236270172 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.178756078 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.163700298 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.391715959 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.410050836 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.767354741 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.296898792 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.249357906 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.821613025 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.305735349 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.173358856 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.171698639 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.327819751 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.517204445 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.450358263 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.463254095 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.3229862 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.456730374 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.242658234 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.160465068 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.29165189 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.656648012 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.185035225 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.544894648 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.318987568 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.17577308 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.672416421 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.51401814 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.75498153 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.723009221 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.356475366 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.127371321 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.130530274 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.400999215 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.494522806 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.219535061 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.164036744 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.818403234 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.186078174 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.576957029 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.209788769 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.126979216 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.2559799 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.271674739 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.434679451 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.186510915 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.364466289 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.355718987 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.671736628 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.151775629 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.214822146 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.474314075 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.148473982 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.658330017 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.657381762 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.229598221 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.182933049 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.02710885 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.258088644 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.693147599 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.792133478 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.21603118 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.504910796 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.35993722 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.143871429 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.425844152 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.337221157 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.645349858 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.755946431 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.305671979 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.269536065 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.243465472 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.444837928 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.152976273 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.714157564 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.264250221 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.145485558 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.654145839 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.552956446 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.140181497 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.162110781 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.279887691 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.321030132 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.368650783 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.474213288 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.236460938 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.057619587 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.430193443 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.487199837 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.181093333 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.291324279 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.156056224 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.591135878 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.347767733 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.151439265 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.512736041 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.570964166 seconds)
  done (took 156.340665358 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.858372133 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.225256861 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.340055988 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.763509576 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.484361528 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 2.608901727 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.38394029 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.236313608 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.431812741 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.374732131 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.365328908 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.249782203 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 3.124859331 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.887883273 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.224779788 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.343614942 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.234181937 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.773295484 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.486181479 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.165340853 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.441060371 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.845225664 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.465189589 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.57240169 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.604141586 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.661420659 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.809208665 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.306090964 seconds)
  done (took 48.379760639 seconds)
done (took 698.949916324 seconds)
SAVING RESULT...
DONE!
