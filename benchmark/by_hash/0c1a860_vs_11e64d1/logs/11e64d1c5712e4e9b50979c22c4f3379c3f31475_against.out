cset: moving following pidspec: 1418293
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.688962199 seconds)
loading group "shootout"... done (took 0.786995856 seconds)
loading group "string"... done (took 0.207086802 seconds)
loading group "linalg"... done (took 3.095038339 seconds)
loading group "parallel"... done (took 0.021755337 seconds)
loading group "find"... done (took 1.47525958 seconds)
loading group "tuple"... done (took 0.726251399 seconds)
loading group "union"... done (took 3.010503963 seconds)
loading group "dates"... done (took 0.154557654 seconds)
loading group "micro"... done (took 0.056513623 seconds)
loading group "simd"... done (took 0.363633814 seconds)
loading group "io"... done (took 1.361745118 seconds)
loading group "random"... done (took 2.25842938 seconds)
loading group "problem"... done (took 1.189920812 seconds)
loading group "array"... done (took 4.566010038 seconds)
loading group "misc"... done (took 0.948041743 seconds)
loading group "scalar"... done (took 3.424715345 seconds)
loading group "sort"... done (took 0.304742773 seconds)
loading group "sparse"... done (took 3.522161617 seconds)
loading group "collection"... done (took 6.366516809 seconds)
FILTERING SUITE...
SETTING UP FOR RUN...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.35451926 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.07038694 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.0797436 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.076210359 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.158281502 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.081729122 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.086350694 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.067644492 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 2.254642808 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.071256574 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.070209427 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.38519062 seconds)
done (took 4.480006813 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.263877855 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.031866577 seconds)
    (2/2) benchmarking "String"...
    done (took 0.027422079 seconds)
  done (took 0.654166897 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.027176785 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.015103556 seconds)
    (3/3) benchmarking "different"...
    done (took 0.021785362 seconds)
  done (took 0.647565589 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.020172088 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.094970304 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.021047998 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.021671807 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.021606722 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.020995132 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.020821927 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.020795607 seconds)
  done (took 0.806072936 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.028226928 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.022242828 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.0203897 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.021947325 seconds)
  done (took 0.678985736 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.02218049 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.082616743 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.019676437 seconds)
    (4/4) benchmarking "different"...
    done (took 0.019556593 seconds)
  done (took 0.726802748 seconds)
done (took 4.398605007 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.096077866 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.680544691 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.723567545 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.076176421 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.246035636 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.333748124 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.075051131 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.136461631 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.043350276 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.030481392 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.077926009 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.035769082 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.375446383 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.333084478 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.026420247 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.140200977 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.585765155 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.039035325 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.070677701 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 1.28400094 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.036050927 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.038373537 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.04321619 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.025713306 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.146056381 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.131459805 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.589903676 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.058351874 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.023686065 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.049892378 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.026215378 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.031642817 seconds)
  done (took 8.235107318 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.048401293 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.04319804 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.022737456 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.058822916 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.048250264 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.023996561 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.029308615 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.022661869 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.041843881 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.087338604 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.04464313 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.052534404 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.020416027 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.023457719 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.025580438 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.114223618 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.036531823 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.036109909 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.021680742 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.035654344 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.04920672 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.033734376 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.032578015 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.031789522 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.067551641 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.088815399 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.044591818 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.063842753 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.021878875 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.033838901 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.05245702 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.063169075 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.022330679 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.020625941 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.064372716 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.041584982 seconds)
  done (took 2.194804758 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.98165021 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.04999791 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.037447519 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.029057524 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.063267947 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.051687911 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.076858523 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.076121842 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.054106396 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.023373375 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.102817857 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.628080923 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 0.062364461 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 2.025869959 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.027889563 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073907695 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.313395493 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 0.858897591 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.023849636 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02285882 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.02497454 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024672281 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.067482618 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.021343932 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.131718272 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.572901751 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.027327967 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.024588321 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.052417162 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 0.03917847 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.020889266 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.103275791 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.050796252 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.028354428 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.525806312 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.02196554 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.020013823 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.045823601 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.050265073 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022432304 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.023561991 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.034425258 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.02174538 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.078652986 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.036293224 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.649919354 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.024638814 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.570562178 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.17471999 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.026790501 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.025407618 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.056120118 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.018829973 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.02222523 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.576307379 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.096808983 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.021718832 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.241871124 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.024249855 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.02301421 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.023366515 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.054233049 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.022258734 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.023391601 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.025338792 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.040095114 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 0.969404626 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.040376082 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.041784292 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 0.020932761 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.021955358 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 0.020453237 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.379200854 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.028807068 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.024353679 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 0.019931759 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.025757662 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021926098 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.021484766 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.062661521 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.047815019 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.045420914 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.025275624 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.022453662 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.021582191 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.538419466 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 0.940721965 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.024556649 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.023725439 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.457537624 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.020001937 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.02196083 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.02353634 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 0.043151958 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.022535413 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.019361616 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058131274 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.024093958 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 0.023660002 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.549245082 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.023351341 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 0.019546512 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.482187802 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.024401439 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.058806064 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.077938656 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.022304756 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 0.062458141 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.022878487 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.019894271 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.026268295 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.019681202 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.024012628 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.020890734 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.168253119 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 0.020250993 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.02186543 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.023009787 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.021771965 seconds)
  done (took 16.994525539 seconds)
done (took 28.993575031 seconds)
(4/20) benchmarking "parallel"...
done (took 0.658494947 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.085763169 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.047841808 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.106759675 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.055364172 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.022965962 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.055890069 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.061485971 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.059041422 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.02307039 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.023056603 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.022970965 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.0567268 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.059173117 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.023008296 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.052436326 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.057881497 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.023063221 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.018871457 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.022941028 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.02295598 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.022973153 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.018875915 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.023099096 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.023089716 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.054048317 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.023093019 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.018981846 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.053285476 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.023174325 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.052840841 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.02314858 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.023134113 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.023091623 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.054407579 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.023151826 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.053843335 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.018967292 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.023211976 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.023148588 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.023812271 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.023082546 seconds)
  done (took 2.20357967 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.03975805 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.036293518 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.03858614 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.01726957 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.02642903 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.036585867 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017418188 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036101166 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.039117254 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.036542734 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.036399633 seconds)
  done (took 1.018662784 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.093267545 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.037797678 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.038272344 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.017355699 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.028206619 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.037497212 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.017267549 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.036891489 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.038941465 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.037439198 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.037477452 seconds)
  done (took 1.069878744 seconds)
done (took 4.925660237 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.044132343 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.019523375 seconds)
  done (took 0.703644317 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 0.452247483 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 0.114643408 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 0.025818815 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 0.145917823 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 0.021632098 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 0.047290011 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 5.861517032 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 0.042652175 seconds)
  done (took 7.398610193 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 0.072610335 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 0.025791066 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 0.022942393 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 0.021743734 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 0.021989468 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 0.021907983 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 0.023526073 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 0.02217094 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 0.021468015 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 0.023994006 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 0.023710449 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 0.021881697 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 0.022671546 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 0.023984216 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 0.022027719 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 0.022140166 seconds)
  done (took 1.172867758 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 0.02769732 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 0.024668531 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 0.025635637 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 0.016407205 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 0.026718921 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 0.025129649 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 0.026229362 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 0.026896783 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 0.02580987 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 0.025738589 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 0.023659716 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 0.026531742 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 0.025462479 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 0.024096096 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 0.026531658 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 0.016403672 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 0.026524842 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 0.026160042 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 0.027929957 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 0.026915922 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 0.025932874 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 0.023702016 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 0.027524788 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 0.024843434 seconds)
  done (took 1.255363547 seconds)
done (took 11.180974286 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.136798615 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.028818252 seconds)
  done (took 0.805897754 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.023855038 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.022937521 seconds)
  done (took 0.698313984 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.027499127 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.015566601 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.03075095 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.023136789 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.015460339 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.01521934 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.029771839 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.015558629 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.015436773 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.015576671 seconds)
  done (took 0.853022398 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.018679659 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.022207907 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.020221996 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.018416406 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.020042976 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.01624175 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.018376858 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.016651476 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.022056218 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.015724934 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.019232069 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.036159365 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.018751368 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.036756867 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.01871737 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.019244282 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.020733565 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.018503172 seconds)
  done (took 1.030287583 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.017062923 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.016308588 seconds)
  done (took 0.68784987 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.019946265 seconds)
    (2/7) benchmarking "second"...
    done (took 0.016474575 seconds)
    (3/7) benchmarking "month"...
    done (took 0.018081383 seconds)
    (4/7) benchmarking "year"...
    done (took 0.017897254 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.015985841 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.015391881 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.015913726 seconds)
  done (took 0.768946732 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.368096305 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.07704913 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.288954632 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.023394945 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.030786606 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.215197578 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.018869493 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.023295894 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.023146489 seconds)
  done (took 1.720252603 seconds)
done (took 7.217641041 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.039038044 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.137300654 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.042414362 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.380897629 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.03287981 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.021666536 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.05271438 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.131222977 seconds)
done (took 1.503844621 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.255770982 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.307363413 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.281986824 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.100865325 seconds)
  done (took 2.347883444 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.291347317 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.034837747 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.029290536 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.021723376 seconds)
  done (took 1.047991276 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.021376937 seconds)
    (2/2) benchmarking "read"...
    done (took 0.026168973 seconds)
  done (took 0.711615707 seconds)
done (took 5.029725972 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.026506141 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.016180872 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.020914545 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.017583665 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.017226397 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.016809977 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 0.016742131 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.017481068 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.015632162 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.01773297 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.017804355 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017799625 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.017600538 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.017493513 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 0.017026639 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.017765707 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 0.015805377 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.017434947 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.017447074 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.017473634 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 0.015817695 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.017850626 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.017058427 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.017483162 seconds)
  done (took 1.081088163 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.035008516 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.020162493 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.020781075 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.020657472 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.021180072 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.020618818 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.02057211 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.019739309 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.020718238 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.019597344 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.021164911 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.021320574 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.019603473 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.021286737 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019710188 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.021299591 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.020964613 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020055982 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.019725273 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.021356337 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.020842656 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020047802 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.02129991 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.021016064 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.02124501 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.021234256 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.019729483 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.020087151 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.020842845 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.021268732 seconds)
  done (took 1.298767777 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.022146808 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.014558304 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.014788276 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.024565749 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.014532643 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.014796681 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.014974898 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.014219044 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.014590055 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.015413144 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.014851939 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.014379104 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.015140548 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.01443418 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.014432639 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.014954951 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.019371615 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.033721253 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.014741412 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.014480649 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.019018796 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.014635008 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.014538752 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.014533002 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.014978625 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.014501192 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.01446215 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.014890403 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.014480472 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.015090765 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.014546846 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.018937188 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.019767391 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.01450606 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.024571135 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.019507037 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.014523376 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.018873195 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.015397064 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.014450455 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.014417794 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.014363614 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.014593509 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.014628366 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.02486178 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.014751747 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.015429087 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.014994459 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.014664336 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.014348171 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.014659616 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.016222372 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.020250288 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.015980844 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.014564344 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.015570512 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.014486867 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.015306913 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.014679739 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.014458044 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.014497709 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.018527557 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.016077552 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.015290079 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.034750611 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.015960094 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.024915643 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.014675011 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.015323409 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.018664345 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.015172198 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.032883394 seconds)
  done (took 1.879467548 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.025777964 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.025521856 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.032993312 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.023944909 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017834622 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.01524015 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018171344 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.015219987 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.024521213 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018898902 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.01549375 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.01850763 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024272168 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018900742 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016424787 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.02418029 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018842466 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.018067207 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.015466977 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018807403 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016434162 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018481989 seconds)
  done (took 1.115098854 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.093507384 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020560039 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.059947506 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.023609062 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022355442 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.023428044 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.020570755 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020599214 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020707955 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.021291138 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.021227957 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020751942 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.022612175 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.021268264 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.021285136 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.021117672 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020736166 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.021059714 seconds)
  done (took 1.164897006 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.032107544 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.020363795 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.04370624 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.020009009 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.020070399 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.019838473 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.023054207 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.023368177 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.019739247 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.020327863 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.023648705 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.020007381 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.020028752 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.020325134 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020008426 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.020333863 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.020001698 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020380263 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.023657427 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.023329628 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.023368767 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.023676696 seconds)
  done (took 1.170359093 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.033592191 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.019614516 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.034938747 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.020907775 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014895511 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.01484586 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.020495964 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.019705333 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.020417759 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.019201149 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.019706089 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.014912578 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.021262113 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.019837518 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.021490207 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.019869271 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019477668 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.019897002 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.019555943 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014991863 seconds)
  done (took 1.077003441 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.026877487 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.017074309 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.01698214 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.021254629 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.017008091 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.016923071 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.021132065 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.01687981 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.016886967 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.038318735 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.017047264 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.017064279 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.021498106 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.019820612 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.016997746 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.021512209 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.021434694 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.021503056 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.017000147 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.016966094 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.038501104 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.017083681 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.02160401 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.01716986 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.017134703 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.017179903 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.017143335 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020131009 seconds)
  done (took 1.233762221 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.020617872 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.018350224 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.018383381 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.018341083 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.018352895 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.018272883 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.018364737 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.018277054 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.017946733 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.018290099 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.01794693 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.017946696 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.017954159 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.017891223 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.017923158 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.017935856 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.017923603 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.018265617 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.018284783 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.018315282 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.018095511 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.018155326 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.01806027 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.018404937 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.018419786 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.018092493 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.018463155 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.018387984 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.018081941 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.018405476 seconds)
  done (took 1.217949837 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.028830899 seconds)
    (2/2) benchmarking "in"...
    done (took 0.025819091 seconds)
  done (took 0.723829049 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.017789476 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.031955488 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.014343293 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.027174078 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.02244274 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.018491741 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.022701612 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.022290539 seconds)
  done (took 0.842032133 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.022085102 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.044293298 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.016105132 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.016499399 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.01862098 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.080892718 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.028202757 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.02750635 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.029575991 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.019081149 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.016132643 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.027565645 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.015659158 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.029279962 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017335755 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.02559382 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023259013 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.03389769 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.029041881 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.015008959 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.028705566 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016590203 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.015138106 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.016629812 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.016281045 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.022818128 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.031707623 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.028336059 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.024382671 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.014246598 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.034478987 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.015157477 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.015715539 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.024284964 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.01866527 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.015098703 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.052222732 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.015230385 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.019581388 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.015008956 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.027044605 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.035970059 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.029488906 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.032931357 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.016488621 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.016870844 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.015022126 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.016630569 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.019247727 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.024421518 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.015341473 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.022665922 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.014961326 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.016621767 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.025743515 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.015392137 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.019977005 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.024439767 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.028891463 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.025501767 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.027486096 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.030585079 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.024040512 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.022400678 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.015967617 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.03503454 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.016834837 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.028529674 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.030080241 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.016405288 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.028367158 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.015130913 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.014420272 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.015257019 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.048976716 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.016697022 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.016188942 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.015461527 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.015519077 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.016713728 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024943811 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.020241409 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.022900008 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.018441232 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.031293154 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.02461858 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.015200364 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.021313819 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.033789616 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.019511255 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.015497573 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.032397318 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.019530197 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.015235497 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.03370058 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.025894337 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.017095731 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.01616288 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.019531028 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.028920696 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.016748845 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.014565921 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023909637 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.016904041 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.017362756 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.019497119 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023439058 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.015155878 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.025449362 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.019766878 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.016813723 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.014508263 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.02031839 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.016195462 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.01454516 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.024876015 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.015446999 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.030176166 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.022349419 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.029934521 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.030395856 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.025905827 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.032063119 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.015671721 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.014853663 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.034343521 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.025229728 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.017067476 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.034136192 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.015656701 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.026509424 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.015874159 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.017269283 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.025130212 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.015091353 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.017490224 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.015985563 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.020913421 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.017283163 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.017546251 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.021963993 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.024368235 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.028109437 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.016893808 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.024682146 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.016063936 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.031870507 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.025637894 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.020824206 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.01909726 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.016589514 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.027888098 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.022726509 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.025099839 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.015652247 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.016516456 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.015807532 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.026925372 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.025403373 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.017532129 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.023470662 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.020752677 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.016568549 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.015868985 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.016775307 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.019850536 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.019260227 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.016368055 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023679459 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.02485839 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.030420683 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.023980659 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.025030836 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.01531465 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.015844603 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.017854412 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.0158141 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.020803147 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.025350342 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.031746487 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.027957033 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.037502219 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.016145358 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.025820807 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.017756653 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.03331279 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.029414789 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.016986512 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.020955373 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.015096261 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.017811564 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.025358928 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.027652553 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.030312404 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031089636 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.020992953 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.020947045 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.015878067 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.031415663 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.016523514 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.024606513 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.025384146 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.02097192 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.015937107 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.017949865 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.025373214 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.021066063 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.016396574 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.032132425 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.022827748 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.016016056 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.030645283 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.016360266 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.027742957 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.016187879 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.020078799 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.021726421 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.018232111 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.025583947 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.031847085 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.015208947 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.01650314 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.032186606 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.018104074 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.018019348 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.024339423 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.031547804 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.021109991 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.024091641 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.027134953 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.026771905 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.021130345 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.026658493 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.017348821 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.025612506 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.019804021 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.028323541 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.016251228 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.035142188 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.015269031 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.031798043 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.016929097 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.027554438 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.016618573 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025795758 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.017239377 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.033952944 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.017901673 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.017140915 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.028427633 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.0152506 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.025490564 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.016086254 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.02154632 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.02323314 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.025639213 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.018155928 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.025826367 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.017986323 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.024960186 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.021213085 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.025195235 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.025564891 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.021150757 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.016028173 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.024387655 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.027467338 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.024449429 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.017915396 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.017955228 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.160872234 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.024774526 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.016492628 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.015961621 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023321125 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.020317389 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.02146131 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.016443274 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.016587166 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.016459196 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023618539 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.024561827 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033030915 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.023695784 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.022482512 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.024259987 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.014955803 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.030575292 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.014899053 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.022520036 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.014296828 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.01989342 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.024100501 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.015097665 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.033786135 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.016307859 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.022787567 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.026828099 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023512364 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.019220468 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.032607494 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.017682006 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.023191707 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.022748265 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.019906263 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.021966819 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.016302237 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.023192871 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.024272884 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.025201082 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.015504969 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.0223916 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.023815687 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.016380181 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.021315491 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.016193103 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.023277188 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.016367357 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.014317458 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.019983083 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.025953692 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.020107177 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.020355899 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.015118884 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.014112733 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.015079313 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.020329848 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.019913402 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.023411467 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030129108 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.014266652 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.015627731 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.014746703 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.019024024 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.032660159 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.024349736 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.022849003 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.019966111 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.014252695 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.016024531 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.016221618 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.014974912 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.017530131 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.014321305 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.014692053 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.025240729 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.016204953 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.019735484 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.015026352 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.015780644 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.024437903 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.018603358 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.01514762 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.02183288 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.014632479 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.020424358 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.014286882 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.016125665 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.019828159 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.014548507 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.01908208 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.025126636 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.031224987 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.022038017 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.023973361 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.01592433 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.023021698 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.030578895 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.021719539 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016008954 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.02441899 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.014866458 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.033874986 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.024435214 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.023784238 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.024917628 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.016004345 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.032077014 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.020237987 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.025136505 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.030828029 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.016200232 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.021664202 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.015386021 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.031350907 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.020375577 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.015234635 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.023949714 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023244601 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.021684685 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.027203013 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.016194918 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.023965459 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.020253603 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.019384624 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.017000267 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.016950133 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.024206779 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.031549931 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.016149236 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.019236044 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.023349898 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.023757733 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.020359774 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.027427962 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.02345161 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016439947 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.017618243 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.019842073 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.01659499 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.028015813 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.01609118 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.020676153 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.020676346 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.015630881 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.022860693 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.032474563 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.025205482 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.025398196 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.015723374 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.015179106 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.034000005 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.019848289 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.019189195 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.023865178 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.025412884 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028231408 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.025263986 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.033027424 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.016184818 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.022030009 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.028062873 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.016671918 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.015593911 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.019817507 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.017473116 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.025047499 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.025740748 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.023191633 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.017657781 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.023041213 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.029423388 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.017309979 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.020927337 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.020711648 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.0166618 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.026396438 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.023841451 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.024408902 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.01733358 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.015640316 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.01959025 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.024663045 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.023292827 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.024856233 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.016792307 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.023312635 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.03044692 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.023519262 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.019563961 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.0159153 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.019574212 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.025257677 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.021065209 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.015918825 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.021166567 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.01997798 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.023621236 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.025555612 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.021015936 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.015902741 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.033393543 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.024647461 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.025184443 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.017729154 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.01792797 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.016277899 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.015867128 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.027431313 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.015928833 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.017719225 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.021123521 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.017855429 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.034260125 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.024496571 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.032304823 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.01709575 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.020909859 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.016061719 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.025902037 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.021152696 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.016139181 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.026792475 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.01569258 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.031994346 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.028389099 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.0223963 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.016083971 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.021626052 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.025001775 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.031508754 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.026036488 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.025173654 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.01984375 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.026020293 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.017948039 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.027346937 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.016160615 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.015269002 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.02659987 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.024785427 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.028877147 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.01610321 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.026398363 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.018134251 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.024349045 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.024868628 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.017868072 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.018053732 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.017878741 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.025809775 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.021139764 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.025605979 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.021269224 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.033622843 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.017089048 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.027424808 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.025140636 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.02730302 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.030079002 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.028985328 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.024808143 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.01652793 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.023544077 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.024859903 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.017367905 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.021437161 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.019800565 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.039360514 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.018077755 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.017933694 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.031318501 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.023576704 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.01627583 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.167715106 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.020557373 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.025033242 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.015825466 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.025517165 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.018330745 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.01577381 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.020443714 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.020353344 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.014346117 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.014917186 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.01518244 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.024659664 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.019975571 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.015126106 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.033816983 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.016228372 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.023671433 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.025730995 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.022045117 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.016141939 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.014331304 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.015732181 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.028424845 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.030480976 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.019089797 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.023571807 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.016398203 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.02409739 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.014272008 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.02369837 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.022856139 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.023512178 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.014926278 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.015091266 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.029892505 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.030230189 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.020050728 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.024701703 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.023904786 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.016258923 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.036339662 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.023694645 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.015765058 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.025762026 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.016756719 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.014541682 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.014369346 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.016349929 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.026123759 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.015104734 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.016817562 seconds)
  done (took 14.049225174 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.055728423 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.016001133 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.01476176 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.014756018 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.02158134 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.015756236 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.014717171 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.015790713 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.015762589 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.016760046 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.014758415 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.014852922 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.020253063 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.027245743 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.022396561 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.018349543 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.014954486 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.01603842 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.01496566 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.015956258 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.020654372 seconds)
  done (took 1.123628522 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.020088945 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.019039286 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.01843377 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.018604558 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.017834832 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.014929596 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.018206879 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.014968124 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.018518998 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.015280112 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.018756463 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.015094798 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.015398982 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.015430174 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.015429624 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.016409635 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.018839187 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.01807029 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.01510564 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.01850374 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.016598167 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.018445043 seconds)
  done (took 1.08541618 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.017668028 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.0157551 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.023635269 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.014494346 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.014424381 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.017053449 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.014383599 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.019261242 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.01920431 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.019190518 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.023377562 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.01514311 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.014345785 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.020533831 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.014297771 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.015106788 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.057468554 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.015353001 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.015337924 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.014640978 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.016917423 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.023784122 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.014713086 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.014823673 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.01932446 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.017339127 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.014622662 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.016874984 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.015128857 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.019402246 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.015417031 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.014460344 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.023537546 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.022779273 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.019372789 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.019341686 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.015761295 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.015311563 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.014591007 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.014633428 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.02311517 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.016009868 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.01499652 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.015735738 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.023569607 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.01477797 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.014532998 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.023630962 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.014578513 seconds)
  done (took 1.598607318 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.025440561 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.066585201 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.020716907 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.049848948 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.026118143 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.019754818 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.020520569 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.052831999 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.015775277 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.016282008 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.027214118 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.027255111 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.017141506 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.01838561 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.021740038 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017155273 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.017754607 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016458085 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.019364571 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.016893591 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.019716446 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.021838111 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.026723748 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.027180686 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.018191274 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.016731339 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.016952192 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.018510575 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.02707884 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.02018608 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.018679958 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.019153457 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.02727717 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.021092848 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.016941048 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.017160496 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.027814514 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.017545573 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.01732568 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.015936853 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.017082893 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.018531467 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.021958993 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.027871424 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.017449064 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.02230264 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.017415774 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.015579314 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.027203051 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.017358518 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.020772089 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.02816741 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018430493 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.017714658 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.018759691 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.027502135 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.017558221 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.016468208 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.017727 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.027111716 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.015973545 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018245979 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.027983516 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.017100822 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.020359783 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.028191447 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.022543673 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.018517075 seconds)
  done (took 2.335262486 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.024558318 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.049429846 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.0282804 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.028208783 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.023840723 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.023900155 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.023879118 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.024165474 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.024079411 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.026825378 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.024266961 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.059094976 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.021326129 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.025747043 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.024253246 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.024328941 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.024323657 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.024287317 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.024321877 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.024474155 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.024635877 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.029165632 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.024589455 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.029216498 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.026904841 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.021468044 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.024387741 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.024496715 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.029320866 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.024641907 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.026999561 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.024638487 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.024629593 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.029346722 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.02689963 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.02449535 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.015411693 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.02450674 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.024601423 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.024567296 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.021441927 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.029320562 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.02446504 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.021517599 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.024696969 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.024461752 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.029531857 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.027258344 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.026557884 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.027667394 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.024875414 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.029646201 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.024706337 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.024946749 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.029842934 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.032249329 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.029881626 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.029961348 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.025160517 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.029958411 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.030047189 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.032533317 seconds)
  done (took 2.382444277 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.027743725 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.020357316 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.032634922 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.01447935 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.014426108 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.022872175 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.014450982 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.014505127 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.020143676 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.020366011 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.021777602 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.023262445 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.025025177 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.021787047 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.023232087 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.024994891 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.023275009 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.023232525 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020310153 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.023222864 seconds)
  done (took 1.156263506 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.031610646 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.032920566 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.020162347 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.023195515 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.01987245 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.023163683 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.019389597 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.019965821 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.02028308 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.020007965 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.024323176 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.024366207 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.020472725 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.023504053 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.024211637 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.02352963 seconds)
  done (took 1.083452831 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.019716799 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.022323051 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.020900407 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.015719241 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.017553121 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.015171821 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.01590079 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.014568954 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.017004349 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.028864694 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.015578249 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.018098593 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.016117756 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.014896968 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.01544148 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.017985353 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.017242148 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.015754854 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.016087609 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.01989244 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.023722621 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.016561257 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.018028533 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.015778284 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.017710924 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.023725003 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.01699962 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.0177598 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.015783478 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.018138863 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.017915318 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.022407294 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.017972487 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.016329939 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.015027809 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.0158566 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.016250732 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.018291044 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.018316132 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.016310744 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.014873667 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.017906638 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.016303843 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.016701616 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.017435957 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.018404148 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.017432011 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.021669985 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.016137581 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.018005632 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.016255289 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.017405394 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.016286511 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.022851885 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.017799701 seconds)
  done (took 1.691912108 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.033429124 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.020184739 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.014467184 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.014403192 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.019720963 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.020342251 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.019803996 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.020024287 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.020347927 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.01440311 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.020307914 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.019349879 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.020246958 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.019902912 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.020509125 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.020024703 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.014484205 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.020240823 seconds)
  done (took 1.070384851 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.022368127 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.019962319 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.019016757 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.016402108 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.016322762 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.020130519 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.014829265 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.01590644 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.01593418 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.016272509 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.01635438 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.016068158 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.016080879 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.016068148 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.019944705 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.016506985 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.016089794 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.015069555 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.016453092 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.014889859 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.020355347 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.015052583 seconds)
  done (took 1.089339465 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 0.077388254 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 0.040922513 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 0.037496755 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 0.033801636 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 0.025845347 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 0.04892372 seconds)
  done (took 0.978401644 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.050664535 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.052304238 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.019887011 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.01979509 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023764659 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022063829 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022114086 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022219724 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02502292 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.026042738 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022566669 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.025626067 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025487199 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027396001 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024361516 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024221635 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022662856 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022700219 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02010773 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02915063 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02295836 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.02601703 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02291858 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022767395 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022846583 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02752712 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.025928116 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026582599 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022860721 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026190393 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024411354 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022852521 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026123774 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026703665 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.020233892 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025867416 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022807997 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.029714379 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024410646 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027520166 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020019204 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0244342 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026099 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025700967 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.026055766 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02297317 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02575542 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023024169 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.023128249 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.031449979 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024777369 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027728306 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.024693802 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.026438752 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026261171 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.031539296 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.026823479 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.028043285 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.024976496 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.027092288 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.028204672 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02492418 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028157157 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.027191954 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.025030018 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028377163 seconds)
  done (took 2.42174587 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.058941706 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.020266396 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.022378678 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.025689776 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.026494478 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022209937 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022171157 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.022439416 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022470003 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02034175 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.057337832 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022655901 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026938256 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.02702802 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022620205 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022453158 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022523713 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027003559 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.020345313 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.03077188 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022725358 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.027415531 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027447895 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02740127 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.026494356 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024502987 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022845494 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022777941 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.022786179 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.022751312 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.025662007 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.02293101 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.027497606 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.020411775 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.027350131 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022906648 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.022684864 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.025747518 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022874766 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.024477588 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.027586629 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.029710984 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.022815437 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.022837735 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.026536702 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.022985186 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023034717 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.020648681 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.023030983 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.020670659 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.026776795 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.02671477 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.02677205 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.027885455 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023211778 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.023170815 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.023086583 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.023050574 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023247479 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.024925536 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.028074203 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.023184145 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.031884907 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023418386 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.023451184 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.028391089 seconds)
  done (took 2.409807409 seconds)
done (took 47.945054978 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.203924292 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.176267489 seconds)
  done (took 1.083593203 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 0.028859883 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 0.026729233 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 0.047878743 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 0.022945644 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 0.081257704 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 0.173478476 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 0.125892917 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 0.025742873 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 0.023567342 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 0.02544923 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 0.02309858 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 0.025121531 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 0.025285731 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 0.023000138 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 0.086220983 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 0.025842217 seconds)
  done (took 1.51452827 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.073182618 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.133447351 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 0.057896563 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.022214837 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.103445658 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.02814022 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 0.023917504 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.027816037 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.027972971 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 0.022535352 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.069541256 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 0.035471723 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 0.026868773 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.027804233 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 0.023917432 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 0.026902663 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.027829957 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.02824641 seconds)
  done (took 1.506311277 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 0.095904822 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 0.033890462 seconds)
  done (took 0.84788943 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.111635264 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.063455479 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.102155976 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.29980041 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.09177566 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.096010048 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.100046658 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.098831587 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.068407507 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.093491836 seconds)
  done (took 1.842455048 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.059944046 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.056765094 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.279692489 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.053836898 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.034024619 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.028964455 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.028620927 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 0.031014325 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.028806658 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.02874498 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.073553254 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.027343933 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.023941705 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.075323164 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 0.049590574 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.058985314 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.02319415 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.029451069 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.032164331 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.023212541 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.027986015 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 0.03140061 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.130436638 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.029993849 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.051668668 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.027522523 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.029114764 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.028149836 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.028035484 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.030571179 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.030939307 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.052332888 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.029786175 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.036767494 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.028321451 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.048765538 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.024264853 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 0.050572842 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.026876082 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.024144206 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.027429066 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.031330851 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.024710217 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.030457752 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.029105538 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.029808472 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.031694883 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.023300609 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.029072576 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.026901921 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.024286664 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.028419726 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.028181631 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.029229854 seconds)
  done (took 2.939951461 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.07520886 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.063282436 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02367279 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.070692298 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.062650221 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023684974 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076474589 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.057760448 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.07521917 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023259595 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022959928 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.022858859 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029764121 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.033855852 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.07263061 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.065957282 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.024768237 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023472471 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.065071656 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.065341762 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.022524485 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.077314491 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068403352 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.064727662 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.022248494 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.023729241 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.022482278 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.023054442 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.030624081 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.029815899 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.022731656 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.032396644 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.033751131 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.029108557 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022246945 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022517953 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022481161 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.030381216 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.031905297 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031785357 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.028496505 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022203426 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022482268 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.023014901 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.023515905 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022072578 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.031447512 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.029610035 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.031439467 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023349211 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.023261959 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.022404578 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023241874 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.029190811 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.029804028 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.029589471 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.032720376 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.022980694 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022820206 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.024211832 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.033412943 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.030284472 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029996193 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023810554 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.031655249 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.022759848 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.032832025 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.035531574 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.022757537 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.023356533 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.022901038 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022874793 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.0231665 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.028877407 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.028919041 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023294297 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.023187552 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022640554 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.030345803 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.029046429 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.022623773 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031098505 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02230841 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.02282637 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023204985 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.02349037 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.031983944 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.030735149 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.023293252 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022958541 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023008325 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.02285482 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.022226267 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.031794065 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.031177239 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.031088586 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.033315899 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.023811511 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.033832148 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.031486309 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.023961479 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.030468251 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.02340946 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023749919 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023692394 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.030332798 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.029742933 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.031772366 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023326682 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.023192891 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.031085405 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.034330812 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.023269373 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.029959632 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032243476 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.030681796 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.022802933 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.033486351 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023407125 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033667461 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023520881 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.032998266 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.023544721 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030798219 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.023447472 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.022741589 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023496449 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.034363857 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.024351967 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023588551 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.023996197 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.02357962 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.031153147 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.035576291 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.024187198 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.031304065 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.031093738 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.024066838 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.033728454 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.02382422 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.034199012 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.023806405 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.024096961 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022967314 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.036328085 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.141029632 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.024563153 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.023800603 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.033455426 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.023646096 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.033177148 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.030579103 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.023143119 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.034867299 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.033131006 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.030620547 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.033571589 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.02437526 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.023762481 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.023538686 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.023824976 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.033630799 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.035239022 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.025010791 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.024029574 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.030193106 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.034333565 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.023190008 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.030601965 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.030500996 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.030906534 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.023815456 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.023798277 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.034129668 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.036084475 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.030977185 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.033999198 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.031719845 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.023594335 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.030682178 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.17300604 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.023006301 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.035067448 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.022705779 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.031409848 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.031062317 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.027454478 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.030620431 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.03198405 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.0298687 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.030182021 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.032147944 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022229971 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.022444352 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.02799367 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.02259684 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.022880392 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.027875329 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.022979226 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.023055067 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.033964314 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022752178 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.031146604 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.022195876 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.028683758 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.022073351 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.022940668 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.03328914 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.022588387 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.023005874 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.02829488 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.022521196 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.028015634 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.030735003 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.027868079 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.022370237 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.02286329 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.031089367 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.030571158 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.022414328 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.02230979 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.022827327 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.030161083 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.029888394 seconds)
  done (took 7.675886913 seconds)
done (took 18.140831612 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.150198265 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.071253308 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 0.151931157 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.090075249 seconds)
  done (took 1.179925252 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 0.055778405 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 0.019092172 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 0.032530746 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 0.040360231 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 0.018928262 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 0.027726006 seconds)
  done (took 0.930291127 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 0.210727257 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 0.137348464 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 0.140977692 seconds)
  done (took 1.223038106 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 0.13023909 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 0.266771434 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 0.478915265 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 0.124677766 seconds)
  done (took 1.744562703 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 0.062070133 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.052816965 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 0.028951087 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.062700534 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 0.036253283 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 0.015500484 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.085148311 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 0.021781759 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 0.05019668 seconds)
  done (took 1.20818823 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.095095353 seconds)
done (took 7.118423427 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 0.185696519 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 0.02980285 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 0.03225657 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 0.028690853 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 0.130784916 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 0.021151331 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 0.129466385 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 0.028522542 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 0.130409346 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 0.187402593 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 0.159754836 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 0.045159254 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 0.043477169 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 0.041680824 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 0.139397151 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 0.032470925 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 0.028060094 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 0.023563308 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 0.141855318 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 0.120743478 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 0.125896491 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 0.030252617 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 0.091522542 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 0.029587284 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 0.101593806 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 0.07685681 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 0.166851316 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 0.175693185 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 0.158054006 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 0.029752655 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 0.126224749 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 0.041366785 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 0.115334068 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 0.130140567 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 0.022022521 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 0.046320047 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 0.019614861 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 0.125682185 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 0.101920215 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 0.185641034 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 0.147950836 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 0.027936782 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 0.138148224 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 0.024049978 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 0.018804209 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 0.031880169 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 0.031945513 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 0.027787761 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 0.04144498 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 0.027506915 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.039689745 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 0.025598862 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 0.138150008 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 0.022787489 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 0.086328752 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 0.022333623 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 0.160778675 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 0.095172957 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 0.02448526 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.03660836 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 0.02814335 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 0.149056606 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 0.037423468 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 0.024265497 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 0.030726341 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 0.01912345 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 0.026367906 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 0.03631493 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 0.019404834 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 0.028982419 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 0.027347079 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 0.104400028 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 0.037166547 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 0.061742124 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 0.030442599 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 0.114939277 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 0.091873994 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 0.044075105 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 0.046427672 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 0.027943573 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 0.018867004 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 0.165475019 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 0.023572678 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 0.036341841 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 0.019161534 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 0.049494906 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 0.019262107 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 0.034655043 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 0.1521316 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 0.146501132 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 0.078209015 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 0.020311018 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 0.230861071 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 0.021642262 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 0.045065938 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 0.020508773 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 0.01993422 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 0.165233381 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 0.019731822 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 0.019951251 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 0.029587008 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 0.028103544 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 0.021665487 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 0.153104878 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 0.102443946 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 0.027391572 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 0.028685357 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 0.020790004 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 0.018918816 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 0.021050302 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 0.020827288 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 0.020224298 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 0.094304831 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 0.035422422 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 0.019455352 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 0.107290665 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 0.128208383 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.030702605 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 0.03896827 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 0.080542505 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 0.02296841 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 0.028840068 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 0.027227247 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 0.126007243 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 0.027769331 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 0.136187322 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 0.021396495 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 0.043884757 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 0.118278957 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 0.092884216 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 0.106387209 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 0.019953248 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 0.157193582 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 0.032597176 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 0.019491324 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 0.027397334 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 0.048974993 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 0.032033208 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 0.035205589 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 0.01979863 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 0.157362571 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.030486937 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 0.018908834 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 0.117891942 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 0.019322756 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 0.111338805 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 0.093479922 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 0.286522761 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 0.027173863 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.029561158 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 0.08857801 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 0.04337938 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 0.046936704 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 0.042339586 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 0.022779554 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 0.019594314 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 0.019233816 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 0.034158519 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 0.018570245 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 0.019410633 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 0.033345652 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 0.027699781 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 0.0191624 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 0.125910466 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 0.03044959 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 0.023097362 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 0.146331838 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 0.031084611 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 0.08642168 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 0.039709808 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 0.019501946 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 0.101376884 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 0.021125973 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 0.037612122 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.080777159 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 0.019700909 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 0.092889601 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 0.019545726 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 0.019272323 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 0.026591559 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 0.020829909 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 0.027855745 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 0.031846989 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 0.019489635 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 0.032755114 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 0.018105621 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 0.019396903 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 0.10064974 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 0.021018883 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 0.165661816 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 0.099431298 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 0.105202625 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 0.019530348 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 0.036092127 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 0.019058392 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 0.131488433 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 0.019292438 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 0.066354125 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 0.111344412 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 0.03519412 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 0.037318995 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 0.020490679 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 0.091196231 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 0.033884438 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 0.01908694 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 0.091481879 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 0.126427812 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 0.085371111 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 0.026698501 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 0.125746032 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 0.028104572 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 0.019488428 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 0.026492203 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 0.02742046 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 0.01975068 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 0.093004858 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 0.019145894 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 0.018630786 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 0.01894063 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 0.02083835 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 0.018277814 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 0.042281823 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 0.018493179 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 0.026655236 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 0.019187119 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 0.021838431 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 0.021020766 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 0.018558785 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 0.027013614 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 0.093156312 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 0.126946731 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 0.018462141 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 0.037204303 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.031625553 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.029975794 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 0.065624977 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 0.02594388 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 0.139655302 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 0.018748378 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 0.028385646 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 0.040784332 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 0.018938716 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 0.022919865 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 0.019326995 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 0.036937763 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 0.018682908 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 0.020516548 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 0.027694496 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 0.019522194 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 0.019719441 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 0.01933702 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 0.019528007 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 0.027570589 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 0.020482883 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 0.018780131 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 0.0187697 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 0.01922007 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 0.023678923 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 0.023002594 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 0.029059056 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 0.03673793 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 0.13331155 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 0.020359703 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 0.021238994 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 0.01928353 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 0.019263236 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 0.019502633 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 0.020742213 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 0.019162089 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 0.021187849 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 0.019504707 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 0.018807761 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 0.047115546 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 0.022953991 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 0.019856512 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 0.040069801 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 0.01926106 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 0.028415895 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 0.12504623 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 0.034512811 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 0.022817222 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 0.018561741 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 0.146363842 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 0.10094232 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 0.04040082 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 0.038694247 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 0.019638635 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 0.029020329 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 0.019624087 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 0.019800664 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 0.018533183 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 0.045560538 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 0.023079056 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 0.019713542 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 0.018587845 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 0.018866035 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 0.06497318 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 0.026898995 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 0.018881419 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 0.026760155 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 0.019218773 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 0.019193672 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 0.045612059 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 0.019799076 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 0.019129654 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 0.037215682 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 0.032064715 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 0.097782644 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 0.030900851 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 0.01872854 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 0.068804419 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 0.018930385 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 0.019596431 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 0.020063875 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 0.110549403 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.031783229 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 0.021007913 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 0.019541788 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 0.026847289 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 0.028061496 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 0.070672761 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 0.019227663 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 0.022833096 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 0.018563205 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 0.018857372 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 0.019985284 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 0.044589869 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 0.04588554 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 0.02083705 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 0.023177103 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 0.019533009 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 0.020037316 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 0.092455299 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 0.019116501 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 0.024091139 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 0.105133552 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 0.02171423 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 0.027292712 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 0.019061661 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 0.133013957 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 0.023802706 seconds)
  done (took 18.505539168 seconds)
done (took 19.252103956 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.052429315 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.032789388 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.032353724 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.027741971 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.031472835 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.030859187 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.032659634 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.028370882 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.031199232 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.030718564 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.029109151 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.018550185 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.026093529 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.033435371 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.027567138 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.034576769 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.03115376 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.034082764 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.019770396 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.034213113 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.029280895 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.032213129 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.027877478 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.033653566 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.019744114 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.02771118 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.041902411 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.036645522 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.022644225 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.0284906 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.0269046 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.032518529 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.026772436 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.02638372 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.028426554 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.024368583 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.028890435 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.025610103 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.042014341 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.024440349 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.019789558 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.031062646 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.026290649 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.027185059 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.027911604 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.031179954 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.024560773 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.032615878 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.019121858 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.03219354 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.04192396 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023739591 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.022796866 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.027800327 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.024650815 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.028573481 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.022803907 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.030721656 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.024451878 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.03144404 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.027357558 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.027255658 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.019248793 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.027769829 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.026598778 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.026828979 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.018252099 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023890839 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.019255649 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.019242314 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.018719335 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.027838602 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.026011543 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.024194412 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.018617469 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.019236962 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.018736363 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.031504951 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.02630421 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.027907453 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.019650856 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.024604223 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.024160133 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.019730748 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.024038667 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.030986489 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.018744409 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.019759617 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.018620992 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.030749901 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.025744066 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.019218719 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.030866881 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023770305 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.023532486 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.019278115 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.018738744 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.023805273 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.027237422 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.019264532 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.018278007 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.02380107 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.024345553 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.027912134 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.019602965 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023683327 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023553377 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.018334638 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.027791393 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.026517954 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.028146367 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.03204321 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.027980954 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.03063546 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.019853032 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.018344847 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.028990467 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.019705549 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.024039801 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.027265701 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.024587694 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.027199167 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.019821942 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.018645597 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.023807673 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.025203558 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.019658484 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.0198018 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.019713832 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.028038974 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.026554971 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.018385479 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.019171658 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.027916564 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.027915778 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.018746598 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.018602357 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.0278926 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.019776047 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.02521223 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.02448306 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.027956337 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.019016119 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.019675609 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.018608664 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.018971885 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.018815273 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.024603954 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.023994634 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.01984176 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.027912689 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.026989441 seconds)
done (took 4.810697601 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.034043061 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.061471185 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.0570129 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.03505208 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.031943668 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.020346162 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.023885922 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.038379724 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.023113544 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.043792683 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.04470365 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.041329796 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.048091249 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.01833872 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.019602828 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.020444279 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.018087833 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.031561062 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.036103012 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.042880782 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.054925478 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.019214098 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.037476758 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.039202418 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.031115267 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.037246543 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.021011384 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.020495243 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.022577922 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.036172186 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.045534776 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.01949903 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.02076276 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.038223066 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.035132018 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.027764064 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.020562481 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.025835199 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.020601563 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.025025971 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.021658885 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.037213598 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.025869111 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.026128817 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.020857252 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.020399947 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.020220736 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.026866026 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.032818316 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.025270338 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.031539887 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.038345986 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.02154847 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.020088269 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.018378037 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.026436873 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.02002638 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.020228741 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.020622901 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.019351469 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.020446079 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.022526898 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.025255925 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.025967228 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.023624633 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.026118724 seconds)
  done (took 2.721002506 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.038719421 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.04621808 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.03370787 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.033927792 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.019304369 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.019854855 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.019863963 seconds)
  done (took 1.030139661 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.064972746 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.027069062 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.031226171 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.031138654 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.040582127 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.028692428 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.032047261 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.048445745 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.019154994 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.043953881 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.037645155 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.032077294 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.023242773 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.031821765 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.050349818 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.034304982 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.032250646 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026654511 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.026710194 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.032242628 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.024134855 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.052030932 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.031740372 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.020867303 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.033108019 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.026416667 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.022900411 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.020728829 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.02259737 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.019919575 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.019934049 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.041925378 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.025629551 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.026067427 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.020904766 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.018949243 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.023718752 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.021031106 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.023358534 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.027090496 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.022818127 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.022170926 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.022444153 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.020126643 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.02127884 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.024253514 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.021028105 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.020021424 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.019745253 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.026807217 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.019336261 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.025739674 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.022371099 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.025187998 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.027058353 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.026103027 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.026905391 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.020559909 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.02748921 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.029626318 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.021813753 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.031810882 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.030813152 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.022874305 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.030828998 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.02869437 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.025712005 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.022789731 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.019793721 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.027720998 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.020533832 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.030853365 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.023139957 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.022340461 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.025264533 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.02731393 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.034735552 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.034706973 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.034530572 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.033520629 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.022731512 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.020212178 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.034155406 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.034537332 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.024918612 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.020058705 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.021081303 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.034244107 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.04376127 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.022222208 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.025082863 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.020251392 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.030253359 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.022674748 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.022498973 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.027193399 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.020227091 seconds)
  done (took 3.494216745 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.02448705 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.022323265 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.021039564 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.020962152 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.021128693 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.020977974 seconds)
  done (took 0.960749427 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.045213697 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.020465695 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.031790164 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.020252375 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.041803418 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.025863484 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.026159845 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.021764819 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.035722298 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.030972979 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.025717326 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.027817989 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.028651325 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.021634252 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.0257926 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.030437065 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.02595637 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024379753 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.029963636 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022065949 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.033288255 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.021641584 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.0220086 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.03018291 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.022613256 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.030279043 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.029827258 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.030322555 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.029874977 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.021987518 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.02162417 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.02257642 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.02682615 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.022056376 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.026427241 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.026890128 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.020440509 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.024885192 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.023084175 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.022705532 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.028009986 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.022134451 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.023210895 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.024817657 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.022171046 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.026916811 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.024940142 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.024165533 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.026028823 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.024783759 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.024739664 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.021033379 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.022764888 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.024774798 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.02701506 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022212923 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.024798336 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.026140039 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.021793027 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.027014712 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.020499817 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.022747531 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022306486 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.022764416 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.025473059 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.024831596 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.026945108 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.022138645 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.022157583 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.020436881 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.024805229 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.020412181 seconds)
  done (took 2.650441289 seconds)
done (took 11.680525573 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.53035742 seconds)
  done (took 1.334226418 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.577962691 seconds)
  done (took 1.413660487 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 0.049792271 seconds)
  done (took 0.873453802 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.286069111 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.36541988 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.706810431 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.088758492 seconds)
  done (took 2.260714598 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.84688673 seconds)
  done (took 1.685748241 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.216775312 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.178676902 seconds)
  done (took 1.25917524 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.355529291 seconds)
  done (took 1.182740548 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.164745161 seconds)
  done (took 1.997149908 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.189032101 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.115656345 seconds)
  done (took 1.134864175 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.472938611 seconds)
  done (took 1.301590551 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.521691544 seconds)
  done (took 5.351301702 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.194753185 seconds)
  done (took 1.089940699 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.190492935 seconds)
  done (took 1.023853278 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 0.700781689 seconds)
  done (took 1.530661853 seconds)
done (took 24.264528562 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.042669643 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.038483145 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.038034659 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.03351174 seconds)
  done (took 0.973641546 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.029082384 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.023346247 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.026429324 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.02645872 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.024075938 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.025724294 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.025664454 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.022691559 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.023931516 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.022921372 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.02159572 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.022868275 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.02542722 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.022754645 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.025252898 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.026351983 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.022972479 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.022980219 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.025227762 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.022855672 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.025549972 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.022981512 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.022920073 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.024597501 seconds)
  done (took 1.41876994 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.033280815 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.025176749 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.028119426 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.023868614 seconds)
  done (took 0.947336306 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.031991104 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.029808167 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.037941197 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.04292684 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.02908911 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.029905532 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.036055386 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.036358169 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.042009553 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.039019252 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.020858481 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.020685664 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.019928898 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.038376527 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.03598518 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.015453761 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.016916751 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.030130844 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.029250211 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.031961886 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.022982084 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.018723768 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.029277767 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.029918144 seconds)
  done (took 1.547989816 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.036867646 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.018912186 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.033884021 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.043793989 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.044676705 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.018764098 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.031660678 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.044657055 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.08007739 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.018659301 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.024582711 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.018642592 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.056292871 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.019000628 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.033793806 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.061559018 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.064432344 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.022582225 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.051084895 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.01872429 seconds)
  done (took 1.584118272 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.027950563 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.023101021 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.023455028 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.01890222 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.029526299 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.025823752 seconds)
  done (took 0.992047183 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.023779316 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 0.021555616 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.020607809 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 0.025471985 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 0.0211818 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 0.021194314 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 0.020543924 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.019360163 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 0.019331918 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 0.020089583 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.020088551 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 0.020623108 seconds)
  done (took 1.091382715 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.113031803 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.025740859 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.0236441 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.019376572 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.021037891 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.020019406 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.034749661 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.021912131 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.037204798 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.020055936 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.020104868 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.022051361 seconds)
  done (took 1.215691221 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059981887 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063709813 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09726583 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.068584512 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.069689092 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048231312 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.081335609 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.031244092 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.1164129 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090493267 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069546911 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.046991382 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.039243011 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.022809832 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.053221459 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072951966 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090884827 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.025898417 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067026484 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119069341 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086262375 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.089426085 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101730938 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.070855539 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.044785831 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101685298 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.050005946 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.056766145 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.07838159 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.082295381 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073234641 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.052183353 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.024738366 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.024170105 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105505232 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.061042772 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077220817 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.047025906 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059745239 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.042211471 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.062057901 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.022849217 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.047446468 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.065484386 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038665849 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090146279 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.047262307 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072491155 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035531763 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097382133 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088152589 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.055208336 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.041127488 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061830505 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099834783 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.07211303 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098603015 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.064781334 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.038723702 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.077988612 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.066603128 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058205241 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.215589272 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.033403981 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130191811 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041566899 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.06451896 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.064286378 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.046579821 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.048676128 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.059315222 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087941945 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077343467 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.077673687 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.089516268 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.04733249 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071620617 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.052330542 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.079948923 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.055840194 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.025821596 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.07353038 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080925902 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.050994158 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.052926779 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081927731 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.045246725 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031543172 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.054346187 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.07354543 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033703486 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.067821975 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.033841882 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.063587139 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093097064 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.052031857 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.065490962 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073851295 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.031859822 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111225615 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.062640487 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026335591 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07133257 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068596232 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11194947 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05047543 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.030002244 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.055692626 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061263715 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.108543255 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066929038 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.034600168 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.068243093 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.102591189 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.050780194 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130372732 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.052209047 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102945881 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.071581738 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042145737 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.030141817 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.046145542 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073442193 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.066589491 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.071691084 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051383132 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.040451775 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.041873735 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.076067686 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.048650262 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.036631808 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072107505 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.060161459 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.030454917 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046042464 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.03143691 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10484038 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.033424062 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100721714 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08563971 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.02960203 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.065227548 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.054346126 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.065490611 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.054168352 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.077854813 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103584126 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.14167877 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.04777021 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.053289649 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067436111 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10629353 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086741297 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.049240042 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.032293665 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.058042068 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.070188283 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.055236957 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.088669386 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.052985528 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067063852 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.061207578 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104113905 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109057096 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058777235 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.058175172 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067912241 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.083150516 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031370851 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119234649 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06329739 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076468339 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.039336717 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10396125 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.068122018 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047025235 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.042686465 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.056980505 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.063113712 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.06475463 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106424952 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.051563 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.027033415 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051408535 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107959078 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.031585606 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.069255411 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.046618769 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.048943352 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.076645703 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.052657563 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.037291954 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.022552706 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091846704 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.123110766 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.024195271 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072157632 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.075296645 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.386319417 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.074497221 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.023064471 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.071361422 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09323445 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069980793 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.09400225 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121070463 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072414718 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.072354773 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.06729777 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.059789871 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.032915236 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.08034445 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090160583 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.04988706 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.045807282 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.08990761 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.073181655 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.091590337 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.072172267 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.075135608 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.060781617 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.06429426 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.058939785 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.060982505 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101855275 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077297986 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.081161761 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.039896812 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061046648 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.074631771 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091874246 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.036002343 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098357832 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.038185373 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.075645134 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.031267051 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.080173193 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.029913111 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.120287944 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033471975 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055188087 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.023323981 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.027943802 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098518251 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.067743392 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.062580451 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05539572 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.094257337 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093036222 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.031291678 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.063485131 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.071722115 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.056466176 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.073170482 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.064333081 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.043834486 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.051105573 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.064255491 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.04075066 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.037478931 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074756023 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.052282998 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.229303426 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.037583403 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028188215 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.091069145 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.056598471 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.047405443 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.031441789 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060179053 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.076040129 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.045892384 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.039677818 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.067662108 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.057414877 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092832323 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.043644047 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.050399306 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.077624545 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.033570873 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.045492401 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.02278566 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.038845534 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.029483734 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081858511 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.029313672 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.070382805 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.022356241 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085015174 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039751698 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.046726396 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.055992149 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063670556 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.081948484 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.04820018 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096753909 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043481644 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.074428008 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061806782 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.048581257 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.042602433 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.05719741 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.054771606 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.077049337 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.049901447 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.077937144 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.099169919 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057971159 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.097758888 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044695428 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.07712287 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.061187837 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08092705 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.066564181 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.123932045 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095766333 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.066802986 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066874774 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.028784604 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.049463109 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.060012543 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.067725534 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133714014 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083739219 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.026184166 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.063569107 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.04930708 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.067692032 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.062685835 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.037474255 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10684638 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061027432 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.042964212 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072120533 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.051020716 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.061968492 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031513284 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056831215 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.063559295 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.051745907 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.054983247 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.075797863 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.089491543 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.072646241 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105122149 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.055923072 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.047027536 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.078233797 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069125463 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069213186 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.041472813 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.042263578 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101498737 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081048277 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.084700721 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.057816576 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.069291644 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.072209007 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05907788 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.087551818 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.067880425 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.089875169 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.035826333 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.03105708 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.022624822 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.026499267 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084207945 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067185235 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.072327437 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.056063469 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.026690939 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.061173509 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.064344132 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.026783356 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044391347 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.052848646 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.052336665 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.049990617 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067640263 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.068159218 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.052264312 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.062172161 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.056902936 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112018239 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.058453725 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.046192729 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107108377 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11551875 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.045358774 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.051002499 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.025864584 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.033988831 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.072687645 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112439723 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117622845 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.033135647 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.042548778 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.042868662 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044171761 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.025845482 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.047182548 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.045692911 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063351276 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.058989057 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.072344583 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.063052234 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.351553583 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05685423 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.05218654 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.04589605 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.060150879 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.072457465 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.078473053 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.094270212 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066732819 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.060320573 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029409508 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.033548276 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.029561401 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.03304268 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.055390315 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.032651975 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029339949 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096259503 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.045628232 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.058907234 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062308764 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.042755972 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029117316 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089236395 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.023204914 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090488269 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.024868461 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.035720272 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.036649393 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032506279 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.047508863 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.093774274 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.066488303 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.067541524 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.061620149 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059172505 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116966456 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114941309 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.034466739 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.100306249 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.029427461 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.029174914 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.02976933 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0659251 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.043912828 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.070285211 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098043726 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.044783769 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057337513 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.03086079 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101336441 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.055132452 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.059476366 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.041060319 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032973298 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100651259 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033150953 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.034291541 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.044313897 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.06648654 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.026141459 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.058415782 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.038206204 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033289943 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119526618 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.662373631 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.044894221 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.02958877 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.05063173 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100772549 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090757343 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.05153496 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.063714583 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.075307862 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.199225173 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.048099524 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059950285 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.14318968 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.027391039 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046611128 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.055831771 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.05044175 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.053884318 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.051185867 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.040175199 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.045175699 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.039975815 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.032321398 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.059761587 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040917313 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.049783844 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.062891961 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.035508255 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.04010738 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08278455 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.055460128 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.034137053 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040836888 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.056592418 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.040809295 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057674409 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.022816247 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.066841939 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.044437599 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07285926 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.05398259 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.06239036 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083409318 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.048110184 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09251215 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.061842381 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.076836931 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.040982237 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.031895162 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.081160797 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.042337096 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.031147921 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100293251 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.049444345 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.057722149 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.058033288 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.050839553 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067605412 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.072841765 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067532782 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.051674098 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032436288 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.055644674 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.057650535 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039970066 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.032145767 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.028305996 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.030093934 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.062224685 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.039517495 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.036491636 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.069239772 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.043476289 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.057585613 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.058094234 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078637365 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041025122 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.056635649 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.065614282 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.046359893 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.065154334 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.055395362 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08688945 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138707263 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.222293761 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08213439 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.085943506 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.029573875 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.028260286 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.022004931 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.067918777 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.032390677 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.04191595 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.034277627 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085254095 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.035490805 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.063722753 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.195424548 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.03369327 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.046571109 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.048397906 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.022793549 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.03567313 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.059321175 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.040042758 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.032900007 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.071385182 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.035797077 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.081464237 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.064316529 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.05317033 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.048402116 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.03421544 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.067936681 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.056815696 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.083498947 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.048347582 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.028563105 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.077383817 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.057659093 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094190452 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.026729043 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.034425911 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08518327 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.057812679 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.086689405 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.033766057 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106333403 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.099052408 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.054497803 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090287102 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.024585078 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.041116523 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.043915059 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.080812765 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.038736143 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.067110202 seconds)
  done (took 40.011415253 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.144119425 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.141011223 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.076721371 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.087817072 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.24393587 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.252610845 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.105871133 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.080752234 seconds)
  done (took 2.187370815 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 0.027431934 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.036489385 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 0.03417114 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 0.16020392 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 0.072116253 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 0.020548739 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.025174639 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.03485176 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 0.024023661 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 0.020164675 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 0.058599032 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 0.020225015 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 0.02433098 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 0.430160904 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 0.019689179 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 0.025422467 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.024365463 seconds)
  done (took 2.073045956 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.306328223 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.079146983 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 1.28362281 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.256935743 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.114138806 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.64090357 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.028791634 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.035201139 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.738861425 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 3.34410675 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.108494655 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.17998548 seconds)
  done (took 19.111956474 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 0.030931649 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 0.030205489 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.029739881 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 0.026840616 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 0.026708913 seconds)
  done (took 1.141104511 seconds)
done (took 75.200993836 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.040012974 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 0.119848725 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 0.020072221 seconds)
  done (took 1.165800058 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.036759794 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.033175054 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.0327918 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.03335417 seconds)
  done (took 1.130085404 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.029840629 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.029337732 seconds)
  done (took 1.049373336 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.181377908 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.125845381 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.042287265 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.038415971 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.03333324 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.034134286 seconds)
  done (took 1.105722151 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.026248715 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.024089629 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.024124869 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.02447092 seconds)
  done (took 1.09026456 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.025716015 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.019079817 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.021592473 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.023166823 seconds)
  done (took 1.08322457 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.039817661 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.038910601 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.067221476 seconds)
  done (took 1.137802114 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.037499733 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.037662347 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.031293808 seconds)
  done (took 1.104546053 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.063897845 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.048971555 seconds)
  done (took 1.105776116 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.034812243 seconds)
  done (took 1.029346474 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.045913945 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.050031695 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.093664999 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.058857961 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.094801982 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.080477039 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.02922815 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.03005834 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.026033034 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.025168314 seconds)
  done (took 1.52513715 seconds)
done (took 13.908850528 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.038861008 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.147009609 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.268615313 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.039600841 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.606671504 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.265699935 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.682117619 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.042964217 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.051654941 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021100508 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037194276 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.585875553 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.686200292 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.101527841 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.670525497 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.096061401 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.760811846 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021949321 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.020742762 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.02129102 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.667224482 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021219465 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021196443 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021611529 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.758221564 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.286885804 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022169418 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.090936696 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021249923 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024809179 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.269214977 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.022175274 seconds)
  done (took 12.380513365 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.029959701 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.078890084 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026178172 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.036494443 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.023136404 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023440646 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.039512499 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.02152264 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.062409852 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021242207 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.039908171 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.020779603 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.02576997 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022239984 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041019401 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021181249 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023179831 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021937403 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.02113039 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021875629 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.039757367 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.020921428 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021699943 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021771742 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021621317 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.035054065 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022325899 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021320039 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.0212719 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.024960808 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.026308765 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.02260012 seconds)
  done (took 1.925473508 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081397362 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.081678052 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.026490608 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.061227276 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.067928879 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.023649972 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.101970773 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.043200899 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.065604661 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.021573536 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.037918613 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.021165691 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.056648301 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.022768816 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.041883424 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.021594779 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.023660206 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.021986076 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.021393586 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.021979849 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.040518518 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.021205696 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.021896259 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.021985248 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.021889031 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.036934448 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.022506413 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.021441408 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.021427203 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.02527336 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.027343563 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.0227453 seconds)
  done (took 2.176381779 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.024710507 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.024690742 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.030582357 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.033461391 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.019649507 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.021929646 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.022865055 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.019790931 seconds)
  done (took 1.204391814 seconds)
done (took 18.693441096 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.035004997 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.021610435 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.024369244 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.041075635 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.027687593 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.022808284 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.018427891 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.028256871 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.024957972 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.024852498 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.026283417 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.019896559 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.02343378 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.01840676 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.02513553 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.019385482 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.025273473 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.023349421 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.022897977 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.025543282 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.021892488 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.025054862 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.028042297 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.02308159 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.023083877 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.023076819 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.028199598 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.025262062 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.019878672 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.022558572 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.022859825 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.022664097 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.022339406 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.024809335 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.019614235 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.019555427 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.023973582 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.021276441 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.025385868 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.028245196 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.021833089 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.02823932 seconds)
  done (took 2.008258646 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.029566356 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.033426946 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.025097467 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.031585492 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.028231696 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.031140726 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.028842735 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.028102987 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.026808017 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.027909063 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.022384224 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.027072771 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.029145366 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.020372208 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.026907216 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.023179706 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.028664347 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.021372614 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.026879655 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.026998021 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.029005241 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.020442516 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.027761378 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.028415656 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.022930685 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.028593714 seconds)
  done (took 1.707585371 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.029690855 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.042598816 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.045144426 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.098370737 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.062372881 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.035755139 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.036028591 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.295155896 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.054413743 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.021048037 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.042444302 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.0470087 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.048882625 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.027619743 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.059497007 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.039007306 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.033432483 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.02250949 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.027384945 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.05490595 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.043461843 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.039481601 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.053404148 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.040521564 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.019990351 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.030051059 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.027996026 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.036803647 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.027963765 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.032662057 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.024849413 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.024327006 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.021597185 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.032291923 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.024761869 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.018975636 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.04325501 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.03355002 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.035589576 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.059780315 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.030777242 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.022310904 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.047632169 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.08531705 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.020581701 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.023631589 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.025131742 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.033079543 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.022317841 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.051149408 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.035820944 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.020631999 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.039685394 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.022216976 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.022267148 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.036484683 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.022548641 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.023008643 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.032398175 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.026845944 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.041691142 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.025963379 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.041004527 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.020633941 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.031850016 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.022214788 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.022629882 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.019552049 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.054774621 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.028143733 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.069777061 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.021964131 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.019047346 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.032762075 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.032037752 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.0279559 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.020568266 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.039459968 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.033076563 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.024565098 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.031471928 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.023673758 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.024002749 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.057281766 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.019879796 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.018979838 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.019058405 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.023282541 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.024133694 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.021503437 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.033245692 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.020390528 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.024095366 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.035076825 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.02081547 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.021553132 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.023315816 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.022080731 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.020411199 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.030679491 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.024646651 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.022514019 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.033662102 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.021893579 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.024050642 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.035631938 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.029830151 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.020302968 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.021848525 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.023075693 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.022670356 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.025327996 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.024188295 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.022752066 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.027995699 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.028340655 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.026805026 seconds)
  done (took 5.026539047 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.115032737 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.104319732 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.021459501 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.098095578 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.028568639 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.03075042 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.101030527 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.100649859 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.021271231 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.022248989 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.020497763 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.047764435 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.042968107 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.05369641 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.034289908 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.023091848 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.046330471 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.052542173 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.104328502 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.097900056 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.044178158 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.028776494 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.023448502 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.022581305 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.022526853 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.030378409 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.036929269 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.029720849 seconds)
  done (took 2.432119733 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.028591718 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.064427993 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.024504374 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.044867029 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.037935218 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.021299644 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.023065782 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.022151715 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.037808 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.026257994 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.021020852 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.0252319 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.024462148 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.023483963 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.022048694 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.027571854 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.027570846 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.029589315 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.024786759 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.02560864 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.031589447 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.04511964 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.025336677 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.021308046 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.024457474 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.021215731 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.026424316 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.029670951 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.021042435 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.021142491 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.018473547 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.025640805 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.035708956 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.022349235 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.021192945 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.021897128 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.021462862 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.021469182 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.021633777 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.019466363 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.019368809 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.0263736 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.020164811 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.026015349 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.03528964 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.023545023 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.022363136 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.023762602 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.023655825 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.018239861 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.024727399 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.024409414 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.023801723 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.029523553 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.025186872 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.023581048 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.022703509 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.033390919 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.02669663 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.020781943 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.020309955 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.019839413 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.022891404 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.027697263 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.038004285 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.022890001 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.019811161 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.021534124 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.023056087 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.035329595 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.020806429 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.026845381 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.018437835 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.021467032 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.023599387 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.024326381 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.022839905 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.01988874 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.02119412 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.021542024 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.021428682 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.021140097 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.020710663 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.024054036 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.019321201 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.01988115 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.02199254 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.022476612 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.026582185 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.020266271 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.023985504 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.02262749 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.023791175 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.023993768 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.026425877 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.024303494 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.04106659 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.029016239 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.021860432 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.019354801 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.035991279 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.023188374 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.020553759 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.023124132 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.025813154 seconds)
  done (took 3.67083266 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.045032943 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.02331998 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.040900279 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.046950358 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.030883161 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.026966559 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.034909905 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.022427433 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.036746908 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.020564388 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.030347772 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.019759097 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.033905629 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.029764509 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.023018675 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.031039001 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.024023212 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.041511616 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.035213055 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.020254885 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.030180257 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.033001705 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.033359471 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.038813177 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.038413636 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.039462726 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.033009546 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.024191647 seconds)
  done (took 1.913752394 seconds)
done (took 17.761447309 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.060112126 seconds)
  (2/12) benchmarking "fasta"...
  done (took 1.268625932 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.029020799 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 2.571429219 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.090340202 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 6.061613873 seconds)
  (7/12) benchmarking "nbody"...
  done (took 2.141461007 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.00614953 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.347870802 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.125806707 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 2.924082911 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 4.896078063 seconds)
done (took 58.607531901 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.101435789 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 1.185705053 seconds)
    (2/2) benchmarking "String"...
    done (took 1.271852859 seconds)
  done (took 3.585451474 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 1.467045853 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.021071536 seconds)
    (3/3) benchmarking "different"...
    done (took 1.058673431 seconds)
  done (took 4.549010406 seconds)
  (4/7) benchmarking "replace"...
  done (took 2.339180735 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.828356857 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 1.307758207 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.003625454 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.01888206 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 2.596192369 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.333844712 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 1.691424625 seconds)
  done (took 26.794452114 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 6.118440035 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 1.282753918 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 4.371325421 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 4.490961643 seconds)
  done (took 17.359217521 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 1.468282179 seconds)
    (2/4) benchmarking "equal"...
    done (took 1.436956117 seconds)
    (3/4) benchmarking "different length"...
    done (took 1.437678472 seconds)
    (4/4) benchmarking "different"...
    done (took 1.727231936 seconds)
  done (took 7.215339153 seconds)
done (took 68.960590462 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.003215817 seconds)
    (2/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 6.46392894 seconds)
    (3/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.042563686 seconds)
    (4/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 1.208571466 seconds)
    (5/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.049527945 seconds)
    (6/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.088503401 seconds)
    (7/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.017715784 seconds)
    (8/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.032076957 seconds)
    (9/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.015157476 seconds)
    (10/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.02056882 seconds)
    (11/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.014275689 seconds)
    (12/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.015133778 seconds)
    (13/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.031125043 seconds)
    (14/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.064458007 seconds)
    (15/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.03000982 seconds)
    (16/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.066789969 seconds)
    (17/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 6.368695963 seconds)
    (18/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.026701877 seconds)
    (19/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.036993563 seconds)
    (20/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.174532774 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 3.34421135 seconds)
    (22/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.01354219 seconds)
    (23/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.017763404 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.104872542 seconds)
    (25/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.560486116 seconds)
    (26/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.057114084 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 6.558909447 seconds)
    (28/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.039031657 seconds)
    (29/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 1.665901087 seconds)
    (30/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.07389324 seconds)
    (31/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.080536977 seconds)
    (32/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.056918654 seconds)
  done (took 180.347702895 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.044647478 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.845232676 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.907149303 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.093130595 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.472573039 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 2.427175676 seconds)
    (7/36) benchmarking "scal!"...
    done (took 1.944245164 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.526610222 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.091320777 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.114723208 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.16999643 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.0620431 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.124444552 seconds)
    (14/36) benchmarking "dot"...
    done (took 1.804595773 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.118206294 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.051941851 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.014939784 seconds)
    (18/36) benchmarking "symv"...
    done (took 2.928295796 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.110682226 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 1.994960764 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.078927986 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.63743952 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.602829445 seconds)
    (24/36) benchmarking "symv!"...
    done (took 2.891814845 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.04862792 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.106217629 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.069460414 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.127325403 seconds)
    (29/36) benchmarking "asum"...
    done (took 2.442268921 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 2.977057568 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.097130584 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.093565756 seconds)
    (33/36) benchmarking "scal"...
    done (took 1.268924337 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.320751293 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.083888176 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.093246328 seconds)
  done (took 152.837502744 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 1.352901276 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.136804096 seconds)
    (2/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.164100691 seconds)
    (3/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.29316045 seconds)
    (4/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.256533193 seconds)
    (5/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 4.150453126 seconds)
    (6/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.0820874 seconds)
    (7/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.070473491 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.079071163 seconds)
    (9/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.085261669 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.06759771 seconds)
    (11/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 1.152542179 seconds)
    (12/118) benchmarking ("cumsum!", "Int32", 256)...
    done (took 1.083069462 seconds)
    (13/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 21.422479902 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.117833316 seconds)
    (15/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.103441489 seconds)
    (16/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.106521692 seconds)
    (17/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 21.649197653 seconds)
    (18/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.094818967 seconds)
    (19/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.076539768 seconds)
    (20/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.078713033 seconds)
    (21/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.180714022 seconds)
    (22/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 1.399372705 seconds)
    (23/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 1.241855865 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.072744539 seconds)
    (25/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.099167939 seconds)
    (26/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.215532162 seconds)
    (27/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.0678144 seconds)
    (28/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.062859912 seconds)
    (29/118) benchmarking ("cumsum!", "Float32", 1024)...
    done (took 1.052671412 seconds)
    (30/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 1.20993501 seconds)
    (31/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.073611319 seconds)
    (32/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.220914357 seconds)
    (33/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 1.227827835 seconds)
    (34/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.083000581 seconds)
    (35/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 1.070009997 seconds)
    (36/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.033418296 seconds)
    (37/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 3.407050745 seconds)
    (38/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.064423667 seconds)
    (39/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.058699622 seconds)
    (40/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.089096002 seconds)
    (41/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.110742536 seconds)
    (42/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.061718429 seconds)
    (43/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.232404885 seconds)
    (44/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.182938479 seconds)
    (45/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.076008133 seconds)
    (46/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.09241776 seconds)
    (47/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 2.528107347 seconds)
    (48/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 1.65121177 seconds)
    (49/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.077838054 seconds)
    (50/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.073724664 seconds)
    (51/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.070526447 seconds)
    (52/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.077126139 seconds)
    (53/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.076136058 seconds)
    (54/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 21.152800948 seconds)
    (55/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.082357924 seconds)
    (56/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.110634053 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.991646999 seconds)
    (58/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.107791141 seconds)
    (59/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.074114548 seconds)
    (60/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.074879291 seconds)
    (61/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.076754262 seconds)
    (62/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.074654793 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.08190806 seconds)
    (64/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.109771471 seconds)
    (65/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.812906282 seconds)
    (66/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 21.19938257 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 1.429009806 seconds)
    (68/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.886098585 seconds)
    (69/118) benchmarking ("cumsum!", "Float32", 256)...
    done (took 1.078275368 seconds)
    (70/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.099822631 seconds)
    (71/118) benchmarking ("cumsum!", "Int32", 1024)...
    done (took 1.108611498 seconds)
    (72/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.516058326 seconds)
    (73/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.187678454 seconds)
    (74/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.106053991 seconds)
    (75/118) benchmarking ("cumsum!", "Float64", 1024)...
    done (took 1.122992977 seconds)
    (76/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.271476652 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.120679922 seconds)
    (78/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.17816428 seconds)
    (79/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 3.057753783 seconds)
    (80/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 2.990229298 seconds)
    (81/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.076784867 seconds)
    (82/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 1.242496268 seconds)
    (83/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.09806398 seconds)
    (84/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.064106211 seconds)
    (85/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 21.439252318 seconds)
    (86/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 21.705972544 seconds)
    (87/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.092920969 seconds)
    (88/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.096008129 seconds)
    (89/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.15921551 seconds)
    (90/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.077097948 seconds)
    (91/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.074412298 seconds)
    (92/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.07921928 seconds)
    (93/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 2.992210296 seconds)
    (94/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.06502727 seconds)
    (95/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.067087636 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.557457012 seconds)
    (97/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.07683762 seconds)
    (98/118) benchmarking ("cumsum!", "Int64", 256)...
    done (took 1.062347996 seconds)
    (99/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 21.443737401 seconds)
    (100/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 1.424226878 seconds)
    (101/118) benchmarking ("cumsum!", "Float64", 256)...
    done (took 1.056890351 seconds)
    (102/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 1.137502708 seconds)
    (103/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 1.47799512 seconds)
    (104/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.156855896 seconds)
    (105/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.076840193 seconds)
    (106/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.071338806 seconds)
    (107/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.089646393 seconds)
    (108/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.076050063 seconds)
    (109/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.087030131 seconds)
    (110/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.091290148 seconds)
    (111/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.074282 seconds)
    (112/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.074379184 seconds)
    (113/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.078251238 seconds)
    (114/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.074829346 seconds)
    (115/118) benchmarking ("cumsum!", "Int64", 1024)...
    done (took 1.074067833 seconds)
    (116/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.075548147 seconds)
    (117/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.094873122 seconds)
    (118/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.079567011 seconds)
  done (took 326.598319829 seconds)
done (took 662.284524697 seconds)
(4/20) benchmarking "parallel"...
done (took 1.076642107 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.493255471 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.717893463 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 6.177312823 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.956302818 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.377340655 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.268410656 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.386549048 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.573648689 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.397758857 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.31255814 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.828439474 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.240857264 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.514498741 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.432738671 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.176482497 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.517917766 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.226076955 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.780490673 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.803084768 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.220932016 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.290646239 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.535753854 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.198027469 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.918364191 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.256159948 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.285959421 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.469760848 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.80498106 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.338793445 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.824918384 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 1.536082185 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.514533408 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.333412499 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.176901873 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 1.937136563 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.224229152 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.337967334 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 1.889013908 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.274282769 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 1.645136668 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 1.873998152 seconds)
  done (took 73.146041567 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.447240375 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.290278943 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.395872348 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.387567326 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.817142791 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.415557387 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.460045291 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.329573806 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.338271298 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.439235318 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.433391238 seconds)
  done (took 17.878369233 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.413894888 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.292022489 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 1.46376076 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.471474179 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.694143255 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 1.448441648 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 1.467579983 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.361394224 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.360775992 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 1.443076322 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 1.42317463 seconds)
  done (took 17.984614524 seconds)
done (took 110.090836541 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 1.643239952 seconds)
    (2/2) benchmarking "11899"...
    done (took 1.133387508 seconds)
  done (took 3.850491718 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", "(8, 8)", "(8, 8)")...
    done (took 1.094617393 seconds)
    (2/8) benchmarking ("matvec", "(2, 2)", "(2,)")...
    done (took 1.078119106 seconds)
    (3/8) benchmarking ("matvec", "(4, 4)", "(4,)")...
    done (took 1.069126464 seconds)
    (4/8) benchmarking ("matvec", "(16, 16)", "(16,)")...
    done (took 1.071595218 seconds)
    (5/8) benchmarking ("matmat", "(2, 2)", "(2, 2)")...
    done (took 1.077378962 seconds)
    (6/8) benchmarking ("matvec", "(8, 8)", "(8,)")...
    done (took 1.080999887 seconds)
    (7/8) benchmarking ("matmat", "(16, 16)", "(16, 16)")...
    done (took 1.100757757 seconds)
    (8/8) benchmarking ("matmat", "(4, 4)", "(4, 4)")...
    done (took 1.075434484 seconds)
  done (took 9.715139851 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 60, "Float64")...
    done (took 1.087610246 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float32")...
    done (took 1.116596018 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, "Float64")...
    done (took 1.116167325 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, "Float64")...
    done (took 1.131974163 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 8, "Float64")...
    done (took 1.062064981 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float64")...
    done (took 1.076255583 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, "Float32")...
    done (took 1.029312745 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float64")...
    done (took 1.02527254 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 3, "Float32")...
    done (took 1.027775012 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float64")...
    done (took 1.064809943 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 30, "Float64")...
    done (took 1.07550881 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, "Float32")...
    done (took 1.074431351 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, "Float32")...
    done (took 1.074347231 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, "Float32")...
    done (took 1.078386426 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, "Float32")...
    done (took 1.079873569 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, "Float32")...
    done (took 1.097705404 seconds)
  done (took 18.271831204 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sum", "(2, 2)")...
    done (took 1.077208514 seconds)
    (2/24) benchmarking ("sumabs", "(8, 8)")...
    done (took 1.07902874 seconds)
    (3/24) benchmarking ("minimum", "(2, 2)")...
    done (took 1.088059296 seconds)
    (4/24) benchmarking ("sumabs", "(2,)")...
    done (took 1.091086666 seconds)
    (5/24) benchmarking ("sum", "(4, 4)")...
    done (took 1.091417652 seconds)
    (6/24) benchmarking ("sum", "(2,)")...
    done (took 1.09053955 seconds)
    (7/24) benchmarking ("sum", "(8, 8)")...
    done (took 1.09177445 seconds)
    (8/24) benchmarking ("minimum", "(16, 16)")...
    done (took 1.102704228 seconds)
    (9/24) benchmarking ("sum", "(8,)")...
    done (took 1.091601437 seconds)
    (10/24) benchmarking ("sumabs", "(4, 4)")...
    done (took 1.090750649 seconds)
    (11/24) benchmarking ("sumabs", "(2, 2)")...
    done (took 1.093354979 seconds)
    (12/24) benchmarking ("minimum", "(4, 4)")...
    done (took 1.093382839 seconds)
    (13/24) benchmarking ("sumabs", "(16,)")...
    done (took 1.094758935 seconds)
    (14/24) benchmarking ("sumabs", "(8,)")...
    done (took 1.094206938 seconds)
    (15/24) benchmarking ("minimum", "(16,)")...
    done (took 1.100666601 seconds)
    (16/24) benchmarking ("minimum", "(2,)")...
    done (took 1.09196345 seconds)
    (17/24) benchmarking ("minimum", "(8, 8)")...
    done (took 1.094209156 seconds)
    (18/24) benchmarking ("minimum", "(4,)")...
    done (took 1.092390934 seconds)
    (19/24) benchmarking ("minimum", "(8,)")...
    done (took 1.093910048 seconds)
    (20/24) benchmarking ("sum", "(16,)")...
    done (took 1.09454345 seconds)
    (21/24) benchmarking ("sum", "(4,)")...
    done (took 1.095525866 seconds)
    (22/24) benchmarking ("sumabs", "(4,)")...
    done (took 1.096097449 seconds)
    (23/24) benchmarking ("sum", "(16, 16)")...
    done (took 1.096214845 seconds)
    (24/24) benchmarking ("sumabs", "(16, 16)")...
    done (took 1.099891435 seconds)
  done (took 27.287108332 seconds)
done (took 60.21990777 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 2.687673325 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.139207548 seconds)
  done (took 6.888317797 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.161074791 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.119537695 seconds)
  done (took 3.531303508 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.125775218 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.073896815 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.111225649 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.178859089 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.15439516 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.098770721 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.099688167 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.096748211 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.078642099 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.093940072 seconds)
  done (took 12.189556604 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.094218933 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.075181237 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.079848422 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.072907476 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.101983767 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.10711527 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.044279744 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.058274559 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.071434727 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.080518601 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.093258103 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.261603031 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.082003289 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.314200414 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.06944403 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.063501252 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.039921772 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.036893466 seconds)
  done (took 20.818906034 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.034581389 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.032526784 seconds)
  done (took 3.080313416 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.032245435 seconds)
    (2/7) benchmarking "second"...
    done (took 1.035439652 seconds)
    (3/7) benchmarking "month"...
    done (took 1.036935562 seconds)
    (4/7) benchmarking "year"...
    done (took 1.041190971 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.036943938 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.033243269 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.036910873 seconds)
  done (took 8.267157138 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.684506999 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 1.213538767 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 1.252784631 seconds)
    (4/9) benchmarking "Date"...
    done (took 1.738097278 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.048686209 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.127937952 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.053180264 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.115482743 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.011169089 seconds)
  done (took 17.273309708 seconds)
done (took 73.121551614 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.774297383 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.0519481 seconds)
  (3/8) benchmarking "parseint"...
  done (took 2.707719265 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 6.276346064 seconds)
  (5/8) benchmarking "pisum"...
  done (took 6.080650041 seconds)
  (6/8) benchmarking "fib"...
  done (took 1.441114456 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.089624761 seconds)
  (8/8) benchmarking "mandel"...
  done (took 2.631142589 seconds)
done (took 37.13017514 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.134097176 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.071973441 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.120344487 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.114117823 seconds)
  done (took 19.385245778 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.069999776 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 2.762947851 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.123569455 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.19427834 seconds)
  done (took 19.321418048 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 1.594839756 seconds)
    (2/2) benchmarking "read"...
    done (took 1.514723213 seconds)
  done (took 4.192337965 seconds)
done (took 50.094093728 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.09285082 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.09361284 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.089926465 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.09564785 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.109088993 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.091411623 seconds)
    (7/24) benchmarking ("2pow1023", "positive argument", "Float64")...
    done (took 1.09356381 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.091419213 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.092823401 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.093929563 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.095296582 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.09282915 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.092136942 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.093846886 seconds)
    (15/24) benchmarking ("2pow1023", "negative argument", "Float64")...
    done (took 1.089611029 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.094071323 seconds)
    (17/24) benchmarking ("2pow127", "negative argument", "Float32")...
    done (took 1.092267046 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.093854054 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.093235346 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.0926487 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", "Float32")...
    done (took 1.095330831 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.095543184 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.096401774 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.096373813 seconds)
  done (took 27.323640156 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.161311011 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.154604544 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.164117213 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.157749407 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.181907827 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.16331797 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.159401654 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.151655566 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.162557174 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.143527541 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.130056401 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.179548857 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.133378768 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.180263669 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.134846489 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.18094415 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.163421098 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.13259199 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.134134573 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.184497224 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.155867439 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.129352848 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.178239484 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.127806724 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.172930754 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.122778749 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.139234056 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.158575416 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.13371654 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.200326374 seconds)
  done (took 35.747871891 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.135706655 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.084748858 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.092458782 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.16897229 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.101776234 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.10111147 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.095323144 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.125551941 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.089082529 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.101759232 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.100257224 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.097078548 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.10172852 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.09053369 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.090238633 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.093294734 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.137691299 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.298637758 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.101544831 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.096876563 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.138608348 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.081654701 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.141180528 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.138220699 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.165942892 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.139282774 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.101380092 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.130997978 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.148330025 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.153937801 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.158533378 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.206028703 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.169711584 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.118564161 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.239955414 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.200445556 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.135910294 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.181615377 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.147951629 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.101324152 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.140097485 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.153151458 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.156079178 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.146453753 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.198082109 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.196932473 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.168790095 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.164447411 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.145167195 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.139558898 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.109598221 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.135960097 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.148137983 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.16646539 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.155836924 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.107783315 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.120402899 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.143022676 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.162964188 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.153208747 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.147025 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.203252852 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.128540763 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.15571934 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.574820951 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.167813344 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.193724964 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.123388446 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.114018985 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.318755203 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.108909832 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.303924962 seconds)
  done (took 83.948694071 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.092556288 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.097447618 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.21038703 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.197673661 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.200512739 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.141952286 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.12339253 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.105670417 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.747736633 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.095186874 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.093266643 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.090922834 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.762918747 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.126419642 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.083878153 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.171616014 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.094737992 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.091201366 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.09036394 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.088236651 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.093232921 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.091805099 seconds)
  done (took 26.963225343 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.141658321 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.101753966 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.110872346 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.10813127 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.134227764 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.099057598 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.145563914 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.132404546 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.12052186 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.13215023 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.12549294 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.124346639 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.105898378 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.118649491 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.115467366 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.160534632 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.1209368 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.159945312 seconds)
  done (took 21.362397849 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.238450132 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.214159232 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.11653231 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.065678494 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.272116657 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.248728708 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.119037427 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.194248688 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.066210119 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.182851857 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.195392618 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.066187147 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.248379306 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.067585061 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.065589873 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.272344932 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.10318167 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.065698204 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.13158664 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.119285212 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.18536736 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.131655796 seconds)
  done (took 26.430909249 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.067319332 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.073922073 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.091686276 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.091972502 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.023884413 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.023782766 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.080261156 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.063945767 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.038112773 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.068509933 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.07067806 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.023295766 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.109551635 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.080217818 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.108430534 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.066012301 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.073592303 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.080498887 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.070153656 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.022793425 seconds)
  done (took 22.333880777 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.02394914 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.023985026 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.024317385 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.023856134 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.023595055 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.023777894 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.023380443 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.023483308 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.023932084 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.262245817 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.023713682 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.023926474 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.024442023 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.023893059 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.024635197 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.023854727 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.024124678 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.023648161 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.024110232 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.023883072 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.262132258 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.023856811 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.023853999 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.024348342 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.023846292 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.023775872 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.024131624 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.023826123 seconds)
  done (took 30.152021515 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.084631997 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.063794056 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.068218304 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.14155403 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.141818565 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.065354376 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.142207771 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.14193174 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.062167656 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.06776327 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.109443659 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.068697088 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.063490086 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.056903341 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.056767367 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.109444617 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.056699208 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.141835454 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.097831382 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.059293174 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.1093635 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.056329703 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.109500745 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.059353193 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.059670883 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.109571406 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.098017967 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.184136978 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.082353763 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.061875261 seconds)
  done (took 33.735535599 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.048603281 seconds)
    (2/2) benchmarking "in"...
    done (took 1.048356915 seconds)
  done (took 3.101979371 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.023150331 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.119271539 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.023639374 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.214283127 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.176205755 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.198256196 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.18580365 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.108320606 seconds)
  done (took 10.05301566 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.022752165 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 4.44118943 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.04355008 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.023443416 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.023137052 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.511646833 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.980758068 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.914179914 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.848229179 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.922827522 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.140132775 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.683119025 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 3.091321904 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.348848791 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.14617759 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.879324548 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 3.266606931 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 4.559541949 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 3.101587995 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.155133666 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.744119729 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.1287436 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.024977706 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.023707368 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.023429228 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.924066349 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 3.863557801 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.473013997 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.196454759 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.155023971 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 3.801057498 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.107049544 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.023447121 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.308649745 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.147507951 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.023799739 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 3.19400273 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.137000567 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.023992834 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.023213809 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 4.780783333 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 4.691285934 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.294721694 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 3.264475674 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.114877649 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.023426435 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.023472962 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.023383278 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.286610002 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.650311048 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 3.092000881 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.00449856 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.170421755 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.024537452 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 4.745551462 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.041438271 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.023900757 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.927205344 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 5.530018734 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 3.284365771 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.375870431 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 4.21240138 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 3.042274806 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.158186648 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.024239976 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.206037795 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.934114646 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 3.823930112 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.796775209 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.14230022 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.548032785 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.045585821 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.02596089 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.024598697 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.956896414 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.342307751 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.026598361 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.023501061 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.023554047 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.023980691 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.302589392 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.14796418 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.867605541 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.171617736 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.198072975 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 4.56215315 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.158204941 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.024042808 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 3.689160526 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.873242385 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.067861536 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 4.660912627 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.241367098 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.170597202 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 3.029986151 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.283634909 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.064306281 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.02406145 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.874189829 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 3.69706649 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.042216737 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.024524612 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.354277968 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 3.15374243 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.030587535 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.024242041 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.729845387 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.158011467 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 3.157382441 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.068722873 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.024417109 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.023531887 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.606845785 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.073546048 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.031095815 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.476579016 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 3.09717602 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.583859541 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 4.281928342 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.225952116 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 3.37895715 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 4.999630418 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.272170471 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.932887934 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.03123816 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 3.397277936 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.996804652 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 3.728156794 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 3.278835558 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.155574502 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 4.880290734 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.091152071 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.024355055 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 4.184001438 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.103330391 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.024715156 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.024325598 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.0294336 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.024189687 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.024447876 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.146256464 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 3.416665099 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 4.71055229 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.181960205 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.26382262 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.15275847 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 4.879936194 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 3.246533581 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.751181571 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.171211404 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.025012608 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 4.617563417 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 4.434927641 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.73350267 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.158284433 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.024760977 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.025143391 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.873505784 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 4.032052029 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.1281125 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.024382671 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.631020688 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.074435706 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.028984623 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.024422089 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.495938135 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.170623423 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.024777162 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 3.137221889 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.813832322 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 4.920110374 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.042545448 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.343253811 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.148633802 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.025754265 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.024558215 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.024756221 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.810944746 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.662602185 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 6.266226 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.63769299 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 5.873670856 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.118232724 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 3.191754292 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.122257861 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 3.303290134 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.263987455 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.172959067 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.02546806 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.024268367 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.024279146 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.505352196 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.966893869 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 4.921663024 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 4.039156795 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.044868883 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.944086751 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.062987033 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.829127948 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.043595404 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.760386367 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 4.010994109 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.133106568 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.025330297 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.024631759 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.174556765 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.210972329 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.172677156 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 3.618645844 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.043138144 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.025591069 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.706336826 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.157906246 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 3.718391139 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.135970963 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.866990194 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 3.121197337 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.155892379 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 3.174814237 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 4.687724975 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.152375352 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.025193111 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 4.741122283 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.170696631 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.024962774 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 3.083089624 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 3.576030736 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.980025687 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.803021483 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.707639423 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.985647351 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.590322284 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.281943261 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.17321679 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 3.875410069 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.130405104 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.253171897 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 3.173015206 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 4.536768397 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.043792988 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.792492424 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.044430872 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 4.610472661 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.183690898 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.021504281 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.153402631 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 3.497207633 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.147838113 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.02508222 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 3.205071835 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.125759999 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.693057314 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.157646133 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.157508709 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 4.354857708 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 3.951477566 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.130814556 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.247625433 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 3.17212559 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.956674536 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.997212889 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.37532102 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 3.977552287 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.025132085 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.063787527 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.798923482 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.173314519 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 3.281047982 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.169095639 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.025051909 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.025160286 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 4.20714736 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.116238345 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.025488183 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 3.360095186 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 3.017177747 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.069301014 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.06414002 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.029084714 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.025268981 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.249342469 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 3.179375476 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 4.312723451 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.515202232 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.614275975 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.834021797 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.156736882 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 4.673915334 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.153564007 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.70995334 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.072092719 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.028753024 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.690639672 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.156576221 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 3.304582088 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.175314071 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.152326949 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.714062005 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 3.150069778 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.331173761 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 3.177997655 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.152509294 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.801721775 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.585897483 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.285381932 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 4.434201351 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.063123881 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.555222174 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 6.151023568 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.575536076 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 3.115074735 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.728111121 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 4.053777984 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.08451547 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.025913478 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.025496546 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.541473779 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 3.087933814 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.032228221 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.81406668 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.846332908 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.952175656 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.755389111 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.075510097 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.030373151 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.025568503 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.026243114 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.931301405 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 4.058492684 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 4.373641578 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.162382846 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.026036589 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.025448077 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.001260346 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 4.369880679 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.871019611 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.924986125 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 3.008202316 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.170109323 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.026185963 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.026056866 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.02584742 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.026262147 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.027492286 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.025828331 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 3.568776093 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.045292581 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.621804384 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.076821685 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.029479845 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 3.245500753 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.092987015 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.026263079 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 4.214325277 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.107410282 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.144942814 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.100794132 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.026651911 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.445694856 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.171696204 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.996878669 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 4.261482634 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 3.318419976 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.269201168 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 4.575227656 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.070955524 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.462312764 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.327090707 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.885182962 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.032948414 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.929388857 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.065047605 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 3.818047538 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.003692496 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 4.42909836 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.609403435 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 3.108038287 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 3.305959287 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.938279844 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.392689592 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 5.264555174 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.095280847 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.026111339 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.026440348 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.089822175 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.264699748 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.077733067 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 4.296000789 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.228475345 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.007599179 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 4.271200756 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.124420826 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 4.238166748 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.055071464 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.041894904 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.026760786 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.025852834 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 3.496898987 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 3.914588876 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.113802171 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.026903496 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.926897404 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 3.842151214 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.938154737 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.650488389 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 5.012846311 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.170767035 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.027297247 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.22507838 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.083898799 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 4.825014445 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.045384382 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.812237669 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.36083742 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.079477019 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 4.214820587 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.393629656 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 4.826143153 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 3.452941057 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.145492178 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.026525103 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 3.397371631 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.021240699 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.175223017 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.93995796 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 3.369581193 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.560121806 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 4.551965688 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 5.367583351 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.144640122 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.923393184 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 3.522193893 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 3.110198075 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.034178429 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.876589391 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.17579034 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 4.35951258 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.997456018 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.314028922 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.174379269 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.663703682 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 3.686473701 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.172425017 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.631584487 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.17395483 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.027149498 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 4.667484193 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.083347822 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 4.133978955 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.150070221 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.027509049 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.04190792 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.69399099 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.628599171 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 4.278554324 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.105092703 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.027203326 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 4.83781088 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.730473131 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.073754097 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.031107266 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.027162143 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 4.477217227 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.067706522 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.027716057 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.454370637 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.650726341 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.173618677 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.506590603 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 4.243096469 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.176140609 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 3.307594842 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 4.382712368 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.226272865 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.095011051 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.027403603 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.027750528 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.027468589 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.447561718 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.19139503 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.027878673 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.638019215 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.173256315 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.80823664 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.955537804 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 3.283213582 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.097980593 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.450678565 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.173426755 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.49815713 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 3.993473413 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.063786288 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.265856147 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 3.176628521 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 3.142813677 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 3.782075886 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.133061951 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.027515848 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.982899413 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 4.356358859 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 3.380827165 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 3.450949515 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 4.337781405 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.115049113 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.725271405 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.139660106 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 4.855708547 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.046425042 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.02794715 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.489652993 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 5.265663227 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 3.470124572 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.180328388 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 3.500484196 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.144766559 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.327142251 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 4.362952901 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.124704647 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.027333561 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.026236976 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 3.049357525 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.057542011 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 3.538095247 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 5.01149718 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 3.503886388 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.160964984 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.824031699 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 5.673303814 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 4.716895579 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.331521438 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 5.44467501 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 4.312200884 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.058307526 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.000854408 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 4.392244925 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.10476649 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.191094009 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.127065205 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 3.823848204 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.097192481 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.027512987 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 3.448888479 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.190379151 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.02746739 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.027590058 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.925736946 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 4.754922024 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.132896572 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 3.237795301 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.124610099 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.027445751 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.634653822 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.305967816 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.068626771 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.02751077 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.027565071 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 3.902759365 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.13923754 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.027247905 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 3.44382352 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.181950258 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 3.343191811 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.846044053 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.475359623 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.124143664 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.027924853 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.027436219 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.749357131 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 4.65172673 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.062974659 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.345012965 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 3.155791089 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.522302157 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 3.09682009 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 3.489406204 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.570155697 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 3.036553027 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.151560608 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.028829478 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.035790062 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 4.983714079 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.947125559 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.768064894 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 5.437606909 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.119042089 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 3.82606663 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 3.033226782 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.089060475 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 4.210740903 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.094522185 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.027765311 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.027196754 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.027145125 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.498212148 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 3.106824607 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.034182866 seconds)
  done (took 1386.834133279 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.295718374 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.027393268 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.027986711 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.027440258 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.02764536 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.027967192 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.027892828 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.02750018 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.028081617 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.02841324 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.027638007 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.027382301 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.027237785 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.300858857 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.02746691 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.027956502 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.027872438 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.028424092 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.027666183 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.027441153 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.027753079 seconds)
  done (took 23.133625 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.02753981 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.027888032 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.027748911 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.02784243 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.027921367 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.028028713 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.027936149 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.02752952 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.027860934 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.02772075 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.027368487 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.027706806 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.027896557 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.027656958 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.027629915 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.028104763 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.027804678 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.027618449 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.027624215 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.02793063 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.027893429 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.027434097 seconds)
  done (took 23.620582024 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.028525426 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.028468494 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.77278777 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.152850886 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.028214973 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.027820774 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.028234094 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.226253896 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.058840002 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.919935235 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 3.393419257 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 3.1590985 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.035028873 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.209445255 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.129425374 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.028476738 seconds)
    (17/49) benchmarking "13786"...
    done (took 1.155232502 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.028118929 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.028818624 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.029517571 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.028087017 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 3.256282012 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.167024724 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.028249912 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.870959543 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.177328607 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.028155366 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.027907699 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.027715607 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.999840153 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.062409388 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.032135771 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.892376383 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 3.781600693 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.358133604 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.927967374 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.074002367 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.031881045 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.029815559 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.027486149 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.2133577 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.88763208 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.034959444 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.027609446 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 3.32896126 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.144779161 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.029599217 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.372930936 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 3.157977936 seconds)
  done (took 84.5063195 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.032534561 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.154800765 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.085343142 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.028991911 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.148669274 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.028403477 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.085899716 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.02868931 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.02792844 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.028502074 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.161653977 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.170992001 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.027933224 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.02837842 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.112911578 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.027915749 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.028366168 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.0281485 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.028008473 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.027913902 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.028420018 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.078935958 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.138857373 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.167319047 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.028939955 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.027778922 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.028313041 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.029461949 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.164837536 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.028982983 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.028345565 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.028590853 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.153803242 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.103912565 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.028272555 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.028149209 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.152237932 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.028438777 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.030057293 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.030331962 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.028383997 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.028562365 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.084685672 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.161726876 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.02863946 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.127186083 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.028788728 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.028264369 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.161494882 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.028703479 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.02859643 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.176386421 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.028242941 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.028813205 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.028834595 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.145388102 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.028466074 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.028700496 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.028769096 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.158066878 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.028221451 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.0287632 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.171958419 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.029077739 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.028668445 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.176144323 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.127320143 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.028460955 seconds)
  done (took 73.645747201 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.028592612 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.165103495 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.203925938 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.205309972 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.165687984 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.160403739 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.167916411 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.165517787 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.164535983 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.168103582 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.165260959 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.118386825 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.135307218 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.118275252 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.168473365 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.152274041 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.155266355 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.150980915 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.168374887 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.16841981 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.155135355 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.203810874 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.165257372 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.204810455 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.383984682 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.135258001 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.164619498 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.168482923 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.207355847 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.165084515 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.384193836 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.16817679 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.165343147 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.208068389 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.384275071 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.162816566 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.028390242 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.165420976 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.168017252 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.16523419 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.135892874 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.20686695 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.162407715 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.135723923 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.157340759 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.162999302 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.205811286 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.38165479 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.118366459 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.168407319 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.165388599 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.206506685 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.162356195 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.160741356 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.20629015 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.12444566 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.205333673 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.206810172 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.168314194 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.204497771 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.20488367 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.123864633 seconds)
  done (took 74.036207949 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.028897869 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.028351228 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.11023965 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.028493096 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.028650277 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.111250156 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.029099104 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.028502436 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.029141278 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.029184432 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.028876351 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.110850705 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.391044877 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.028904438 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.111779291 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.389664997 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.111313537 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.111434663 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.029202068 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.138560257 seconds)
  done (took 24.913663836 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.091664382 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.207680553 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.083104552 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.204304404 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.069245908 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.185872874 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.097727158 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.08495777 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.085230579 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.081309759 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.195592598 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.195656578 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.068567744 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.202506244 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.183491722 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.179663096 seconds)
  done (took 19.248719388 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.029295176 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.02947587 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.029966262 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.029564282 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.028970363 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.030605415 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.02952047 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.029167945 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.029037273 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.48706141 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.029646401 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.029393403 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.029524223 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.029603604 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.030077549 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.029557515 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.029533329 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.029437379 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.029720626 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.029165665 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.600638821 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.03035045 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.029561645 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.029583885 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.029564983 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.600469143 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.029694027 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.029936088 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.029598217 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.030994856 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.032550671 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.51433247 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.042480596 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.036376745 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.035740735 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.05485664 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.038713346 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.02935468 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.031398977 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.042622429 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.055835744 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.061869493 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.044141359 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.058691618 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.044041048 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.042614213 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.076874676 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.524480597 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.052219265 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.05805641 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.051987864 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.080490622 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.074344722 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.616329275 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.139538839 seconds)
  done (took 61.341392652 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.179911199 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.19495535 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.144340035 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.150068348 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.202573104 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.189068717 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.190747681 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.171554453 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.180016941 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.08539291 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.145661053 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.098410865 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.136303201 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.151095146 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.155673775 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.138302542 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.100412257 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.169243025 seconds)
  done (took 21.904996144 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.093315714 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.084556008 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.078626699 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.080703861 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.079236111 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.091550856 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.097222747 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.078606869 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.073333549 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.07480261 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.076671682 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.076669297 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.075667537 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.088442222 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.054320988 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.067343345 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.046535711 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.04311123 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.058098452 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.087360571 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.065171454 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.06617421 seconds)
  done (took 24.723995977 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#3", "BigInt", "+")...
    done (took 1.106035478 seconds)
    (2/6) benchmarking ("#3", "UInt64", "+")...
    done (took 1.104306683 seconds)
    (3/6) benchmarking ("#4", "UInt64", "+")...
    done (took 1.045979418 seconds)
    (4/6) benchmarking ("#3", "Int64", "+")...
    done (took 1.05113074 seconds)
    (5/6) benchmarking ("#4", "Int64", "+")...
    done (took 1.034882601 seconds)
    (6/6) benchmarking ("#4", "BigInt", "+")...
    done (took 1.068622474 seconds)
  done (took 7.446205 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.093441528 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.103959634 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.080781251 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.079493022 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.104878173 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.148714271 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.13488314 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.127520255 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.126828232 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.346824871 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.121612399 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.115541898 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.121614823 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.182950934 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.103293911 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.104786396 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.115602718 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.121768316 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.087922665 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.11909301 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.12081917 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.131529979 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.148094938 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.114998448 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.117239593 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.159945163 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.100620131 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.334378453 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.117093851 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.108086117 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.106683691 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.114934813 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.118017261 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.345721945 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.101208519 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.118035689 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.117488155 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.127093319 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.129592794 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.176538034 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.089067626 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.116094824 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.117702093 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.141156756 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.139916602 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.153159522 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.140329129 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.137668874 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.132613475 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.341380509 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.134370661 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.175424195 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.108042939 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.113121029 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.099821634 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.31976721 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.335362687 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.167400878 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.114108599 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.351578691 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.194934646 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.135378807 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.169442446 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.356497704 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.126207902 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.18705847 seconds)
  done (took 77.089876058 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.158116873 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.066725872 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.139448998 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.36353857 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.184141424 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.136310361 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.146002351 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.143876634 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.139912878 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.10566409 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.133897931 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.135881233 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.172594724 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.173419685 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.137166939 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.126840523 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.137769149 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.174606616 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.100846987 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.334158308 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.131224112 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.169429212 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.197579881 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.187818503 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.338802878 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.125552854 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.131889571 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.131221917 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.131944826 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.136541275 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.147245412 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.13973538 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.180533173 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.080913239 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.165033289 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.12746672 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.134000625 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.148311526 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.137207282 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.126262439 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.173339619 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.197379946 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.170557392 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.147812517 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.384048497 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.157969241 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.156793779 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.104646656 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.142887817 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.116719444 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.362059616 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.353896342 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.370006751 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.194421675 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.147771189 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.152804252 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.141033638 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.12739896 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.142677202 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.120566108 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.200857456 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.165898018 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.383131496 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.170458468 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.158390291 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.224845978 seconds)
  done (took 78.465109407 seconds)
done (took 2303.130929746 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 6.117445303 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 6.161316007 seconds)
  done (took 13.292987386 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose", "(600, 600)")...
    done (took 1.03581795 seconds)
    (2/16) benchmarking ("adjoint", "(600, 400)")...
    done (took 1.035432603 seconds)
    (3/16) benchmarking ("adjoint!", "(600, 600)")...
    done (took 1.185833223 seconds)
    (4/16) benchmarking ("adjoint", "(20000, 20000)")...
    done (took 1.081742465 seconds)
    (5/16) benchmarking ("transpose!", "(20000, 10000)")...
    done (took 6.089355075 seconds)
    (6/16) benchmarking ("adjoint!", "(20000, 20000)")...
    done (took 6.145206206 seconds)
    (7/16) benchmarking ("transpose!", "(20000, 20000)")...
    done (took 6.086382539 seconds)
    (8/16) benchmarking ("transpose", "(600, 400)")...
    done (took 1.059482279 seconds)
    (9/16) benchmarking ("transpose", "(20000, 20000)")...
    done (took 1.055761616 seconds)
    (10/16) benchmarking ("transpose!", "(600, 400)")...
    done (took 1.139901042 seconds)
    (11/16) benchmarking ("adjoint", "(600, 600)")...
    done (took 1.054058603 seconds)
    (12/16) benchmarking ("transpose!", "(600, 600)")...
    done (took 1.183058181 seconds)
    (13/16) benchmarking ("adjoint!", "(600, 400)")...
    done (took 1.153294965 seconds)
    (14/16) benchmarking ("transpose", "(20000, 10000)")...
    done (took 1.054070434 seconds)
    (15/16) benchmarking ("adjoint!", "(20000, 10000)")...
    done (took 6.072880075 seconds)
    (16/16) benchmarking ("adjoint", "(20000, 10000)")...
    done (took 1.082589396 seconds)
  done (took 38.54807165 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("Tridiagonal", 10)...
    done (took 6.047438555 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.593014142 seconds)
    (3/18) benchmarking ("IJV", 10)...
    done (took 3.086465145 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.8033387 seconds)
    (5/18) benchmarking ("Bidiagonal", 100)...
    done (took 6.060052855 seconds)
    (6/18) benchmarking ("Tridiagonal", 1000)...
    done (took 1.750444471 seconds)
    (7/18) benchmarking ("IJV", 100)...
    done (took 2.364933616 seconds)
    (8/18) benchmarking ("Bidiagonal", 10)...
    done (took 5.827839359 seconds)
    (9/18) benchmarking ("Tridiagonal", 100)...
    done (took 1.349196361 seconds)
    (10/18) benchmarking ("IV", 1000)...
    done (took 1.516934672 seconds)
    (11/18) benchmarking ("SymTridiagonal", 100)...
    done (took 1.330587165 seconds)
    (12/18) benchmarking ("Diagonal", 10)...
    done (took 4.996048465 seconds)
    (13/18) benchmarking ("Diagonal", 100)...
    done (took 5.676197737 seconds)
    (14/18) benchmarking ("SymTridiagonal", 10)...
    done (took 6.258736531 seconds)
    (15/18) benchmarking ("IJV", 1000)...
    done (took 1.679280458 seconds)
    (16/18) benchmarking ("Diagonal", 1000)...
    done (took 1.485194235 seconds)
    (17/18) benchmarking ("Bidiagonal", 1000)...
    done (took 1.543099657 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 1.616681757 seconds)
  done (took 59.042977485 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", "(20000, 20000)")...
    done (took 6.043240585 seconds)
    (2/2) benchmarking ("unary minus", "(600, 600)")...
    done (took 1.211854635 seconds)
  done (took 8.298014931 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.046850594 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 6.034534691 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.103360427 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 6.040793346 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.061021323 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 6.052233095 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 6.057641523 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.092998421 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.094671105 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.090142241 seconds)
  done (took 61.721492669 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 1000)...
    done (took 6.012559488 seconds)
    (2/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.693452115 seconds)
    (3/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 1.343847042 seconds)
    (4/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.516183134 seconds)
    (5/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 3.651542915 seconds)
    (6/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 1.497091496 seconds)
    (7/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.194079243 seconds)
    (8/54) benchmarking ("spmat", "range", 100)...
    done (took 1.373350198 seconds)
    (9/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.119843532 seconds)
    (10/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.013869279 seconds)
    (11/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 5.333341917 seconds)
    (12/54) benchmarking ("spvec", "array", 1000)...
    done (took 1.392264507 seconds)
    (13/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.870705126 seconds)
    (14/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 3.283720111 seconds)
    (15/54) benchmarking ("spmat", "array", 100)...
    done (took 1.667786026 seconds)
    (16/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.269657278 seconds)
    (17/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.574252046 seconds)
    (18/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 1.529634129 seconds)
    (19/54) benchmarking ("spvec", "logical", 1000)...
    done (took 1.634135221 seconds)
    (20/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 3.272500882 seconds)
    (21/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.426628443 seconds)
    (22/54) benchmarking ("spmat", "range", 10)...
    done (took 5.229289243 seconds)
    (23/54) benchmarking ("spmat", "splogical", 100)...
    done (took 1.458790757 seconds)
    (24/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 1.856521833 seconds)
    (25/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.033872935 seconds)
    (26/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 3.609541458 seconds)
    (27/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.27906093 seconds)
    (28/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.181071937 seconds)
    (29/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.118402128 seconds)
    (30/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 3.168789087 seconds)
    (31/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 5.241062877 seconds)
    (32/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.201960366 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 5.217144509 seconds)
    (34/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.19587608 seconds)
    (35/54) benchmarking ("spvec", "range", 10000)...
    done (took 4.167230599 seconds)
    (36/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.667357033 seconds)
    (37/54) benchmarking ("spvec", "logical", 10000)...
    done (took 1.759089464 seconds)
    (38/54) benchmarking ("spmat", "array", 10)...
    done (took 1.231917815 seconds)
    (39/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.461949626 seconds)
    (40/54) benchmarking ("spmat", "logical", 100)...
    done (took 1.375298096 seconds)
    (41/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 1.696025895 seconds)
    (42/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 3.705407264 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.072936441 seconds)
    (44/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 3.688809623 seconds)
    (45/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.176160287 seconds)
    (46/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 3.400936235 seconds)
    (47/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.018060635 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 1.387353337 seconds)
    (49/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.117345896 seconds)
    (50/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 1.14160383 seconds)
    (51/54) benchmarking ("spmat", "logical", 1000)...
    done (took 2.641083477 seconds)
    (52/54) benchmarking ("spvec", "range", 100000)...
    done (took 1.202065035 seconds)
    (53/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 1.173639831 seconds)
    (54/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 1.156799495 seconds)
  done (took 150.732895666 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.012335535 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 2.414865653 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.171634002 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.014083591 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.454627068 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.236209645 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 4.797523687 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.488749485 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.027442153 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.25854535 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.197878601 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.164083609 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.015589262 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.017317289 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.024810656 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.026299334 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.216676947 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.470191569 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.031029016 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.015646198 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.239857528 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.271674584 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.15784776 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.017536668 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 1.190738789 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.274811884 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.413889925 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.160437754 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 1.4186845 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.013674609 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.464486531 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.030239851 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.016862968 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 5.920016456 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.399098035 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.353460941 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.496744586 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.021825245 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.798076561 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.016029131 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 1.66559211 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.228539642 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.360099463 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.169336517 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.180537407 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.257198242 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.625384066 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.012564932 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 1.773761539 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.199417694 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.252207633 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 1.260673768 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.305681719 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.020383703 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 5.492777234 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.019284355 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.018192964 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 1.284957795 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.173707439 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 1.174539845 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.015894182 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.016657244 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.017059792 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.269949563 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.015838399 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 1.146426 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.015148119 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.019573831 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 1.146017101 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 1.154834694 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.173043405 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.270428275 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.273506159 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 2.984088469 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 3.367252802 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.265418742 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 1.411149599 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.26094138 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.016341792 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.015610706 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.448863084 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 1.466754344 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.185471301 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 1.269613647 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.339637174 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.312594091 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 1.581279707 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.015266455 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 1.251718161 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.198333992 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.252871028 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.178069217 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 1.387653349 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 1.909608574 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.014660756 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.014923586 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 3.326750893 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.160376504 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.017509603 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.544701897 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.295282838 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.119801785 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.196991062 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.520640869 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.133870399 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.016310835 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 1.578546628 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.015110059 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.2462802 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.341271856 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.022788043 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.016382156 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 1.184612652 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 1.822709071 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.013351952 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.462575405 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 1.413199635 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.026865774 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.192884043 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.016566638 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.277084177 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 5.914278525 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.259003474 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.015862054 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.300857309 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 1.213567422 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.177442539 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.016967965 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.409242149 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.295270008 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.432703028 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.358542669 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.016180931 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.017137887 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.350486172 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.017378907 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.017341356 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 1.204223296 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 4.997680296 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 1.203552639 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.016243264 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 1.285960114 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.189281162 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.403012816 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.01423048 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.301481481 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 1.285573015 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.446910683 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 6.049787291 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.165713941 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.037795279 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.120699893 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 1.192557141 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.014753322 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.015863753 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 4.902759536 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 6.033281162 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.177153249 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 1.254457781 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 1.710939748 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 1.423194007 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 1.371576169 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.012986492 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.497730048 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 1.225698348 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 2.468904437 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 4.505962418 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 1.194758869 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 5.758705175 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 5.25312646 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 6.013382378 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 1.267143074 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 1.326998733 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 6.016632618 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 6.017661089 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 1.725267191 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 3.983638223 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.014276967 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.189487355 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.809492304 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 4.283422338 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.240339042 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.018302417 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 1.387399242 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.016424439 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.262010255 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 2.530446231 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 5.118341774 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 6.015681932 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.014754266 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 6.016350045 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.016569029 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.240929438 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 1.269547077 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 2.710048294 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 1.175464713 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 1.326556621 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 1.239775221 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 1.347654813 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 1.486012145 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.024683315 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.34618321 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 6.016164638 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 1.419817782 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 6.025129362 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.1821883 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 1.272490102 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.01711237 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 1.339525753 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 1.387005078 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.223021746 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 1.44935783 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 6.02241822 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.017069316 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 5.627896857 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 1.200097811 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 1.48774397 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.014401526 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 5.207751698 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 1.388609737 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 1.155234774 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 1.249132464 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 4.086229599 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 2.015250922 seconds)
  done (took 708.67497362 seconds)
done (took 1041.360314754 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.013809317 seconds)
    (2/4) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.018103796 seconds)
    (3/4) benchmarking ("Float64", "(1000, 1000)", 3)...
    done (took 6.021841846 seconds)
    (4/4) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.022209114 seconds)
  done (took 25.088257267 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("array", 5)...
    done (took 2.006455274 seconds)
    (2/6) benchmarking ("array", 3)...
    done (took 2.110944567 seconds)
    (3/6) benchmarking ("tuple", 5)...
    done (took 1.210327701 seconds)
    (4/6) benchmarking ("tuple", 10)...
    done (took 1.033222925 seconds)
    (5/6) benchmarking ("array", 10)...
    done (took 2.376476402 seconds)
    (6/6) benchmarking ("tuple", 3)...
    done (took 1.090762619 seconds)
  done (took 10.848962651 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", "(1000, 1000)", 2)...
    done (took 6.015047206 seconds)
    (2/3) benchmarking ("Float64", "(1000000,)", 2)...
    done (took 6.016707039 seconds)
    (3/3) benchmarking ("Float64", "(1000000,)", 1)...
    done (took 6.020690981 seconds)
  done (took 19.066739072 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ("(10000000,)", 1)...
    done (took 1.305272182 seconds)
    (2/4) benchmarking ("(10000000,)", 2)...
    done (took 1.485644082 seconds)
    (3/4) benchmarking ("(1000, 1000)", 2)...
    done (took 1.182252103 seconds)
    (4/4) benchmarking ("(1000, 1000)", 1)...
    done (took 1.122740761 seconds)
  done (took 6.116653019 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (10, "tup_tup")...
    done (took 1.055654393 seconds)
    (2/9) benchmarking (3, "scal_tup_x3")...
    done (took 1.06080452 seconds)
    (3/9) benchmarking (3, "scal_tup")...
    done (took 1.031554027 seconds)
    (4/9) benchmarking (5, "scal_tup_x3")...
    done (took 1.057110714 seconds)
    (5/9) benchmarking (5, "scal_tup")...
    done (took 1.032181347 seconds)
    (6/9) benchmarking (3, "tup_tup")...
    done (took 1.03152943 seconds)
    (7/9) benchmarking (10, "scal_tup_x3")...
    done (took 1.066733967 seconds)
    (8/9) benchmarking (5, "tup_tup")...
    done (took 1.047089029 seconds)
    (9/9) benchmarking (10, "scal_tup")...
    done (took 1.031810973 seconds)
  done (took 10.432531791 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.575711381 seconds)
done (took 78.141565799 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", "*", "Int64", "(false, false)")...
    done (took 1.304050343 seconds)
    (2/341) benchmarking ("perf_simplecopy", "Float64", 1)...
    done (took 1.331114915 seconds)
    (3/341) benchmarking ("perf_sum", "BigFloat", 0)...
    done (took 6.029254287 seconds)
    (4/341) benchmarking ("perf_sum3", "Float64", 1)...
    done (took 1.337675017 seconds)
    (5/341) benchmarking ("broadcast", "abs", "Int64", 0)...
    done (took 1.169877124 seconds)
    (6/341) benchmarking ("broadcast", "abs", "Int64", 1)...
    done (took 1.355813377 seconds)
    (7/341) benchmarking ("map", "identity", "Float32", 0)...
    done (took 1.145537784 seconds)
    (8/341) benchmarking ("perf_countnothing", "Int8", 1)...
    done (took 1.049627168 seconds)
    (9/341) benchmarking ("collect", "all", "Float64", 1)...
    done (took 1.391927316 seconds)
    (10/341) benchmarking ("broadcast", "*", "Bool", "(false, true)")...
    done (took 1.450691822 seconds)
    (11/341) benchmarking ("broadcast", "*", "Int64", "(false, true)")...
    done (took 1.468232819 seconds)
    (12/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int64}", 1)...
    done (took 2.122552436 seconds)
    (13/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float32}", 0)...
    done (took 2.374643222 seconds)
    (14/341) benchmarking ("perf_binaryop", "*", "Float32", "(true, true)")...
    done (took 1.449008778 seconds)
    (15/341) benchmarking ("collect", "all", "ComplexF64", 0)...
    done (took 1.268462549 seconds)
    (16/341) benchmarking ("perf_sum2", "Bool", 1)...
    done (took 1.060213324 seconds)
    (17/341) benchmarking ("perf_countnothing", "Float32", 1)...
    done (took 1.042222889 seconds)
    (18/341) benchmarking ("perf_countnothing", "BigInt", 1)...
    done (took 1.094305365 seconds)
    (19/341) benchmarking ("collect", "filter", "Float64", 1)...
    done (took 2.630110462 seconds)
    (20/341) benchmarking ("map", "abs", "Bool", 1)...
    done (took 1.208462632 seconds)
    (21/341) benchmarking ("sort", "Union{Missing, Bool}", 1)...
    done (took 5.713017428 seconds)
    (22/341) benchmarking ("perf_sum2", "ComplexF64", 0)...
    done (took 1.242708991 seconds)
    (23/341) benchmarking ("sort", "Float32", 0)...
    done (took 5.684649096 seconds)
    (24/341) benchmarking ("perf_sum", "Int64", 1)...
    done (took 1.061366962 seconds)
    (25/341) benchmarking ("collect", "filter", "Float32", 0)...
    done (took 1.915009022 seconds)
    (26/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int8}", 0)...
    done (took 1.181042361 seconds)
    (27/341) benchmarking ("broadcast", "*", "Float32", "(false, false)")...
    done (took 1.289456223 seconds)
    (28/341) benchmarking ("broadcast", "*", "BigInt", "(false, true)")...
    done (took 7.307436803 seconds)
    (29/341) benchmarking ("map", "*", "ComplexF64", "(true, true)")...
    done (took 1.992123704 seconds)
    (30/341) benchmarking ("perf_sum4", "Float32", 1)...
    done (took 1.055833532 seconds)
    (31/341) benchmarking ("broadcast", "identity", "Float32", 0)...
    done (took 1.126659402 seconds)
    (32/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, true)")...
    done (took 1.496500469 seconds)
    (33/341) benchmarking ("collect", "filter", "BigInt", 1)...
    done (took 2.27550269 seconds)
    (34/341) benchmarking ("broadcast", "identity", "Float64", 1)...
    done (took 1.387292173 seconds)
    (35/341) benchmarking ("map", "abs", "Bool", 0)...
    done (took 1.172709289 seconds)
    (36/341) benchmarking ("skipmissing", "collect", "Union{Missing, Bool}", 1)...
    done (took 1.897684384 seconds)
    (37/341) benchmarking ("perf_binaryop", "*", "Int64", "(false, false)")...
    done (took 1.453891302 seconds)
    (38/341) benchmarking ("map", "abs", "BigFloat", 0)...
    done (took 6.028544139 seconds)
    (39/341) benchmarking ("skipmissing", "sum", "Union{Missing, ComplexF64}", 1)...
    done (took 1.297445191 seconds)
    (40/341) benchmarking ("map", "*", "Int8", "(true, true)")...
    done (took 1.398264864 seconds)
    (41/341) benchmarking ("map", "*", "Bool", "(false, false)")...
    done (took 1.324442593 seconds)
    (42/341) benchmarking ("perf_sum3", "Bool", 0)...
    done (took 1.155722939 seconds)
    (43/341) benchmarking ("map", "*", "BigFloat", "(false, false)")...
    done (took 6.014331796 seconds)
    (44/341) benchmarking ("perf_sum", "Float32", 1)...
    done (took 1.340193903 seconds)
    (45/341) benchmarking ("broadcast", "*", "Float32", "(false, true)")...
    done (took 1.433010414 seconds)
    (46/341) benchmarking ("perf_sum", "Int8", 1)...
    done (took 1.05173854 seconds)
    (47/341) benchmarking ("skipmissing", "collect", "Float64", 0)...
    done (took 1.969136601 seconds)
    (48/341) benchmarking ("perf_sum2", "Float64", 1)...
    done (took 1.200937609 seconds)
    (49/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int64}", 0)...
    done (took 2.565066582 seconds)
    (50/341) benchmarking ("perf_sum3", "Float32", 1)...
    done (took 1.219049498 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 1.462629763 seconds)
    (52/341) benchmarking ("perf_sum", "Int8", 0)...
    done (took 1.034896447 seconds)
    (53/341) benchmarking ("broadcast", "identity", "ComplexF64", 1)...
    done (took 1.654378338 seconds)
    (54/341) benchmarking ("perf_countnothing", "BigInt", 0)...
    done (took 1.110584154 seconds)
    (55/341) benchmarking ("map", "identity", "Bool", 0)...
    done (took 1.158208123 seconds)
    (56/341) benchmarking ("map", "abs", "BigFloat", 1)...
    done (took 6.015902263 seconds)
    (57/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, true)")...
    done (took 2.075309037 seconds)
    (58/341) benchmarking ("map", "abs", "ComplexF64", 0)...
    done (took 2.567609154 seconds)
    (59/341) benchmarking ("perf_sum", "Float64", 0)...
    done (took 1.186386133 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 1.344188273 seconds)
    (61/341) benchmarking ("perf_countnothing", "Float64", 1)...
    done (took 1.042465583 seconds)
    (62/341) benchmarking ("broadcast", "abs", "BigFloat", 0)...
    done (took 6.014338079 seconds)
    (63/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(true, true)")...
    done (took 2.025227404 seconds)
    (64/341) benchmarking ("skipmissing", "sum", "Float64", 0)...
    done (took 1.063655842 seconds)
    (65/341) benchmarking ("perf_sum2", "BigInt", 0)...
    done (took 7.468457854 seconds)
    (66/341) benchmarking ("map", "identity", "Bool", 1)...
    done (took 1.54263292 seconds)
    (67/341) benchmarking ("broadcast", "*", "Bool", "(false, false)")...
    done (took 1.484744709 seconds)
    (68/341) benchmarking ("collect", "all", "Bool", 0)...
    done (took 1.163883782 seconds)
    (69/341) benchmarking ("map", "*", "ComplexF64", "(false, false)")...
    done (took 1.48892438 seconds)
    (70/341) benchmarking ("perf_sum4", "Float64", 0)...
    done (took 1.059159243 seconds)
    (71/341) benchmarking ("perf_countnothing", "Int8", 0)...
    done (took 1.048442215 seconds)
    (72/341) benchmarking ("skipmissing", "sum", "Union{Missing, Bool}", 1)...
    done (took 1.056978035 seconds)
    (73/341) benchmarking ("skipmissing", "collect", "Int8", 0)...
    done (took 1.721721074 seconds)
    (74/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Int64}", 0)...
    done (took 1.177926897 seconds)
    (75/341) benchmarking ("perf_sum3", "BigFloat", 0)...
    done (took 6.013497857 seconds)
    (76/341) benchmarking ("sort", "Union{Nothing, Int64}", 0)...
    done (took 6.133116624 seconds)
    (77/341) benchmarking ("map", "identity", "BigFloat", 0)...
    done (took 1.352302868 seconds)
    (78/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigInt}", 1)...
    done (took 2.203618123 seconds)
    (79/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, false)")...
    done (took 6.031266497 seconds)
    (80/341) benchmarking ("perf_sum", "BigInt", 1)...
    done (took 7.488219026 seconds)
    (81/341) benchmarking ("broadcast", "identity", "Float64", 0)...
    done (took 1.496519784 seconds)
    (82/341) benchmarking ("broadcast", "*", "BigFloat", "(false, false)")...
    done (took 6.016657672 seconds)
    (83/341) benchmarking ("collect", "all", "Float64", 0)...
    done (took 1.296898051 seconds)
    (84/341) benchmarking ("map", "identity", "Float64", 1)...
    done (took 1.416882473 seconds)
    (85/341) benchmarking ("perf_sum3", "Float64", 0)...
    done (took 1.194493574 seconds)
    (86/341) benchmarking ("skipmissing", "collect", "Union{Missing, ComplexF64}", 1)...
    done (took 2.366355599 seconds)
    (87/341) benchmarking ("broadcast", "*", "Int64", "(true, true)")...
    done (took 1.461646601 seconds)
    (88/341) benchmarking ("perf_binaryop", "*", "Int8", "(true, true)")...
    done (took 1.370044248 seconds)
    (89/341) benchmarking ("map", "*", "Float32", "(true, true)")...
    done (took 1.421913027 seconds)
    (90/341) benchmarking ("map", "*", "BigInt", "(false, true)")...
    done (took 6.029144804 seconds)
    (91/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigInt}", 1)...
    done (took 7.818211733 seconds)
    (92/341) benchmarking ("broadcast", "*", "BigInt", "(true, true)")...
    done (took 8.291103785 seconds)
    (93/341) benchmarking ("sort", "BigInt", 0)...
    done (took 7.743994444 seconds)
    (94/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(false, true)")...
    done (took 6.029059353 seconds)
    (95/341) benchmarking ("perf_binaryop", "*", "BigInt", "(true, true)")...
    done (took 6.162867435 seconds)
    (96/341) benchmarking ("broadcast", "*", "BigInt", "(false, false)")...
    done (took 7.783880929 seconds)
    (97/341) benchmarking ("map", "*", "Bool", "(true, true)")...
    done (took 2.950888929 seconds)
    (98/341) benchmarking ("broadcast", "*", "Float64", "(true, true)")...
    done (took 1.517964653 seconds)
    (99/341) benchmarking ("map", "identity", "Float64", 0)...
    done (took 1.156335637 seconds)
    (100/341) benchmarking ("map", "*", "Int64", "(true, true)")...
    done (took 1.538721233 seconds)
    (101/341) benchmarking ("perf_sum4", "Int64", 1)...
    done (took 1.059459616 seconds)
    (102/341) benchmarking ("perf_countnothing", "Float32", 0)...
    done (took 1.048783727 seconds)
    (103/341) benchmarking ("collect", "filter", "Float32", 1)...
    done (took 2.352157107 seconds)
    (104/341) benchmarking ("map", "*", "Float64", "(false, false)")...
    done (took 1.313673735 seconds)
    (105/341) benchmarking ("collect", "filter", "Bool", 0)...
    done (took 1.80327298 seconds)
    (106/341) benchmarking ("perf_sum", "Int64", 0)...
    done (took 1.067007979 seconds)
    (107/341) benchmarking ("perf_sum3", "Int8", 1)...
    done (took 1.183450538 seconds)
    (108/341) benchmarking ("perf_sum3", "BigFloat", 1)...
    done (took 6.013640482 seconds)
    (109/341) benchmarking ("perf_sum3", "Float32", 0)...
    done (took 1.294845767 seconds)
    (110/341) benchmarking ("map", "*", "BigInt", "(true, true)")...
    done (took 6.961242642 seconds)
    (111/341) benchmarking ("perf_sum", "BigFloat", 1)...
    done (took 6.274655733 seconds)
    (112/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, true)")...
    done (took 1.557544881 seconds)
    (113/341) benchmarking ("sort", "BigFloat", 0)...
    done (took 6.030246866 seconds)
    (114/341) benchmarking ("perf_simplecopy", "Bool", 1)...
    done (took 1.094716869 seconds)
    (115/341) benchmarking ("broadcast", "*", "ComplexF64", "(false, false)")...
    done (took 1.5374554 seconds)
    (116/341) benchmarking ("sort", "Union{Nothing, BigFloat}", 0)...
    done (took 6.017822427 seconds)
    (117/341) benchmarking ("broadcast", "identity", "Int64", 1)...
    done (took 1.368578692 seconds)
    (118/341) benchmarking ("perf_countequals", "Float32")...
    done (took 1.466121616 seconds)
    (119/341) benchmarking ("skipmissing", "collect", "BigFloat", 0)...
    done (took 2.13398371 seconds)
    (120/341) benchmarking ("skipmissing", "sum", "Union{Missing, BigFloat}", 1)...
    done (took 6.03077793 seconds)
    (121/341) benchmarking ("perf_sum", "Float64", 1)...
    done (took 1.292567513 seconds)
    (122/341) benchmarking ("perf_sum4", "Int8", 0)...
    done (took 1.034746621 seconds)
    (123/341) benchmarking ("perf_sum4", "ComplexF64", 0)...
    done (took 1.153258323 seconds)
    (124/341) benchmarking ("broadcast", "abs", "ComplexF64", 1)...
    done (took 2.610699363 seconds)
    (125/341) benchmarking ("perf_simplecopy", "BigInt", 1)...
    done (took 1.402875015 seconds)
    (126/341) benchmarking ("broadcast", "identity", "Bool", 0)...
    done (took 1.255411959 seconds)
    (127/341) benchmarking ("map", "*", "BigInt", "(false, false)")...
    done (took 6.018259982 seconds)
    (128/341) benchmarking ("perf_binaryop", "*", "Bool", "(true, true)")...
    done (took 2.999172144 seconds)
    (129/341) benchmarking ("sort", "Union{Nothing, Float32}", 0)...
    done (took 6.029246883 seconds)
    (130/341) benchmarking ("map", "abs", "Int8", 1)...
    done (took 1.227909618 seconds)
    (131/341) benchmarking ("sort", "Union{Nothing, BigInt}", 0)...
    done (took 6.032594619 seconds)
    (132/341) benchmarking ("map", "identity", "BigFloat", 1)...
    done (took 1.466357836 seconds)
    (133/341) benchmarking ("broadcast", "identity", "BigFloat", 1)...
    done (took 1.536322597 seconds)
    (134/341) benchmarking ("perf_sum2", "Int64", 1)...
    done (took 1.060375862 seconds)
    (135/341) benchmarking ("broadcast", "*", "Float64", "(false, false)")...
    done (took 1.293430866 seconds)
    (136/341) benchmarking ("perf_sum", "ComplexF64", 0)...
    done (took 1.156112921 seconds)
    (137/341) benchmarking ("skipmissing", "sum", "BigFloat", 0)...
    done (took 6.013719191 seconds)
    (138/341) benchmarking ("perf_sum3", "ComplexF64", 1)...
    done (took 1.347490686 seconds)
    (139/341) benchmarking ("perf_simplecopy", "Int8", 1)...
    done (took 1.082744093 seconds)
    (140/341) benchmarking ("perf_sum3", "ComplexF64", 0)...
    done (took 1.242119998 seconds)
    (141/341) benchmarking ("broadcast", "identity", "BigInt", 0)...
    done (took 1.343923801 seconds)
    (142/341) benchmarking ("perf_countequals", "Int64")...
    done (took 1.347770778 seconds)
    (143/341) benchmarking ("perf_sum3", "Bool", 1)...
    done (took 1.190243123 seconds)
    (144/341) benchmarking ("sort", "Union{Nothing, Float64}", 0)...
    done (took 6.014011616 seconds)
    (145/341) benchmarking ("broadcast", "identity", "BigFloat", 0)...
    done (took 1.363534198 seconds)
    (146/341) benchmarking ("sort", "Union{Nothing, Bool}", 0)...
    done (took 6.028447816 seconds)
    (147/341) benchmarking ("map", "abs", "Float32", 1)...
    done (took 1.274642341 seconds)
    (148/341) benchmarking ("broadcast", "abs", "Float64", 1)...
    done (took 1.350542497 seconds)
    (149/341) benchmarking ("perf_sum2", "Float32", 1)...
    done (took 1.194266603 seconds)
    (150/341) benchmarking ("perf_countequals", "Bool")...
    done (took 1.344598757 seconds)
    (151/341) benchmarking ("map", "identity", "Int8", 0)...
    done (took 1.159053806 seconds)
    (152/341) benchmarking ("skipmissing", "sum", "Int8", 0)...
    done (took 1.04599788 seconds)
    (153/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float32}", 1)...
    done (took 1.923355421 seconds)
    (154/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, false)")...
    done (took 1.461108675 seconds)
    (155/341) benchmarking ("collect", "all", "ComplexF64", 1)...
    done (took 1.597041046 seconds)
    (156/341) benchmarking ("map", "*", "Int64", "(false, true)")...
    done (took 1.554429658 seconds)
    (157/341) benchmarking ("map", "identity", "Float32", 1)...
    done (took 1.333492467 seconds)
    (158/341) benchmarking ("perf_simplecopy", "Float32", 0)...
    done (took 1.165163111 seconds)
    (159/341) benchmarking ("broadcast", "identity", "BigInt", 1)...
    done (took 1.523289899 seconds)
    (160/341) benchmarking ("map", "*", "Int8", "(false, false)")...
    done (took 1.275143794 seconds)
    (161/341) benchmarking ("skipmissing", "collect", "Float32", 0)...
    done (took 1.870610859 seconds)
    (162/341) benchmarking ("perf_sum3", "Int64", 0)...
    done (took 1.147665036 seconds)
    (163/341) benchmarking ("perf_simplecopy", "Bool", 0)...
    done (took 1.082930518 seconds)
    (164/341) benchmarking ("sort", "Union{Missing, Int8}", 1)...
    done (took 6.02854637 seconds)
    (165/341) benchmarking ("perf_sum2", "Int8", 0)...
    done (took 1.049903714 seconds)
    (166/341) benchmarking ("perf_countnothing", "BigFloat", 1)...
    done (took 1.094698641 seconds)
    (167/341) benchmarking ("sort", "Union{Missing, BigFloat}", 1)...
    done (took 6.016978592 seconds)
    (168/341) benchmarking ("perf_sum2", "BigFloat", 1)...
    done (took 6.025862557 seconds)
    (169/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float64}", 1)...
    done (took 1.291379953 seconds)
    (170/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Bool}", 0)...
    done (took 2.250975623 seconds)
    (171/341) benchmarking ("map", "*", "Float64", "(false, true)")...
    done (took 1.551723414 seconds)
    (172/341) benchmarking ("collect", "filter", "Int8", 0)...
    done (took 1.807913394 seconds)
    (173/341) benchmarking ("sort", "Int64", 0)...
    done (took 6.031279638 seconds)
    (174/341) benchmarking ("collect", "all", "BigFloat", 0)...
    done (took 1.352668405 seconds)
    (175/341) benchmarking ("skipmissing", "sum", "Union{Nothing, ComplexF64}", 0)...
    done (took 1.186573 seconds)
    (176/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, true)")...
    done (took 1.877605907 seconds)
    (177/341) benchmarking ("map", "identity", "BigInt", 1)...
    done (took 1.520598877 seconds)
    (178/341) benchmarking ("broadcast", "*", "BigFloat", "(true, true)")...
    done (took 6.107316852 seconds)
    (179/341) benchmarking ("map", "*", "Float32", "(false, false)")...
    done (took 1.331483487 seconds)
    (180/341) benchmarking ("perf_simplecopy", "ComplexF64", 1)...
    done (took 1.479113573 seconds)
    (181/341) benchmarking ("collect", "filter", "Float64", 0)...
    done (took 2.130165789 seconds)
    (182/341) benchmarking ("perf_countnothing", "Bool", 1)...
    done (took 1.067570707 seconds)
    (183/341) benchmarking ("perf_sum4", "BigFloat", 0)...
    done (took 6.013917976 seconds)
    (184/341) benchmarking ("broadcast", "*", "BigFloat", "(false, true)")...
    done (took 6.132070229 seconds)
    (185/341) benchmarking ("skipmissing", "collect", "Bool", 0)...
    done (took 1.75310487 seconds)
    (186/341) benchmarking ("perf_sum2", "Int64", 0)...
    done (took 1.067094428 seconds)
    (187/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, false)")...
    done (took 1.307004195 seconds)
    (188/341) benchmarking ("collect", "filter", "Int64", 1)...
    done (took 2.490969561 seconds)
    (189/341) benchmarking ("collect", "filter", "Int8", 1)...
    done (took 2.367344754 seconds)
    (190/341) benchmarking ("broadcast", "*", "Int8", "(true, true)")...
    done (took 1.465156201 seconds)
    (191/341) benchmarking ("collect", "filter", "BigFloat", 1)...
    done (took 2.210861045 seconds)
    (192/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int64}", 1)...
    done (took 1.070669992 seconds)
    (193/341) benchmarking ("perf_binaryop", "*", "Float32", "(false, false)")...
    done (took 1.364059719 seconds)
    (194/341) benchmarking ("map", "identity", "ComplexF64", 0)...
    done (took 1.267209102 seconds)
    (195/341) benchmarking ("map", "identity", "BigInt", 0)...
    done (took 1.343952027 seconds)
    (196/341) benchmarking ("broadcast", "abs", "Bool", 0)...
    done (took 1.25644955 seconds)
    (197/341) benchmarking ("map", "*", "Float32", "(false, true)")...
    done (took 1.410222237 seconds)
    (198/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Bool}", 0)...
    done (took 1.175874795 seconds)
    (199/341) benchmarking ("collect", "filter", "ComplexF64", 0)...
    done (took 2.346348289 seconds)
    (200/341) benchmarking ("skipmissing", "collect", "BigInt", 0)...
    done (took 2.09320694 seconds)
    (201/341) benchmarking ("collect", "all", "BigInt", 0)...
    done (took 1.352618782 seconds)
    (202/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, true)")...
    done (took 6.028744553 seconds)
    (203/341) benchmarking ("map", "abs", "Float64", 0)...
    done (took 2.733919609 seconds)
    (204/341) benchmarking ("skipmissing", "collect", "ComplexF64", 0)...
    done (took 2.262782337 seconds)
    (205/341) benchmarking ("perf_simplecopy", "ComplexF64", 0)...
    done (took 1.502481041 seconds)
    (206/341) benchmarking ("collect", "all", "Int64", 1)...
    done (took 1.414096658 seconds)
    (207/341) benchmarking ("broadcast", "abs", "Float32", 1)...
    done (took 1.278100938 seconds)
    (208/341) benchmarking ("skipmissing", "sum", "Union{Missing, Float32}", 1)...
    done (took 1.201082979 seconds)
    (209/341) benchmarking ("perf_simplecopy", "BigFloat", 0)...
    done (took 1.36476809 seconds)
    (210/341) benchmarking ("sort", "Union{Missing, Int64}", 1)...
    done (took 6.028713018 seconds)
    (211/341) benchmarking ("perf_sum3", "BigInt", 0)...
    done (took 6.027906141 seconds)
    (212/341) benchmarking ("perf_sum2", "BigFloat", 0)...
    done (took 8.391655742 seconds)
    (213/341) benchmarking ("perf_simplecopy", "Int64", 0)...
    done (took 1.337315272 seconds)
    (214/341) benchmarking ("perf_countnothing", "Float64", 0)...
    done (took 1.065298122 seconds)
    (215/341) benchmarking ("perf_sum", "BigInt", 0)...
    done (took 7.613062367 seconds)
    (216/341) benchmarking ("map", "abs", "BigInt", 0)...
    done (took 6.358502373 seconds)
    (217/341) benchmarking ("perf_sum2", "ComplexF64", 1)...
    done (took 2.181424535 seconds)
    (218/341) benchmarking ("broadcast", "*", "ComplexF64", "(true, true)")...
    done (took 1.906489399 seconds)
    (219/341) benchmarking ("map", "abs", "Float32", 0)...
    done (took 1.149812472 seconds)
    (220/341) benchmarking ("collect", "filter", "Bool", 1)...
    done (took 2.356449767 seconds)
    (221/341) benchmarking ("broadcast", "abs", "Float32", 0)...
    done (took 1.193415912 seconds)
    (222/341) benchmarking ("skipmissing", "collect", "Union{Missing, BigFloat}", 1)...
    done (took 2.162342234 seconds)
    (223/341) benchmarking ("broadcast", "abs", "ComplexF64", 0)...
    done (took 2.540857313 seconds)
    (224/341) benchmarking ("perf_sum4", "Float32", 0)...
    done (took 1.046286442 seconds)
    (225/341) benchmarking ("perf_simplecopy", "BigInt", 0)...
    done (took 1.333761256 seconds)
    (226/341) benchmarking ("perf_sum", "Float32", 0)...
    done (took 1.196882104 seconds)
    (227/341) benchmarking ("collect", "filter", "BigFloat", 0)...
    done (took 2.198515451 seconds)
    (228/341) benchmarking ("broadcast", "identity", "Float32", 1)...
    done (took 1.280715403 seconds)
    (229/341) benchmarking ("perf_sum4", "Float64", 1)...
    done (took 1.064825605 seconds)
    (230/341) benchmarking ("map", "abs", "Int64", 0)...
    done (took 1.16149499 seconds)
    (231/341) benchmarking ("broadcast", "abs", "Int8", 1)...
    done (took 1.315648642 seconds)
    (232/341) benchmarking ("perf_sum3", "Int64", 1)...
    done (took 1.175730962 seconds)
    (233/341) benchmarking ("collect", "all", "Float32", 1)...
    done (took 1.321314206 seconds)
    (234/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 1.859487491 seconds)
    (235/341) benchmarking ("perf_countequals", "Float64")...
    done (took 1.361073605 seconds)
    (236/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigInt}", 0)...
    done (took 6.014904004 seconds)
    (237/341) benchmarking ("perf_sum4", "Int8", 1)...
    done (took 3.58122192 seconds)
    (238/341) benchmarking ("broadcast", "abs", "BigInt", 0)...
    done (took 6.018941315 seconds)
    (239/341) benchmarking ("broadcast", "identity", "Bool", 1)...
    done (took 2.175772029 seconds)
    (240/341) benchmarking ("perf_countnothing", "Int64", 1)...
    done (took 1.065423933 seconds)
    (241/341) benchmarking ("skipmissing", "sum", "Float32", 0)...
    done (took 1.043652682 seconds)
    (242/341) benchmarking ("broadcast", "*", "Int8", "(false, false)")...
    done (took 1.31624468 seconds)
    (243/341) benchmarking ("collect", "all", "Bool", 1)...
    done (took 1.194078538 seconds)
    (244/341) benchmarking ("perf_simplecopy", "Int64", 1)...
    done (took 1.346730286 seconds)
    (245/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigInt}", 0)...
    done (took 2.192000453 seconds)
    (246/341) benchmarking ("perf_sum2", "Float64", 0)...
    done (took 1.201125247 seconds)
    (247/341) benchmarking ("perf_binaryop", "*", "BigFloat", "(true, true)")...
    done (took 6.014601245 seconds)
    (248/341) benchmarking ("perf_countnothing", "Int64", 0)...
    done (took 1.191973991 seconds)
    (249/341) benchmarking ("map", "*", "Int8", "(false, true)")...
    done (took 1.423208063 seconds)
    (250/341) benchmarking ("perf_binaryop", "*", "ComplexF64", "(false, false)")...
    done (took 1.870558327 seconds)
    (251/341) benchmarking ("map", "abs", "ComplexF64", 1)...
    done (took 2.58656774 seconds)
    (252/341) benchmarking ("map", "*", "ComplexF64", "(false, true)")...
    done (took 1.91120166 seconds)
    (253/341) benchmarking ("perf_countnothing", "Bool", 0)...
    done (took 1.057360097 seconds)
    (254/341) benchmarking ("map", "*", "BigFloat", "(false, true)")...
    done (took 6.154478708 seconds)
    (255/341) benchmarking ("broadcast", "*", "Bool", "(true, true)")...
    done (took 1.447926229 seconds)
    (256/341) benchmarking ("broadcast", "*", "Float32", "(true, true)")...
    done (took 1.443148472 seconds)
    (257/341) benchmarking ("perf_simplecopy", "Int8", 0)...
    done (took 1.098743616 seconds)
    (258/341) benchmarking ("perf_sum4", "ComplexF64", 1)...
    done (took 1.169276417 seconds)
    (259/341) benchmarking ("collect", "all", "BigInt", 1)...
    done (took 1.512874542 seconds)
    (260/341) benchmarking ("perf_sum4", "Bool", 1)...
    done (took 1.06460465 seconds)
    (261/341) benchmarking ("collect", "all", "Int8", 1)...
    done (took 1.185099875 seconds)
    (262/341) benchmarking ("sort", "Union{Missing, Float32}", 1)...
    done (took 6.03125987 seconds)
    (263/341) benchmarking ("perf_sum4", "BigFloat", 1)...
    done (took 6.031305137 seconds)
    (264/341) benchmarking ("collect", "filter", "ComplexF64", 1)...
    done (took 2.728405084 seconds)
    (265/341) benchmarking ("perf_simplecopy", "Float32", 1)...
    done (took 1.164858668 seconds)
    (266/341) benchmarking ("perf_simplecopy", "Float64", 0)...
    done (took 1.277431804 seconds)
    (267/341) benchmarking ("map", "*", "Float64", "(true, true)")...
    done (took 1.551747091 seconds)
    (268/341) benchmarking ("perf_binaryop", "*", "BigInt", "(false, false)")...
    done (took 6.026950416 seconds)
    (269/341) benchmarking ("map", "abs", "Float64", 1)...
    done (took 2.949027152 seconds)
    (270/341) benchmarking ("collect", "filter", "Int64", 0)...
    done (took 2.112873491 seconds)
    (271/341) benchmarking ("map", "*", "Bool", "(false, true)")...
    done (took 1.464478685 seconds)
    (272/341) benchmarking ("broadcast", "*", "Float64", "(false, true)")...
    done (took 1.528243021 seconds)
    (273/341) benchmarking ("skipmissing", "sum", "ComplexF64", 0)...
    done (took 1.082733398 seconds)
    (274/341) benchmarking ("collect", "all", "Int64", 0)...
    done (took 1.145459195 seconds)
    (275/341) benchmarking ("perf_sum3", "BigInt", 1)...
    done (took 7.550621038 seconds)
    (276/341) benchmarking ("skipmissing", "collect", "Union{Nothing, ComplexF64}", 0)...
    done (took 3.201124762 seconds)
    (277/341) benchmarking ("perf_simplecopy", "BigFloat", 1)...
    done (took 1.426924409 seconds)
    (278/341) benchmarking ("perf_countnothing", "ComplexF64", 0)...
    done (took 1.062375488 seconds)
    (279/341) benchmarking ("broadcast", "identity", "Int8", 1)...
    done (took 1.216319528 seconds)
    (280/341) benchmarking ("map", "identity", "Int64", 1)...
    done (took 1.411868826 seconds)
    (281/341) benchmarking ("collect", "all", "Float32", 0)...
    done (took 1.147529134 seconds)
    (282/341) benchmarking ("broadcast", "identity", "Int64", 0)...
    done (took 1.154636562 seconds)
    (283/341) benchmarking ("sort", "Union{Missing, BigInt}", 1)...
    done (took 6.018414197 seconds)
    (284/341) benchmarking ("skipmissing", "sum", "Union{Missing, Int8}", 1)...
    done (took 1.070131769 seconds)
    (285/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Float64}", 0)...
    done (took 2.583533963 seconds)
    (286/341) benchmarking ("skipmissing", "collect", "Union{Nothing, Int8}", 0)...
    done (took 2.239670535 seconds)
    (287/341) benchmarking ("perf_binaryop", "*", "Float64", "(true, true)")...
    done (took 1.513901368 seconds)
    (288/341) benchmarking ("perf_sum", "Bool", 0)...
    done (took 1.065298425 seconds)
    (289/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, true)")...
    done (took 1.368375209 seconds)
    (290/341) benchmarking ("broadcast", "abs", "BigInt", 1)...
    done (took 6.029525303 seconds)
    (291/341) benchmarking ("broadcast", "abs", "Float64", 0)...
    done (took 3.000632102 seconds)
    (292/341) benchmarking ("skipmissing", "sum", "Bool", 0)...
    done (took 1.060031903 seconds)
    (293/341) benchmarking ("collect", "all", "Int8", 0)...
    done (took 1.159515528 seconds)
    (294/341) benchmarking ("perf_binaryop", "*", "Bool", "(false, true)")...
    done (took 1.373368464 seconds)
    (295/341) benchmarking ("broadcast", "abs", "Int8", 0)...
    done (took 1.200220096 seconds)
    (296/341) benchmarking ("broadcast", "*", "Int8", "(false, true)")...
    done (took 1.440983781 seconds)
    (297/341) benchmarking ("skipmissing", "sum", "Union{Nothing, BigFloat}", 0)...
    done (took 6.031421993 seconds)
    (298/341) benchmarking ("perf_sum", "Bool", 1)...
    done (took 1.154034188 seconds)
    (299/341) benchmarking ("broadcast", "*", "Int64", "(false, false)")...
    done (took 1.324228951 seconds)
    (300/341) benchmarking ("perf_sum4", "Bool", 0)...
    done (took 1.054847665 seconds)
    (301/341) benchmarking ("broadcast", "abs", "BigFloat", 1)...
    done (took 6.015299905 seconds)
    (302/341) benchmarking ("map", "identity", "Int64", 0)...
    done (took 1.271604109 seconds)
    (303/341) benchmarking ("skipmissing", "sum", "BigInt", 0)...
    done (took 6.018793735 seconds)
    (304/341) benchmarking ("perf_sum2", "BigInt", 1)...
    done (took 8.230511114 seconds)
    (305/341) benchmarking ("map", "identity", "Int8", 1)...
    done (took 3.526616384 seconds)
    (306/341) benchmarking ("skipmissing", "collect", "Union{Nothing, BigFloat}", 0)...
    done (took 2.187958733 seconds)
    (307/341) benchmarking ("skipmissing", "collect", "Int64", 0)...
    done (took 1.979862634 seconds)
    (308/341) benchmarking ("sort", "Bool", 0)...
    done (took 1.274681873 seconds)
    (309/341) benchmarking ("perf_sum4", "BigInt", 0)...
    done (took 6.027891864 seconds)
    (310/341) benchmarking ("perf_sum2", "Float32", 0)...
    done (took 3.104943469 seconds)
    (311/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float32}", 0)...
    done (took 1.173711673 seconds)
    (312/341) benchmarking ("broadcast", "identity", "Int8", 0)...
    done (took 1.150578239 seconds)
    (313/341) benchmarking ("map", "identity", "ComplexF64", 1)...
    done (took 1.592757255 seconds)
    (314/341) benchmarking ("perf_binaryop", "*", "Int64", "(true, true)")...
    done (took 1.512898096 seconds)
    (315/341) benchmarking ("sort", "Union{Nothing, Int8}", 0)...
    done (took 6.030869034 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.212274477 seconds)
    (317/341) benchmarking ("map", "*", "BigFloat", "(true, true)")...
    done (took 6.017141724 seconds)
    (318/341) benchmarking ("map", "abs", "Int64", 1)...
    done (took 1.502248198 seconds)
    (319/341) benchmarking ("skipmissing", "sum", "Int64", 0)...
    done (took 1.058930712 seconds)
    (320/341) benchmarking ("perf_countnothing", "ComplexF64", 1)...
    done (took 1.047834311 seconds)
    (321/341) benchmarking ("skipmissing", "sum", "Union{Nothing, Float64}", 0)...
    done (took 1.167500383 seconds)
    (322/341) benchmarking ("perf_sum3", "Int8", 0)...
    done (took 1.116847328 seconds)
    (323/341) benchmarking ("perf_sum4", "BigInt", 1)...
    done (took 6.015643718 seconds)
    (324/341) benchmarking ("perf_sum2", "Bool", 0)...
    done (took 3.275964625 seconds)
    (325/341) benchmarking ("broadcast", "abs", "Bool", 1)...
    done (took 1.229816488 seconds)
    (326/341) benchmarking ("perf_binaryop", "*", "Float64", "(false, true)")...
    done (took 1.517120354 seconds)
    (327/341) benchmarking ("skipmissing", "collect", "Union{Missing, Float64}", 1)...
    done (took 2.090380784 seconds)
    (328/341) benchmarking ("skipmissing", "collect", "Union{Missing, Int8}", 1)...
    done (took 1.91006379 seconds)
    (329/341) benchmarking ("map", "abs", "BigInt", 1)...
    done (took 6.032228025 seconds)
    (330/341) benchmarking ("perf_countnothing", "BigFloat", 0)...
    done (took 2.937194869 seconds)
    (331/341) benchmarking ("map", "abs", "Int8", 0)...
    done (took 1.150745853 seconds)
    (332/341) benchmarking ("perf_binaryop", "*", "Int8", "(false, false)")...
    done (took 1.310836595 seconds)
    (333/341) benchmarking ("sort", "Float64", 0)...
    done (took 6.029413883 seconds)
    (334/341) benchmarking ("perf_sum2", "Int8", 1)...
    done (took 1.050346924 seconds)
    (335/341) benchmarking ("perf_sum", "ComplexF64", 1)...
    done (took 1.171698327 seconds)
    (336/341) benchmarking ("sort", "Int8", 0)...
    done (took 4.718893145 seconds)
    (337/341) benchmarking ("collect", "filter", "BigInt", 0)...
    done (took 2.217591317 seconds)
    (338/341) benchmarking ("perf_sum4", "Int64", 0)...
    done (took 1.067306759 seconds)
    (339/341) benchmarking ("broadcast", "identity", "ComplexF64", 0)...
    done (took 1.264762005 seconds)
    (340/341) benchmarking ("sort", "Union{Missing, Float64}", 1)...
    done (took 6.027227734 seconds)
    (341/341) benchmarking ("collect", "all", "BigFloat", 1)...
    done (took 1.490903041 seconds)
  done (took 846.342387849 seconds)
done (took 847.487093443 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.218466832 seconds)
  (2/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.454939075 seconds)
  (3/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 1.269264 seconds)
  (4/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 1.993236566 seconds)
  (5/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 1.82834281 seconds)
  (6/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 1.671230681 seconds)
  (7/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 1.284494282 seconds)
  (8/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 1.261744549 seconds)
  (9/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 1.104497567 seconds)
  (10/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 1.28308739 seconds)
  (11/152) benchmarking ("inner", "Int32", 4096)...
  done (took 1.935819781 seconds)
  (12/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 1.831823034 seconds)
  (13/152) benchmarking ("inner", "Int64", 4096)...
  done (took 1.122025924 seconds)
  (14/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 1.144724851 seconds)
  (15/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 1.105247714 seconds)
  (16/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 1.131699294 seconds)
  (17/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.238450056 seconds)
  (18/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 1.269881138 seconds)
  (19/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 1.142561977 seconds)
  (20/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 1.841253205 seconds)
  (21/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 1.544946253 seconds)
  (22/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 1.839441555 seconds)
  (23/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 1.441778802 seconds)
  (24/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 1.323460374 seconds)
  (25/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.454115383 seconds)
  (26/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 1.124791018 seconds)
  (27/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.277238806 seconds)
  (28/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 1.545931658 seconds)
  (29/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 1.544859613 seconds)
  (30/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.01610696 seconds)
  (31/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.239063833 seconds)
  (32/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 1.253386943 seconds)
  (33/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 1.86401441 seconds)
  (34/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.268882568 seconds)
  (35/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 1.105389294 seconds)
  (36/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 1.111629073 seconds)
  (37/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 1.919418601 seconds)
  (38/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 1.122223704 seconds)
  (39/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.223831273 seconds)
  (40/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 1.111595707 seconds)
  (41/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.406418762 seconds)
  (42/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 1.151911149 seconds)
  (43/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 1.743783203 seconds)
  (44/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 1.964737625 seconds)
  (45/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 1.807613319 seconds)
  (46/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 1.456197985 seconds)
  (47/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 1.915367122 seconds)
  (48/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 1.130513179 seconds)
  (49/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 1.12874774 seconds)
  (50/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 1.235035065 seconds)
  (51/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.224114921 seconds)
  (52/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.224326495 seconds)
  (53/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 1.545648777 seconds)
  (54/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.031706725 seconds)
  (55/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 1.921118793 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 1.972895449 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 1.544484877 seconds)
  (58/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 1.921631635 seconds)
  (59/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 1.76147667 seconds)
  (60/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 1.235063191 seconds)
  (61/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 1.55032548 seconds)
  (62/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 1.125120629 seconds)
  (63/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 1.234878581 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 1.260449949 seconds)
  (65/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 1.149997625 seconds)
  (66/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 1.326829108 seconds)
  (67/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 1.438536837 seconds)
  (68/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.225791148 seconds)
  (69/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 1.253025705 seconds)
  (70/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 1.289212232 seconds)
  (71/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 1.273711889 seconds)
  (72/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 1.253099734 seconds)
  (73/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.146588778 seconds)
  (74/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.231057931 seconds)
  (75/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 1.147434933 seconds)
  (76/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 1.285800028 seconds)
  (77/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 1.756753022 seconds)
  (78/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 1.268834343 seconds)
  (79/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 1.819525575 seconds)
  (80/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 1.12466861 seconds)
  (81/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 1.990740698 seconds)
  (82/152) benchmarking ("inner", "Int32", 4095)...
  done (took 1.938444875 seconds)
  (83/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 1.985443742 seconds)
  (84/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 1.104456413 seconds)
  (85/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.218425811 seconds)
  (86/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 1.803911242 seconds)
  (87/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 1.85191454 seconds)
  (88/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 1.989969737 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 1.146961713 seconds)
  (90/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 1.252953919 seconds)
  (91/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 1.934897634 seconds)
  (92/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 1.271215477 seconds)
  (93/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 1.491095043 seconds)
  (94/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.278359432 seconds)
  (95/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 1.218811101 seconds)
  (96/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 1.267416428 seconds)
  (97/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 1.863241609 seconds)
  (98/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 1.217494603 seconds)
  (99/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.002796195 seconds)
  (100/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 1.253195197 seconds)
  (101/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 1.811230342 seconds)
  (102/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.277808566 seconds)
  (103/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.064789181 seconds)
  (104/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 1.117458069 seconds)
  (105/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 1.130874309 seconds)
  (106/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.229039988 seconds)
  (107/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.283026523 seconds)
  (108/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 1.460912841 seconds)
  (109/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 1.253283335 seconds)
  (110/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.21024174 seconds)
  (111/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.475251536 seconds)
  (112/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 1.160363548 seconds)
  (113/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 1.266163037 seconds)
  (114/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 1.182423557 seconds)
  (115/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 1.126935817 seconds)
  (116/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 1.832141907 seconds)
  (117/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 1.328256815 seconds)
  (118/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 1.936985681 seconds)
  (119/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.256265776 seconds)
  (120/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 1.731380549 seconds)
  (121/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.352762333 seconds)
  (122/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 1.175828284 seconds)
  (123/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.499646614 seconds)
  (124/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 1.446895259 seconds)
  (125/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 1.340916003 seconds)
  (126/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 1.239291454 seconds)
  (127/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 1.249760996 seconds)
  (128/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.109620688 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 1.246838028 seconds)
  (130/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 1.240217666 seconds)
  (131/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.338014903 seconds)
  (132/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 1.591108836 seconds)
  (133/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 1.241503577 seconds)
  (134/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 1.997473268 seconds)
  (135/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 1.255032 seconds)
  (136/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 1.814941677 seconds)
  (137/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 1.272438411 seconds)
  (138/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 1.257706825 seconds)
  (139/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 1.107919719 seconds)
  (140/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 1.871250743 seconds)
  (141/152) benchmarking ("inner", "Int64", 4095)...
  done (took 1.12760482 seconds)
  (142/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 1.99225654 seconds)
  (143/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 1.325466883 seconds)
  (144/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.40915125 seconds)
  (145/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 1.270111477 seconds)
  (146/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 1.325900885 seconds)
  (147/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 1.147602555 seconds)
  (148/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.281749399 seconds)
  (149/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 1.218500963 seconds)
  (150/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 1.142987726 seconds)
  (151/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 1.255523231 seconds)
  (152/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.153199054 seconds)
done (took 234.495590543 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 1.403365377 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 3.445407645 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 1.381623851 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 1.318784486 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 1.408045089 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 1.390959008 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 1.103399265 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 1.496248034 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 1.196217029 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 1.50049386 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 1.329398467 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.221477686 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 3.520608817 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 1.322320694 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 1.470620036 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 1.34517771 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 1.216830462 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 1.347675644 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 1.536468821 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 1.434741375 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 2.127014714 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 1.37693221 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 1.26269299 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 1.467332253 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 6.021961959 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 2.104738209 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 1.407981877 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 1.201412979 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 1.331208276 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 2.093196005 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 2.098247042 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 1.326448793 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 1.411450717 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 3.235355936 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.518524981 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.073445121 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 1.439111168 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.146259522 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 1.418074842 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 1.436963847 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 1.413879181 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 3.925583395 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 2.084380911 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 2.113224797 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 1.205224678 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 1.392364293 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 1.121945179 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 3.343487308 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 6.038564213 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.069172508 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 1.320853145 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.176349175 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.209687677 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 1.391744349 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 1.247804778 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 3.212476094 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 1.539756287 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 1.551185415 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 1.401434723 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 1.342566143 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 1.412362625 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 1.485540292 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 1.472699699 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 1.260256115 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 2.086456353 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 1.341092179 seconds)
  done (took 124.066022552 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 1.476905667 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 1.358680055 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 1.455627755 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.52072356 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 1.625622388 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 1.515127631 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.564727259 seconds)
  done (took 13.559211768 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.134934492 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.114367393 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 1.348372433 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.315500785 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 1.134508605 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 1.227029996 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 1.217241367 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.102953905 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 1.340768037 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 1.164367723 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 1.44073046 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 1.335532191 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.058008732 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 2.077337072 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 1.197353171 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 1.450400086 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.076647186 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.180208962 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 1.168729776 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.372666044 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.11095919 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.116326094 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 1.320046223 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 1.178417307 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 1.089428287 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 1.122773744 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 1.080536942 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.055152672 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.158863289 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 1.116246388 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.136069261 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 1.246220171 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 1.120190063 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 2.119535354 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.144022943 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 1.445770295 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 1.116768104 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 1.150190822 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 1.234137292 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 6.043629282 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 1.093445774 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 1.110068072 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 1.25110399 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 1.129611856 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 1.110230314 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 1.30204764 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 1.110119597 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 1.136310197 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 1.109296569 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 1.124675615 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 1.315329207 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 1.126464696 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 1.147570197 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.065019086 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 1.338382589 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.091613972 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 1.194851604 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 1.116637877 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.128573821 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 1.185459408 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.12293104 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 1.387776379 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 1.371111675 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 1.1056405 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 1.342066795 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 1.41200265 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 1.10994676 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 1.086595133 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 1.087720193 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 1.360437026 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 1.104948987 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 1.34355714 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 1.121164729 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 1.155305451 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 1.160479777 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 1.245256835 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 1.282584733 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 1.905370144 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 1.873831102 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 2.053882323 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.103126251 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 1.132783467 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.442862851 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.039987199 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.077605296 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 1.088074043 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 1.140631188 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.736372955 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.015354247 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 1.098253981 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 1.422512386 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 1.089638298 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 1.179416019 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 1.175169636 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 1.146934346 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 1.151694924 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 1.305582889 seconds)
  done (took 140.932424518 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.424088065 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 3.6872148 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 1.315602879 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.348909425 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.492560651 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.607161501 seconds)
  done (took 15.890823721 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.379989489 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 1.933822403 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 1.134849603 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 1.122014692 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 1.136630731 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 1.108306118 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 1.081673926 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.267022447 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.262365501 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 1.115990535 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 1.083136034 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 1.172392736 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 1.102504943 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 1.247130152 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 1.094313226 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 1.095878507 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 1.109580365 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 1.109075196 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 1.093870773 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.169975556 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 1.259330031 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 1.148021537 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.174302215 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 1.970736751 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.193036133 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 1.101941113 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.030040983 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 1.148027312 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 1.098459769 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.423480658 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 1.275246182 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 1.119009291 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 1.919249768 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 3.418095552 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 1.868529405 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 1.957107923 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.256128587 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 1.100371019 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 1.137387831 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 1.074436035 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 1.107895977 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 1.14328067 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 1.092695379 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 1.097607783 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.387677508 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.922195528 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.187082337 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 1.339422081 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 1.073520116 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 1.096635094 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 1.098132639 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 1.102180548 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 1.07744025 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 1.095547437 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 3.454928204 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.399885023 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.078848408 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 1.08093168 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 1.134134214 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 1.960096658 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.191164063 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 1.08025457 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.382697454 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.051282614 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.040036624 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 1.099673621 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 1.965061092 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.245033515 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 1.147236825 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 1.097850346 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 1.095485717 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 1.101375586 seconds)
  done (took 112.060068479 seconds)
done (took 407.523251987 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 6.376869903 seconds)
  done (took 7.392166045 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 6.048320349 seconds)
  done (took 7.193294546 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 6.018286892 seconds)
  done (took 7.060629557 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 6.025685817 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 6.0363133 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 6.045422911 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 6.051676455 seconds)
  done (took 25.219311824 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 6.202602319 seconds)
  done (took 7.223667093 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 6.017958365 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 6.037839448 seconds)
  done (took 13.1444593 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 6.052349401 seconds)
  done (took 7.09217329 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 6.265070545 seconds)
  done (took 7.317771051 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 6.034937255 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 6.047820813 seconds)
  done (took 13.137928633 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 6.015709975 seconds)
  done (took 7.033661231 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.381931369 seconds)
  done (took 8.484729889 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 6.018234304 seconds)
  done (took 7.058457734 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 6.072116454 seconds)
  done (took 7.092196582 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 6.034751477 seconds)
  done (took 7.052755763 seconds)
done (took 132.518441672 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 6.016747561 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 6.033582408 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 6.027275945 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 6.024560223 seconds)
  done (took 25.118089982 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 1.359405286 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 1.360838801 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 1.337322352 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 1.467168973 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 1.303677911 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 1.302305974 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 1.359755458 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 1.358930923 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 1.303433926 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 1.405412442 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 1.359736942 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 1.403592421 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 1.511006176 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 1.336716377 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 1.336812935 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 1.405043881 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 1.410156083 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 1.360537849 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 1.303043374 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 1.336857442 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 1.403240436 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 1.41025028 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 1.777629941 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 1.775567567 seconds)
  done (took 34.713465335 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 1.245697724 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 1.480544852 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 1.189162575 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 1.35256294 seconds)
  done (took 6.284536521 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 1.07181147 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 1.409131018 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 1.392544199 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 1.451526948 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 1.392668747 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 1.203931972 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 1.391240628 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 1.244620495 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 1.183830468 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 1.174464071 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 1.660431306 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 1.186189917 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 1.199958354 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 1.450848943 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 1.203093992 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 1.034116594 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 1.034525432 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 1.173446638 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 1.41081326 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 1.281964702 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 1.301040904 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 1.392847096 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 1.391620576 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 1.391958217 seconds)
  done (took 32.045632226 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 1.795198517 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 1.965701461 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.392792425 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 1.944708405 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 1.736542207 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 1.829304335 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.313983479 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 1.536606678 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 1.301589451 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.278550487 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 1.760775497 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.355089878 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 1.179058147 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 1.929122888 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 1.79544524 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 1.212731521 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 1.211546493 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 1.882661519 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 1.65185025 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.334453224 seconds)
  done (took 37.424395721 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 6.017822434 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.284749832 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 1.281831741 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 1.199089145 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 6.017945823 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 6.024436915 seconds)
  done (took 25.842792319 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 3.051701847 seconds)
    (2/12) benchmarking ("push_single!", 256)...
    done (took 1.180130439 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 1.347363138 seconds)
    (4/12) benchmarking ("push_multiple!", 256)...
    done (took 1.300319188 seconds)
    (5/12) benchmarking ("push_single!", 2048)...
    done (took 1.191199056 seconds)
    (6/12) benchmarking ("push_single!", 8)...
    done (took 1.168555505 seconds)
    (7/12) benchmarking ("prerend!", 2048)...
    done (took 1.737750188 seconds)
    (8/12) benchmarking ("push_multiple!", 2048)...
    done (took 1.248166569 seconds)
    (9/12) benchmarking ("push_multiple!", 8)...
    done (took 1.80084171 seconds)
    (10/12) benchmarking ("append!", 2048)...
    done (took 1.819710055 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.645301641 seconds)
    (12/12) benchmarking ("prerend!", 8)...
    done (took 1.491006252 seconds)
  done (took 21.006010952 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 6.016836288 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 6.064987479 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 6.027173573 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 1.205430656 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 1.83533424 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 1.896421581 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.351647103 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 6.018149092 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.082464277 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 1.245649256 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.340579412 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 1.199295689 seconds)
  done (took 39.322286692 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.29321691 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.213473342 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.355748464 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.657191539 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.536463908 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.124873876 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.447296054 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 4.542765216 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.824776569 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.877962846 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.553567474 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.096380447 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.561820124 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.002310439 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.018292565 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.324729295 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.861552915 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.087663874 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.471549899 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.103427527 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.996568988 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 1.174372739 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.023340771 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.5818248 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.358213812 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.016697323 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.251453663 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.274322571 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.016718285 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.302089956 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.017618942 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 1.565019191 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 1.286883461 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 1.333892279 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.558551593 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 6.104611113 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.081757151 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.128611643 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.588839959 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.323527252 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.169880582 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 1.188947855 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 5.556798053 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.144593052 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 1.286245958 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.812932983 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 6.027372778 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.628719856 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.013148185 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.199485036 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.874881305 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.91477635 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.478558119 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.727486095 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.169825179 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.322450404 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.18798403 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.137942856 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.286012399 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 5.113362283 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 6.190648554 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.080098646 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.303562101 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.001171114 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.566419943 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.327243176 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 3.411090897 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.360520384 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 3.341186907 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.324403475 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.367846537 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.189854564 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.767540234 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 1.166151603 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.525214361 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.069126114 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.373216718 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 6.020102524 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 2.773245184 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.563893315 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.010365541 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.141126382 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.662974864 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.993202313 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.017054963 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.193832562 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.264123337 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.001622659 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 1.12064475 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 5.128863499 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.398364161 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 1.165672085 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.174246865 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 1.325803909 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.726490252 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.042991346 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.800100606 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.292675113 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.996884605 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.589948677 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.017406478 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.061205017 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.019193502 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.651678497 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.428000982 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.070540316 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 1.791069695 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.651680983 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.324919741 seconds)
    (110/608) benchmarking "5d"...
    done (took 2.610837645 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.184281085 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.863002989 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.367690075 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.358357227 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.017353216 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.797380725 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.123373342 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.119082266 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.339553249 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.017917061 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.999753805 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 1.454039114 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.287009585 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.018186488 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.306602325 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.020569818 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.179906073 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.017230169 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.711924419 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.084214384 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.270493665 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.552142896 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.250991636 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 1.111666631 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.999194387 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.171598878 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.531391659 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.115820726 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.393566359 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.472295196 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 4.635678427 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.525967238 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.021280947 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.889848694 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 1.50444926 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.313864577 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.367893455 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 2.636696654 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.203651311 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 1.119584093 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.092329204 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 1.161197455 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.028601195 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.582779449 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.017655861 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.704984867 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.998842795 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.338526402 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.017084646 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.012408955 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.758590967 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.28561439 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.744236727 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.040331367 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.201175737 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.313552866 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.212749202 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 6.018237255 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.001486507 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.387542817 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.306189336 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.560004964 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.425072722 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.739042278 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 1.356390368 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.543061318 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.250072988 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.371458732 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 3.781001595 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.459043803 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.360197979 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.221451118 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.006600265 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.558672723 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.158599454 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 1.405865615 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.253637954 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 1.817134246 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 4.7357202 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.206719586 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 6.024367106 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.502678685 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.000154664 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.17663044 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.488285911 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.065554044 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.596897388 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 6.117058966 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.354893579 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 1.303748745 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 1.061507351 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.368867329 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.382700592 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.418286804 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.415611548 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.344006014 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.009036374 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.116494042 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.570328514 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 3.561994322 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.14877698 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 5.511950568 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.288294249 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070412816 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.020589735 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.37558528 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.0373009 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 1.681236068 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 1.310796571 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.719914092 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 3.665658319 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.25539068 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.018576939 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 6.030370901 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.220001778 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181004505 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 5.131166725 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.888788489 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.583235691 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.328331785 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.357833667 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.017788708 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.025186961 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 3.303717691 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.336458915 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 3.302016052 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.529149319 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 4.649022464 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 1.720304833 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.134356601 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.663648979 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 1.194277898 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 1.067282641 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.671481374 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 3.356199172 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.004023487 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.275976465 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 1.795830795 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.217328415 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.1343593 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.293192028 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.01817659 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.506054749 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.656241031 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.967349492 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.058169702 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.178127845 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.018348626 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 1.24113366 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 1.923338469 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.260309487 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.198749865 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.490918017 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.330533494 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.276572381 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.416884452 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.563250223 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.792026727 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.003285872 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.181298361 seconds)
    (271/608) benchmarking "4d"...
    done (took 2.132775083 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.320797439 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.018416912 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.324633381 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.783981547 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.537753919 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.042817568 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 1.577179565 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.310733164 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.739793178 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 1.507368165 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 1.282533482 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 1.357076681 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 1.977210558 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.612321305 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.037375909 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.16621013 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 3.999186553 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.645431817 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 1.552581257 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 1.399331934 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.51111764 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.102262437 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.559376255 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.412003866 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.127377449 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.134207725 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.300212815 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.01722992 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.335124137 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.018049357 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.778779875 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.453543302 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.02197415 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.230033374 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.259209533 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.355459916 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.182826964 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.449931202 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.248429035 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.163370896 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.598978758 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.222373557 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.166229475 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.368146087 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.935141591 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.24828506 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.085480974 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.189360038 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.621161664 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.506184561 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.655761343 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.605201281 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.42949572 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 1.789010382 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.019739671 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.250972074 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.185628182 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.446672541 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.250653253 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.418535414 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066878402 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 1.295368232 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.3395509 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 2.202366294 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.559494111 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010960992 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.633314553 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.227362662 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.546026112 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.556329496 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.807559094 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.333893171 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.07743161 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.43040694 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.240609699 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.182084768 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 5.513589014 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.719803633 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.566585922 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.902592129 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.818968937 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.209151148 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.415449682 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 5.161055496 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 2.720255717 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.188893096 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.263704639 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.249153079 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.163209061 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.998074122 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 1.634697961 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.81334945 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 3.305408171 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 1.189777024 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 1.276890854 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.209689532 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.966361171 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.608191061 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.338633999 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 1.789370269 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.502526843 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.309310187 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.001054109 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.019303571 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.303153337 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.529805518 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 1.122329348 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.325201535 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 1.453328162 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.078068605 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.057481274 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.083120946 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.660777666 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 2.802967159 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.761785211 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.359012143 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.544411019 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.633036293 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.793241874 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 1.78924462 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.252287386 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.376419713 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.425683698 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.934143106 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 3.410898176 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 1.322490103 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.174344272 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.997821935 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 1.278877356 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 6.032343709 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.088487835 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.75007724 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.358346554 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 5.141760759 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.818441976 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.690689975 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.899448901 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.117463769 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.683191392 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.36967839 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.3490674 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.131237065 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 1.750763912 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.574837051 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.234557417 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.069323436 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 1.855146992 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.066356138 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.315426195 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.921426356 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.296941008 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.928757049 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.202357469 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.679835834 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.614175456 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.115641607 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.315954501 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.025520197 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.977237083 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.265224942 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.580512926 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.058177884 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.298757849 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.573548066 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.314142035 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.072378046 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.369964782 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.259785775 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.36734076 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.755976254 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.536397493 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.475165187 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.405491191 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.335836188 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.025309281 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.146446803 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 1.302098318 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.035251584 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.043196797 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.10089666 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.421869279 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.418626006 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.056471118 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.610249418 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 1.300417511 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.23719696 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 6.134087089 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.083784779 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.663877119 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.268144647 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.248708826 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.148461456 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.300475103 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.43177683 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.079726375 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 1.328408646 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.040160256 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.100465661 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.300951233 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.335529299 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 6.413159907 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.386451317 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 1.948454163 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.212615139 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.803445784 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.938373846 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.605551973 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.067993263 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.736904816 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 1.598131094 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 6.047554119 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.542015815 seconds)
    (484/608) benchmarking "6d"...
    done (took 2.749449178 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.313912861 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.776271238 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.177577334 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.06582435 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.305246375 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.55725107 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 6.062169508 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 1.656260247 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 1.463592787 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.066872066 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.533611021 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.120667507 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.206213324 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 1.868617126 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.570905017 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 6.031906579 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.665837034 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.371234882 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 3.590648875 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.753369542 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 6.08935938 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.140603853 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.857972992 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.063661272 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.040168274 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.098979362 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.57891032 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 6.046489822 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.575142804 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.241596488 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.120583596 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.03333188 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 1.174744755 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.022476633 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.30478457 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.258038337 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.368071761 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 3.368019247 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.332772118 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.094812111 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 1.704957963 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 1.760811065 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.160542923 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 1.304256918 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.075280378 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.47040292 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.227752853 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.051023417 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.68049725 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 1.268368469 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.293571916 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.497074217 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 1.336982748 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 1.11420207 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 1.37700415 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.10795292 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 1.358699281 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 3.359997697 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.653849469 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.326689253 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.989332224 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 2.414793007 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.079910702 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.639679345 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.569657703 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.969739945 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.070740636 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.387363691 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.068162085 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.999391508 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.850245347 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.272466193 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.261380622 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.070074439 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 3.876261207 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 3.40961548 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.193666748 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 6.069105728 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 1.29426459 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.582497978 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.01388162 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.989491885 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.117181466 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 1.34693714 seconds)
    (569/608) benchmarking "7d"...
    done (took 1.406920848 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.056406715 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 1.302574594 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.065358346 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.03248929 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.549841925 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.038203255 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 1.44951635 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087320955 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.554613182 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.031221783 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.205288184 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.126544962 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 1.408241312 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 6.075798809 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.790390607 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.266031358 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 6.212976396 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 6.149783578 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 1.482817544 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 1.187159328 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.346945345 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 1.648724007 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.467742059 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 1.481469623 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.072627911 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.129893544 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.361623666 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.437092321 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.972095585 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 1.677767363 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.255990436 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 1.568008722 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.720665462 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.299262135 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 1.680338263 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 1.341760285 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 2.82532873 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 1.203375074 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.55621661 seconds)
  done (took 1906.13039566 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 6.059296971 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 6.073633474 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 6.113158062 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.073196487 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.253383676 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.222631446 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 6.056127574 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 6.160862008 seconds)
  done (took 50.08257916 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hcat", 500)...
    done (took 6.026388082 seconds)
    (2/17) benchmarking "4467"...
    done (took 3.894035229 seconds)
    (3/17) benchmarking ("vcat_setind", 5)...
    done (took 5.732496392 seconds)
    (4/17) benchmarking ("catnd_setind", 500)...
    done (took 6.134859232 seconds)
    (5/17) benchmarking ("vcat", 500)...
    done (took 6.053086024 seconds)
    (6/17) benchmarking ("vcat", 5)...
    done (took 5.335617462 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 1.135604938 seconds)
    (8/17) benchmarking ("hvcat_setind", 5)...
    done (took 5.614803101 seconds)
    (9/17) benchmarking ("vcat_setind", 500)...
    done (took 6.154275142 seconds)
    (10/17) benchmarking ("hvcat", 5)...
    done (took 4.945217934 seconds)
    (11/17) benchmarking ("hcat_setind", 500)...
    done (took 6.251626202 seconds)
    (12/17) benchmarking ("hcat", 5)...
    done (took 6.067893941 seconds)
    (13/17) benchmarking ("hvcat", 500)...
    done (took 6.165412962 seconds)
    (14/17) benchmarking ("catnd", 500)...
    done (took 6.071622043 seconds)
    (15/17) benchmarking ("hcat_setind", 5)...
    done (took 5.81262059 seconds)
    (16/17) benchmarking ("catnd", 5)...
    done (took 1.274398941 seconds)
    (17/17) benchmarking ("hvcat_setind", 500)...
    done (took 6.025327247 seconds)
  done (took 89.762894589 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("gramschmidt!", 500)...
    done (took 6.065292768 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 6.712081314 seconds)
    (3/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 6.047790178 seconds)
    (4/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 6.199877081 seconds)
    (5/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 6.079203116 seconds)
    (6/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 6.622269933 seconds)
    (7/12) benchmarking ("gramschmidt!", 100)...
    done (took 6.04369968 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 6.02433675 seconds)
    (9/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 6.438289275 seconds)
    (10/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.688178746 seconds)
    (11/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 6.078369851 seconds)
    (12/12) benchmarking ("gramschmidt!", 250)...
    done (took 6.181570949 seconds)
  done (took 77.249659935 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 4)...
    done (took 1.065978054 seconds)
    (2/5) benchmarking ("setindex!", 3)...
    done (took 1.065622331 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 1.066444223 seconds)
    (4/5) benchmarking ("setindex!", 1)...
    done (took 1.066692636 seconds)
    (5/5) benchmarking ("setindex!", 2)...
    done (took 1.066232068 seconds)
  done (took 6.351791439 seconds)
done (took 2352.442559968 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 1.259936201 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 24, 1)...
    done (took 1.531404945 seconds)
    (2/2) benchmarking (200, 1, 24)...
    done (took 1.614474093 seconds)
  done (took 4.164379943 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 1.097603685 seconds)
    (2/4) benchmarking "Float32"...
    done (took 1.15950712 seconds)
    (3/4) benchmarking "Float64"...
    done (took 1.227623019 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 1.175814247 seconds)
  done (took 5.711140863 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 1.346514682 seconds)
    (2/2) benchmarking "Float64"...
    done (took 1.518887232 seconds)
  done (took 3.884138426 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 1.557711249 seconds)
  (6/15) benchmarking "18129"...
  done (took 6.047273309 seconds)
  (7/15) benchmarking "20517"...
  done (took 1.569973114 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 6.018843513 seconds)
    (2/3) benchmarking "Float64"...
    done (took 6.031726636 seconds)
    (3/3) benchmarking "Float16"...
    done (took 6.031745813 seconds)
  done (took 19.11931433 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 1.059251889 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 1.057942333 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 1.060012383 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 1.052384145 seconds)
  done (took 5.259392562 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 6.01989844 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.044394932 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 6.030113803 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 1.969527037 seconds)
  done (took 18.082773472 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 1.283926319 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 1.282470271 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 1.781935958 seconds)
  done (took 5.381533355 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 1.848306144 seconds)
    (2/3) benchmarking "Int"...
    done (took 1.413352154 seconds)
    (3/3) benchmarking "Float64"...
    done (took 1.830355299 seconds)
  done (took 6.111488274 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 1.98144815 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.055548124 seconds)
  done (took 5.055535578 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 1.198187743 seconds)
  done (took 2.21690513 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 1.518593938 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 1.517645175 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 1.890273279 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 1.923700054 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.06759606 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 1.357767439 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 1.421445831 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 1.477154165 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 1.717457127 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 1.625124538 seconds)
  done (took 17.537361856 seconds)
done (took 103.976350045 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 2.970089553 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.473924051 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.178857493 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.309745227 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.132423769 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.174274384 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.043304522 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.096777586 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 2.433821116 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 2.434134304 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.20854449 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.13410311 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.076935137 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.419176129 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.082332666 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.380797111 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.184093594 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 2.970394025 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 3.691033488 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.080092114 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.067884735 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 2.412510369 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 2.924288446 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 2.437283009 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.20438277 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.168939165 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.194810725 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.405660168 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 3.915062965 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.215178518 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.205015133 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.320330418 seconds)
  done (took 150.966409894 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.019221232 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.045260397 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.044858278 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.032036499 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 4.980347602 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.044948489 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.032176241 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.030988564 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 4.726619576 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 4.731026613 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.045485564 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 4.976018384 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.046991912 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.031250731 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.044492321 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.073113589 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 4.893342949 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.057784739 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.089013974 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.088425612 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.089296109 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 4.773558628 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.065310231 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 4.81021347 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 4.904287543 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.122842437 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.069961811 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.087927046 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.099096752 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.04559787 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.090823309 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.031573929 seconds)
  done (took 185.268938222 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 6.019849848 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 6.044975104 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 6.092557933 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 6.058341487 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 6.088796824 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 6.087474321 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 6.07851274 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 6.049028511 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.061079112 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.083454903 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 6.09016095 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 6.083711389 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 6.080301197 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 6.07030475 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 6.090349612 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 6.081867227 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 6.152268499 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 6.047382379 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 6.095426198 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 6.117384041 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 6.102832088 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.108043664 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 6.149367284 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.087790321 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 6.081865823 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 6.051765294 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 6.074979646 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 6.044711214 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 6.045431462 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 6.044691894 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 6.045466931 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 6.034157288 seconds)
  done (took 195.489638748 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 1.335812204 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 1.085204018 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.08328314 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 2.416566163 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.080501367 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 1.059925595 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 2.39507874 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 1.337125723 seconds)
  done (took 14.838704634 seconds)
done (took 547.609814298 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 2.737592301 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 1.98442783 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 1.225301203 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 1.257429923 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 2.654133107 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 1.342076228 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 1.253131647 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 1.516854062 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 1.877550514 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 1.500758177 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 1.534375343 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 1.262309901 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 1.856339467 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 1.262454814 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 1.228674085 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 1.503402687 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 1.458384421 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 1.753032943 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 1.290078931 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 1.976915145 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 1.31224805 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 2.035705251 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 1.574873401 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 1.959243474 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 1.544991719 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 2.045135098 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 2.268701613 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 1.465018196 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 1.31351308 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 1.283345781 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.118021921 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 2.537793437 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 1.310908578 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 1.309366169 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 1.551989463 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 1.554083085 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 2.498817125 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.492681357 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 1.264139487 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 1.814752735 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 1.962355235 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 1.758908706 seconds)
  done (took 73.472282395 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 1.097863152 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 1.114101421 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 1.273919758 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 1.169552949 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 1.754239755 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 1.199012725 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 1.360047169 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 1.322651772 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 1.199080535 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 1.327450256 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 1.363497832 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 1.794235124 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 1.35663963 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 1.749876335 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 1.340584373 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 1.364967019 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 1.177480247 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 1.717143402 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 1.336063289 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 1.315978041 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 1.142241915 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 1.279576023 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 1.151379233 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 1.301763082 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 1.136242102 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 1.154937622 seconds)
  done (took 35.577020206 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 1.15392963 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 1.268740542 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 1.368274534 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.481941042 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 1.321976848 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.117827803 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 1.46836139 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 1.194260397 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 3.004342681 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.302256092 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 1.179662387 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 1.227767301 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 1.297252106 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 1.382880331 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 4.787478556 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 1.311713645 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 1.31485692 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 1.274663873 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 1.365802069 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.47099565 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.335961685 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 1.193656712 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 1.476243605 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 3.31872487 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 1.774168931 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 3.51968521 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.428074614 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 1.765304847 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 4.771643713 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 1.209765837 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 1.225774678 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 1.45180805 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 1.510206688 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 1.382439441 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 1.291866476 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 1.145447982 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 1.097216793 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 1.17805577 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.032631147 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 1.229873 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 1.45194301 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 3.287130743 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 1.444455058 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 1.653996779 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 3.222200865 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 1.34119835 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 1.610835384 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 1.2058374 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 1.219308122 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.950640716 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 1.384416207 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 4.190038975 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 1.211792924 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 1.30019241 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 1.225128408 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.658210844 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 1.303322834 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 1.443566105 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.301721608 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.836536513 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 1.180841797 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 1.479363244 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.297420603 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 3.229335338 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 1.414492145 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 1.354499652 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 3.360871571 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 3.543357991 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 1.496843473 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 4.491096082 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 1.805740592 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 1.189918665 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 1.149814204 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 1.21123422 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 1.279996714 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 1.650952431 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 3.619530698 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.34423784 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 1.526176511 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 1.499139652 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.456181394 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 1.775937417 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.114337343 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.85393116 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 1.165177651 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 1.130411753 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 1.238035558 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 1.453296216 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 1.500881097 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 1.61110059 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 1.68373499 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 1.472311762 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.544806751 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.623003527 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 3.588304149 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 1.616645521 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 1.138564489 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 1.151484162 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 1.38331341 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 1.702744094 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 1.208387453 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 3.482005894 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 1.780038889 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 3.625469701 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.534380378 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.404989841 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 1.549583878 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 3.260688311 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 1.566372922 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 1.117831776 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 3.427903307 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 3.504233924 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.476225723 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.479507201 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 1.124324253 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 1.658964949 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 1.260680195 seconds)
  done (took 227.736979255 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 6.076848915 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 6.052931745 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 6.057367947 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 6.076457282 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 6.045868653 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 1.736749216 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 6.132909951 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 6.075480399 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 1.690084391 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 6.142052498 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 6.064843691 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 6.061840699 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 6.082044648 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 6.081782713 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 3.819555789 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 3.823778458 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 2.721200618 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 6.069630515 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 6.081760542 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 6.048993853 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 2.762710287 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 6.037782693 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 6.059854706 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 6.210155844 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 6.073385943 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 6.158563964 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 6.178229761 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 6.198062888 seconds)
  done (took 151.69803739 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 1.183686598 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 1.563756577 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 1.19454859 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 1.277743555 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 1.198003798 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 1.195609497 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 1.75804555 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 1.314635416 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 1.231425388 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 1.178893599 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 1.177873247 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 1.402460746 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 1.422210629 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 1.858948656 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 1.300982679 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.372521673 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 1.892113443 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 1.315008729 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 1.191478894 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 1.163268667 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 1.331147662 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 1.514069079 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 1.450469735 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 1.433580583 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 1.314542472 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 1.459943018 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 1.247704673 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 1.168021988 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 1.296845197 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 1.694446838 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 1.194420507 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 1.564097487 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 1.307257437 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 1.160995954 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 1.692809978 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 1.552218491 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 1.825011582 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 1.7756188 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 1.32078676 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 1.098193088 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 1.123898284 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 1.423007808 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 1.452004067 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 1.180863617 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 1.116682208 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 1.785979528 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 1.136424393 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 1.547598308 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 1.167021156 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 1.071461309 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 1.211330934 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 1.230976475 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 1.386989036 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 3.882642153 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 1.284959322 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 1.282411997 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 1.686009425 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 6.28140332 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 1.112967038 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 1.491700697 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 1.090538011 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 1.625980015 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.749972721 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 1.216549668 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 1.163634681 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.00012656 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 1.231014894 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 1.747396678 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 1.845738155 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 1.19043861 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 1.548642662 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 1.328975218 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 1.126612655 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 1.436595403 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 1.34190235 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 1.607991093 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 1.827921266 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 1.296168708 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 1.253132125 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 1.248706369 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 1.473326659 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 1.146174153 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 1.731638794 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 1.260043686 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 1.138318319 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 1.685498821 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 1.591695754 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 1.135965516 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 1.174262507 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 1.275770413 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 1.342730942 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 1.378592026 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 1.444497208 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 1.227546707 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.15824206 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 1.41469575 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 1.471350455 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 1.188684929 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 1.295707869 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 1.145639186 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 3.308395812 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 1.358061279 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 1.13778148 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 1.586117196 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 1.518324502 seconds)
  done (took 158.101523145 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 1.84363313 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 1.182385962 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 1.368607302 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 1.709348592 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 1.515407464 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 3.219913447 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 1.369450992 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 1.225695402 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 1.468262425 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 1.365382872 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 1.345256792 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 1.250685146 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.850288458 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 1.908741548 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 1.20707083 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 1.368309824 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 1.214691152 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 1.805336509 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 1.467398096 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 4.188567709 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.54218894 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 1.870073755 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 1.525909027 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 1.626922871 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 1.629507705 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 1.68888433 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 1.909805682 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 1.314035624 seconds)
  done (took 50.04351909 seconds)
done (took 697.648545725 seconds)
SAVING RESULT...
DONE!
